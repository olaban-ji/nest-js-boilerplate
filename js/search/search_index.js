var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/interfaces/ApiResponse.html",[0,1.902,1,2.462]],["body/interfaces/ApiResponse.html",[0,2.636,1,4.148,2,3.41,3,0.268,4,0.268,5,0.24,6,3.695,7,4.051,8,0.415,9,1.644,10,1.085,11,2.528,12,2.528,13,4.052,14,6.884,15,0.504,16,0.017,17,1.228,18,4.651,19,0.296,20,0.728,21,0.268,22,0.014,23,0.014]],["title/controllers/AppController.html",[24,2.016,25,2.667]],["body/controllers/AppController.html",[3,0.247,4,0.247,5,0.222,8,0.384,11,2.146,12,2.146,15,0.355,16,0.018,17,0.865,18,3.15,19,0.375,20,0.672,21,0.247,22,0.014,23,0.014,24,3.235,25,4.279,26,2.58,27,4.182,28,1.138,29,6.966,30,1.562,31,4.85,32,6.644,33,4.674,34,6.644,35,5.728,36,0.504,37,4.85,38,0.865,39,3.741,40,3.741,41,3.675,42,4.85,43,4.691,44,3.741,45,1.881,46,4.85,47,0.031,48,3.741,49,3.741,50,1.091]],["title/modules/AppModule.html",[51,1.277,52,2.667]],["body/modules/AppModule.html",[3,0.147,4,0.147,5,0.132,10,0.491,15,0.212,16,0.018,19,0.421,20,0.401,21,0.147,22,0.009,23,0.009,25,3.571,26,2.271,28,0.541,36,0.301,38,0.516,47,0.019,50,0.651,51,1.71,52,5.076,53,1.302,54,1.452,55,1.636,56,1.636,57,1.452,58,2.285,59,1.452,60,2.494,61,2.494,62,2.494,63,4.062,64,3.78,65,4.062,66,4.062,67,4.062,68,2.415,69,1.177,70,1.636,71,2.892,72,2.271,73,2.892,74,4.27,75,5.604,76,2.892,77,0.622,78,0.445,79,4.27,80,1.748,81,1.375,82,4.27,83,2.892,84,2.892,85,2.892,86,4.27,87,2.892,88,2.892,89,2.507,90,1.021,91,2.892,92,2.892,93,2.035,94,2.892,95,2.494,96,2.028,97,2.035,98,4.27,99,2.494,100,2.773,101,2.494,102,2.892,103,4.27,104,2.231,105,2.494,106,2.035,107,2.892,108,1.636,109,2.494,110,1.748,111,2.892,112,2.231,113,1.636,114,2.231,115,3.004,116,2.035,117,4.27,118,2.494,119,2.892,120,2.892,121,2.035,122,2.892,123,2.892,124,2.892,125,2.892,126,2.181,127,2.892,128,2.892,129,2.892,130,2.58,131,0.89,132,2.231,133,2.892,134,2.892,135,2.231,136,2.892,137,2.494,138,2.892,139,0.681,140,2.892,141,1.069,142,2.892,143,2.892,144,2.892,145,2.892,146,2.892,147,2.892,148,2.892,149,2.892,150,2.892,151,2.892,152,2.231,153,2.494,154,2.892,155,2.892,156,2.892,157,0.779,158,2.892,159,1.375,160,2.892,161,2.892,162,1.452,163,2.494,164,2.892,165,2.035,166,2.231,167,4.27,168,1.237,169,1.636,170,0.814,171,2.892,172,2.58,173,4.27,174,2.773,175,2.892,176,2.892,177,2.231,178,2.892,179,2.892,180,2.892,181,2.892,182,2.494,183,2.892,184,2.892,185,2.892]],["title/modules/AppRedisModule.html",[51,1.277,186,2.291]],["body/modules/AppRedisModule.html",[3,0.232,4,0.232,5,0.208,16,0.018,19,0.384,20,0.631,21,0.232,22,0.013,23,0.013,47,0.029,50,1.024,51,2.174,53,2.05,54,2.284,55,2.575,56,2.575,57,2.284,58,2.905,59,3.238,68,3.304,69,1.853,70,2.575,72,2.421,81,1.881,89,2.517,90,1.606,126,1.969,130,2.751,131,1.401,159,1.466,162,2.284,163,3.924,186,4.426,187,3.924,188,3.924,189,3.924,190,4.326,191,4.552,192,4.552,193,4.552,194,3.511,195,3.511,196,4.552,197,4.552,198,4.552,199,3.924,200,4.552,201,4.552]],["title/injectables/AppRedisService.html",[190,2.144,202,0.419]],["body/injectables/AppRedisService.html",[3,0.106,4,0.106,5,0.095,8,0.164,9,0.852,10,1.014,15,0.451,16,0.018,17,1.283,19,0.266,20,0.288,21,0.106,22,0.009,23,0.007,28,0.619,36,0.64,38,1.125,47,0.013,50,1.343,77,1.323,78,0.918,81,0.669,89,2.126,90,0.733,126,1.116,131,2.202,159,0.669,170,1.543,190,1.873,194,1.602,195,5.316,202,0.366,203,0.611,204,1.791,205,1.687,206,4.128,207,3.311,208,4.865,209,3.311,210,4.725,211,3.311,212,6.308,213,0.974,214,1.602,215,2.125,216,5.75,217,3.311,218,3.311,219,2.078,220,5.693,221,3.559,222,3.311,223,2.078,224,1.68,225,2.207,226,3.232,227,6.44,228,5.481,229,5.147,230,2.495,231,3.311,232,2.078,233,3.311,234,3.311,235,3.311,236,2.078,237,3.311,238,2.078,239,3.311,240,5.202,241,2.078,242,2.001,243,3.311,244,2.9,245,6.655,246,2.681,247,2.078,248,1.043,249,2.855,250,2.855,251,3.311,252,3.311,253,2.001,254,2.554,255,3.559,256,3.311,257,1.873,258,2.329,259,2.855,260,2.078,261,1.043,262,2.078,263,2.078,264,2.078,265,5.481,266,1.485,267,3.311,268,2.078,269,3.311,270,2.078,271,2.078,272,2.736,273,2.078,274,5.144,275,1.791,276,2.078,277,2.078,278,2.078,279,1.902,280,2.078,281,1.791,282,2.681,283,2.078,284,2.078,285,2.078,286,2.078,287,2.078,288,2.078,289,2.078,290,2.078,291,2.078,292,2.078,293,2.078,294,2.078,295,2.078,296,3.856,297,2.078,298,3.311,299,3.311,300,2.078]],["title/injectables/AppService.html",[65,2.462,202,0.419]],["body/injectables/AppService.html",[3,0.279,4,0.279,5,0.25,8,0.433,16,0.017,17,1.169,19,0.309,20,0.759,21,0.279,22,0.015,23,0.015,28,1.226,36,0.569,38,0.977,47,0.035,50,1.233,65,4.255,202,0.724,203,1.612,301,4.723,302,7.265,303,5.478,304,5.478,305,5.478]],["title/controllers/AuthController.html",[24,2.016,306,2.667]],["body/controllers/AuthController.html",[1,1.747,3,0.137,4,0.137,5,0.123,6,1.893,8,0.213,10,0.919,11,1.908,12,1.908,13,3.059,15,0.476,16,0.018,18,1.747,19,0.382,20,0.373,21,0.137,22,0.009,23,0.009,24,1.431,26,1.431,28,0.757,30,1.741,36,0.562,38,0.965,40,2.076,41,3.504,43,4.473,44,2.076,45,1.043,47,0.017,48,4.171,49,4.171,50,1.217,69,2.572,77,1.163,78,0.832,106,1.893,131,2.146,139,1.273,141,2.459,169,1.522,170,0.757,224,1.647,225,2.404,266,1.365,279,2,306,2.847,307,2.32,308,2.32,309,4.192,310,3.268,311,3.805,312,4.192,313,2.691,314,4.285,315,2.691,316,3.488,317,2.19,318,2.691,319,2.691,320,4.905,321,2.691,322,2.691,323,2.691,324,3.421,325,2.691,326,2.627,327,2.691,328,2.691,329,3.121,330,2.691,331,3.421,332,2.691,333,2.691,334,4.285,335,2.691,336,2.32,337,2.691,338,2.076,339,2.691,340,4.999,341,1.893,342,2.691,343,2.32,344,2.586,345,2.076,346,2.32,347,2.691,348,2.691,349,2.289,350,2.691,351,2.691,352,3.121,353,2.691,354,2.076,355,2.691,356,2.691,357,2.691,358,2.691,359,2.691,360,4.663,361,4.663,362,2.691,363,2.32,364,4.663,365,2.289,366,3.488,367,3.751,368,2.691,369,2.691,370,2.691,371,2.32,372,2.691,373,2.691,374,1.647,375,2.691,376,2.076,377,2.691,378,3.121,379,2.627,380,2.627,381,2.691]],["title/modules/AuthModule.html",[51,1.277,63,2.462]],["body/modules/AuthModule.html",[3,0.177,4,0.177,5,0.159,15,0.255,16,0.018,19,0.424,20,0.482,21,0.177,22,0.011,23,0.011,26,2.592,47,0.022,51,1.896,53,1.565,54,1.744,55,1.966,56,1.966,57,1.744,58,2.534,59,2.824,63,4.858,64,4.023,68,2.756,69,1.414,70,1.966,72,2.592,78,0.749,89,2.255,90,1.226,112,2.68,113,1.966,114,2.68,115,3.428,116,2.445,126,1.171,130,2.1,159,1.119,165,2.445,186,4.023,306,3.959,343,2.996,344,3.899,345,2.68,382,2.996,383,2.996,384,3.475,385,2.996,386,4.324,387,4.324,388,3.475,389,4.873,390,2.257,391,3.475,392,3.475,393,3.475,394,2.68,395,4.873,396,2.1,397,3.475,398,3.475,399,3.428,400,3.475,401,2.996,402,3.654,403,1.848,404,4.201,405,2.996,406,3.475,407,3.475,408,2.996,409,3.475,410,3.475,411,2.68,412,3.475,413,2.996,414,2.996,415,2.996,416,2.68,417,2.996,418,2.996,419,2.996,420,2.996,421,2.996,422,2.68,423,3.475]],["title/classes/AuthResponseDto.html",[47,0.024,424,2.924]],["body/classes/AuthResponseDto.html",[3,0.247,4,0.247,5,0.221,8,0.383,9,1.563,12,2.53,15,0.445,16,0.017,17,1.241,19,0.273,21,0.247,22,0.013,23,0.013,30,1.955,36,0.631,45,1.875,47,0.031,139,1.429,224,2.471,310,3.669,329,4.683,349,3.434,365,3.434,366,5.721,424,4.683,425,1.788,426,5.721,427,4.17,428,3.229,429,6.071,430,3.305,431,4.683,432,4.837,433,4.683,434,3.943,435,3.943,436,4.837,437,3.33]],["title/injectables/AuthService.html",[202,0.419,344,2.016]],["body/injectables/AuthService.html",[3,0.093,4,0.093,5,0.083,8,0.145,9,0.769,10,0.879,15,0.463,16,0.018,17,1.277,19,0.357,20,0.253,21,0.093,22,0.007,23,0.007,28,0.559,36,0.658,38,0.859,47,0.012,50,0.983,69,1.215,77,1.112,78,0.795,89,2.017,90,0.645,113,1.034,126,0.616,131,2.039,139,1.46,141,1.4,157,1.63,170,1.994,190,2.924,202,0.33,203,0.538,205,2.181,213,0.879,225,2.239,226,1.498,230,1.104,253,1.104,258,2.101,266,1.539,279,2.339,282,2.838,296,2.101,309,2.574,310,1.804,311,3.075,312,3.264,344,1.588,349,2.725,360,2.574,361,2.574,367,1.41,371,1.576,374,2.397,378,2.303,379,2.838,380,2.838,394,1.41,402,1.187,403,0.972,408,3.264,411,2.303,438,1.576,439,3.785,440,3.785,441,3.785,442,3.785,443,3.785,444,3.264,445,3.785,446,1.576,447,2.59,448,5.455,449,3.785,450,3.075,451,2.986,452,2.986,453,1.828,454,2.986,455,1.828,456,2.986,457,1.828,458,1.828,459,1.828,460,1.828,461,3.264,462,1.828,463,5.455,464,1.828,465,1.828,466,1.828,467,1.828,468,1.828,469,2.303,470,1.576,471,1.286,472,1.41,473,1.828,474,2.986,475,2.986,476,1.828,477,1.576,478,1.187,479,1.41,480,1.828,481,1.576,482,2.303,483,1.828,484,1.828,485,1.828,486,1.828,487,1.828,488,3.785,489,1.828,490,2.986,491,1.828,492,3.785,493,2.986,494,1.828,495,4.371,496,1.828,497,1.828,498,1.828,499,3.768,500,3.371,501,3.371,502,1.828,503,1.576,504,1.41,505,1.41,506,1.034,507,1.41,508,1.286,509,1.41,510,1.41,511,1.41,512,3.768,513,3.785,514,4.153,515,2.986,516,2.986,517,2.574,518,1.828,519,2.986,520,1.828,521,2.924,522,1.828,523,1.828,524,1.576,525,1.828,526,1.41,527,2.458,528,2.574,529,1.576,530,1.41,531,1.828,532,1.828,533,1.828,534,1.576,535,1.576,536,2.141,537,1.576,538,1.828,539,1.576,540,1.828,541,1.828,542,2.986,543,1.828,544,2.986,545,2.574,546,1.828,547,1.828,548,1.828,549,1.187,550,1.828,551,2.303,552,2.574,553,1.576,554,1.41,555,1.828,556,1.828,557,1.828,558,1.828,559,1.576,560,2.986,561,1.828,562,2.986,563,1.828]],["title/classes/BaseEntity.html",[47,0.024,564,2.667]],["body/classes/BaseEntity.html",[3,0.191,4,0.191,5,0.172,8,0.464,9,1.509,10,0.874,15,0.521,16,0.018,17,0.917,19,0.29,21,0.191,22,0.011,23,0.011,30,2.03,36,0.655,47,0.024,78,0.577,96,1.783,126,1.976,157,1.778,208,3.965,244,2.64,248,3.164,258,2.641,425,1.388,536,3.316,564,3.616,565,3.236,566,5.862,567,6.604,568,5.862,569,6.352,570,5.054,571,5.88,572,6.305,573,6.305,574,5.88,575,4.863,576,5.141,577,4.798,578,3.754,579,4.432,580,5.141,581,3.754,582,5.862,583,3.754,584,5.054,585,3.754,586,5.141,587,3.616,588,3.616,589,3.754,590,5.141,591,5.141,592,5.436,593,1.997,594,3.754,595,3.754,596,3.754,597,3.754]],["title/classes/CatchEverythingFilter.html",[47,0.024,598,2.924]],["body/classes/CatchEverythingFilter.html",[3,0.139,4,0.139,5,0.124,8,0.216,9,1.051,10,1.078,12,2.057,13,2.31,15,0.465,16,0.018,17,0.97,18,3.533,19,0.329,20,0.378,21,0.139,22,0.009,23,0.009,28,0.764,36,0.678,38,1.091,47,0.017,50,1.102,77,1.364,78,1.045,80,2.468,81,0.877,135,3.778,157,0.733,159,0.877,166,2.101,168,1.747,170,1.64,174,1.769,205,2.231,213,1.202,215,2.46,226,2.049,244,1.227,248,1.367,255,2.348,261,1.367,266,1.694,282,1.769,317,1.227,320,1.916,354,2.101,390,1.769,425,1.007,471,2.873,526,4.197,528,4.223,577,1.916,598,3.15,599,2.348,600,4.898,601,4.898,602,4.083,603,4.083,604,4.083,605,4.083,606,4.083,607,2.724,608,6.12,609,4.083,610,4.083,611,4.083,612,5.452,613,5.441,614,2.724,615,6.797,616,2.724,617,2.724,618,1.646,619,2.724,620,2.724,621,2.724,622,2.724,623,4.083,624,2.724,625,2.724,626,2.724,627,3.521,628,2.101,629,3.521,630,2.101,631,2.348,632,2.873,633,2.724,634,2.724,635,2.724,636,2.724,637,2.724,638,2.724,639,1.541,640,2.724,641,4.083,642,2.724,643,2.724,644,2.724,645,2.724,646,2.724,647,4.083,648,1.769,649,2.724,650,2.724,651,2.724,652,2.724,653,5.441,654,4.083,655,3.15,656,2.101,657,2.724,658,4.083,659,2.724,660,4.898,661,2.724,662,2.724,663,3.521,664,2.724,665,2.724,666,2.348,667,2.724,668,2.724,669,2.724,670,4.223,671,2.724,672,2.724,673,2.348]],["title/classes/ChangePasswordDto.html",[47,0.024,674,2.462]],["body/classes/ChangePasswordDto.html",[3,0.193,4,0.193,5,0.173,8,0.299,9,1.329,12,2.231,15,0.378,16,0.018,17,1.128,19,0.291,21,0.193,22,0.011,23,0.011,30,1.662,36,0.537,45,1.465,47,0.033,139,1.215,141,2.633,157,1.702,224,2.101,230,3.12,379,3.819,380,3.819,425,1.397,428,2.746,430,3.002,437,2.952,674,3.353,675,5.071,676,2.658,677,4.451,678,4.876,679,4.451,680,4.876,681,4.876,682,4.876,683,4.876,684,4.744,685,5.271,686,4.876,687,4.876,688,4.876,689,4.876,690,4.876,691,4.876,692,4.876,693,3.778,694,5.163,695,3.778,696,4.138,697,4.138,698,4.537,699,2.914,700,2.137]],["title/injectables/CloudinaryService.html",[202,0.419,701,2.667]],["body/injectables/CloudinaryService.html",[3,0.19,4,0.19,5,0.267,8,0.295,10,0.87,11,1.316,15,0.375,16,0.018,19,0.393,20,0.517,21,0.19,22,0.011,23,0.011,28,0.957,36,0.532,38,0.665,47,0.024,50,1.315,77,1.1,78,0.787,81,1.201,89,2.517,90,1.316,131,1.798,157,1.004,159,1.201,168,1.596,170,1.44,202,0.566,203,1.098,205,1.575,213,1.506,215,2.703,225,1.892,261,1.872,266,0.878,272,2.722,296,2.624,365,2.11,527,3.324,666,3.216,701,3.601,702,3.216,703,5.377,704,2.422,705,3.73,706,2.877,707,4.85,708,4.507,709,4.424,710,3.73,711,3.73,712,3.601,713,4.413,714,5.118,715,3.73,716,3.73,717,2.877,718,3.324,719,3.216,720,1.872,721,1.984,722,2.624,723,3.73,724,3.73,725,3.73,726,3.73,727,3.73,728,3.73,729,3.73,730,3.216,731,5.038,732,3.216,733,3.216,734,3.216,735,5.843,736,3.73,737,3.216,738,3.73,739,3.73,740,3.73,741,3.73,742,3.73,743,3.216,744,3.73,745,3.73,746,3.73,747,3.73,748,3.73,749,3.73,750,3.73]],["title/injectables/CreateUserCommand.html",[66,2.462,202,0.419]],["body/injectables/CreateUserCommand.html",[3,0.133,4,0.133,5,0.119,8,0.206,9,1.015,10,1.022,15,0.44,16,0.018,17,1.3,19,0.371,20,0.36,21,0.133,22,0.009,23,0.009,28,0.738,30,1.711,33,2.774,36,0.649,38,1.019,47,0.017,50,1.196,66,2.56,77,1.293,78,1.05,96,1.235,126,2.168,131,1.466,139,1.121,141,0.961,157,1.061,170,1.608,202,0.436,203,0.765,205,1.758,213,1.16,224,1.058,225,1.458,244,1.171,248,1.305,266,1.121,279,1.458,374,2.543,403,1.383,447,2.966,521,1.471,524,2.242,526,2.006,527,1.689,529,2.242,549,2.56,575,3.674,587,2.774,593,1.383,684,2.56,720,1.305,743,2.242,751,5.548,752,2.242,753,2.097,754,4.763,755,4.1,756,4.763,757,4.763,758,4.763,759,4.763,760,3.399,761,2.6,762,5.315,763,3.943,764,3.943,765,2.6,766,5.315,767,3.943,768,6.435,769,2.6,770,6.921,771,2.6,772,3.943,773,3.041,774,2.6,775,2.6,776,3.943,777,2.6,778,2.6,779,3.943,780,3.007,781,2.6,782,3.351,783,3.943,784,3.007,785,2.6,786,2.6,787,3.943,788,3.943,789,3.399,790,2.006,791,5.713,792,3.399,793,2.242,794,2.006,795,2.6,796,2.774,797,1.689,798,3.041,799,2.6,800,2.6,801,2.6,802,2.6,803,2.6,804,2.6,805,2.006,806,2.6,807,2.6,808,2.6,809,2.6,810,1.689,811,2.6,812,2.6,813,5.315]],["title/classes/CreateUserDto.html",[47,0.024,814,2.462]],["body/classes/CreateUserDto.html",[3,0.117,4,0.117,5,0.105,8,0.182,9,0.922,10,1.195,12,1.756,15,0.499,16,0.018,17,1.309,19,0.281,21,0.117,22,0.008,23,0.008,30,2.194,36,0.708,45,0.89,47,0.028,50,0.806,78,0.765,139,1.734,141,2.209,224,2.736,226,1.797,230,2.164,244,1.983,246,2.326,266,0.54,374,2.197,425,0.848,428,3.575,430,3.499,437,3.42,549,2.86,587,2.52,618,2.164,648,1.49,678,2.762,679,1.978,680,2.762,681,2.762,682,2.762,683,2.762,684,3.232,685,2.762,686,2.762,687,2.762,688,2.762,689,2.762,690,2.762,691,2.762,692,2.762,696,3.797,697,4.655,698,2.762,699,1.77,700,1.298,720,1.152,773,2.762,780,3.235,782,3.501,798,3.397,814,2.326,815,5.944,816,1.978,817,4.653,818,3.099,819,4.653,820,5.15,821,3.397,822,3.397,823,3.797,824,4.653,825,3.581,826,3.581,827,3.581,828,3.581,829,2.295,830,2.295,831,2.295,832,2.295,833,2.295,834,2.295,835,4.29,836,2.295,837,2.295,838,2.295,839,2.295,840,2.295,841,2.295,842,2.295,843,2.295,844,2.295,845,3.088,846,2.295,847,2.295,848,3.581,849,2.295,850,2.295,851,3.088,852,2.295,853,2.295,854,2.295,855,2.295,856,3.581,857,2.762,858,2.295,859,6.351,860,3.581,861,1.978,862,1.77,863,2.295,864,2.295,865,3.581,866,2.295,867,2.295,868,2.295,869,4.405,870,2.295,871,2.295,872,2.295,873,2.295,874,2.295,875,2.295]],["title/classes/CreateUserResponseDto.html",[47,0.024,876,2.667]],["body/classes/CreateUserResponseDto.html",[3,0.229,4,0.229,5,0.205,8,0.355,9,1.489,11,2.388,12,2.575,15,0.513,16,0.017,17,1.142,19,0.326,21,0.295,22,0.013,23,0.013,30,1.863,36,0.601,45,1.738,47,0.037,139,1.796,224,2.754,257,3.623,425,1.658,428,3.077,430,3.041,433,4.94,434,4.159,435,4.159,437,3.516,810,4.394,876,4.07,877,3.458,878,4.987,879,4.483,880,4.483,881,2.911,882,3.154,883,4.462,884,3.458]],["title/modules/EmailModule.html",[51,1.277,885,2.667]],["body/modules/EmailModule.html",[3,0.217,4,0.217,5,0.195,16,0.018,19,0.406,20,0.59,21,0.217,22,0.012,23,0.012,26,2.264,47,0.027,51,2.105,53,1.917,54,2.137,55,2.408,56,2.408,57,2.137,58,2.519,59,3.135,68,3.164,69,1.733,70,2.408,72,2.264,81,1.801,89,2.453,90,1.502,106,2.995,126,1.435,130,2.573,135,3.284,137,3.671,139,1.002,153,3.671,157,1.146,159,1.371,165,2.995,174,2.765,403,2.264,461,3.671,721,2.975,784,2.408,885,4.848,886,3.671,887,3.671,888,4.421,889,4.258,890,4.258,891,4.258,892,3.284,893,4.315,894,5.594,895,4.258,896,4.258,897,4.258,898,4.258,899,4.258,900,4.258,901,4.258,902,4.258,903,4.258,904,4.258,905,4.258,906,4.258,907,3.284,908,4.258,909,4.258,910,4.258]],["title/classes/EmailService.html",[47,0.024,888,2.291]],["body/classes/EmailService.html",[3,0.221,4,0.221,5,0.198,8,0.343,10,0.961,15,0.414,16,0.017,17,1.354,19,0.319,20,0.6,21,0.221,22,0.013,23,0.013,28,1.058,36,0.588,38,0.772,47,0.028,77,1.216,78,0.87,81,1.394,131,1.939,159,1.394,170,1.592,205,1.741,213,1.664,215,2.807,225,2.091,257,2.449,261,2.173,272,2.303,279,1.601,374,1.762,376,3.34,425,1.601,575,4.859,721,2.303,888,4.036,892,3.34,907,5.151,911,3.733,912,6.299,913,4.33,914,7.107,915,4.33,916,4.33,917,7.107,918,4.337,919,4.33,920,4.33,921,4.33,922,4.33,923,4.33]],["title/interfaces/ErrorResponse.html",[0,1.902,632,2.667]],["body/interfaces/ErrorResponse.html",[0,2.475,2,3.202,3,0.251,4,0.251,5,0.225,7,3.803,8,0.39,9,1.582,10,1.044,12,2.473,13,3.964,15,0.539,16,0.017,17,1.393,21,0.251,22,0.014,23,0.014,78,1.078,174,4.55,226,3.36,577,4.93,632,4.323,663,6.041,924,4.251]],["title/classes/ForgotPasswordDto.html",[47,0.024,314,2.667]],["body/classes/ForgotPasswordDto.html",[3,0.271,4,0.271,5,0.243,8,0.42,9,1.656,15,0.389,16,0.017,17,1.148,19,0.363,21,0.271,22,0.014,23,0.014,30,1.711,36,0.552,45,2.061,47,0.041,314,4.527,374,2.817,425,1.965,430,2.523,437,3.229,676,3.739,700,3.006,857,4.963,862,4.099,925,5.547,926,5.314,927,4.582,928,5.314]],["title/classes/GetProfileResponseDto.html",[47,0.024,882,2.667]],["body/classes/GetProfileResponseDto.html",[3,0.229,4,0.229,5,0.205,8,0.356,9,1.492,11,2.39,12,2.577,15,0.514,16,0.017,17,1.144,19,0.327,21,0.295,22,0.013,23,0.013,30,1.866,36,0.602,45,1.743,47,0.037,139,1.787,224,2.757,257,3.627,425,1.662,428,3.082,430,3.045,433,4.946,434,4.164,435,4.164,437,3.518,810,3.763,876,3.162,877,3.467,878,3.875,881,2.919,882,4.076,883,5.225,884,4.469,929,4.494,930,4.494]],["title/modules/HttpClientModule.html",[51,1.277,931,2.667]],["body/modules/HttpClientModule.html",[3,0.252,4,0.252,5,0.226,16,0.017,19,0.378,20,0.685,21,0.252,22,0.014,23,0.014,47,0.032,51,2.259,53,2.227,54,2.482,55,2.797,56,2.797,57,2.482,58,3.018,59,3.364,68,3.482,69,2.013,70,2.797,72,2.63,81,1.982,931,5.249,932,4.263,933,4.263,934,4.263,935,5.022,936,3.814,937,3.814,938,4.945,939,6.156,940,3.814,941,3.211,942,4.945]],["title/injectables/HttpClientService.html",[202,0.419,935,2.462]],["body/injectables/HttpClientService.html",[3,0.185,4,0.185,5,0.166,8,0.288,9,1.295,10,0.855,11,1.775,15,0.369,16,0.018,17,1.029,19,0.381,20,0.504,21,0.185,22,0.011,23,0.011,28,0.941,36,0.647,38,0.649,47,0.023,50,0.819,77,1.082,78,0.774,81,1.172,131,1.775,157,1.675,159,1.172,162,3.278,170,1.986,202,0.556,203,1.071,205,2.172,213,1.481,215,2.685,225,1.86,244,2.266,248,2.525,253,3.76,261,1.826,266,0.856,272,2.676,279,1.345,317,2.266,365,2.058,630,2.807,784,3.52,935,3.267,936,5.038,937,5.038,940,2.807,941,4.041,943,3.137,944,5.767,945,5.767,946,5.767,947,3.639,948,6.755,949,5.031,950,3.639,951,6.222,952,3.639,953,5.031,954,6.222,955,3.639,956,5.031,957,5.031,958,3.639,959,2.363,960,3.639,961,3.639,962,3.639,963,3.639,964,3.639,965,5.031,966,3.639]],["title/interfaces/IPaymentService.html",[0,1.902,967,2.667]],["body/interfaces/IPaymentService.html",[0,2.461,2,3.184,3,0.25,4,0.25,5,0.224,8,0.388,10,1.041,15,0.449,16,0.017,19,0.276,21,0.25,22,0.014,23,0.014,28,1.146,36,0.637,38,1.092,77,1.317,78,0.942,225,2.586,242,3.7,784,4.153,967,4.308,968,4.228,969,5.757,970,5.757,971,4.228,972,5.757,973,6.329,974,4.904,975,6.03,976,4.228,977,5.757,978,4.904,979,3.257]],["title/interfaces/IStrorageService.html",[0,1.902,718,2.462]],["body/interfaces/IStrorageService.html",[0,2.267,2,2.933,3,0.23,4,0.23,5,0.294,8,0.357,10,1.153,11,1.594,15,0.426,16,0.017,17,1.146,19,0.383,21,0.23,22,0.013,23,0.013,28,1.087,36,0.604,38,1.037,77,1.25,78,0.894,172,3.884,220,4.484,225,2.509,226,3.226,240,4.958,242,3.513,639,2.555,703,4.958,706,3.484,707,5.235,708,4.958,709,4.775,712,3.178,713,3.895,718,3.775,720,2.267,721,2.403,722,3.178,980,3.895,981,5.542,982,3.895,983,5.235,984,4.517,985,4.517,986,3.178,987,3.895,988,2.933,989,2.933]],["title/injectables/JwtAuthGuard.html",[202,0.419,399,2.667]],["body/injectables/JwtAuthGuard.html",[3,0.333,4,0.209,5,0.187,8,0.324,10,1.041,12,1.444,15,0.449,16,0.018,19,0.368,20,0.567,21,0.209,22,0.012,23,0.012,28,1.019,36,0.637,38,0.972,47,0.026,50,1.378,77,1.317,78,1.005,126,1.379,139,1.601,157,1.101,169,2.314,182,3.527,202,0.602,203,1.204,213,1.204,266,0.963,346,3.527,390,2.656,396,2.472,399,3.833,472,4.202,521,2.314,527,4.241,753,2.898,797,2.656,918,2.656,990,5.631,991,3.156,992,5.448,993,4.697,994,5.448,995,3.527,996,6.03,997,4.091,998,4.697,999,4.595,1000,4.091,1001,5.448,1002,4.091,1003,5.448,1004,3.527,1005,3.156,1006,4.697,1007,4.091,1008,3.527,1009,4.091,1010,4.091,1011,4.091,1012,4.091,1013,4.091,1014,4.091]],["title/injectables/JwtStrategy.html",[202,0.419,386,2.462]],["body/injectables/JwtStrategy.html",[3,0.166,4,0.166,5,0.149,8,0.258,10,0.792,15,0.341,16,0.018,19,0.354,20,0.452,21,0.166,22,0.01,23,0.01,24,2.48,28,1.11,36,0.485,38,0.582,47,0.035,50,0.734,77,1.002,78,0.717,89,2.412,90,1.152,126,1.1,131,1.674,139,1.669,152,3.596,157,0.879,202,0.515,203,0.961,205,1.005,213,1.372,221,2.814,249,4.019,253,1.973,259,4.019,266,0.768,279,1.207,282,2.12,310,3.942,311,4.173,317,3.024,326,3.531,344,2.48,349,3.69,386,3.027,396,1.973,447,3.189,471,2.297,499,2.814,500,2.518,501,2.518,512,4.688,530,4.839,534,4.019,536,1.846,537,2.814,554,3.596,588,3.28,704,2.12,737,4.019,753,2.48,790,2.518,797,2.12,1015,2.814,1016,4.019,1017,3.264,1018,4.662,1019,3.264,1020,4.662,1021,4.019,1022,4.662,1023,4.662,1024,4.662,1025,4.019,1026,4.662,1027,4.662,1028,4.019,1029,4.662,1030,4.662,1031,4.662,1032,5.932,1033,4.662,1034,4.662,1035,4.662,1036,4.662,1037,4.662,1038,4.662,1039,4.019,1040,4.662,1041,5.932,1042,4.019,1043,4.662,1044,4.662,1045,4.662,1046,4.662,1047,4.662,1048,3.264,1049,2.814,1050,2.518,1051,2.814,1052,3.264,1053,3.264,1054,3.264,1055,3.264,1056,3.264,1057,3.264]],["title/injectables/LocalAuthGuard.html",[202,0.419,341,2.667]],["body/injectables/LocalAuthGuard.html",[3,0.287,4,0.287,5,0.257,16,0.017,19,0.376,20,0.781,21,0.287,22,0.015,23,0.015,47,0.036,202,0.737,203,1.658,341,4.688,396,3.405,753,3.544,991,4.346,1004,4.858,1058,4.858,1059,6.663]],["title/injectables/LocalStrategy.html",[202,0.419,387,2.462]],["body/injectables/LocalStrategy.html",[3,0.216,4,0.216,5,0.193,8,0.334,10,0.946,15,0.408,16,0.018,17,1.259,19,0.398,20,0.586,21,0.216,22,0.012,23,0.012,28,1.041,36,0.579,38,0.754,47,0.027,50,0.951,77,1.197,78,0.856,131,1.916,139,1.465,141,2.446,152,4.294,157,1.138,202,0.615,203,1.244,205,1.714,213,1.638,225,2.058,266,0.995,279,2.058,344,3.755,345,3.261,374,2.266,387,3.615,396,2.554,447,3.418,472,3.261,514,3.644,521,2.391,535,3.644,536,2.391,551,3.261,753,2.961,790,3.261,797,2.745,1016,4.8,1049,3.644,1050,3.261,1051,3.644,1060,3.644,1061,4.227,1062,4.227,1063,5.567,1064,4.227,1065,3.644,1066,4.8,1067,4.227,1068,4.227,1069,3.261,1070,3.644,1071,4.227]],["title/classes/LoginDto.html",[47,0.024,324,2.667]],["body/classes/LoginDto.html",[3,0.249,4,0.249,5,0.223,8,0.387,9,1.574,15,0.448,16,0.017,17,1.246,19,0.345,21,0.249,22,0.014,23,0.014,30,1.968,36,0.635,45,1.896,47,0.039,139,1.645,141,2.659,224,2.488,230,3.694,324,4.301,374,2.927,425,1.808,428,3.251,430,3.318,437,3.347,678,4.715,700,2.766,857,4.715,862,3.772,927,4.216,1072,4.216,1073,4.89,1074,4.89]],["title/injectables/MorganMiddleware.html",[93,2.667,202,0.419]],["body/injectables/MorganMiddleware.html",[3,0.212,4,0.212,5,0.19,8,0.329,10,0.936,12,1.467,15,0.403,16,0.018,17,0.742,19,0.31,20,0.576,21,0.212,22,0.012,23,0.012,28,1.03,36,0.572,38,0.742,47,0.027,50,0.936,77,1.184,78,0.847,80,3.731,81,1.339,93,3.874,139,1.296,159,1.339,162,2.087,168,1.779,170,1.17,172,2.513,202,0.609,203,1.224,205,1.28,213,1.224,214,3.207,215,2.725,250,4.748,254,4.248,266,0.979,326,3.576,482,4.248,506,3.868,639,2.352,670,5.324,717,3.207,941,2.7,1075,3.585,1076,4.158,1077,4.748,1078,5.667,1079,4.158,1080,3.585,1081,4.748,1082,5.324,1083,3.207,1084,4.158,1085,4.158,1086,5.507,1087,4.158,1088,3.585,1089,4.158,1090,3.585,1091,4.158,1092,4.158,1093,4.158,1094,4.158,1095,4.158,1096,4.158,1097,4.158,1098,4.158,1099,4.158,1100,5.507,1101,4.158]],["title/classes/PasswordResetEmailConsumer.html",[47,0.024,1102,2.924]],["body/classes/PasswordResetEmailConsumer.html",[3,0.209,4,0.209,5,0.187,8,0.324,10,0.926,11,1.444,15,0.399,16,0.018,19,0.403,20,0.567,21,0.209,22,0.012,23,0.012,28,1.019,36,0.566,38,0.73,47,0.026,77,1.171,78,0.838,81,1.317,113,2.314,131,1.885,159,1.317,170,1.533,205,1.677,213,1.603,215,2.768,257,2.314,261,2.053,266,0.963,272,2.898,279,1.513,374,2.217,402,2.656,403,2.176,425,1.513,478,2.656,545,3.527,549,2.656,720,2.053,753,2.176,797,2.656,888,4.227,1102,5.038,1103,3.527,1104,5.448,1105,4.091,1106,4.091,1107,5.448,1108,7.252,1109,4.091,1110,5.448,1111,4.091,1112,5.448,1113,4.091,1114,3.527,1115,3.527,1116,4.091,1117,4.091,1118,4.091,1119,4.091,1120,5.448,1121,6.125,1122,4.091,1123,4.091,1124,4.091,1125,4.091,1126,4.091,1127,4.091]],["title/modules/PaymentModule.html",[51,1.277,1128,2.924]],["body/modules/PaymentModule.html",[3,0.184,4,0.184,5,0.165,15,0.265,16,0.018,19,0.416,20,0.501,21,0.184,22,0.011,23,0.011,28,0.677,30,1.164,36,0.376,38,0.645,41,3.028,47,0.023,50,1.127,51,1.937,53,1.628,58,1.628,59,1.815,72,1.923,78,0.771,81,1.851,89,2.606,90,1.276,108,2.046,112,2.789,113,2.046,114,2.789,115,3.525,116,2.544,126,1.219,130,3.028,132,3.865,157,0.973,159,1.613,165,2.544,215,2.406,266,0.851,403,1.923,404,4.319,405,3.118,413,3.118,414,3.118,415,3.118,416,2.789,417,3.118,418,3.118,419,3.118,420,3.118,421,3.118,422,2.789,450,3.525,478,2.348,720,1.815,979,3.301,1128,4.434,1129,3.616,1130,4.319,1131,4.956,1132,3.616,1133,4.956,1134,5.01,1135,3.616,1136,4.044,1137,4.434,1138,3.118,1139,3.616,1140,3.525,1141,3.616,1142,3.616,1143,3.616,1144,3.616,1145,3.616,1146,3.616,1147,3.616,1148,3.616,1149,5.01,1150,3.616,1151,3.616,1152,3.616,1153,3.616,1154,3.616,1155,4.319,1156,4.319,1157,3.616,1158,3.616,1159,3.616]],["title/classes/RefreshTokenDto.html",[47,0.024,331,2.667]],["body/classes/RefreshTokenDto.html",[3,0.259,4,0.259,5,0.232,8,0.401,9,1.61,15,0.372,16,0.017,17,1.115,19,0.353,21,0.259,22,0.014,23,0.014,30,1.633,36,0.527,45,1.966,47,0.04,224,2.064,310,3.779,311,4.399,331,4.399,349,4.003,367,5.229,425,1.875,428,2.697,430,2.969,431,3.912,437,3.138,696,4.399,697,4.399,700,2.869,1039,5.391,1160,5.391,1161,4.372,1162,6.253,1163,5.072,1164,5.072]],["title/injectables/RequestBodyAndResponseInterceptor.html",[202,0.419,1165,2.667]],["body/injectables/RequestBodyAndResponseInterceptor.html",[3,0.188,4,0.188,5,0.168,8,0.291,10,0.862,11,1.3,12,1.791,13,2.87,15,0.372,16,0.018,17,0.657,19,0.353,20,0.511,21,0.259,22,0.011,23,0.011,28,0.949,36,0.528,38,0.657,47,0.032,50,1.407,77,1.091,78,0.78,81,1.186,108,2.084,126,1.241,159,1.186,162,2.547,168,2.171,170,1.037,172,2.226,202,0.642,203,1.084,205,1.134,213,1.084,214,2.842,215,2.629,266,1.666,317,1.659,365,2.084,434,2.392,435,2.392,506,3.538,618,2.226,639,2.87,648,2.392,655,2.842,656,2.842,918,2.392,959,2.392,979,1.959,999,4.615,1083,2.842,1165,3.57,1166,2.842,1167,4.375,1168,3.684,1169,5.005,1170,5.656,1171,3.684,1172,4.825,1173,3.914,1174,5.005,1175,3.176,1176,3.176,1177,3.176,1178,2.592,1179,3.914,1180,2.842,1181,3.176,1182,4.375,1183,3.176,1184,3.176,1185,3.176,1186,3.176,1187,3.176,1188,3.176,1189,3.176,1190,4.375,1191,4.375,1192,4.375,1193,4.375,1194,2.842,1195,3.176,1196,3.176]],["title/injectables/RequestContextMiddleware.html",[121,2.667,202,0.419]],["body/injectables/RequestContextMiddleware.html",[3,0.238,4,0.238,5,0.213,8,0.369,10,1.008,15,0.434,16,0.017,19,0.368,20,0.646,21,0.238,22,0.013,23,0.013,28,1.109,36,0.616,38,0.831,47,0.03,77,1.275,78,0.912,80,3.583,96,2.213,104,3.594,121,4.172,168,1.993,169,2.636,170,1.311,202,0.655,203,1.371,213,1.371,254,4.574,317,3.091,326,3.026,506,3.883,593,2.478,639,3.883,1077,5.112,1078,5.623,1081,5.112,1197,5.623,1198,4.017,1199,4.017,1200,5.919,1201,4.659,1202,5.112,1203,6.865,1204,4.659,1205,4.659,1206,4.659]],["title/classes/ResetPasswordDto.html",[47,0.024,334,2.667]],["body/classes/ResetPasswordDto.html",[3,0.183,4,0.183,5,0.164,8,0.283,9,1.281,12,2.18,15,0.419,16,0.018,17,1.199,19,0.28,21,0.183,22,0.011,23,0.011,30,1.841,36,0.594,45,1.388,47,0.032,69,2.025,139,1.454,141,2.599,157,1.663,224,2.327,334,3.5,349,2.814,376,3.837,378,4.41,379,3.713,380,3.713,425,1.324,428,3.041,430,3.192,431,2.761,437,3.101,676,2.519,677,4.289,680,4.766,681,4.766,682,4.766,683,4.766,684,4.565,685,4.766,686,4.766,687,4.766,688,4.766,689,4.766,690,4.766,691,4.766,692,4.766,696,4.347,697,4.347,698,4.41,699,2.761,700,2.025,1207,5.327,1208,6.179,1209,4.975,1210,3.58,1211,3.58,1212,3.58,1213,3.58,1214,4.975,1215,4.975]],["title/guards/RoleGuard.html",[1216,2.924,1217,2.924]],["body/guards/RoleGuard.html",[3,0.211,4,0.211,5,0.19,8,0.328,10,0.934,15,0.403,16,0.018,17,0.74,19,0.385,20,0.575,21,0.211,22,0.012,23,0.012,28,1.029,30,1.336,36,0.572,38,0.74,47,0.027,50,1.388,77,1.182,78,0.846,108,2.346,126,2.078,157,1.117,166,3.2,168,1.775,169,2.346,170,1.167,202,0.608,213,1.221,225,2.033,246,3.57,266,1.546,317,1.868,329,3.2,390,2.694,521,2.346,628,4.241,780,2.346,918,3.57,959,2.694,979,2.206,993,5.891,995,3.576,996,6.054,998,3.576,999,4.62,1008,3.576,1172,4.757,1173,4.241,1179,4.241,1180,3.2,1194,3.2,1217,4.241,1218,4.148,1219,3.576,1220,4.148,1221,4.148,1222,6.168,1223,4.148,1224,5.498,1225,4.148,1226,4.148,1227,4.148]],["title/injectables/S3Service.html",[202,0.419,1228,2.667]],["body/injectables/S3Service.html",[3,0.137,4,0.137,5,0.222,8,0.213,9,1.042,10,0.826,11,0.95,15,0.425,16,0.018,17,1.127,19,0.405,20,0.373,21,0.137,22,0.009,23,0.009,28,0.757,36,0.633,38,0.722,47,0.017,50,0.91,58,1.212,77,1.045,78,0.748,81,0.866,89,2.252,90,0.95,131,1.875,157,1.089,159,0.866,162,2.91,168,1.151,170,1.714,172,3.504,202,0.447,203,0.792,205,2.146,213,1.191,215,2.45,220,4.699,225,2,226,2.44,240,4.171,242,2.445,244,1.212,248,1.35,261,1.35,266,1.488,272,2.152,279,1.496,317,1.212,320,1.893,365,1.522,411,3.121,639,1.522,684,2.627,703,4.473,704,1.747,706,2.076,707,4.171,708,3.751,709,3.805,718,2.627,719,2.32,720,1.35,721,2.152,722,1.893,730,2.32,731,3.488,732,2.32,733,2.32,734,2.32,755,4.473,793,2.32,805,2.076,941,1.747,981,4.192,982,2.32,983,4.171,986,1.893,987,2.32,988,1.747,989,1.747,1069,2.076,1228,2.847,1229,2.32,1230,4.863,1231,4.863,1232,4.192,1233,4.079,1234,4.046,1235,2.691,1236,2.691,1237,4.046,1238,2.691,1239,2.691,1240,4.046,1241,2.691,1242,2.32,1243,4.046,1244,2.691,1245,2.691,1246,4.046,1247,4.192,1248,2.32,1249,3.488,1250,4.046,1251,2.32,1252,2.691,1253,2.32,1254,2.32,1255,4.046,1256,2.32,1257,2.691,1258,2.32,1259,4.863,1260,4.046,1261,4.046,1262,2.691,1263,2.691,1264,4.046,1265,2.691,1266,2.691,1267,2.691,1268,2.691,1269,2.691,1270,4.046,1271,2.691,1272,4.046,1273,2.691,1274,2.32,1275,3.488,1276,2.32,1277,4.046,1278,2.691,1279,2.691,1280,2.691,1281,2.691]],["title/injectables/SchemaService.html",[67,2.462,202,0.419]],["body/injectables/SchemaService.html",[3,0.214,4,0.214,5,0.192,8,0.332,9,1.426,10,0.713,15,0.307,16,0.017,19,0.372,20,0.582,21,0.214,22,0.012,23,0.012,28,1.037,36,0.645,38,0.749,47,0.027,67,3.598,77,0.902,78,0.646,81,2.124,89,2.657,90,1.481,96,1.993,100,3.598,101,3.619,131,1.909,157,1.492,159,1.351,168,1.796,170,1.983,202,0.613,203,1.235,205,2.168,213,1.631,215,2.786,244,1.89,248,2.106,261,2.106,266,1.304,272,2.232,279,1.552,593,2.232,1199,3.619,1200,5.688,1202,4.777,1282,3.619,1283,7.046,1284,5.541,1285,4.197,1286,5.541,1287,5.541,1288,4.197,1289,4.197,1290,4.197,1291,4.197,1292,4.197,1293,4.197,1294,4.197,1295,4.197]],["title/modules/StorageModule.html",[51,1.277,1296,2.924]],["body/modules/StorageModule.html",[3,0.204,4,0.204,5,0.183,16,0.018,19,0.4,20,0.555,21,0.204,22,0.012,23,0.012,28,0.75,36,0.417,38,0.715,47,0.026,50,1.364,51,2.043,53,1.805,58,1.805,59,2.011,72,2.132,81,1.952,89,2.626,90,1.414,130,3.247,132,5.21,157,1.632,159,1.73,199,3.455,215,2.619,266,0.943,403,2.132,422,3.091,521,2.267,701,2.82,720,2.011,721,2.132,1069,3.091,1130,4.633,1131,5.227,1133,5.227,1228,2.82,1232,4.633,1233,4.265,1276,3.455,1296,4.676,1297,4.008,1298,4.008,1299,4.008,1300,4.676,1301,3.455,1302,4.008,1303,5.374,1304,4.008,1305,4.008,1306,4.008,1307,4.008,1308,4.008,1309,4.008,1310,4.008,1311,4.008,1312,4.008,1313,4.008,1314,4.008,1315,4.008,1316,4.008,1317,4.008,1318,4.008]],["title/injectables/StripeService.html",[202,0.419,1140,2.667]],["body/injectables/StripeService.html",[3,0.162,4,0.162,5,0.145,8,0.251,10,0.995,11,1.613,15,0.429,16,0.018,19,0.384,20,0.44,21,0.162,22,0.01,23,0.01,28,0.855,30,1.023,36,0.609,38,0.955,47,0.02,50,1.029,77,1.26,78,0.901,81,1.023,89,2.39,90,1.121,108,1.797,113,1.797,131,2.137,159,1.023,168,1.359,170,1.649,202,0.505,203,0.935,205,1.803,213,1.345,215,2.583,225,2.166,242,2.763,257,1.797,261,1.594,266,1.379,272,2.849,279,1.98,403,1.69,450,4.121,477,2.739,478,2.063,536,1.797,704,2.063,784,3.856,810,2.063,967,3.216,969,4.618,970,4.618,971,2.739,972,4.618,973,5.573,975,5.573,976,2.739,977,4.618,979,3.626,1028,5.051,1136,3.216,1140,3.216,1155,4.618,1156,4.618,1319,2.739,1320,4.572,1321,3.177,1322,3.177,1323,3.177,1324,4.572,1325,5.356,1326,4.572,1327,3.177,1328,4.572,1329,4.572,1330,3.177,1331,3.177,1332,3.177,1333,3.177,1334,3.526,1335,5.356,1336,3.177,1337,3.177,1338,3.177,1339,3.177,1340,5.858,1341,3.526,1342,3.177,1343,3.177,1344,3.177,1345,3.177,1346,3.177,1347,3.177,1348,3.177,1349,3.177,1350,3.177,1351,3.177,1352,3.177,1353,3.177]],["title/injectables/SuccessResponseInterceptor.html",[202,0.419,1178,2.667]],["body/injectables/SuccessResponseInterceptor.html",[3,0.193,4,0.193,5,0.173,8,0.299,10,0.642,11,1.333,12,1.822,13,2.92,15,0.277,16,0.018,17,0.674,19,0.356,20,0.524,21,0.263,22,0.011,23,0.011,28,0.966,36,0.393,38,0.674,47,0.033,50,1.422,77,0.812,78,0.581,81,1.216,108,2.137,126,1.273,159,1.216,162,2.591,168,2.209,170,1.063,172,2.283,202,0.65,203,1.112,205,1.163,215,2.281,266,1.676,317,1.701,365,2.137,434,2.453,435,2.453,506,3.576,618,2.283,639,2.92,648,2.453,655,2.914,656,2.914,918,2.453,959,2.453,979,2.009,999,4.657,1083,2.914,1165,2.658,1166,2.914,1167,4.451,1169,5.071,1170,5.707,1172,4.876,1173,3.982,1174,5.071,1175,3.257,1176,3.257,1177,3.257,1178,3.632,1179,3.982,1180,2.914,1181,3.257,1182,4.451,1183,3.257,1184,3.257,1185,3.257,1186,3.257,1187,3.257,1188,3.257,1189,3.257,1190,4.451,1191,4.451,1192,4.451,1193,4.451,1194,2.914,1195,3.257,1196,3.257,1354,3.778]],["title/classes/UpdateProfileDto.html",[47,0.024,1355,2.667]],["body/classes/UpdateProfileDto.html",[3,0.269,4,0.269,5,0.241,16,0.017,19,0.361,21,0.269,22,0.014,23,0.014,45,2.048,47,0.034,141,2.37,266,1.509,374,2.609,425,1.953,753,3.41,780,3.626,796,3.716,814,3.43,821,4.945,822,4.945,1355,4.51,1356,4.554,1357,4.554,1358,6.902,1359,6.411,1360,5.283,1361,4.554]],["title/entities/User.html",[139,0.892,1362,2.924]],["body/entities/User.html",[3,0.103,4,0.103,5,0.092,8,0.321,9,1.044,10,1.186,15,0.548,16,0.017,17,1.291,19,0.262,21,0.103,22,0.007,23,0.007,30,2.207,36,0.712,47,0.013,69,1.319,78,0.909,96,0.961,126,2.386,139,1.532,141,2.255,162,1.627,174,2.105,177,1.561,205,0.623,226,1.627,244,1.826,246,3.84,248,3.061,253,3.573,310,1.959,374,2.205,549,2.634,552,3.497,559,2.795,564,2.281,569,2.795,570,5.778,571,2.795,574,6.42,577,2.281,579,6.016,587,3.263,592,5.909,593,1.076,618,1.223,673,2.795,720,1.015,753,1.076,773,2.5,780,2.871,782,3.571,798,3.129,817,4.905,818,2.854,819,4.376,820,4.905,821,3.129,822,3.129,823,3.497,824,3.497,835,3.999,845,2.795,851,2.795,1042,2.795,1070,3.497,1090,6.24,1362,2.5,1363,1.744,1364,1.744,1365,4.376,1366,2.795,1367,3.242,1368,2.023,1369,7.238,1370,2.023,1371,4.639,1372,2.795,1373,2.023,1374,6.257,1375,2.023,1376,2.023,1377,2.795,1378,3.242,1379,2.023,1380,2.023,1381,4.639,1382,2.023,1383,2.023,1384,2.023,1385,2.023,1386,3.242,1387,2.023,1388,2.023,1389,5.417,1390,2.023,1391,3.242,1392,2.023,1393,4.056,1394,2.023,1395,2.023,1396,3.242,1397,2.023,1398,2.795,1399,2.795,1400,2.023,1401,1.423,1402,1.744,1403,2.023,1404,2.023,1405,2.023,1406,1.744,1407,2.023]],["title/controllers/UsersController.html",[24,2.016,1408,2.667]],["body/controllers/UsersController.html",[1,1.813,3,0.142,4,0.142,5,0.128,6,1.965,8,0.221,10,0.936,11,2.179,12,1.944,13,3.116,15,0.469,16,0.018,18,1.813,19,0.371,20,0.387,21,0.142,22,0.009,23,0.009,24,1.485,26,1.485,28,0.778,30,1.774,36,0.573,38,0.983,40,2.154,41,2.514,43,4.544,44,2.154,45,1.083,47,0.018,48,3.835,49,4.249,50,1.239,77,1.184,78,0.847,131,2.163,139,1.634,141,2.037,157,1.12,169,1.58,170,0.786,177,2.154,225,2.431,257,3.116,266,1.387,279,1.838,308,2.407,316,2.407,317,2.239,320,4.501,326,4.154,336,2.407,338,2.154,340,4.749,352,2.154,354,2.154,363,2.407,364,4.286,447,2.361,504,2.154,505,2.154,506,1.58,507,2.154,508,1.965,509,2.154,510,2.154,511,2.154,536,1.58,551,2.154,588,2.927,674,4.011,796,2.927,810,1.813,814,4.011,818,3.497,883,4.764,884,2.154,1355,4.345,1361,2.407,1372,3.586,1408,2.927,1409,2.407,1410,4.16,1411,4.971,1412,2.792,1413,4.16,1414,2.792,1415,2.792,1416,2.792,1417,2.792,1418,4.16,1419,4.971,1420,2.792,1421,2.792,1422,2.792,1423,2.792,1424,2.792,1425,2.792,1426,4.16,1427,2.792,1428,2.792,1429,2.792,1430,2.407,1431,2.407,1432,2.792,1433,2.792,1434,2.407,1435,2.792,1436,2.792,1437,2.792,1438,2.792,1439,2.792,1440,2.792,1441,3.586,1442,2.792,1443,2.792,1444,2.792,1445,2.792,1446,4.16,1447,4.286,1448,2.792,1449,3.586,1450,2.792,1451,2.792,1452,2.792,1453,2.792]],["title/modules/UsersModule.html",[51,1.277,64,2.291]],["body/modules/UsersModule.html",[3,0.228,4,0.228,5,0.204,16,0.017,19,0.411,20,0.62,21,0.228,22,0.013,23,0.013,26,3.072,47,0.029,51,2.156,53,2.014,54,2.244,55,2.53,56,2.53,57,2.244,58,2.881,59,3.21,64,4.583,68,3.267,69,1.82,70,2.53,72,3.072,95,3.855,96,2.123,97,3.146,110,4.332,139,1.053,186,4.332,401,3.855,447,3.622,881,2.904,1408,4.5,1431,3.855,1454,3.855,1455,4.472,1456,3.855,1457,3.855,1458,4.472,1459,4.472,1460,4.472,1461,4.472]],["title/injectables/UsersService.html",[202,0.419,447,1.8]],["body/injectables/UsersService.html",[3,0.119,4,0.119,5,0.107,8,0.185,9,0.935,10,0.925,11,2.033,15,0.441,16,0.018,17,1.139,19,0.339,20,0.324,21,0.119,22,0.008,23,0.008,28,0.68,36,0.625,38,0.896,47,0.015,50,1.225,77,1.17,78,0.837,89,2.224,90,0.825,96,1.725,97,1.644,131,2.078,139,1.537,141,1.648,157,1.199,170,1.797,190,3.259,202,0.402,203,0.688,205,1.966,210,2.015,213,1.069,225,2.299,242,1.412,253,1.412,258,1.644,266,1.589,279,2.361,282,1.518,296,3.536,352,1.803,374,1.479,379,2.894,380,2.359,416,3.877,446,2.015,447,1.725,470,2.015,471,1.644,481,2.015,500,1.803,501,1.803,504,2.802,505,2.802,506,2.055,507,2.802,508,2.556,509,2.802,510,2.802,511,2.802,517,4.968,521,2.055,536,2.521,539,4.333,553,2.015,554,1.803,588,2.556,593,1.243,618,1.412,648,2.359,674,3.264,784,2.843,796,2.556,818,3.536,881,1.518,989,1.518,1275,4.333,1434,2.015,1441,3.132,1447,3.842,1449,3.132,1462,2.015,1463,4.456,1464,4.456,1465,4.456,1466,4.456,1467,5.026,1468,3.633,1469,2.337,1470,2.337,1471,3.633,1472,2.337,1473,2.337,1474,2.337,1475,5.026,1476,5.026,1477,2.337,1478,6.014,1479,3.633,1480,5.026,1481,2.337,1482,2.337,1483,2.337,1484,2.337,1485,2.337,1486,2.337,1487,2.337,1488,2.337,1489,2.337,1490,2.337,1491,2.337,1492,2.337,1493,2.337,1494,2.337,1495,2.337,1496,2.337,1497,2.337,1498,2.337,1499,2.337,1500,2.337,1501,2.337,1502,3.633,1503,2.337,1504,2.337,1505,2.337,1506,2.337,1507,2.337,1508,2.337,1509,2.337,1510,3.633,1511,3.633,1512,3.633,1513,3.633,1514,2.337,1515,2.337,1516,2.337,1517,2.337,1518,3.633,1519,2.337]],["title/injectables/UsersSubscriber.html",[110,2.291,202,0.419]],["body/injectables/UsersSubscriber.html",[3,0.173,4,0.173,5,0.155,8,0.268,10,1.122,15,0.484,16,0.018,19,0.372,20,0.47,21,0.173,22,0.011,23,0.011,28,0.896,36,0.706,38,1.178,47,0.022,50,1.249,77,1.42,78,1.016,80,2.048,89,2.442,90,1.196,96,1.609,110,2.893,126,1.142,131,2.17,139,1.772,168,1.45,169,1.917,170,0.954,202,0.529,203,0.997,205,2.17,213,0.997,246,3.109,266,1.42,275,4.127,279,2.052,444,4.127,469,3.693,503,4.127,593,1.802,704,2.201,881,2.201,1398,4.127,1399,4.127,1401,2.384,1402,2.922,1406,4.127,1520,2.922,1521,6.032,1522,4.787,1523,4.787,1524,3.389,1525,4.787,1526,6.789,1527,3.389,1528,4.787,1529,3.389,1530,3.389,1531,5.551,1532,4.787,1533,3.389,1534,4.787,1535,3.389,1536,4.787,1537,3.389,1538,4.787,1539,4.787,1540,4.787,1541,4.787,1542,3.389,1543,2.922,1544,4.787,1545,3.389,1546,3.389,1547,3.389,1548,3.389]],["title/coverage.html",[1549,3.992]],["body/coverage.html",[0,2.584,1,1.589,5,0.112,6,1.721,7,2.903,15,0.43,16,0.018,22,0.008,23,0.008,24,2.439,25,1.721,27,2.109,41,1.478,47,0.045,57,1.889,65,1.589,66,1.589,67,1.589,93,1.721,100,1.589,110,1.478,121,1.721,139,0.886,157,0.658,190,1.384,202,0.803,204,2.109,229,6.785,301,2.109,306,1.721,307,2.109,314,1.721,324,1.721,331,1.721,334,1.721,341,1.721,344,1.301,349,1.384,386,1.589,387,1.589,399,1.721,402,1.589,424,1.887,426,2.109,427,2.109,438,2.109,447,1.162,479,1.887,564,1.721,565,2.109,598,1.887,599,2.109,612,1.887,632,1.721,674,1.589,675,2.109,676,3.227,701,1.721,702,2.109,718,1.589,751,2.109,752,2.109,780,1.384,794,1.887,814,1.589,815,2.109,816,2.109,876,1.721,877,2.903,882,1.721,888,1.478,893,1.887,911,2.109,924,2.109,925,2.109,935,1.589,936,1.887,937,1.887,943,2.109,967,1.721,968,2.109,980,2.109,986,1.721,988,1.589,989,1.589,990,2.109,991,2.903,1005,1.887,1015,2.109,1058,2.109,1060,2.109,1072,2.109,1075,2.109,1080,5.061,1102,1.887,1103,2.109,1136,1.721,1137,1.887,1140,1.721,1160,2.109,1161,2.109,1165,1.721,1166,2.903,1178,1.721,1197,2.109,1198,2.109,1207,2.109,1216,1.887,1217,1.887,1219,2.109,1228,1.721,1229,2.109,1274,2.109,1282,2.109,1300,1.887,1319,2.109,1334,1.887,1341,1.887,1355,1.721,1356,2.109,1357,2.109,1362,1.887,1364,3.245,1401,1.721,1408,1.721,1409,2.109,1462,2.109,1520,2.109,1549,1.887,1550,2.109,1551,2.446,1552,2.446,1553,5.559,1554,4.586,1555,5.442,1556,6.912,1557,2.109,1558,7.504,1559,2.109,1560,5.559,1561,2.446,1562,7.055,1563,5.15,1564,3.763,1565,2.109,1566,5.559,1567,2.109,1568,2.109,1569,2.109,1570,2.109,1571,2.109,1572,2.109,1573,2.109,1574,2.109,1575,2.109,1576,2.446,1577,3.245,1578,2.446,1579,2.446,1580,2.109,1581,2.109,1582,2.446,1583,2.446,1584,2.109,1585,2.109,1586,2.109,1587,2.446,1588,2.109,1589,2.109,1590,3.245,1591,2.109,1592,2.109,1593,2.446,1594,2.446]],["title/dependencies.html",[54,2.288,1595,2.729]],["body/dependencies.html",[11,1.169,16,0.018,20,0.459,22,0.01,23,0.01,33,3.314,45,1.285,47,0.03,54,1.663,58,1.492,90,1.169,96,2.603,97,2.331,99,2.856,104,3.634,105,2.856,106,2.331,108,2.665,109,2.856,113,1.874,115,3.857,116,2.331,118,2.856,131,1.02,162,1.663,194,2.555,195,2.555,317,1.492,390,2.151,394,2.555,396,2.002,469,2.555,478,2.151,482,2.555,530,2.555,584,2.856,593,1.762,630,2.555,631,2.856,700,1.874,712,2.331,717,2.555,721,2.916,722,2.331,755,3.634,789,2.856,792,2.856,805,2.555,861,2.856,892,2.555,940,2.555,941,2.151,959,2.151,979,2.506,1050,4.229,1065,2.856,1066,2.856,1082,2.856,1233,2.331,1242,2.856,1247,4.727,1248,2.856,1249,2.856,1251,2.856,1253,2.856,1254,4.727,1256,2.856,1258,2.856,1596,3.313,1597,3.313,1598,3.313,1599,3.313,1600,5.483,1601,3.313,1602,3.313,1603,3.313,1604,3.313,1605,5.971,1606,4.711,1607,3.313,1608,3.313,1609,3.313,1610,3.313,1611,3.313,1612,3.313,1613,3.313,1614,3.313,1615,3.313,1616,3.313,1617,3.313,1618,2.856,1619,3.313,1620,3.313,1621,3.313,1622,5.971,1623,3.313,1624,3.313,1625,3.313,1626,4.711,1627,4.711,1628,3.313,1629,3.313,1630,3.313,1631,3.313,1632,3.313,1633,3.313,1634,3.313,1635,3.313,1636,3.313,1637,3.313,1638,3.313,1639,3.313,1640,3.313,1641,4.711,1642,3.313,1643,3.313,1644,4.711,1645,3.313,1646,3.313,1647,3.313,1648,3.313,1649,3.313,1650,3.313,1651,3.313,1652,3.313,1653,3.313,1654,3.313,1655,3.313,1656,3.313,1657,3.313,1658,3.313,1659,4.711,1660,3.313,1661,3.313,1662,3.313,1663,3.313,1664,3.313,1665,3.313,1666,3.313,1667,3.313,1668,3.313,1669,3.313,1670,3.313,1671,3.313,1672,3.313,1673,3.313,1674,3.313,1675,3.313,1676,3.313,1677,3.313]],["title/miscellaneous/enumerations.html",[1678,1.683,1679,3.931]],["body/miscellaneous/enumerations.html",[8,0.351,16,0.017,22,0.013,23,0.013,69,2.339,139,1.353,141,2.125,208,4.433,244,3.516,338,4.433,709,4.043,712,4.043,782,4.043,784,3.251,979,3.057,983,4.433,988,3.732,1114,4.955,1115,4.955,1138,4.955,1233,4.043,1301,4.955,1365,3.826,1430,4.955,1678,2.361,1679,3.826,1680,5.753,1681,5.747,1682,5.747,1683,4.438,1684,5.747,1685,4.438,1686,4.438,1687,5.747,1688,5.747,1689,5.747,1690,4.438,1691,4.438,1692,5.747,1693,4.438,1694,5.747]],["title/miscellaneous/functions.html",[1678,1.683,1695,3.931]],["body/miscellaneous/functions.html",[8,0.379,10,1.178,15,0.523,16,0.017,17,1.275,22,0.013,23,0.013,38,1.236,39,3.691,57,3.662,77,1.491,78,1.066,80,3.644,139,1.554,226,3.026,1366,4.125,1401,4.242,1543,4.125,1567,4.125,1568,5.199,1569,4.125,1570,5.199,1571,4.125,1572,4.125,1573,5.199,1574,4.125,1575,4.125,1678,2.545,1695,4.125,1696,4.785,1697,4.785,1698,4.785,1699,4.785,1700,4.785,1701,4.785,1702,4.785,1703,6.03,1704,4.785,1705,4.785,1706,4.785,1707,6.03,1708,4.785]],["title/index.html",[8,0.25,281,2.729,1709,3.165]],["body/index.html",[16,0.017,22,0.014,23,0.014,33,3.588,100,3.312,224,2.076,430,3.227,508,3.588,760,6.475,1549,3.934,1550,4.398,1710,5.101,1711,5.101,1712,5.101,1713,6.275,1714,5.101,1715,7.51,1716,5.101,1717,5.101,1718,5.101,1719,5.101,1720,6.275,1721,5.101,1722,5.101,1723,6.797,1724,5.101,1725,6.275,1726,5.101,1727,5.101,1728,5.101]],["title/modules.html",[53,2.33]],["body/modules.html",[16,0.014,22,0.014,23,0.014,52,3.807,53,2.437,63,3.514,64,3.27,186,3.27,885,3.807,931,3.807,1021,5.608,1025,6.481,1128,4.174,1296,4.174,1729,7.517,1730,7.517,1731,7.667,1732,6.505]],["title/overview.html",[1733,4.462]],["body/overview.html",[2,2.54,16,0.017,22,0.012,23,0.012,26,2.08,51,1.318,52,5.26,53,1.761,54,1.963,55,2.212,56,2.212,57,1.963,58,1.761,59,1.963,60,3.372,61,3.372,62,3.372,63,4.913,64,4.484,65,3.888,66,3.888,67,3.888,68,2.99,69,1.592,70,2.212,110,3.618,186,4.265,187,3.372,188,3.372,189,3.372,190,3.993,203,1.151,230,3.194,344,3.754,382,3.372,383,3.372,385,3.372,386,3.888,387,3.888,425,1.446,447,3.352,885,4.212,886,3.372,887,3.372,888,3.875,931,4.713,932,3.372,933,3.372,934,3.372,935,4.583,1216,3.017,1363,3.372,1377,3.372,1454,3.372,1456,3.372,1457,3.372,1733,3.372,1734,3.911,1735,3.911,1736,3.911,1737,3.911]],["title/properties.html",[9,1.174,1595,2.729]],["body/properties.html",[9,1.523,16,0.017,22,0.015,23,0.015,224,2.408,1088,5.1,1738,5.916,1739,5.916,1740,5.916,1741,5.916]],["title/miscellaneous/typealiases.html",[1678,1.683,1742,4.56]],["body/miscellaneous/typealiases.html",[8,0.415,15,0.538,16,0.016,22,0.014,23,0.014,39,5.525,479,4.927,527,3.41,612,4.927,627,4.528,628,4.051,629,4.528,986,4.494,988,4.148,989,4.148,1334,4.927,1341,4.927,1565,4.528,1580,4.528,1581,5.507,1584,4.528,1585,4.528,1586,5.507,1588,4.528,1589,5.507,1678,2.793,1680,4.051,1743,5.252,1744,5.252,1745,5.252,1746,5.252,1747,5.252]],["title/miscellaneous/variables.html",[1678,1.683,1748,3.931]],["body/miscellaneous/variables.html",[8,0.305,15,0.531,16,0.018,17,1.293,22,0.012,23,0.012,35,3.321,41,3.161,69,1.568,78,0.592,100,3.858,126,1.763,141,1.424,157,1.925,244,3.38,248,3.768,374,1.568,402,3.397,450,3.68,721,2.782,780,2.959,794,4.035,893,4.035,907,2.971,1005,4.035,1006,3.321,1136,3.68,1137,4.582,1300,4.582,1555,3.321,1557,4.51,1559,3.321,1577,3.321,1590,3.321,1591,4.51,1592,5.494,1618,3.321,1678,2.049,1680,5.594,1748,3.321,1749,5.231,1750,5.231,1751,3.852,1752,3.852,1753,3.852,1754,3.852,1755,3.852,1756,3.852,1757,3.852,1758,3.852,1759,3.852,1760,3.852,1761,3.852,1762,3.852,1763,3.852,1764,3.852,1765,3.852,1766,3.852,1767,3.852,1768,3.852,1769,3.852]]],"invertedIndex":[["",{"_index":16,"title":{},"body":{"interfaces/ApiResponse.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AppRedisModule.html":{},"injectables/AppRedisService.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/AuthResponseDto.html":{},"injectables/AuthService.html":{},"classes/BaseEntity.html":{},"classes/CatchEverythingFilter.html":{},"classes/ChangePasswordDto.html":{},"injectables/CloudinaryService.html":{},"injectables/CreateUserCommand.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserResponseDto.html":{},"modules/EmailModule.html":{},"classes/EmailService.html":{},"interfaces/ErrorResponse.html":{},"classes/ForgotPasswordDto.html":{},"classes/GetProfileResponseDto.html":{},"modules/HttpClientModule.html":{},"injectables/HttpClientService.html":{},"interfaces/IPaymentService.html":{},"interfaces/IStrorageService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"injectables/MorganMiddleware.html":{},"classes/PasswordResetEmailConsumer.html":{},"modules/PaymentModule.html":{},"classes/RefreshTokenDto.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/RequestContextMiddleware.html":{},"classes/ResetPasswordDto.html":{},"guards/RoleGuard.html":{},"injectables/S3Service.html":{},"injectables/SchemaService.html":{},"modules/StorageModule.html":{},"injectables/StripeService.html":{},"injectables/SuccessResponseInterceptor.html":{},"classes/UpdateProfileDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/UsersSubscriber.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":229,"title":{},"body":{"injectables/AppRedisService.html":{},"coverage.html":{}}}],["0.0.1",{"_index":1738,"title":{},"body":{"properties.html":{}}}],["0.1.13",{"_index":1671,"title":{},"body":{"dependencies.html":{}}}],["0.12.5",{"_index":1675,"title":{},"body":{"dependencies.html":{}}}],["0.14.1",{"_index":1648,"title":{},"body":{"dependencies.html":{}}}],["0.2.21",{"_index":1604,"title":{},"body":{"dependencies.html":{}}}],["0.203.0",{"_index":1626,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":1647,"title":{},"body":{"dependencies.html":{}}}],["0.6.0",{"_index":1654,"title":{},"body":{"dependencies.html":{}}}],["0.62.0",{"_index":1619,"title":{},"body":{"dependencies.html":{}}}],["0.7.0",{"_index":1665,"title":{},"body":{"dependencies.html":{}}}],["0.9.3",{"_index":1603,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":1558,"title":{},"body":{"coverage.html":{}}}],["0/13",{"_index":1576,"title":{},"body":{"coverage.html":{}}}],["0/14",{"_index":1582,"title":{},"body":{"coverage.html":{}}}],["0/18",{"_index":1583,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":1553,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":1562,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":1563,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":1560,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":1564,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":1554,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":1561,"title":{},"body":{"coverage.html":{}}}],["0123456789abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz!@#$%^&*()_",{"_index":1751,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1",{"_index":230,"title":{},"body":{"injectables/AppRedisService.html":{},"injectables/AuthService.html":{},"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginDto.html":{},"overview.html":{}}}],["1'})@isstring()@isnotempty()@matches(/^(?=.*[a",{"_index":679,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{}}}],["1'})@isstring()@isoptional()@transform",{"_index":836,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["1.0.0",{"_index":1644,"title":{},"body":{"dependencies.html":{}}}],["1.1.26",{"_index":1602,"title":{},"body":{"dependencies.html":{}}}],["1.10.0",{"_index":1641,"title":{},"body":{"dependencies.html":{}}}],["1.10.2",{"_index":1660,"title":{},"body":{"dependencies.html":{}}}],["1.2.1",{"_index":1650,"title":{},"body":{"dependencies.html":{}}}],["1.9.10",{"_index":1638,"title":{},"body":{"dependencies.html":{}}}],["1.9.93",{"_index":1661,"title":{},"body":{"dependencies.html":{}}}],["1/3",{"_index":1579,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":684,"title":{},"body":{"classes/ChangePasswordDto.html":{},"injectables/CreateUserCommand.html":{},"classes/CreateUserDto.html":{},"classes/ResetPasswordDto.html":{},"injectables/S3Service.html":{}}}],["10.0.0",{"_index":1605,"title":{},"body":{"dependencies.html":{}}}],["10.0.3",{"_index":1614,"title":{},"body":{"dependencies.html":{}}}],["10.2.0",{"_index":1612,"title":{},"body":{"dependencies.html":{}}}],["100",{"_index":1374,"title":{},"body":{"entities/User.html":{}}}],["11.0.3",{"_index":1610,"title":{},"body":{"dependencies.html":{}}}],["11.1.0",{"_index":1676,"title":{},"body":{"dependencies.html":{}}}],["123",{"_index":825,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["12345",{"_index":866,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["12345'})@isstring()@isoptional",{"_index":849,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["15",{"_index":1736,"title":{},"body":{"overview.html":{}}}],["18.3.0",{"_index":1673,"title":{},"body":{"dependencies.html":{}}}],["19",{"_index":1735,"title":{},"body":{"overview.html":{}}}],["2.0.1",{"_index":1622,"title":{},"body":{"dependencies.html":{}}}],["2.0.2",{"_index":1608,"title":{},"body":{"dependencies.html":{}}}],["2.1.0",{"_index":1640,"title":{},"body":{"dependencies.html":{}}}],["2.1.3",{"_index":1655,"title":{},"body":{"dependencies.html":{}}}],["2.2.4",{"_index":1636,"title":{},"body":{"dependencies.html":{}}}],["2.7.0",{"_index":1649,"title":{},"body":{"dependencies.html":{}}}],["20",{"_index":1389,"title":{},"body":{"entities/User.html":{}}}],["2000",{"_index":420,"title":{},"body":{"modules/AuthModule.html":{},"modules/PaymentModule.html":{}}}],["234567890",{"_index":871,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["234567890'})@isstring()@isoptional",{"_index":846,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["255",{"_index":1381,"title":{},"body":{"entities/User.html":{}}}],["3",{"_index":1377,"title":{},"body":{"entities/User.html":{},"overview.html":{}}}],["3.0.0",{"_index":1656,"title":{},"body":{"dependencies.html":{}}}],["3.0.1",{"_index":1662,"title":{},"body":{"dependencies.html":{}}}],["3.0.3",{"_index":1668,"title":{},"body":{"dependencies.html":{}}}],["3.17.0",{"_index":1677,"title":{},"body":{"dependencies.html":{}}}],["3.18.0",{"_index":1658,"title":{},"body":{"dependencies.html":{}}}],["3.2.2",{"_index":1611,"title":{},"body":{"dependencies.html":{}}}],["3.840.0",{"_index":1598,"title":{},"body":{"dependencies.html":{}}}],["3.848.0",{"_index":1596,"title":{},"body":{"dependencies.html":{}}}],["3.850.0",{"_index":1597,"title":{},"body":{"dependencies.html":{}}}],["3/10",{"_index":1587,"title":{},"body":{"coverage.html":{}}}],["30",{"_index":1274,"title":{},"body":{"injectables/S3Service.html":{},"coverage.html":{}}}],["33",{"_index":1578,"title":{},"body":{"coverage.html":{}}}],["4",{"_index":1737,"title":{},"body":{"overview.html":{}}}],["4.0.0",{"_index":1609,"title":{},"body":{"dependencies.html":{}}}],["4.0.1",{"_index":1666,"title":{},"body":{"dependencies.html":{}}}],["4.0.4",{"_index":1631,"title":{},"body":{"dependencies.html":{}}}],["4.1.2",{"_index":1646,"title":{},"body":{"dependencies.html":{}}}],["404",{"_index":1098,"title":{},"body":{"injectables/MorganMiddleware.html":{}}}],["5",{"_index":416,"title":{},"body":{"modules/AuthModule.html":{},"modules/PaymentModule.html":{},"injectables/UsersService.html":{}}}],["5.0.0",{"_index":1657,"title":{},"body":{"dependencies.html":{}}}],["5.0.2",{"_index":1634,"title":{},"body":{"dependencies.html":{}}}],["5.1.1",{"_index":1642,"title":{},"body":{"dependencies.html":{}}}],["5.1.2",{"_index":1632,"title":{},"body":{"dependencies.html":{}}}],["5.56.8",{"_index":1645,"title":{},"body":{"dependencies.html":{}}}],["500",{"_index":673,"title":{},"body":{"classes/CatchEverythingFilter.html":{},"entities/User.html":{}}}],["6.1.1",{"_index":1607,"title":{},"body":{"dependencies.html":{}}}],["6.12.0",{"_index":1600,"title":{},"body":{"dependencies.html":{}}}],["6.4.16",{"_index":1606,"title":{},"body":{"dependencies.html":{}}}],["60",{"_index":1275,"title":{},"body":{"injectables/S3Service.html":{},"injectables/UsersService.html":{}}}],["7.0.5",{"_index":1664,"title":{},"body":{"dependencies.html":{}}}],["7.3.1",{"_index":1616,"title":{},"body":{"dependencies.html":{}}}],["7.8.1",{"_index":1672,"title":{},"body":{"dependencies.html":{}}}],["8",{"_index":1734,"title":{},"body":{"overview.html":{}}}],["8.1.0",{"_index":1652,"title":{},"body":{"dependencies.html":{}}}],["_(ツ)_",{"_index":657,"title":{},"body":{"classes/CatchEverythingFilter.html":{}}}],["abstract",{"_index":597,"title":{},"body":{"classes/BaseEntity.html":{}}}],["access",{"_index":329,"title":{},"body":{"controllers/AuthController.html":{},"classes/AuthResponseDto.html":{},"guards/RoleGuard.html":{}}}],["access_token",{"_index":360,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["accesskeyid",{"_index":1306,"title":{},"body":{"modules/StorageModule.html":{}}}],["accesstoken",{"_index":366,"title":{},"body":{"controllers/AuthController.html":{},"classes/AuthResponseDto.html":{}}}],["account",{"_index":1148,"title":{},"body":{"modules/PaymentModule.html":{}}}],["accounttest",{"_index":1151,"title":{},"body":{"modules/PaymentModule.html":{}}}],["active",{"_index":534,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["adapter",{"_index":165,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/EmailModule.html":{},"modules/PaymentModule.html":{}}}],["addr",{"_index":1087,"title":{},"body":{"injectables/MorganMiddleware.html":{}}}],["address",{"_index":817,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/User.html":{}}}],["admin",{"_index":1694,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["africa/lagos",{"_index":1691,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["agent",{"_index":1093,"title":{},"body":{"injectables/MorganMiddleware.html":{}}}],["alias",{"_index":1566,"title":{},"body":{"coverage.html":{}}}],["aliases",{"_index":1743,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["already",{"_index":1493,"title":{},"body":{"injectables/UsersService.html":{}}}],["any).__helper?.__originalentitydata",{"_index":1545,"title":{},"body":{"injectables/UsersSubscriber.html":{}}}],["api_key",{"_index":726,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["api_secret",{"_index":728,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["apibody",{"_index":340,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["apikey",{"_index":1144,"title":{},"body":{"modules/PaymentModule.html":{}}}],["apioperation",{"_index":43,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["apiproperty",{"_index":437,"title":{},"body":{"classes/AuthResponseDto.html":{},"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserResponseDto.html":{},"classes/ForgotPasswordDto.html":{},"classes/GetProfileResponseDto.html":{},"classes/LoginDto.html":{},"classes/RefreshTokenDto.html":{},"classes/ResetPasswordDto.html":{}}}],["apiproperty({description",{"_index":428,"title":{},"body":{"classes/AuthResponseDto.html":{},"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserResponseDto.html":{},"classes/GetProfileResponseDto.html":{},"classes/LoginDto.html":{},"classes/RefreshTokenDto.html":{},"classes/ResetPasswordDto.html":{}}}],["apiproperty({example",{"_index":926,"title":{},"body":{"classes/ForgotPasswordDto.html":{}}}],["apiresponse",{"_index":1,"title":{"interfaces/ApiResponse.html":{}},"body":{"interfaces/ApiResponse.html":{},"controllers/AuthController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["apitags",{"_index":44,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["apitags('app",{"_index":46,"title":{},"body":{"controllers/AppController.html":{}}}],["apitags('auth",{"_index":355,"title":{},"body":{"controllers/AuthController.html":{}}}],["apitags('users",{"_index":1437,"title":{},"body":{"controllers/UsersController.html":{}}}],["app",{"_index":1708,"title":{},"body":{"miscellaneous/functions.html":{}}}],["app.controller",{"_index":84,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":85,"title":{},"body":{"modules/AppModule.html":{}}}],["app_guard",{"_index":389,"title":{},"body":{"modules/AuthModule.html":{}}}],["app_name",{"_index":1557,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["appcontroller",{"_index":25,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["apply",{"_index":176,"title":{},"body":{"modules/AppModule.html":{}}}],["applyrawbodyonlyto",{"_index":107,"title":{},"body":{"modules/AppModule.html":{}}}],["applyrawbodyonlyto(consumer",{"_index":171,"title":{},"body":{"modules/AppModule.html":{}}}],["appmodule",{"_index":52,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appredis",{"_index":206,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["appredismodule",{"_index":186,"title":{"modules/AppRedisModule.html":{}},"body":{"modules/AppRedisModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["appredisservice",{"_index":190,"title":{"injectables/AppRedisService.html":{}},"body":{"modules/AppRedisModule.html":{},"injectables/AppRedisService.html":{},"injectables/AuthService.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["appredisservice.name",{"_index":274,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["appservice",{"_index":65,"title":{"injectables/AppService.html":{}},"body":{"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["args",{"_index":275,"title":{},"body":{"injectables/AppRedisService.html":{},"injectables/UsersSubscriber.html":{}}}],["args.entity",{"_index":1539,"title":{},"body":{"injectables/UsersSubscriber.html":{}}}],["args.push('ex",{"_index":277,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["args.push('nx",{"_index":276,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["argumentshost",{"_index":613,"title":{},"body":{"classes/CatchEverythingFilter.html":{}}}],["array",{"_index":234,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["asecure",{"_index":1208,"title":{},"body":{"classes/ResetPasswordDto.html":{}}}],["async",{"_index":131,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRedisModule.html":{},"injectables/AppRedisService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CloudinaryService.html":{},"injectables/CreateUserCommand.html":{},"classes/EmailService.html":{},"injectables/HttpClientService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/PasswordResetEmailConsumer.html":{},"injectables/S3Service.html":{},"injectables/SchemaService.html":{},"injectables/StripeService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/UsersSubscriber.html":{},"dependencies.html":{}}}],["asynclocalstoragecontextmanager",{"_index":1756,"title":{},"body":{"miscellaneous/variables.html":{}}}],["attempts",{"_index":415,"title":{},"body":{"modules/AuthModule.html":{},"modules/PaymentModule.html":{}}}],["auth",{"_index":106,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/EmailModule.html":{},"dependencies.html":{}}}],["auth.controller",{"_index":391,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.guard",{"_index":343,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["auth.guard.ts",{"_index":991,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/LocalAuthGuard.html":{},"coverage.html":{}}}],["auth.guard.ts:11",{"_index":997,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["auth.guard.ts:16",{"_index":1000,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["auth.guard.ts:27",{"_index":1002,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["auth.jwt.refreshexpiresin",{"_index":494,"title":{},"body":{"injectables/AuthService.html":{}}}],["auth.jwt.refreshsecret",{"_index":496,"title":{},"body":{"injectables/AuthService.html":{}}}],["auth.service",{"_index":345,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/LocalStrategy.html":{}}}],["auth/decorators/public.decorator",{"_index":1432,"title":{},"body":{"controllers/UsersController.html":{}}}],["authcontroller",{"_index":306,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authenticated",{"_index":429,"title":{},"body":{"classes/AuthResponseDto.html":{}}}],["authguard",{"_index":1004,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/LocalAuthGuard.html":{}}}],["authguard('jwt",{"_index":992,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authguard('local",{"_index":1059,"title":{},"body":{"injectables/LocalAuthGuard.html":{}}}],["authmodule",{"_index":63,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":1741,"title":{},"body":{"properties.html":{}}}],["authresponsedto",{"_index":424,"title":{"classes/AuthResponseDto.html":{}},"body":{"classes/AuthResponseDto.html":{},"coverage.html":{}}}],["authservice",{"_index":344,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["authtokens",{"_index":479,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["auto",{"_index":742,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["autoloadentities",{"_index":143,"title":{},"body":{"modules/AppModule.html":{}}}],["available",{"_index":1021,"title":{},"body":{"injectables/JwtStrategy.html":{},"modules.html":{}}}],["avatar",{"_index":1365,"title":{},"body":{"entities/User.html":{},"miscellaneous/enumerations.html":{}}}],["avatars",{"_index":1693,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["await",{"_index":279,"title":{},"body":{"injectables/AppRedisService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CreateUserCommand.html":{},"classes/EmailService.html":{},"injectables/HttpClientService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/PasswordResetEmailConsumer.html":{},"injectables/S3Service.html":{},"injectables/SchemaService.html":{},"injectables/StripeService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/UsersSubscriber.html":{}}}],["aws",{"_index":1247,"title":{},"body":{"injectables/S3Service.html":{},"dependencies.html":{}}}],["aws.s3.secretaccesskey",{"_index":1310,"title":{},"body":{"modules/StorageModule.html":{}}}],["axios",{"_index":630,"title":{},"body":{"classes/CatchEverythingFilter.html":{},"injectables/HttpClientService.html":{},"dependencies.html":{}}}],["axioserror",{"_index":629,"title":{},"body":{"classes/CatchEverythingFilter.html":{},"miscellaneous/typealiases.html":{}}}],["axiosrequestconfig",{"_index":951,"title":{},"body":{"injectables/HttpClientService.html":{}}}],["b3",{"_index":1628,"title":{},"body":{"dependencies.html":{}}}],["b3propagator",{"_index":1763,"title":{},"body":{"miscellaneous/variables.html":{}}}],["backoff",{"_index":417,"title":{},"body":{"modules/AuthModule.html":{},"modules/PaymentModule.html":{}}}],["badrequestexception",{"_index":470,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["badrequestexception('malformed",{"_index":532,"title":{},"body":{"injectables/AuthService.html":{}}}],["badrequestexception('passwords",{"_index":553,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["badrequestexception('refresh",{"_index":522,"title":{},"body":{"injectables/AuthService.html":{}}}],["baseentity",{"_index":564,"title":{"classes/BaseEntity.html":{}},"body":{"classes/BaseEntity.html":{},"entities/User.html":{},"coverage.html":{}}}],["basic",{"_index":105,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["basicauth",{"_index":103,"title":{},"body":{"modules/AppModule.html":{}}}],["bcrypt",{"_index":469,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersSubscriber.html":{},"dependencies.html":{}}}],["bcrypt.compare(pass",{"_index":502,"title":{},"body":{"injectables/AuthService.html":{}}}],["bcrypt.gensalt(this.saltrounds",{"_index":561,"title":{},"body":{"injectables/AuthService.html":{}}}],["bcrypt.hash(newpassword",{"_index":563,"title":{},"body":{"injectables/AuthService.html":{}}}],["bcrypt.hash(user.password",{"_index":1548,"title":{},"body":{"injectables/UsersSubscriber.html":{}}}],["beforecreate",{"_index":1398,"title":{},"body":{"entities/User.html":{},"injectables/UsersSubscriber.html":{}}}],["beforecreate(args",{"_index":1525,"title":{},"body":{"injectables/UsersSubscriber.html":{}}}],["beforeupdate",{"_index":1399,"title":{},"body":{"entities/User.html":{},"injectables/UsersSubscriber.html":{}}}],["beforeupdate(args",{"_index":1528,"title":{},"body":{"injectables/UsersSubscriber.html":{}}}],["blacklisted",{"_index":523,"title":{},"body":{"injectables/AuthService.html":{}}}],["board/api",{"_index":1599,"title":{},"body":{"dependencies.html":{}}}],["board/api/bullmqadapter",{"_index":405,"title":{},"body":{"modules/AuthModule.html":{},"modules/PaymentModule.html":{}}}],["board/express",{"_index":118,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["board/nestjs",{"_index":116,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PaymentModule.html":{},"dependencies.html":{}}}],["body",{"_index":320,"title":{},"body":{"controllers/AuthController.html":{},"classes/CatchEverythingFilter.html":{},"injectables/S3Service.html":{},"controllers/UsersController.html":{}}}],["boilerplate",{"_index":35,"title":{},"body":{"controllers/AppController.html":{},"miscellaneous/variables.html":{}}}],["boolean",{"_index":246,"title":{},"body":{"injectables/AppRedisService.html":{},"classes/CreateUserDto.html":{},"guards/RoleGuard.html":{},"entities/User.html":{},"injectables/UsersSubscriber.html":{}}}],["bootstrap",{"_index":57,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRedisModule.html":{},"modules/AuthModule.html":{},"modules/EmailModule.html":{},"modules/HttpClientModule.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["browse",{"_index":1731,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1729,"title":{},"body":{"modules.html":{}}}],["bucket",{"_index":1266,"title":{},"body":{"injectables/S3Service.html":{}}}],["buffer",{"_index":1643,"title":{},"body":{"dependencies.html":{}}}],["bull",{"_index":115,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PaymentModule.html":{},"dependencies.html":{}}}],["bullboardmodule",{"_index":114,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PaymentModule.html":{}}}],["bullboardmodule.forfeature",{"_index":421,"title":{},"body":{"modules/AuthModule.html":{},"modules/PaymentModule.html":{}}}],["bullboardmodule.forroot",{"_index":164,"title":{},"body":{"modules/AppModule.html":{}}}],["bullmodule",{"_index":112,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PaymentModule.html":{}}}],["bullmodule.forrootasync",{"_index":160,"title":{},"body":{"modules/AppModule.html":{}}}],["bullmodule.registerqueue",{"_index":413,"title":{},"body":{"modules/AuthModule.html":{},"modules/PaymentModule.html":{}}}],["bullmq",{"_index":478,"title":{},"body":{"injectables/AuthService.html":{},"classes/PasswordResetEmailConsumer.html":{},"modules/PaymentModule.html":{},"injectables/StripeService.html":{},"dependencies.html":{}}}],["bullmqadapter",{"_index":404,"title":{},"body":{"modules/AuthModule.html":{},"modules/PaymentModule.html":{}}}],["bytes",{"_index":733,"title":{},"body":{"injectables/CloudinaryService.html":{},"injectables/S3Service.html":{}}}],["cache",{"_index":128,"title":{},"body":{"modules/AppModule.html":{}}}],["cached",{"_index":1502,"title":{},"body":{"injectables/UsersService.html":{}}}],["cachekey",{"_index":517,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["callhandler",{"_index":1170,"title":{},"body":{"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/SuccessResponseInterceptor.html":{}}}],["canactivate",{"_index":993,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/RoleGuard.html":{}}}],["canactivate(context",{"_index":998,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/RoleGuard.html":{}}}],["catch",{"_index":526,"title":{},"body":{"injectables/AuthService.html":{},"classes/CatchEverythingFilter.html":{},"injectables/CreateUserCommand.html":{}}}],["catch(exception",{"_index":611,"title":{},"body":{"classes/CatchEverythingFilter.html":{}}}],["catcheverythingfilter",{"_index":598,"title":{"classes/CatchEverythingFilter.html":{}},"body":{"classes/CatchEverythingFilter.html":{},"coverage.html":{}}}],["catcheverythingfilter.name",{"_index":610,"title":{},"body":{"classes/CatchEverythingFilter.html":{}}}],["category=${filecategory",{"_index":734,"title":{},"body":{"injectables/CloudinaryService.html":{},"injectables/S3Service.html":{}}}],["caught",{"_index":667,"title":{},"body":{"classes/CatchEverythingFilter.html":{}}}],["chalk",{"_index":792,"title":{},"body":{"injectables/CreateUserCommand.html":{},"dependencies.html":{}}}],["chalk.red.bold",{"_index":812,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["challenge",{"_index":180,"title":{},"body":{"modules/AppModule.html":{}}}],["change",{"_index":1372,"title":{},"body":{"entities/User.html":{},"controllers/UsersController.html":{}}}],["changed",{"_index":1453,"title":{},"body":{"controllers/UsersController.html":{}}}],["changepassword",{"_index":818,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["changepassword(data",{"_index":1412,"title":{},"body":{"controllers/UsersController.html":{}}}],["changepassword(userid",{"_index":1469,"title":{},"body":{"injectables/UsersService.html":{}}}],["changepassworddto",{"_index":674,"title":{"classes/ChangePasswordDto.html":{}},"body":{"classes/ChangePasswordDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["characters",{"_index":685,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/ResetPasswordDto.html":{}}}],["checking",{"_index":294,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["checkout",{"_index":1334,"title":{},"body":{"injectables/StripeService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["city",{"_index":819,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/User.html":{}}}],["class",{"_index":47,"title":{"classes/AuthResponseDto.html":{},"classes/BaseEntity.html":{},"classes/CatchEverythingFilter.html":{},"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserResponseDto.html":{},"classes/EmailService.html":{},"classes/ForgotPasswordDto.html":{},"classes/GetProfileResponseDto.html":{},"classes/LoginDto.html":{},"classes/PasswordResetEmailConsumer.html":{},"classes/RefreshTokenDto.html":{},"classes/ResetPasswordDto.html":{},"classes/UpdateProfileDto.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AppRedisModule.html":{},"injectables/AppRedisService.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/AuthResponseDto.html":{},"injectables/AuthService.html":{},"classes/BaseEntity.html":{},"classes/CatchEverythingFilter.html":{},"classes/ChangePasswordDto.html":{},"injectables/CloudinaryService.html":{},"injectables/CreateUserCommand.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserResponseDto.html":{},"modules/EmailModule.html":{},"classes/EmailService.html":{},"classes/ForgotPasswordDto.html":{},"classes/GetProfileResponseDto.html":{},"modules/HttpClientModule.html":{},"injectables/HttpClientService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"injectables/MorganMiddleware.html":{},"classes/PasswordResetEmailConsumer.html":{},"modules/PaymentModule.html":{},"classes/RefreshTokenDto.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/RequestContextMiddleware.html":{},"classes/ResetPasswordDto.html":{},"guards/RoleGuard.html":{},"injectables/S3Service.html":{},"injectables/SchemaService.html":{},"modules/StorageModule.html":{},"injectables/StripeService.html":{},"injectables/SuccessResponseInterceptor.html":{},"classes/UpdateProfileDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/UsersSubscriber.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":425,"title":{},"body":{"classes/AuthResponseDto.html":{},"classes/BaseEntity.html":{},"classes/CatchEverythingFilter.html":{},"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserResponseDto.html":{},"classes/EmailService.html":{},"classes/ForgotPasswordDto.html":{},"classes/GetProfileResponseDto.html":{},"classes/LoginDto.html":{},"classes/PasswordResetEmailConsumer.html":{},"classes/RefreshTokenDto.html":{},"classes/ResetPasswordDto.html":{},"classes/UpdateProfileDto.html":{},"overview.html":{}}}],["cleaned",{"_index":869,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["client.module.ts",{"_index":938,"title":{},"body":{"modules/HttpClientModule.html":{}}}],["client.service",{"_index":942,"title":{},"body":{"modules/HttpClientModule.html":{}}}],["client.service.ts",{"_index":943,"title":{},"body":{"injectables/HttpClientService.html":{},"coverage.html":{}}}],["client.service.ts:10",{"_index":955,"title":{},"body":{"injectables/HttpClientService.html":{}}}],["client.service.ts:11",{"_index":949,"title":{},"body":{"injectables/HttpClientService.html":{}}}],["client.service.ts:21",{"_index":952,"title":{},"body":{"injectables/HttpClientService.html":{}}}],["client/http",{"_index":937,"title":{},"body":{"modules/HttpClientModule.html":{},"injectables/HttpClientService.html":{},"coverage.html":{}}}],["cloud_name",{"_index":724,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["cloudinary",{"_index":712,"title":{},"body":{"injectables/CloudinaryService.html":{},"interfaces/IStrorageService.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{}}}],["cloudinary.config",{"_index":723,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["cloudinary.service",{"_index":1299,"title":{},"body":{"modules/StorageModule.html":{}}}],["cloudinary.uploader.upload_stream",{"_index":738,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["cloudinaryservice",{"_index":701,"title":{"injectables/CloudinaryService.html":{}},"body":{"injectables/CloudinaryService.html":{},"modules/StorageModule.html":{},"coverage.html":{}}}],["cloudinaryservice(configservice",{"_index":1314,"title":{},"body":{"modules/StorageModule.html":{}}}],["cloudinaryservice.name",{"_index":735,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["cluster_appmodule",{"_index":60,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":62,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":61,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appredismodule",{"_index":187,"title":{},"body":{"modules/AppRedisModule.html":{},"overview.html":{}}}],["cluster_appredismodule_exports",{"_index":188,"title":{},"body":{"modules/AppRedisModule.html":{},"overview.html":{}}}],["cluster_appredismodule_providers",{"_index":189,"title":{},"body":{"modules/AppRedisModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":382,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":383,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":384,"title":{},"body":{"modules/AuthModule.html":{}}}],["cluster_authmodule_providers",{"_index":385,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_emailmodule",{"_index":886,"title":{},"body":{"modules/EmailModule.html":{},"overview.html":{}}}],["cluster_emailmodule_exports",{"_index":887,"title":{},"body":{"modules/EmailModule.html":{},"overview.html":{}}}],["cluster_httpclientmodule",{"_index":932,"title":{},"body":{"modules/HttpClientModule.html":{},"overview.html":{}}}],["cluster_httpclientmodule_exports",{"_index":933,"title":{},"body":{"modules/HttpClientModule.html":{},"overview.html":{}}}],["cluster_httpclientmodule_providers",{"_index":934,"title":{},"body":{"modules/HttpClientModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":1454,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_exports",{"_index":1456,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_imports",{"_index":1455,"title":{},"body":{"modules/UsersModule.html":{}}}],["cluster_usersmodule_providers",{"_index":1457,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["code",{"_index":835,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/User.html":{}}}],["command",{"_index":788,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["commander",{"_index":789,"title":{},"body":{"injectables/CreateUserCommand.html":{},"dependencies.html":{}}}],["commandrunner",{"_index":754,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["commands/create",{"_index":119,"title":{},"body":{"modules/AppModule.html":{}}}],["comment",{"_index":574,"title":{},"body":{"classes/BaseEntity.html":{},"entities/User.html":{}}}],["common/constants",{"_index":101,"title":{},"body":{"modules/AppModule.html":{},"injectables/SchemaService.html":{}}}],["common/middlewares/morgan.middleware",{"_index":94,"title":{},"body":{"modules/AppModule.html":{}}}],["common/middlewares/request",{"_index":122,"title":{},"body":{"modules/AppModule.html":{}}}],["compare",{"_index":1030,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["compodoc/compodoc",{"_index":1601,"title":{},"body":{"dependencies.html":{}}}],["compositepropagator",{"_index":1758,"title":{},"body":{"miscellaneous/variables.html":{}}}],["concurrency",{"_index":1117,"title":{},"body":{"classes/PasswordResetEmailConsumer.html":{}}}],["cond",{"_index":596,"title":{},"body":{"classes/BaseEntity.html":{}}}],["config",{"_index":199,"title":{},"body":{"modules/AppRedisModule.html":{},"modules/StorageModule.html":{}}}],["config/index",{"_index":87,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule",{"_index":88,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule.forroot",{"_index":124,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":89,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRedisModule.html":{},"injectables/AppRedisService.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CloudinaryService.html":{},"modules/EmailModule.html":{},"injectables/JwtStrategy.html":{},"modules/PaymentModule.html":{},"injectables/S3Service.html":{},"injectables/SchemaService.html":{},"modules/StorageModule.html":{},"injectables/StripeService.html":{},"injectables/UsersService.html":{},"injectables/UsersSubscriber.html":{}}}],["configservice.get",{"_index":1309,"title":{},"body":{"modules/StorageModule.html":{}}}],["configservice.get('auth.jwt.expiresin",{"_index":412,"title":{},"body":{"modules/AuthModule.html":{}}}],["configservice.get('auth.jwt.secret",{"_index":409,"title":{},"body":{"modules/AuthModule.html":{}}}],["configservice.get('aws.s3.accesskeyid",{"_index":1307,"title":{},"body":{"modules/StorageModule.html":{}}}],["configservice.get('aws.s3.region",{"_index":1311,"title":{},"body":{"modules/StorageModule.html":{}}}],["configservice.getorthrow",{"_index":1149,"title":{},"body":{"modules/PaymentModule.html":{}}}],["configservice.getorthrow('auth.jwt.secret",{"_index":1056,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["configservice.getorthrow('db.host",{"_index":136,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.getorthrow('db.logging",{"_index":155,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.getorthrow('db.name",{"_index":134,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.getorthrow('db.password",{"_index":142,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.getorthrow('db.pool.max",{"_index":150,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.getorthrow('db.pool.min",{"_index":148,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.getorthrow('db.port",{"_index":138,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.getorthrow('db.username",{"_index":140,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.getorthrow('driver.payment",{"_index":1157,"title":{},"body":{"modules/PaymentModule.html":{}}}],["configservice.getorthrow('driver.storage",{"_index":1312,"title":{},"body":{"modules/StorageModule.html":{}}}],["configservice.getorthrow('nodeenv",{"_index":145,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.getorthrow('redis.namespace",{"_index":201,"title":{},"body":{"modules/AppRedisModule.html":{}}}],["configservice.getorthrow('redis.url",{"_index":163,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRedisModule.html":{}}}],["configservice.getorthrow('smtp.auth.pass",{"_index":904,"title":{},"body":{"modules/EmailModule.html":{}}}],["configservice.getorthrow('smtp.auth.user",{"_index":903,"title":{},"body":{"modules/EmailModule.html":{}}}],["configservice.getorthrow('smtp.host",{"_index":899,"title":{},"body":{"modules/EmailModule.html":{}}}],["configservice.getorthrow('smtp.port",{"_index":900,"title":{},"body":{"modules/EmailModule.html":{}}}],["configservice.getorthrow('smtp.secure",{"_index":902,"title":{},"body":{"modules/EmailModule.html":{}}}],["configservice.getorthrow('stripe.secretkey",{"_index":1145,"title":{},"body":{"modules/PaymentModule.html":{}}}],["configuration",{"_index":86,"title":{},"body":{"modules/AppModule.html":{}}}],["configure",{"_index":73,"title":{},"body":{"modules/AppModule.html":{}}}],["configure(consumer",{"_index":74,"title":{},"body":{"modules/AppModule.html":{}}}],["confirmation",{"_index":677,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/ResetPasswordDto.html":{}}}],["confirmpassword",{"_index":380,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ChangePasswordDto.html":{},"classes/ResetPasswordDto.html":{},"injectables/UsersService.html":{}}}],["conflictexception",{"_index":1483,"title":{},"body":{"injectables/UsersService.html":{}}}],["conflictexception('user",{"_index":1492,"title":{},"body":{"injectables/UsersService.html":{}}}],["connect",{"_index":1689,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["connection",{"_index":161,"title":{},"body":{"modules/AppModule.html":{}}}],["console.error",{"_index":811,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["console.log('prometheus",{"_index":1766,"title":{},"body":{"miscellaneous/variables.html":{}}}],["console.log(chalk.green.bold",{"_index":809,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["const",{"_index":266,"title":{},"body":{"injectables/AppRedisService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CatchEverythingFilter.html":{},"injectables/CloudinaryService.html":{},"injectables/CreateUserCommand.html":{},"classes/CreateUserDto.html":{},"injectables/HttpClientService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/MorganMiddleware.html":{},"classes/PasswordResetEmailConsumer.html":{},"modules/PaymentModule.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"guards/RoleGuard.html":{},"injectables/S3Service.html":{},"injectables/SchemaService.html":{},"modules/StorageModule.html":{},"injectables/StripeService.html":{},"injectables/SuccessResponseInterceptor.html":{},"classes/UpdateProfileDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/UsersSubscriber.html":{}}}],["constructor",{"_index":213,"title":{},"body":{"injectables/AppRedisService.html":{},"injectables/AuthService.html":{},"classes/CatchEverythingFilter.html":{},"injectables/CloudinaryService.html":{},"injectables/CreateUserCommand.html":{},"classes/EmailService.html":{},"injectables/HttpClientService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/MorganMiddleware.html":{},"classes/PasswordResetEmailConsumer.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/RequestContextMiddleware.html":{},"guards/RoleGuard.html":{},"injectables/S3Service.html":{},"injectables/SchemaService.html":{},"injectables/StripeService.html":{},"injectables/UsersService.html":{},"injectables/UsersSubscriber.html":{}}}],["constructor(@inject(logger",{"_index":1083,"title":{},"body":{"injectables/MorganMiddleware.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/SuccessResponseInterceptor.html":{}}}],["constructor(appredisservice",{"_index":446,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["constructor(authservice",{"_index":1061,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["constructor(configservice",{"_index":704,"title":{},"body":{"injectables/CloudinaryService.html":{},"injectables/JwtStrategy.html":{},"injectables/S3Service.html":{},"injectables/StripeService.html":{},"injectables/UsersSubscriber.html":{}}}],["constructor(em",{"_index":761,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["constructor(emailservice",{"_index":1105,"title":{},"body":{"classes/PasswordResetEmailConsumer.html":{}}}],["constructor(httpadapterhost",{"_index":607,"title":{},"body":{"classes/CatchEverythingFilter.html":{}}}],["constructor(httpservice",{"_index":947,"title":{},"body":{"injectables/HttpClientService.html":{}}}],["constructor(loggerservice",{"_index":214,"title":{},"body":{"injectables/AppRedisService.html":{},"injectables/MorganMiddleware.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{}}}],["constructor(mailerservice",{"_index":913,"title":{},"body":{"classes/EmailService.html":{}}}],["constructor(orm",{"_index":1199,"title":{},"body":{"injectables/RequestContextMiddleware.html":{},"injectables/SchemaService.html":{}}}],["constructor(private",{"_index":169,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/JwtAuthGuard.html":{},"injectables/RequestContextMiddleware.html":{},"guards/RoleGuard.html":{},"controllers/UsersController.html":{},"injectables/UsersSubscriber.html":{}}}],["constructor(reflector",{"_index":995,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/RoleGuard.html":{}}}],["consumer",{"_index":79,"title":{},"body":{"modules/AppModule.html":{}}}],["consumer.apply(morganmiddleware).forroutes",{"_index":184,"title":{},"body":{"modules/AppModule.html":{}}}],["consumer.apply(requestcontextmiddleware).forroutes",{"_index":185,"title":{},"body":{"modules/AppModule.html":{}}}],["contenttype",{"_index":1268,"title":{},"body":{"injectables/S3Service.html":{}}}],["context",{"_index":918,"title":{},"body":{"classes/EmailService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"guards/RoleGuard.html":{},"injectables/SuccessResponseInterceptor.html":{}}}],["context.getclass",{"_index":1009,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["context.gethandler",{"_index":1008,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/RoleGuard.html":{}}}],["context.gettype",{"_index":1180,"title":{},"body":{"injectables/RequestBodyAndResponseInterceptor.html":{},"guards/RoleGuard.html":{},"injectables/SuccessResponseInterceptor.html":{}}}],["context.middleware",{"_index":123,"title":{},"body":{"modules/AppModule.html":{}}}],["context.middleware.ts",{"_index":1198,"title":{},"body":{"injectables/RequestContextMiddleware.html":{},"coverage.html":{}}}],["context.middleware.ts:6",{"_index":1201,"title":{},"body":{"injectables/RequestContextMiddleware.html":{}}}],["context.middleware.ts:9",{"_index":1204,"title":{},"body":{"injectables/RequestContextMiddleware.html":{}}}],["context.switchtohttp().getrequest",{"_index":1194,"title":{},"body":{"injectables/RequestBodyAndResponseInterceptor.html":{},"guards/RoleGuard.html":{},"injectables/SuccessResponseInterceptor.html":{}}}],["context.switchtohttp().getresponse",{"_index":1185,"title":{},"body":{"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/SuccessResponseInterceptor.html":{}}}],["contextmanager",{"_index":1755,"title":{},"body":{"miscellaneous/variables.html":{}}}],["contexttype",{"_index":1179,"title":{},"body":{"injectables/RequestBodyAndResponseInterceptor.html":{},"guards/RoleGuard.html":{},"injectables/SuccessResponseInterceptor.html":{}}}],["controller",{"_index":24,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/JwtStrategy.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":356,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('users",{"_index":1438,"title":{},"body":{"controllers/UsersController.html":{}}}],["controllers",{"_index":26,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"modules/EmailModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["country",{"_index":820,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/User.html":{}}}],["countrycode",{"_index":821,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateProfileDto.html":{},"entities/User.html":{}}}],["coverage",{"_index":1549,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":796,"title":{},"body":{"injectables/CreateUserCommand.html":{},"classes/UpdateProfileDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["create(@body",{"_index":1440,"title":{},"body":{"controllers/UsersController.html":{}}}],["create(user",{"_index":1415,"title":{},"body":{"controllers/UsersController.html":{}}}],["create(userdata",{"_index":1471,"title":{},"body":{"injectables/UsersService.html":{}}}],["create:user",{"_index":795,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["createcheckoutsession",{"_index":969,"title":{},"body":{"interfaces/IPaymentService.html":{},"injectables/StripeService.html":{}}}],["createcheckoutsession(params",{"_index":971,"title":{},"body":{"interfaces/IPaymentService.html":{},"injectables/StripeService.html":{}}}],["created",{"_index":810,"title":{},"body":{"injectables/CreateUserCommand.html":{},"classes/CreateUserResponseDto.html":{},"classes/GetProfileResponseDto.html":{},"injectables/StripeService.html":{},"controllers/UsersController.html":{}}}],["createdat",{"_index":566,"title":{},"body":{"classes/BaseEntity.html":{}}}],["createpaymentintent",{"_index":970,"title":{},"body":{"interfaces/IPaymentService.html":{},"injectables/StripeService.html":{}}}],["createpaymentintent(params",{"_index":976,"title":{},"body":{"interfaces/IPaymentService.html":{},"injectables/StripeService.html":{}}}],["createpresignedurlwithoutclient",{"_index":981,"title":{},"body":{"interfaces/IStrorageService.html":{},"injectables/S3Service.html":{}}}],["createpresignedurlwithoutclient(key",{"_index":982,"title":{},"body":{"interfaces/IStrorageService.html":{},"injectables/S3Service.html":{}}}],["createusercommand",{"_index":66,"title":{"injectables/CreateUserCommand.html":{}},"body":{"modules/AppModule.html":{},"injectables/CreateUserCommand.html":{},"coverage.html":{},"overview.html":{}}}],["createuserdto",{"_index":814,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/CreateUserDto.html":{},"classes/UpdateProfileDto.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["createuserresponsedto",{"_index":876,"title":{"classes/CreateUserResponseDto.html":{}},"body":{"classes/CreateUserResponseDto.html":{},"classes/GetProfileResponseDto.html":{},"coverage.html":{}}}],["creating",{"_index":1333,"title":{},"body":{"injectables/StripeService.html":{}}}],["creation",{"_index":576,"title":{},"body":{"classes/BaseEntity.html":{}}}],["credentials",{"_index":1069,"title":{},"body":{"injectables/LocalStrategy.html":{},"injectables/S3Service.html":{},"modules/StorageModule.html":{}}}],["ctx",{"_index":636,"title":{},"body":{"classes/CatchEverythingFilter.html":{}}}],["ctx.getrequest",{"_index":638,"title":{},"body":{"classes/CatchEverythingFilter.html":{}}}],["ctx.getresponse",{"_index":640,"title":{},"body":{"classes/CatchEverythingFilter.html":{}}}],["current_timestamp",{"_index":573,"title":{},"body":{"classes/BaseEntity.html":{}}}],["currently",{"_index":1043,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["customalphabet",{"_index":793,"title":{},"body":{"injectables/CreateUserCommand.html":{},"injectables/S3Service.html":{}}}],["customalphabet(hexadecimallowercase",{"_index":1237,"title":{},"body":{"injectables/S3Service.html":{}}}],["customalphabet(password_character_set",{"_index":787,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["data",{"_index":11,"title":{},"body":{"interfaces/ApiResponse.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/CloudinaryService.html":{},"classes/CreateUserResponseDto.html":{},"classes/GetProfileResponseDto.html":{},"injectables/HttpClientService.html":{},"interfaces/IStrorageService.html":{},"classes/PasswordResetEmailConsumer.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/S3Service.html":{},"injectables/StripeService.html":{},"injectables/SuccessResponseInterceptor.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["data.id",{"_index":1515,"title":{},"body":{"injectables/UsersService.html":{}}}],["data.object",{"_index":1344,"title":{},"body":{"injectables/StripeService.html":{}}}],["data?.email",{"_index":1121,"title":{},"body":{"classes/PasswordResetEmailConsumer.html":{}}}],["data?.firstname",{"_index":1126,"title":{},"body":{"classes/PasswordResetEmailConsumer.html":{}}}],["data?.reseturl",{"_index":1125,"title":{},"body":{"classes/PasswordResetEmailConsumer.html":{}}}],["database",{"_index":1292,"title":{},"body":{"injectables/SchemaService.html":{}}}],["date",{"_index":569,"title":{},"body":{"classes/BaseEntity.html":{},"entities/User.html":{}}}],["date().toisostring",{"_index":665,"title":{},"body":{"classes/CatchEverythingFilter.html":{}}}],["dbname",{"_index":133,"title":{},"body":{"modules/AppModule.html":{}}}],["debug",{"_index":154,"title":{},"body":{"modules/AppModule.html":{}}}],["declarations",{"_index":56,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRedisModule.html":{},"modules/AuthModule.html":{},"modules/EmailModule.html":{},"modules/HttpClientModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["decorators",{"_index":30,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/AuthResponseDto.html":{},"classes/BaseEntity.html":{},"classes/ChangePasswordDto.html":{},"injectables/CreateUserCommand.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserResponseDto.html":{},"classes/ForgotPasswordDto.html":{},"classes/GetProfileResponseDto.html":{},"classes/LoginDto.html":{},"modules/PaymentModule.html":{},"classes/RefreshTokenDto.html":{},"classes/ResetPasswordDto.html":{},"guards/RoleGuard.html":{},"injectables/StripeService.html":{},"entities/User.html":{},"controllers/UsersController.html":{}}}],["decorators/public.decorator",{"_index":346,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtAuthGuard.html":{}}}],["decrement",{"_index":207,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["decrement(key",{"_index":218,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["default",{"_index":248,"title":{},"body":{"injectables/AppRedisService.html":{},"classes/BaseEntity.html":{},"classes/CatchEverythingFilter.html":{},"injectables/CreateUserCommand.html":{},"injectables/HttpClientService.html":{},"injectables/S3Service.html":{},"injectables/SchemaService.html":{},"entities/User.html":{},"miscellaneous/variables.html":{}}}],["defaultjoboptions",{"_index":414,"title":{},"body":{"modules/AuthModule.html":{},"modules/PaymentModule.html":{}}}],["defaultraw",{"_index":572,"title":{},"body":{"classes/BaseEntity.html":{}}}],["defaults",{"_index":905,"title":{},"body":{"modules/EmailModule.html":{}}}],["defined",{"_index":36,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppRedisService.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthResponseDto.html":{},"injectables/AuthService.html":{},"classes/BaseEntity.html":{},"classes/CatchEverythingFilter.html":{},"classes/ChangePasswordDto.html":{},"injectables/CloudinaryService.html":{},"injectables/CreateUserCommand.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserResponseDto.html":{},"classes/EmailService.html":{},"classes/ForgotPasswordDto.html":{},"classes/GetProfileResponseDto.html":{},"injectables/HttpClientService.html":{},"interfaces/IPaymentService.html":{},"interfaces/IStrorageService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"injectables/MorganMiddleware.html":{},"classes/PasswordResetEmailConsumer.html":{},"modules/PaymentModule.html":{},"classes/RefreshTokenDto.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/RequestContextMiddleware.html":{},"classes/ResetPasswordDto.html":{},"guards/RoleGuard.html":{},"injectables/S3Service.html":{},"injectables/SchemaService.html":{},"modules/StorageModule.html":{},"injectables/StripeService.html":{},"injectables/SuccessResponseInterceptor.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/UsersSubscriber.html":{}}}],["delay",{"_index":419,"title":{},"body":{"modules/AuthModule.html":{},"modules/PaymentModule.html":{}}}],["delete",{"_index":208,"title":{},"body":{"injectables/AppRedisService.html":{},"classes/BaseEntity.html":{},"miscellaneous/enumerations.html":{}}}],["delete(key",{"_index":222,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["deleted",{"_index":228,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["deletedat",{"_index":567,"title":{},"body":{"classes/BaseEntity.html":{}}}],["deletemany",{"_index":209,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["deletemany(keys",{"_index":231,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["deleting",{"_index":298,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["dependencies",{"_index":54,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AppRedisModule.html":{},"modules/AuthModule.html":{},"modules/EmailModule.html":{},"modules/HttpClientModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":224,"title":{},"body":{"injectables/AppRedisService.html":{},"controllers/AuthController.html":{},"classes/AuthResponseDto.html":{},"classes/ChangePasswordDto.html":{},"injectables/CreateUserCommand.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserResponseDto.html":{},"classes/GetProfileResponseDto.html":{},"classes/LoginDto.html":{},"classes/RefreshTokenDto.html":{},"classes/ResetPasswordDto.html":{},"index.html":{},"properties.html":{}}}],["details",{"_index":1038,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["development",{"_index":1717,"title":{},"body":{"index.html":{}}}],["dictionary",{"_index":1242,"title":{},"body":{"injectables/S3Service.html":{},"dependencies.html":{}}}],["dir",{"_index":908,"title":{},"body":{"modules/EmailModule.html":{}}}],["disable",{"_index":505,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["document",{"_index":1032,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["documentation",{"_index":1550,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["doe",{"_index":864,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["doe'})@isstring()@isnotempty",{"_index":842,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["don't",{"_index":1033,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["driver",{"_index":132,"title":{},"body":{"modules/AppModule.html":{},"modules/PaymentModule.html":{},"modules/StorageModule.html":{}}}],["dto",{"_index":350,"title":{},"body":{"controllers/AuthController.html":{}}}],["dto.ts",{"_index":1161,"title":{},"body":{"classes/RefreshTokenDto.html":{},"coverage.html":{}}}],["dto.ts:11",{"_index":1164,"title":{},"body":{"classes/RefreshTokenDto.html":{}}}],["dto/change",{"_index":1434,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dto/create",{"_index":1433,"title":{},"body":{"controllers/UsersController.html":{}}}],["dto/forgot",{"_index":351,"title":{},"body":{"controllers/AuthController.html":{}}}],["dto/login.dto",{"_index":347,"title":{},"body":{"controllers/AuthController.html":{}}}],["dto/refresh",{"_index":348,"title":{},"body":{"controllers/AuthController.html":{}}}],["dto/reset",{"_index":353,"title":{},"body":{"controllers/AuthController.html":{}}}],["dto/update",{"_index":1435,"title":{},"body":{"controllers/UsersController.html":{}}}],["during",{"_index":1039,"title":{},"body":{"injectables/JwtStrategy.html":{},"classes/RefreshTokenDto.html":{}}}],["dynamicmodule",{"_index":1133,"title":{},"body":{"modules/PaymentModule.html":{},"modules/StorageModule.html":{}}}],["e",{"_index":767,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["e.g",{"_index":691,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/ResetPasswordDto.html":{}}}],["e2e",{"_index":1726,"title":{},"body":{"index.html":{}}}],["elsewhere",{"_index":1036,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["em",{"_index":764,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["email",{"_index":374,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CreateUserCommand.html":{},"classes/CreateUserDto.html":{},"classes/EmailService.html":{},"classes/ForgotPasswordDto.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"classes/PasswordResetEmailConsumer.html":{},"classes/UpdateProfileDto.html":{},"entities/User.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["email.service",{"_index":890,"title":{},"body":{"modules/EmailModule.html":{}}}],["email_from_name",{"_index":893,"title":{},"body":{"modules/EmailModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["emailmodule",{"_index":885,"title":{"modules/EmailModule.html":{}},"body":{"modules/EmailModule.html":{},"modules.html":{},"overview.html":{}}}],["emailregex",{"_index":801,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["emailregex.test(email",{"_index":803,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["emailservice",{"_index":888,"title":{"classes/EmailService.html":{}},"body":{"modules/EmailModule.html":{},"classes/EmailService.html":{},"classes/PasswordResetEmailConsumer.html":{},"coverage.html":{},"overview.html":{}}}],["emailsubjectenum",{"_index":1114,"title":{},"body":{"classes/PasswordResetEmailConsumer.html":{},"miscellaneous/enumerations.html":{}}}],["emailsubjectenum.password_reset",{"_index":1123,"title":{},"body":{"classes/PasswordResetEmailConsumer.html":{}}}],["emailtemplateenum",{"_index":1115,"title":{},"body":{"classes/PasswordResetEmailConsumer.html":{},"miscellaneous/enumerations.html":{}}}],["emailtemplateenum.password_reset",{"_index":1124,"title":{},"body":{"classes/PasswordResetEmailConsumer.html":{}}}],["enforcing",{"_index":1026,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["ensuredatabase",{"_index":144,"title":{},"body":{"modules/AppModule.html":{}}}],["entities",{"_index":1363,"title":{},"body":{"entities/User.html":{},"overview.html":{}}}],["entities/user.entity",{"_index":881,"title":{},"body":{"classes/CreateUserResponseDto.html":{},"classes/GetProfileResponseDto.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/UsersSubscriber.html":{}}}],["entity",{"_index":1362,"title":{"entities/User.html":{}},"body":{"entities/User.html":{},"coverage.html":{}}}],["entitydata",{"_index":1480,"title":{},"body":{"injectables/UsersService.html":{}}}],["entitymanager",{"_index":762,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["entityname",{"_index":1531,"title":{},"body":{"injectables/UsersSubscriber.html":{}}}],["entityrepository",{"_index":1467,"title":{},"body":{"injectables/UsersService.html":{}}}],["enum",{"_index":851,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/User.html":{}}}],["enum({items",{"_index":1394,"title":{},"body":{"entities/User.html":{}}}],["enumerations",{"_index":1679,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["err",{"_index":1003,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["error",{"_index":527,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CloudinaryService.html":{},"injectables/CreateUserCommand.html":{},"injectables/JwtAuthGuard.html":{},"miscellaneous/typealiases.html":{}}}],["error('invalid",{"_index":804,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["error(`unsupported",{"_index":1317,"title":{},"body":{"modules/StorageModule.html":{}}}],["error.message",{"_index":529,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CreateUserCommand.html":{}}}],["error.stack",{"_index":745,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["error=${error.message",{"_index":744,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["errorcode",{"_index":663,"title":{},"body":{"classes/CatchEverythingFilter.html":{},"interfaces/ErrorResponse.html":{}}}],["errorlog",{"_index":198,"title":{},"body":{"modules/AppRedisModule.html":{}}}],["errormessage",{"_index":660,"title":{},"body":{"classes/CatchEverythingFilter.html":{}}}],["errorobject",{"_index":1011,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["errorresponse",{"_index":632,"title":{"interfaces/ErrorResponse.html":{}},"body":{"classes/CatchEverythingFilter.html":{},"interfaces/ErrorResponse.html":{},"coverage.html":{}}}],["eslint",{"_index":504,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["eslint/no",{"_index":509,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["event",{"_index":1351,"title":{},"body":{"injectables/StripeService.html":{}}}],["eventargs",{"_index":1526,"title":{},"body":{"injectables/UsersSubscriber.html":{}}}],["eventid",{"_index":1347,"title":{},"body":{"injectables/StripeService.html":{}}}],["eventsubscriber",{"_index":1538,"title":{},"body":{"injectables/UsersSubscriber.html":{}}}],["evt",{"_index":1328,"title":{},"body":{"injectables/StripeService.html":{}}}],["evt?.id",{"_index":1348,"title":{},"body":{"injectables/StripeService.html":{}}}],["ex",{"_index":286,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["example",{"_index":430,"title":{},"body":{"classes/AuthResponseDto.html":{},"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserResponseDto.html":{},"classes/ForgotPasswordDto.html":{},"classes/GetProfileResponseDto.html":{},"classes/LoginDto.html":{},"classes/RefreshTokenDto.html":{},"classes/ResetPasswordDto.html":{},"index.html":{}}}],["exception",{"_index":615,"title":{},"body":{"classes/CatchEverythingFilter.html":{}}}],["exception.getresponse",{"_index":644,"title":{},"body":{"classes/CatchEverythingFilter.html":{}}}],["exception.getstatus",{"_index":669,"title":{},"body":{"classes/CatchEverythingFilter.html":{}}}],["exception.message",{"_index":646,"title":{},"body":{"classes/CatchEverythingFilter.html":{}}}],["exception.response?.status",{"_index":671,"title":{},"body":{"classes/CatchEverythingFilter.html":{}}}],["exceptionfilter",{"_index":600,"title":{},"body":{"classes/CatchEverythingFilter.html":{}}}],["exceptionresponse",{"_index":643,"title":{},"body":{"classes/CatchEverythingFilter.html":{}}}],["exceptionresponse?.error",{"_index":652,"title":{},"body":{"classes/CatchEverythingFilter.html":{}}}],["exceptionresponse?.message",{"_index":645,"title":{},"body":{"classes/CatchEverythingFilter.html":{}}}],["executioncontext",{"_index":999,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"guards/RoleGuard.html":{},"injectables/SuccessResponseInterceptor.html":{}}}],["exist",{"_index":255,"title":{},"body":{"injectables/AppRedisService.html":{},"classes/CatchEverythingFilter.html":{}}}],["existence",{"_index":295,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["exists",{"_index":210,"title":{},"body":{"injectables/AppRedisService.html":{},"injectables/UsersService.html":{}}}],["exists(key",{"_index":235,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["expiresin",{"_index":411,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/S3Service.html":{}}}],["exponential",{"_index":418,"title":{},"body":{"modules/AuthModule.html":{},"modules/PaymentModule.html":{}}}],["export",{"_index":21,"title":{},"body":{"interfaces/ApiResponse.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AppRedisModule.html":{},"injectables/AppRedisService.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/AuthResponseDto.html":{},"injectables/AuthService.html":{},"classes/BaseEntity.html":{},"classes/CatchEverythingFilter.html":{},"classes/ChangePasswordDto.html":{},"injectables/CloudinaryService.html":{},"injectables/CreateUserCommand.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserResponseDto.html":{},"modules/EmailModule.html":{},"classes/EmailService.html":{},"interfaces/ErrorResponse.html":{},"classes/ForgotPasswordDto.html":{},"classes/GetProfileResponseDto.html":{},"modules/HttpClientModule.html":{},"injectables/HttpClientService.html":{},"interfaces/IPaymentService.html":{},"interfaces/IStrorageService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"injectables/MorganMiddleware.html":{},"classes/PasswordResetEmailConsumer.html":{},"modules/PaymentModule.html":{},"classes/RefreshTokenDto.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/RequestContextMiddleware.html":{},"classes/ResetPasswordDto.html":{},"guards/RoleGuard.html":{},"injectables/S3Service.html":{},"injectables/SchemaService.html":{},"modules/StorageModule.html":{},"injectables/StripeService.html":{},"injectables/SuccessResponseInterceptor.html":{},"classes/UpdateProfileDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/UsersSubscriber.html":{}}}],["exporter",{"_index":1767,"title":{},"body":{"miscellaneous/variables.html":{}}}],["exports",{"_index":59,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRedisModule.html":{},"modules/AuthModule.html":{},"modules/EmailModule.html":{},"modules/HttpClientModule.html":{},"modules/PaymentModule.html":{},"modules/StorageModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["express",{"_index":104,"title":{},"body":{"modules/AppModule.html":{},"injectables/RequestContextMiddleware.html":{},"dependencies.html":{}}}],["expressadapter",{"_index":117,"title":{},"body":{"modules/AppModule.html":{}}}],["extends",{"_index":753,"title":{},"body":{"injectables/CreateUserCommand.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/PasswordResetEmailConsumer.html":{},"classes/UpdateProfileDto.html":{},"entities/User.html":{}}}],["extract",{"_index":1023,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt",{"_index":1048,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":1053,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["eyjhbgcioijiuzi1niisinr5cci6ikpxvcj9",{"_index":431,"title":{},"body":{"classes/AuthResponseDto.html":{},"classes/RefreshTokenDto.html":{},"classes/ResetPasswordDto.html":{}}}],["eyjhbgcioijiuzi1niisinr5cci6ikpxvcj9'})@isstring()@isnotempty",{"_index":1163,"title":{},"body":{"classes/RefreshTokenDto.html":{}}}],["eyjhbgcioijiuzi1niisinr5cci6ikpxvcj9...'})@isstring()@isjwt()@isnotempty",{"_index":1212,"title":{},"body":{"classes/ResetPasswordDto.html":{}}}],["f",{"_index":772,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["failed",{"_index":743,"title":{},"body":{"injectables/CloudinaryService.html":{},"injectables/CreateUserCommand.html":{}}}],["failhandler",{"_index":500,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/UsersService.html":{}}}],["false",{"_index":253,"title":{},"body":{"injectables/AppRedisService.html":{},"injectables/AuthService.html":{},"injectables/HttpClientService.html":{},"injectables/JwtStrategy.html":{},"entities/User.html":{},"injectables/UsersService.html":{}}}],["fetched",{"_index":884,"title":{},"body":{"classes/CreateUserResponseDto.html":{},"classes/GetProfileResponseDto.html":{},"controllers/UsersController.html":{}}}],["file",{"_index":5,"title":{},"body":{"interfaces/ApiResponse.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AppRedisModule.html":{},"injectables/AppRedisService.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/AuthResponseDto.html":{},"injectables/AuthService.html":{},"classes/BaseEntity.html":{},"classes/CatchEverythingFilter.html":{},"classes/ChangePasswordDto.html":{},"injectables/CloudinaryService.html":{},"injectables/CreateUserCommand.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserResponseDto.html":{},"modules/EmailModule.html":{},"classes/EmailService.html":{},"interfaces/ErrorResponse.html":{},"classes/ForgotPasswordDto.html":{},"classes/GetProfileResponseDto.html":{},"modules/HttpClientModule.html":{},"injectables/HttpClientService.html":{},"interfaces/IPaymentService.html":{},"interfaces/IStrorageService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"injectables/MorganMiddleware.html":{},"classes/PasswordResetEmailConsumer.html":{},"modules/PaymentModule.html":{},"classes/RefreshTokenDto.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/RequestContextMiddleware.html":{},"classes/ResetPasswordDto.html":{},"guards/RoleGuard.html":{},"injectables/S3Service.html":{},"injectables/SchemaService.html":{},"modules/StorageModule.html":{},"injectables/StripeService.html":{},"injectables/SuccessResponseInterceptor.html":{},"classes/UpdateProfileDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/UsersSubscriber.html":{},"coverage.html":{}}}],["file.buffer",{"_index":1267,"title":{},"body":{"injectables/S3Service.html":{}}}],["file.mimetype",{"_index":1269,"title":{},"body":{"injectables/S3Service.html":{}}}],["filecategory",{"_index":708,"title":{},"body":{"injectables/CloudinaryService.html":{},"interfaces/IStrorageService.html":{},"injectables/S3Service.html":{}}}],["filecategory}/${this.nanoid()}_${file.originalname",{"_index":1263,"title":{},"body":{"injectables/S3Service.html":{}}}],["filename=\"${file.originalname",{"_index":731,"title":{},"body":{"injectables/CloudinaryService.html":{},"injectables/S3Service.html":{}}}],["filter",{"_index":590,"title":{},"body":{"classes/BaseEntity.html":{}}}],["filterquery",{"_index":1475,"title":{},"body":{"injectables/UsersService.html":{}}}],["find",{"_index":651,"title":{},"body":{"classes/CatchEverythingFilter.html":{}}}],["findone",{"_index":1465,"title":{},"body":{"injectables/UsersService.html":{}}}],["findone(query",{"_index":1474,"title":{},"body":{"injectables/UsersService.html":{}}}],["findoneorfailoptions",{"_index":1476,"title":{},"body":{"injectables/UsersService.html":{}}}],["first",{"_index":773,"title":{},"body":{"injectables/CreateUserCommand.html":{},"classes/CreateUserDto.html":{},"entities/User.html":{}}}],["firstname",{"_index":549,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CreateUserCommand.html":{},"classes/CreateUserDto.html":{},"classes/PasswordResetEmailConsumer.html":{},"entities/User.html":{}}}],["flags",{"_index":813,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["folder",{"_index":739,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["forbiddenexception",{"_index":628,"title":{},"body":{"classes/CatchEverythingFilter.html":{},"guards/RoleGuard.html":{},"miscellaneous/typealiases.html":{}}}],["forceutctimezone",{"_index":151,"title":{},"body":{"modules/AppModule.html":{}}}],["forgotpassword",{"_index":309,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["forgotpassword(body",{"_index":313,"title":{},"body":{"controllers/AuthController.html":{}}}],["forgotpassword(email",{"_index":452,"title":{},"body":{"injectables/AuthService.html":{}}}],["forgotpassworddto",{"_index":314,"title":{"classes/ForgotPasswordDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/ForgotPasswordDto.html":{},"coverage.html":{}}}],["forkedem",{"_index":799,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["forkedem.transactional(async",{"_index":806,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["form",{"_index":722,"title":{},"body":{"injectables/CloudinaryService.html":{},"interfaces/IStrorageService.html":{},"injectables/S3Service.html":{},"dependencies.html":{}}}],["format",{"_index":805,"title":{},"body":{"injectables/CreateUserCommand.html":{},"injectables/S3Service.html":{},"dependencies.html":{}}}],["formaturl",{"_index":1257,"title":{},"body":{"injectables/S3Service.html":{}}}],["formaturl(signedurlobject",{"_index":1281,"title":{},"body":{"injectables/S3Service.html":{}}}],["forroutes",{"_index":183,"title":{},"body":{"modules/AppModule.html":{}}}],["found",{"_index":282,"title":{},"body":{"injectables/AppRedisService.html":{},"injectables/AuthService.html":{},"classes/CatchEverythingFilter.html":{},"injectables/JwtStrategy.html":{},"injectables/UsersService.html":{}}}],["framework",{"_index":1710,"title":{},"body":{"index.html":{}}}],["fromenv",{"_index":1250,"title":{},"body":{"injectables/S3Service.html":{}}}],["function",{"_index":1080,"title":{},"body":{"injectables/MorganMiddleware.html":{},"coverage.html":{}}}],["functions",{"_index":1695,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["generateslug",{"_index":1568,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["generateslug(text",{"_index":1702,"title":{},"body":{"miscellaneous/functions.html":{}}}],["generator",{"_index":1289,"title":{},"body":{"injectables/SchemaService.html":{}}}],["generator.updateschema",{"_index":1291,"title":{},"body":{"injectables/SchemaService.html":{}}}],["get('profile",{"_index":1444,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('profile')@httpcode(httpstatus.ok)@apioperation({summary",{"_index":1423,"title":{},"body":{"controllers/UsersController.html":{}}}],["get()@httpcode(httpstatus.ok)@public()@apioperation({summary",{"_index":31,"title":{},"body":{"controllers/AppController.html":{}}}],["get(key",{"_index":237,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["geterrorcode",{"_index":602,"title":{},"body":{"classes/CatchEverythingFilter.html":{}}}],["geterrorcode(exception",{"_index":616,"title":{},"body":{"classes/CatchEverythingFilter.html":{}}}],["geterrormessage",{"_index":603,"title":{},"body":{"classes/CatchEverythingFilter.html":{}}}],["geterrormessage(exception",{"_index":619,"title":{},"body":{"classes/CatchEverythingFilter.html":{}}}],["geterrorname",{"_index":604,"title":{},"body":{"classes/CatchEverythingFilter.html":{}}}],["geterrorname(exception",{"_index":621,"title":{},"body":{"classes/CatchEverythingFilter.html":{}}}],["gethello",{"_index":302,"title":{},"body":{"injectables/AppService.html":{}}}],["gethttpstatus",{"_index":605,"title":{},"body":{"classes/CatchEverythingFilter.html":{}}}],["gethttpstatus(exception",{"_index":623,"title":{},"body":{"classes/CatchEverythingFilter.html":{}}}],["getnodeautoinstrumentations",{"_index":1764,"title":{},"body":{"miscellaneous/variables.html":{}}}],["getprofile",{"_index":1410,"title":{},"body":{"controllers/UsersController.html":{}}}],["getprofile(@request",{"_index":1445,"title":{},"body":{"controllers/UsersController.html":{}}}],["getprofile(req",{"_index":1422,"title":{},"body":{"controllers/UsersController.html":{}}}],["getprofileresponsedto",{"_index":882,"title":{"classes/GetProfileResponseDto.html":{}},"body":{"classes/CreateUserResponseDto.html":{},"classes/GetProfileResponseDto.html":{},"coverage.html":{}}}],["getqueuetoken",{"_index":1142,"title":{},"body":{"modules/PaymentModule.html":{}}}],["getqueuetoken(template_queue_name",{"_index":1159,"title":{},"body":{"modules/PaymentModule.html":{}}}],["gets3connectiontoken",{"_index":1303,"title":{},"body":{"modules/StorageModule.html":{}}}],["getsubscribedentities",{"_index":1521,"title":{},"body":{"injectables/UsersSubscriber.html":{}}}],["getting",{"_index":281,"title":{"index.html":{}},"body":{"injectables/AppRedisService.html":{}}}],["global",{"_index":407,"title":{},"body":{"modules/AuthModule.html":{}}}],["golevelup/nestjs",{"_index":108,"title":{},"body":{"modules/AppModule.html":{},"modules/PaymentModule.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"guards/RoleGuard.html":{},"injectables/StripeService.html":{},"injectables/SuccessResponseInterceptor.html":{},"dependencies.html":{}}}],["graph",{"_index":1732,"title":{},"body":{"modules.html":{}}}],["guard",{"_index":1216,"title":{"guards/RoleGuard.html":{}},"body":{"coverage.html":{},"overview.html":{}}}],["guards",{"_index":1218,"title":{},"body":{"guards/RoleGuard.html":{}}}],["guards/jwt",{"_index":400,"title":{},"body":{"modules/AuthModule.html":{}}}],["guards/local",{"_index":342,"title":{},"body":{"controllers/AuthController.html":{}}}],["handledexception",{"_index":612,"title":{},"body":{"classes/CatchEverythingFilter.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["handlepaymentintentsucceeded",{"_index":1320,"title":{},"body":{"injectables/StripeService.html":{}}}],["handlepaymentintentsucceeded(evt",{"_index":1324,"title":{},"body":{"injectables/StripeService.html":{}}}],["handlerequest",{"_index":994,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["handlerequest(err",{"_index":1001,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["hash",{"_index":1252,"title":{},"body":{"injectables/S3Service.html":{}}}],["hash.bind(null",{"_index":1278,"title":{},"body":{"injectables/S3Service.html":{}}}],["hashed",{"_index":1386,"title":{},"body":{"entities/User.html":{}}}],["hashedpassword",{"_index":562,"title":{},"body":{"injectables/AuthService.html":{}}}],["hashpassword",{"_index":1522,"title":{},"body":{"injectables/UsersSubscriber.html":{}}}],["hashpassword(user",{"_index":1532,"title":{},"body":{"injectables/UsersSubscriber.html":{}}}],["head",{"_index":1687,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["hello",{"_index":304,"title":{},"body":{"injectables/AppService.html":{}}}],["helmet",{"_index":1651,"title":{},"body":{"dependencies.html":{}}}],["here",{"_index":1022,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["hexadecimallowercase",{"_index":1241,"title":{},"body":{"injectables/S3Service.html":{}}}],["hooks",{"_index":1621,"title":{},"body":{"dependencies.html":{}}}],["host",{"_index":135,"title":{},"body":{"modules/AppModule.html":{},"classes/CatchEverythingFilter.html":{},"modules/EmailModule.html":{}}}],["host.switchtohttp",{"_index":637,"title":{},"body":{"classes/CatchEverythingFilter.html":{}}}],["http",{"_index":941,"title":{},"body":{"modules/HttpClientModule.html":{},"injectables/HttpClientService.html":{},"injectables/MorganMiddleware.html":{},"injectables/S3Service.html":{},"dependencies.html":{}}}],["http.agent",{"_index":953,"title":{},"body":{"injectables/HttpClientService.html":{}}}],["httpadapter",{"_index":634,"title":{},"body":{"classes/CatchEverythingFilter.html":{}}}],["httpadapter.getrequesturl(request",{"_index":642,"title":{},"body":{"classes/CatchEverythingFilter.html":{}}}],["httpadapter.reply(response",{"_index":658,"title":{},"body":{"classes/CatchEverythingFilter.html":{}}}],["httpadapterhost",{"_index":608,"title":{},"body":{"classes/CatchEverythingFilter.html":{}}}],["httpagent",{"_index":944,"title":{},"body":{"injectables/HttpClientService.html":{}}}],["httpclientmodule",{"_index":931,"title":{"modules/HttpClientModule.html":{}},"body":{"modules/HttpClientModule.html":{},"modules.html":{},"overview.html":{}}}],["httpclientservice",{"_index":935,"title":{"injectables/HttpClientService.html":{}},"body":{"modules/HttpClientModule.html":{},"injectables/HttpClientService.html":{},"coverage.html":{},"overview.html":{}}}],["httpclientservice.name",{"_index":965,"title":{},"body":{"injectables/HttpClientService.html":{}}}],["httpcode",{"_index":40,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["httpcode(httpstatus.ok",{"_index":48,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["httpexception",{"_index":627,"title":{},"body":{"classes/CatchEverythingFilter.html":{},"miscellaneous/typealiases.html":{}}}],["httpmethod",{"_index":1272,"title":{},"body":{"injectables/S3Service.html":{}}}],["httpmodule",{"_index":939,"title":{},"body":{"modules/HttpClientModule.html":{}}}],["httprequest",{"_index":1255,"title":{},"body":{"injectables/S3Service.html":{}}}],["httprequestmethodenum",{"_index":983,"title":{},"body":{"interfaces/IStrorageService.html":{},"injectables/S3Service.html":{},"miscellaneous/enumerations.html":{}}}],["httprequestmethodenum.get",{"_index":1273,"title":{},"body":{"injectables/S3Service.html":{}}}],["httpresponse",{"_index":1184,"title":{},"body":{"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/SuccessResponseInterceptor.html":{}}}],["httpresponse.statuscode",{"_index":1189,"title":{},"body":{"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/SuccessResponseInterceptor.html":{}}}],["https",{"_index":957,"title":{},"body":{"injectables/HttpClientService.html":{}}}],["https.agent",{"_index":956,"title":{},"body":{"injectables/HttpClientService.html":{}}}],["https://${this.s3bucket}.s3.${this.s3region}.amazonaws.com/${key",{"_index":1270,"title":{},"body":{"injectables/S3Service.html":{}}}],["httpsagent",{"_index":945,"title":{},"body":{"injectables/HttpClientService.html":{}}}],["httpservice",{"_index":948,"title":{},"body":{"injectables/HttpClientService.html":{}}}],["httpstatus",{"_index":18,"title":{},"body":{"interfaces/ApiResponse.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/CatchEverythingFilter.html":{},"controllers/UsersController.html":{}}}],["httpstatus.bad_gateway",{"_index":672,"title":{},"body":{"classes/CatchEverythingFilter.html":{}}}],["httpstatus.created",{"_index":1443,"title":{},"body":{"controllers/UsersController.html":{}}}],["httpstatus.not_found",{"_index":654,"title":{},"body":{"classes/CatchEverythingFilter.html":{}}}],["httpstatus.ok",{"_index":364,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["i.e",{"_index":1034,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["ianatimezonedatabaseenum",{"_index":1681,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["id",{"_index":536,"title":{},"body":{"injectables/AuthService.html":{},"classes/BaseEntity.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/StripeService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["id=\"${intent.id",{"_index":1352,"title":{},"body":{"injectables/StripeService.html":{}}}],["identifier",{"_index":1551,"title":{},"body":{"coverage.html":{}}}],["ignoreexpiration",{"_index":1054,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["illinois",{"_index":867,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["illinois'})@isstring()@isoptional",{"_index":854,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["implementation",{"_index":1037,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["implemented",{"_index":1041,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["implements",{"_index":168,"title":{},"body":{"modules/AppModule.html":{},"classes/CatchEverythingFilter.html":{},"injectables/CloudinaryService.html":{},"injectables/MorganMiddleware.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/RequestContextMiddleware.html":{},"guards/RoleGuard.html":{},"injectables/S3Service.html":{},"injectables/SchemaService.html":{},"injectables/StripeService.html":{},"injectables/SuccessResponseInterceptor.html":{},"injectables/UsersSubscriber.html":{}}}],["import",{"_index":19,"title":{},"body":{"interfaces/ApiResponse.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AppRedisModule.html":{},"injectables/AppRedisService.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/AuthResponseDto.html":{},"injectables/AuthService.html":{},"classes/BaseEntity.html":{},"classes/CatchEverythingFilter.html":{},"classes/ChangePasswordDto.html":{},"injectables/CloudinaryService.html":{},"injectables/CreateUserCommand.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserResponseDto.html":{},"modules/EmailModule.html":{},"classes/EmailService.html":{},"classes/ForgotPasswordDto.html":{},"classes/GetProfileResponseDto.html":{},"modules/HttpClientModule.html":{},"injectables/HttpClientService.html":{},"interfaces/IPaymentService.html":{},"interfaces/IStrorageService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"injectables/MorganMiddleware.html":{},"classes/PasswordResetEmailConsumer.html":{},"modules/PaymentModule.html":{},"classes/RefreshTokenDto.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/RequestContextMiddleware.html":{},"classes/ResetPasswordDto.html":{},"guards/RoleGuard.html":{},"injectables/S3Service.html":{},"injectables/SchemaService.html":{},"modules/StorageModule.html":{},"injectables/StripeService.html":{},"injectables/SuccessResponseInterceptor.html":{},"classes/UpdateProfileDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/UsersSubscriber.html":{}}}],["imports",{"_index":72,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRedisModule.html":{},"modules/AuthModule.html":{},"modules/EmailModule.html":{},"modules/HttpClientModule.html":{},"modules/PaymentModule.html":{},"modules/StorageModule.html":{},"modules/UsersModule.html":{}}}],["include",{"_index":687,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/ResetPasswordDto.html":{}}}],["increment",{"_index":211,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["increment(key",{"_index":239,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["incrresult",{"_index":289,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["incrresult[1",{"_index":291,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["index",{"_index":8,"title":{"index.html":{}},"body":{"interfaces/ApiResponse.html":{},"controllers/AppController.html":{},"injectables/AppRedisService.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthResponseDto.html":{},"injectables/AuthService.html":{},"classes/BaseEntity.html":{},"classes/CatchEverythingFilter.html":{},"classes/ChangePasswordDto.html":{},"injectables/CloudinaryService.html":{},"injectables/CreateUserCommand.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserResponseDto.html":{},"classes/EmailService.html":{},"interfaces/ErrorResponse.html":{},"classes/ForgotPasswordDto.html":{},"classes/GetProfileResponseDto.html":{},"injectables/HttpClientService.html":{},"interfaces/IPaymentService.html":{},"interfaces/IStrorageService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"injectables/MorganMiddleware.html":{},"classes/PasswordResetEmailConsumer.html":{},"classes/RefreshTokenDto.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/RequestContextMiddleware.html":{},"classes/ResetPasswordDto.html":{},"guards/RoleGuard.html":{},"injectables/S3Service.html":{},"injectables/SchemaService.html":{},"injectables/StripeService.html":{},"injectables/SuccessResponseInterceptor.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/UsersSubscriber.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["indicating",{"_index":433,"title":{},"body":{"classes/AuthResponseDto.html":{},"classes/CreateUserResponseDto.html":{},"classes/GetProfileResponseDto.html":{}}}],["inestapplication",{"_index":1707,"title":{},"body":{"miscellaneous/functions.html":{}}}],["info",{"_index":3,"title":{},"body":{"interfaces/ApiResponse.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AppRedisModule.html":{},"injectables/AppRedisService.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/AuthResponseDto.html":{},"injectables/AuthService.html":{},"classes/BaseEntity.html":{},"classes/CatchEverythingFilter.html":{},"classes/ChangePasswordDto.html":{},"injectables/CloudinaryService.html":{},"injectables/CreateUserCommand.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserResponseDto.html":{},"modules/EmailModule.html":{},"classes/EmailService.html":{},"interfaces/ErrorResponse.html":{},"classes/ForgotPasswordDto.html":{},"classes/GetProfileResponseDto.html":{},"modules/HttpClientModule.html":{},"injectables/HttpClientService.html":{},"interfaces/IPaymentService.html":{},"interfaces/IStrorageService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"injectables/MorganMiddleware.html":{},"classes/PasswordResetEmailConsumer.html":{},"modules/PaymentModule.html":{},"classes/RefreshTokenDto.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/RequestContextMiddleware.html":{},"classes/ResetPasswordDto.html":{},"guards/RoleGuard.html":{},"injectables/S3Service.html":{},"injectables/SchemaService.html":{},"modules/StorageModule.html":{},"injectables/StripeService.html":{},"injectables/SuccessResponseInterceptor.html":{},"classes/UpdateProfileDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/UsersSubscriber.html":{}}}],["info?.message",{"_index":1013,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["info?.name",{"_index":1012,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["initialized",{"_index":1768,"title":{},"body":{"miscellaneous/variables.html":{}}}],["inject",{"_index":159,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRedisModule.html":{},"injectables/AppRedisService.html":{},"modules/AuthModule.html":{},"classes/CatchEverythingFilter.html":{},"injectables/CloudinaryService.html":{},"modules/EmailModule.html":{},"classes/EmailService.html":{},"injectables/HttpClientService.html":{},"injectables/MorganMiddleware.html":{},"classes/PasswordResetEmailConsumer.html":{},"modules/PaymentModule.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/S3Service.html":{},"injectables/SchemaService.html":{},"modules/StorageModule.html":{},"injectables/StripeService.html":{},"injectables/SuccessResponseInterceptor.html":{}}}],["inject(logger",{"_index":261,"title":{},"body":{"injectables/AppRedisService.html":{},"classes/CatchEverythingFilter.html":{},"injectables/CloudinaryService.html":{},"classes/EmailService.html":{},"injectables/HttpClientService.html":{},"classes/PasswordResetEmailConsumer.html":{},"injectables/S3Service.html":{},"injectables/SchemaService.html":{},"injectables/StripeService.html":{}}}],["inject(mailerservice",{"_index":920,"title":{},"body":{"classes/EmailService.html":{}}}],["injectable",{"_index":202,"title":{"injectables/AppRedisService.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/CloudinaryService.html":{},"injectables/CreateUserCommand.html":{},"injectables/HttpClientService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/MorganMiddleware.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/RequestContextMiddleware.html":{},"injectables/S3Service.html":{},"injectables/SchemaService.html":{},"injectables/StripeService.html":{},"injectables/SuccessResponseInterceptor.html":{},"injectables/UsersService.html":{},"injectables/UsersSubscriber.html":{}},"body":{"injectables/AppRedisService.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/CloudinaryService.html":{},"injectables/CreateUserCommand.html":{},"injectables/HttpClientService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/MorganMiddleware.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/RequestContextMiddleware.html":{},"guards/RoleGuard.html":{},"injectables/S3Service.html":{},"injectables/SchemaService.html":{},"injectables/StripeService.html":{},"injectables/SuccessResponseInterceptor.html":{},"injectables/UsersService.html":{},"injectables/UsersSubscriber.html":{},"coverage.html":{}}}],["injectables",{"_index":203,"title":{},"body":{"injectables/AppRedisService.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/CloudinaryService.html":{},"injectables/CreateUserCommand.html":{},"injectables/HttpClientService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/MorganMiddleware.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/RequestContextMiddleware.html":{},"injectables/S3Service.html":{},"injectables/SchemaService.html":{},"injectables/StripeService.html":{},"injectables/SuccessResponseInterceptor.html":{},"injectables/UsersService.html":{},"injectables/UsersSubscriber.html":{},"overview.html":{}}}],["injectqueue",{"_index":477,"title":{},"body":{"injectables/AuthService.html":{},"injectables/StripeService.html":{}}}],["injectqueue(password_reset_email_queue_name",{"_index":483,"title":{},"body":{"injectables/AuthService.html":{}}}],["injectqueue(template_queue_name",{"_index":1332,"title":{},"body":{"injectables/StripeService.html":{}}}],["injectrepository",{"_index":1484,"title":{},"body":{"injectables/UsersService.html":{}}}],["injectrepository(user",{"_index":1485,"title":{},"body":{"injectables/UsersService.html":{}}}],["injects3",{"_index":1240,"title":{},"body":{"injectables/S3Service.html":{}}}],["injectstripeclient",{"_index":1329,"title":{},"body":{"injectables/StripeService.html":{}}}],["inputs",{"_index":786,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["installcompile",{"_index":1716,"title":{},"body":{"index.html":{}}}],["instanceof",{"_index":528,"title":{},"body":{"injectables/AuthService.html":{},"classes/CatchEverythingFilter.html":{}}}],["instrumentations",{"_index":1618,"title":{},"body":{"dependencies.html":{},"miscellaneous/variables.html":{}}}],["intent",{"_index":1340,"title":{},"body":{"injectables/StripeService.html":{}}}],["intent.ts",{"_index":1586,"title":{},"body":{"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["intercept",{"_index":1167,"title":{},"body":{"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/SuccessResponseInterceptor.html":{}}}],["intercept(context",{"_index":1169,"title":{},"body":{"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/SuccessResponseInterceptor.html":{}}}],["interface",{"_index":0,"title":{"interfaces/ApiResponse.html":{},"interfaces/ErrorResponse.html":{},"interfaces/IPaymentService.html":{},"interfaces/IStrorageService.html":{}},"body":{"interfaces/ApiResponse.html":{},"interfaces/ErrorResponse.html":{},"interfaces/IPaymentService.html":{},"interfaces/IStrorageService.html":{},"coverage.html":{}}}],["interfaces",{"_index":2,"title":{},"body":{"interfaces/ApiResponse.html":{},"interfaces/ErrorResponse.html":{},"interfaces/IPaymentService.html":{},"interfaces/IStrorageService.html":{},"overview.html":{}}}],["interfaces/error",{"_index":633,"title":{},"body":{"classes/CatchEverythingFilter.html":{}}}],["interfaces/payment.interface",{"_index":1331,"title":{},"body":{"injectables/StripeService.html":{}}}],["interfaces/storage.interface",{"_index":719,"title":{},"body":{"injectables/CloudinaryService.html":{},"injectables/S3Service.html":{}}}],["ioredis",{"_index":260,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["ipaymentservice",{"_index":967,"title":{"interfaces/IPaymentService.html":{}},"body":{"interfaces/IPaymentService.html":{},"injectables/StripeService.html":{},"coverage.html":{}}}],["is_public_key",{"_index":1005,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["isblacklisted",{"_index":519,"title":{},"body":{"injectables/AuthService.html":{}}}],["isboolean",{"_index":856,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isboolean()@isoptional",{"_index":830,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isemail",{"_index":857,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/ForgotPasswordDto.html":{},"classes/LoginDto.html":{}}}],["isenum",{"_index":858,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isenum(userroleenum",{"_index":873,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isglobal",{"_index":125,"title":{},"body":{"modules/AppModule.html":{}}}],["isjwt",{"_index":1214,"title":{},"body":{"classes/ResetPasswordDto.html":{}}}],["isnotempty",{"_index":696,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/RefreshTokenDto.html":{},"classes/ResetPasswordDto.html":{}}}],["iso",{"_index":1378,"title":{},"body":{"entities/User.html":{}}}],["isoptional",{"_index":859,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["ispasswordmodified",{"_index":1523,"title":{},"body":{"injectables/UsersSubscriber.html":{}}}],["ispasswordmodified(user",{"_index":1534,"title":{},"body":{"injectables/UsersSubscriber.html":{}}}],["ispublic",{"_index":1006,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"miscellaneous/variables.html":{}}}],["isroutingerror",{"_index":647,"title":{},"body":{"classes/CatchEverythingFilter.html":{}}}],["isstring",{"_index":697,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/RefreshTokenDto.html":{},"classes/ResetPasswordDto.html":{}}}],["istrorageservice",{"_index":718,"title":{"interfaces/IStrorageService.html":{}},"body":{"injectables/CloudinaryService.html":{},"interfaces/IStrorageService.html":{},"injectables/S3Service.html":{},"coverage.html":{}}}],["it's",{"_index":1046,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["items",{"_index":1405,"title":{},"body":{"entities/User.html":{}}}],["jaeger",{"_index":1629,"title":{},"body":{"dependencies.html":{}}}],["jaegerpropagator",{"_index":1760,"title":{},"body":{"miscellaneous/variables.html":{}}}],["job",{"_index":1108,"title":{},"body":{"classes/PasswordResetEmailConsumer.html":{}}}],["job.id",{"_index":1120,"title":{},"body":{"classes/PasswordResetEmailConsumer.html":{}}}],["john",{"_index":863,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["john'})@isstring()@isnotempty",{"_index":840,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["join",{"_index":896,"title":{},"body":{"modules/EmailModule.html":{}}}],["join(process.cwd",{"_index":909,"title":{},"body":{"modules/EmailModule.html":{}}}],["js",{"_index":34,"title":{},"body":{"controllers/AppController.html":{}}}],["json.parse(cached",{"_index":1505,"title":{},"body":{"injectables/UsersService.html":{}}}],["json.stringify(serializable",{"_index":1512,"title":{},"body":{"injectables/UsersService.html":{}}}],["json.stringify(user",{"_index":1518,"title":{},"body":{"injectables/UsersService.html":{}}}],["jsonwebtokenerror",{"_index":474,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwt",{"_index":530,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["jwtauthguard",{"_index":399,"title":{"injectables/JwtAuthGuard.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["jwtexpiresin",{"_index":439,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtfromrequest",{"_index":1052,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtmodule",{"_index":393,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.registerasync",{"_index":406,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtnotbefore",{"_index":440,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtrefreshexpriresin",{"_index":441,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtrefreshsecret",{"_index":442,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtservice",{"_index":448,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtstrategy",{"_index":386,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["keepalive",{"_index":954,"title":{},"body":{"injectables/HttpClientService.html":{}}}],["key",{"_index":220,"title":{},"body":{"injectables/AppRedisService.html":{},"interfaces/IStrorageService.html":{},"injectables/S3Service.html":{}}}],["key=${key",{"_index":1271,"title":{},"body":{"injectables/S3Service.html":{}}}],["keys",{"_index":227,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["keys.length",{"_index":299,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["l",{"_index":776,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["lagos",{"_index":1690,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["last",{"_index":587,"title":{},"body":{"classes/BaseEntity.html":{},"injectables/CreateUserCommand.html":{},"classes/CreateUserDto.html":{},"entities/User.html":{}}}],["lastloggedin",{"_index":1070,"title":{},"body":{"injectables/LocalStrategy.html":{},"entities/User.html":{}}}],["lastname",{"_index":798,"title":{},"body":{"injectables/CreateUserCommand.html":{},"classes/CreateUserDto.html":{},"entities/User.html":{}}}],["lastvaluefrom",{"_index":958,"title":{},"body":{"injectables/HttpClientService.html":{}}}],["lastvaluefrom(this.httpservice.request",{"_index":966,"title":{},"body":{"injectables/HttpClientService.html":{}}}],["legend",{"_index":55,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRedisModule.html":{},"modules/AuthModule.html":{},"modules/EmailModule.html":{},"modules/HttpClientModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["length",{"_index":1090,"title":{},"body":{"injectables/MorganMiddleware.html":{},"entities/User.html":{}}}],["level",{"_index":1045,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["liaoliaots/nestjs",{"_index":194,"title":{},"body":{"modules/AppRedisModule.html":{},"injectables/AppRedisService.html":{},"dependencies.html":{}}}],["license",{"_index":1739,"title":{},"body":{"properties.html":{}}}],["limit",{"_index":1703,"title":{},"body":{"miscellaneous/functions.html":{}}}],["line",{"_index":507,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["literal",{"_index":39,"title":{},"body":{"controllers/AppController.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["live",{"_index":251,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["load",{"_index":127,"title":{},"body":{"modules/AppModule.html":{}}}],["local",{"_index":1065,"title":{},"body":{"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["localauthguard",{"_index":341,"title":{"injectables/LocalAuthGuard.html":{}},"body":{"controllers/AuthController.html":{},"injectables/LocalAuthGuard.html":{},"coverage.html":{}}}],["localstrategy",{"_index":387,"title":{"injectables/LocalStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/LocalStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["logged",{"_index":1035,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["logger",{"_index":81,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRedisModule.html":{},"injectables/AppRedisService.html":{},"classes/CatchEverythingFilter.html":{},"injectables/CloudinaryService.html":{},"modules/EmailModule.html":{},"classes/EmailService.html":{},"modules/HttpClientModule.html":{},"injectables/HttpClientService.html":{},"injectables/MorganMiddleware.html":{},"classes/PasswordResetEmailConsumer.html":{},"modules/PaymentModule.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/S3Service.html":{},"injectables/SchemaService.html":{},"modules/StorageModule.html":{},"injectables/StripeService.html":{},"injectables/SuccessResponseInterceptor.html":{}}}],["logger(schemaservice.name",{"_index":1286,"title":{},"body":{"injectables/SchemaService.html":{}}}],["loggercontext",{"_index":601,"title":{},"body":{"classes/CatchEverythingFilter.html":{}}}],["loggerservice",{"_index":215,"title":{},"body":{"injectables/AppRedisService.html":{},"classes/CatchEverythingFilter.html":{},"injectables/CloudinaryService.html":{},"classes/EmailService.html":{},"injectables/HttpClientService.html":{},"injectables/MorganMiddleware.html":{},"classes/PasswordResetEmailConsumer.html":{},"modules/PaymentModule.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/S3Service.html":{},"injectables/SchemaService.html":{},"modules/StorageModule.html":{},"injectables/StripeService.html":{},"injectables/SuccessResponseInterceptor.html":{}}}],["loggingconfiguration",{"_index":1153,"title":{},"body":{"modules/PaymentModule.html":{}}}],["logic",{"_index":1040,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["login",{"_index":310,"title":{},"body":{"controllers/AuthController.html":{},"classes/AuthResponseDto.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/RefreshTokenDto.html":{},"entities/User.html":{}}}],["login'})@apibody({type",{"_index":323,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(@request",{"_index":359,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(req",{"_index":321,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(user",{"_index":454,"title":{},"body":{"injectables/AuthService.html":{}}}],["logindto",{"_index":324,"title":{"classes/LoginDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/LoginDto.html":{},"coverage.html":{}}}],["logmatchingeventhandlers",{"_index":1154,"title":{},"body":{"modules/PaymentModule.html":{}}}],["long",{"_index":686,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/ResetPasswordDto.html":{}}}],["lowercase",{"_index":689,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/ResetPasswordDto.html":{}}}],["mailermodule",{"_index":891,"title":{},"body":{"modules/EmailModule.html":{}}}],["mailermodule.forrootasync",{"_index":897,"title":{},"body":{"modules/EmailModule.html":{}}}],["mailerservice",{"_index":914,"title":{},"body":{"classes/EmailService.html":{}}}],["main",{"_index":826,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["makehttprequest",{"_index":946,"title":{},"body":{"injectables/HttpClientService.html":{}}}],["makehttprequest(url",{"_index":950,"title":{},"body":{"injectables/HttpClientService.html":{}}}],["making",{"_index":964,"title":{},"body":{"injectables/HttpClientService.html":{}}}],["malformed",{"_index":531,"title":{},"body":{"injectables/AuthService.html":{}}}],["map",{"_index":1175,"title":{},"body":{"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/SuccessResponseInterceptor.html":{}}}],["map((response",{"_index":1183,"title":{},"body":{"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/SuccessResponseInterceptor.html":{}}}],["match",{"_index":554,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/UsersService.html":{}}}],["matches",{"_index":698,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/ResetPasswordDto.html":{}}}],["matching",{"_index":23,"title":{},"body":{"interfaces/ApiResponse.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AppRedisModule.html":{},"injectables/AppRedisService.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/AuthResponseDto.html":{},"injectables/AuthService.html":{},"classes/BaseEntity.html":{},"classes/CatchEverythingFilter.html":{},"classes/ChangePasswordDto.html":{},"injectables/CloudinaryService.html":{},"injectables/CreateUserCommand.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserResponseDto.html":{},"modules/EmailModule.html":{},"classes/EmailService.html":{},"interfaces/ErrorResponse.html":{},"classes/ForgotPasswordDto.html":{},"classes/GetProfileResponseDto.html":{},"modules/HttpClientModule.html":{},"injectables/HttpClientService.html":{},"interfaces/IPaymentService.html":{},"interfaces/IStrorageService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"injectables/MorganMiddleware.html":{},"classes/PasswordResetEmailConsumer.html":{},"modules/PaymentModule.html":{},"classes/RefreshTokenDto.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/RequestContextMiddleware.html":{},"classes/ResetPasswordDto.html":{},"guards/RoleGuard.html":{},"injectables/S3Service.html":{},"injectables/SchemaService.html":{},"modules/StorageModule.html":{},"injectables/StripeService.html":{},"injectables/SuccessResponseInterceptor.html":{},"classes/UpdateProfileDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/UsersSubscriber.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["max",{"_index":149,"title":{},"body":{"modules/AppModule.html":{}}}],["memorystoredfile",{"_index":707,"title":{},"body":{"injectables/CloudinaryService.html":{},"interfaces/IStrorageService.html":{},"injectables/S3Service.html":{}}}],["message",{"_index":12,"title":{},"body":{"interfaces/ApiResponse.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/AuthResponseDto.html":{},"classes/CatchEverythingFilter.html":{},"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserResponseDto.html":{},"interfaces/ErrorResponse.html":{},"classes/GetProfileResponseDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/MorganMiddleware.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"classes/ResetPasswordDto.html":{},"injectables/SuccessResponseInterceptor.html":{},"controllers/UsersController.html":{}}}],["message.includes('cannot",{"_index":650,"title":{},"body":{"classes/CatchEverythingFilter.html":{}}}],["message.startswith('cannot",{"_index":649,"title":{},"body":{"classes/CatchEverythingFilter.html":{}}}],["metadata",{"_index":1670,"title":{},"body":{"dependencies.html":{}}}],["method",{"_index":172,"title":{},"body":{"modules/AppModule.html":{},"interfaces/IStrorageService.html":{},"injectables/MorganMiddleware.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/S3Service.html":{},"injectables/SuccessResponseInterceptor.html":{}}}],["methods",{"_index":28,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppRedisService.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CatchEverythingFilter.html":{},"injectables/CloudinaryService.html":{},"injectables/CreateUserCommand.html":{},"classes/EmailService.html":{},"injectables/HttpClientService.html":{},"interfaces/IPaymentService.html":{},"interfaces/IStrorageService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/MorganMiddleware.html":{},"classes/PasswordResetEmailConsumer.html":{},"modules/PaymentModule.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/RequestContextMiddleware.html":{},"guards/RoleGuard.html":{},"injectables/S3Service.html":{},"injectables/SchemaService.html":{},"modules/StorageModule.html":{},"injectables/StripeService.html":{},"injectables/SuccessResponseInterceptor.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/UsersSubscriber.html":{}}}],["metricreader",{"_index":1754,"title":{},"body":{"miscellaneous/variables.html":{}}}],["middlewareconsumer",{"_index":75,"title":{},"body":{"modules/AppModule.html":{}}}],["mikro",{"_index":96,"title":{},"body":{"modules/AppModule.html":{},"classes/BaseEntity.html":{},"injectables/CreateUserCommand.html":{},"injectables/RequestContextMiddleware.html":{},"injectables/SchemaService.html":{},"entities/User.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/UsersSubscriber.html":{},"dependencies.html":{}}}],["mikroorm",{"_index":1200,"title":{},"body":{"injectables/RequestContextMiddleware.html":{},"injectables/SchemaService.html":{}}}],["mikroormmodule",{"_index":95,"title":{},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{}}}],["mikroormmodule.forfeature([user",{"_index":1461,"title":{},"body":{"modules/UsersModule.html":{}}}],["mikroormmodule.forrootasync",{"_index":129,"title":{},"body":{"modules/AppModule.html":{}}}],["min",{"_index":147,"title":{},"body":{"modules/AppModule.html":{}}}],["minimum",{"_index":694,"title":{},"body":{"classes/ChangePasswordDto.html":{}}}],["minlength",{"_index":699,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/ResetPasswordDto.html":{}}}],["minlength(10",{"_index":692,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/ResetPasswordDto.html":{}}}],["miscellaneous",{"_index":1678,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mode",{"_index":1720,"title":{},"body":{"index.html":{}}}],["module",{"_index":51,"title":{"modules/AppModule.html":{},"modules/AppRedisModule.html":{},"modules/AuthModule.html":{},"modules/EmailModule.html":{},"modules/HttpClientModule.html":{},"modules/PaymentModule.html":{},"modules/StorageModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AppRedisModule.html":{},"modules/AuthModule.html":{},"modules/EmailModule.html":{},"modules/HttpClientModule.html":{},"modules/PaymentModule.html":{},"modules/StorageModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["modules",{"_index":53,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AppRedisModule.html":{},"modules/AuthModule.html":{},"modules/EmailModule.html":{},"modules/HttpClientModule.html":{},"modules/PaymentModule.html":{},"modules/StorageModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["modules/auth/auth.module",{"_index":92,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/auth/decorators/public.decorator",{"_index":42,"title":{},"body":{"controllers/AppController.html":{}}}],["modules/mailer",{"_index":892,"title":{},"body":{"modules/EmailModule.html":{},"classes/EmailService.html":{},"dependencies.html":{}}}],["modules/mailer/dist/adapters/pug.adapter",{"_index":895,"title":{},"body":{"modules/EmailModule.html":{}}}],["modules/users/subscribers/user.subscriber",{"_index":111,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/users/users.module",{"_index":91,"title":{},"body":{"modules/AppModule.html":{}}}],["moment",{"_index":1066,"title":{},"body":{"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["moment().utc().todate",{"_index":1071,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["morgan",{"_index":1082,"title":{},"body":{"injectables/MorganMiddleware.html":{},"dependencies.html":{}}}],["morganmiddleware",{"_index":93,"title":{"injectables/MorganMiddleware.html":{}},"body":{"modules/AppModule.html":{},"injectables/MorganMiddleware.html":{},"coverage.html":{}}}],["morganmiddleware.name",{"_index":1100,"title":{},"body":{"injectables/MorganMiddleware.html":{}}}],["ms",{"_index":482,"title":{},"body":{"injectables/AuthService.html":{},"injectables/MorganMiddleware.html":{},"dependencies.html":{}}}],["ms('1m",{"_index":490,"title":{},"body":{"injectables/AuthService.html":{}}}],["ms('1m')}m",{"_index":491,"title":{},"body":{"injectables/AuthService.html":{}}}],["ms('1s",{"_index":541,"title":{},"body":{"injectables/AuthService.html":{}}}],["ms(this.jwtexpiresin",{"_index":489,"title":{},"body":{"injectables/AuthService.html":{}}}],["ms(this.jwtrefreshexpriresin",{"_index":540,"title":{},"body":{"injectables/AuthService.html":{}}}],["multiple",{"_index":233,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["name",{"_index":78,"title":{},"body":{"modules/AppModule.html":{},"injectables/AppRedisService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BaseEntity.html":{},"classes/CatchEverythingFilter.html":{},"injectables/CloudinaryService.html":{},"injectables/CreateUserCommand.html":{},"classes/CreateUserDto.html":{},"classes/EmailService.html":{},"interfaces/ErrorResponse.html":{},"injectables/HttpClientService.html":{},"interfaces/IPaymentService.html":{},"interfaces/IStrorageService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/MorganMiddleware.html":{},"classes/PasswordResetEmailConsumer.html":{},"modules/PaymentModule.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/RequestContextMiddleware.html":{},"guards/RoleGuard.html":{},"injectables/S3Service.html":{},"injectables/SchemaService.html":{},"injectables/StripeService.html":{},"injectables/SuccessResponseInterceptor.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/UsersSubscriber.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["namespace",{"_index":200,"title":{},"body":{"modules/AppRedisModule.html":{}}}],["nanoid",{"_index":755,"title":{},"body":{"injectables/CreateUserCommand.html":{},"injectables/S3Service.html":{},"dependencies.html":{}}}],["necessary",{"_index":1226,"title":{},"body":{"guards/RoleGuard.html":{}}}],["needs",{"_index":1042,"title":{},"body":{"injectables/JwtStrategy.html":{},"entities/User.html":{}}}],["nest",{"_index":33,"title":{},"body":{"controllers/AppController.html":{},"injectables/CreateUserCommand.html":{},"dependencies.html":{},"index.html":{}}}],["nestinterceptor",{"_index":1174,"title":{},"body":{"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/SuccessResponseInterceptor.html":{}}}],["nestjs",{"_index":721,"title":{},"body":{"injectables/CloudinaryService.html":{},"modules/EmailModule.html":{},"classes/EmailService.html":{},"interfaces/IStrorageService.html":{},"injectables/S3Service.html":{},"modules/StorageModule.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["nestjs/axios",{"_index":940,"title":{},"body":{"modules/HttpClientModule.html":{},"injectables/HttpClientService.html":{},"dependencies.html":{}}}],["nestjs/bullmq",{"_index":113,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/PasswordResetEmailConsumer.html":{},"modules/PaymentModule.html":{},"injectables/StripeService.html":{},"dependencies.html":{}}}],["nestjs/common",{"_index":20,"title":{},"body":{"interfaces/ApiResponse.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AppRedisModule.html":{},"injectables/AppRedisService.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CatchEverythingFilter.html":{},"injectables/CloudinaryService.html":{},"injectables/CreateUserCommand.html":{},"modules/EmailModule.html":{},"classes/EmailService.html":{},"modules/HttpClientModule.html":{},"injectables/HttpClientService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/MorganMiddleware.html":{},"classes/PasswordResetEmailConsumer.html":{},"modules/PaymentModule.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/RequestContextMiddleware.html":{},"guards/RoleGuard.html":{},"injectables/S3Service.html":{},"injectables/SchemaService.html":{},"modules/StorageModule.html":{},"injectables/StripeService.html":{},"injectables/SuccessResponseInterceptor.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/UsersSubscriber.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":90,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRedisModule.html":{},"injectables/AppRedisService.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CloudinaryService.html":{},"modules/EmailModule.html":{},"injectables/JwtStrategy.html":{},"modules/PaymentModule.html":{},"injectables/S3Service.html":{},"injectables/SchemaService.html":{},"modules/StorageModule.html":{},"injectables/StripeService.html":{},"injectables/UsersService.html":{},"injectables/UsersSubscriber.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":390,"title":{},"body":{"modules/AuthModule.html":{},"classes/CatchEverythingFilter.html":{},"injectables/JwtAuthGuard.html":{},"guards/RoleGuard.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":394,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["nestjs/mapped",{"_index":1613,"title":{},"body":{"dependencies.html":{}}}],["nestjs/passport",{"_index":396,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":1615,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":45,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/AuthResponseDto.html":{},"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserResponseDto.html":{},"classes/ForgotPasswordDto.html":{},"classes/GetProfileResponseDto.html":{},"classes/LoginDto.html":{},"classes/RefreshTokenDto.html":{},"classes/ResetPasswordDto.html":{},"classes/UpdateProfileDto.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["nestmiddleware",{"_index":1081,"title":{},"body":{"injectables/MorganMiddleware.html":{},"injectables/RequestContextMiddleware.html":{}}}],["nestmodule",{"_index":82,"title":{},"body":{"modules/AppModule.html":{}}}],["new",{"_index":157,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"classes/BaseEntity.html":{},"classes/CatchEverythingFilter.html":{},"classes/ChangePasswordDto.html":{},"injectables/CloudinaryService.html":{},"injectables/CreateUserCommand.html":{},"modules/EmailModule.html":{},"injectables/HttpClientService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"modules/PaymentModule.html":{},"classes/ResetPasswordDto.html":{},"guards/RoleGuard.html":{},"injectables/S3Service.html":{},"injectables/SchemaService.html":{},"modules/StorageModule.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["newly",{"_index":878,"title":{},"body":{"classes/CreateUserResponseDto.html":{},"classes/GetProfileResponseDto.html":{}}}],["newpassword",{"_index":379,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ChangePasswordDto.html":{},"classes/ResetPasswordDto.html":{},"injectables/UsersService.html":{}}}],["newpayload",{"_index":538,"title":{},"body":{"injectables/AuthService.html":{}}}],["newuser",{"_index":1441,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["next",{"_index":506,"title":{},"body":{"injectables/AuthService.html":{},"injectables/MorganMiddleware.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/RequestContextMiddleware.html":{},"injectables/SuccessResponseInterceptor.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["next.handle",{"_index":1181,"title":{},"body":{"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/SuccessResponseInterceptor.html":{}}}],["next.handle().pipe",{"_index":1182,"title":{},"body":{"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/SuccessResponseInterceptor.html":{}}}],["nextfunction",{"_index":1203,"title":{},"body":{"injectables/RequestContextMiddleware.html":{}}}],["node",{"_index":1254,"title":{},"body":{"injectables/S3Service.html":{},"dependencies.html":{}}}],["nodeenv",{"_index":1287,"title":{},"body":{"injectables/SchemaService.html":{}}}],["nodemailer",{"_index":1663,"title":{},"body":{"dependencies.html":{}}}],["nodesdk",{"_index":1753,"title":{},"body":{"miscellaneous/variables.html":{}}}],["normalizefields",{"_index":1406,"title":{},"body":{"entities/User.html":{},"injectables/UsersSubscriber.html":{}}}],["normalizefields(user",{"_index":1536,"title":{},"body":{"injectables/UsersSubscriber.html":{}}}],["normalizeuserfields",{"_index":1401,"title":{},"body":{"entities/User.html":{},"injectables/UsersSubscriber.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["normalizeuserfields(this",{"_index":1407,"title":{},"body":{"entities/User.html":{}}}],["normalizeuserfields(user",{"_index":1543,"title":{},"body":{"injectables/UsersSubscriber.html":{},"miscellaneous/functions.html":{}}}],["notbefore",{"_index":516,"title":{},"body":{"injectables/AuthService.html":{}}}],["notbeforeerror",{"_index":475,"title":{},"body":{"injectables/AuthService.html":{}}}],["note",{"_index":1020,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["notfoundexception",{"_index":471,"title":{},"body":{"injectables/AuthService.html":{},"classes/CatchEverythingFilter.html":{},"injectables/JwtStrategy.html":{},"injectables/UsersService.html":{}}}],["notfoundexception('password",{"_index":558,"title":{},"body":{"injectables/AuthService.html":{}}}],["notfoundexception('user",{"_index":501,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/UsersService.html":{}}}],["null",{"_index":258,"title":{},"body":{"injectables/AppRedisService.html":{},"injectables/AuthService.html":{},"classes/BaseEntity.html":{},"injectables/UsersService.html":{}}}],["nullable",{"_index":579,"title":{},"body":{"classes/BaseEntity.html":{},"entities/User.html":{}}}],["number",{"_index":226,"title":{},"body":{"injectables/AppRedisService.html":{},"injectables/AuthService.html":{},"classes/CatchEverythingFilter.html":{},"classes/CreateUserDto.html":{},"interfaces/ErrorResponse.html":{},"interfaces/IStrorageService.html":{},"injectables/S3Service.html":{},"entities/User.html":{},"miscellaneous/functions.html":{}}}],["number.isinteger(response.statuscode",{"_index":1187,"title":{},"body":{"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/SuccessResponseInterceptor.html":{}}}],["nx",{"_index":245,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["nxinfo",{"_index":269,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["object",{"_index":989,"title":{},"body":{"interfaces/IStrorageService.html":{},"injectables/S3Service.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["object.values(userroleenum).join",{"_index":875,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["observable",{"_index":1172,"title":{},"body":{"injectables/RequestBodyAndResponseInterceptor.html":{},"guards/RoleGuard.html":{},"injectables/SuccessResponseInterceptor.html":{}}}],["ok",{"_index":256,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["omittype",{"_index":1360,"title":{},"body":{"classes/UpdateProfileDto.html":{}}}],["omittype(createuserdto",{"_index":1359,"title":{},"body":{"classes/UpdateProfileDto.html":{}}}],["one",{"_index":874,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["onmoduleinit",{"_index":1283,"title":{},"body":{"injectables/SchemaService.html":{}}}],["onupdate",{"_index":586,"title":{},"body":{"classes/BaseEntity.html":{}}}],["opentelemetry/auto",{"_index":1617,"title":{},"body":{"dependencies.html":{}}}],["opentelemetry/context",{"_index":1620,"title":{},"body":{"dependencies.html":{}}}],["opentelemetry/core",{"_index":1623,"title":{},"body":{"dependencies.html":{}}}],["opentelemetry/exporter",{"_index":1624,"title":{},"body":{"dependencies.html":{}}}],["opentelemetry/propagator",{"_index":1627,"title":{},"body":{"dependencies.html":{}}}],["opentelemetry/sdk",{"_index":1630,"title":{},"body":{"dependencies.html":{}}}],["operation",{"_index":435,"title":{},"body":{"classes/AuthResponseDto.html":{},"classes/CreateUserResponseDto.html":{},"classes/GetProfileResponseDto.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/SuccessResponseInterceptor.html":{}}}],["option",{"_index":791,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["option({flags",{"_index":766,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["optional",{"_index":10,"title":{},"body":{"interfaces/ApiResponse.html":{},"modules/AppModule.html":{},"injectables/AppRedisService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/BaseEntity.html":{},"classes/CatchEverythingFilter.html":{},"injectables/CloudinaryService.html":{},"injectables/CreateUserCommand.html":{},"classes/CreateUserDto.html":{},"classes/EmailService.html":{},"interfaces/ErrorResponse.html":{},"injectables/HttpClientService.html":{},"interfaces/IPaymentService.html":{},"interfaces/IStrorageService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/MorganMiddleware.html":{},"classes/PasswordResetEmailConsumer.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/RequestContextMiddleware.html":{},"guards/RoleGuard.html":{},"injectables/S3Service.html":{},"injectables/SchemaService.html":{},"injectables/StripeService.html":{},"injectables/SuccessResponseInterceptor.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/UsersSubscriber.html":{},"miscellaneous/functions.html":{}}}],["options",{"_index":784,"title":{},"body":{"injectables/CreateUserCommand.html":{},"modules/EmailModule.html":{},"injectables/HttpClientService.html":{},"interfaces/IPaymentService.html":{},"injectables/StripeService.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{}}}],["originaldata",{"_index":1544,"title":{},"body":{"injectables/UsersSubscriber.html":{}}}],["originaldata.password",{"_index":1546,"title":{},"body":{"injectables/UsersSubscriber.html":{}}}],["orm",{"_index":1202,"title":{},"body":{"injectables/RequestContextMiddleware.html":{},"injectables/SchemaService.html":{}}}],["orm/core",{"_index":593,"title":{},"body":{"classes/BaseEntity.html":{},"injectables/CreateUserCommand.html":{},"injectables/RequestContextMiddleware.html":{},"injectables/SchemaService.html":{},"entities/User.html":{},"injectables/UsersService.html":{},"injectables/UsersSubscriber.html":{},"dependencies.html":{}}}],["orm/nestjs",{"_index":97,"title":{},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["orm/postgresql",{"_index":99,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["os",{"_index":1110,"title":{},"body":{"classes/PasswordResetEmailConsumer.html":{}}}],["os.cpus().length",{"_index":1118,"title":{},"body":{"classes/PasswordResetEmailConsumer.html":{}}}],["otelsdk",{"_index":1591,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["out",{"_index":70,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRedisModule.html":{},"modules/AuthModule.html":{},"modules/EmailModule.html":{},"modules/HttpClientModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["overview",{"_index":1733,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":1595,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["param",{"_index":265,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["parameters",{"_index":77,"title":{},"body":{"modules/AppModule.html":{},"injectables/AppRedisService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CatchEverythingFilter.html":{},"injectables/CloudinaryService.html":{},"injectables/CreateUserCommand.html":{},"classes/EmailService.html":{},"injectables/HttpClientService.html":{},"interfaces/IPaymentService.html":{},"interfaces/IStrorageService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/MorganMiddleware.html":{},"classes/PasswordResetEmailConsumer.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/RequestContextMiddleware.html":{},"guards/RoleGuard.html":{},"injectables/S3Service.html":{},"injectables/SchemaService.html":{},"injectables/StripeService.html":{},"injectables/SuccessResponseInterceptor.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/UsersSubscriber.html":{},"miscellaneous/functions.html":{}}}],["params",{"_index":975,"title":{},"body":{"interfaces/IPaymentService.html":{},"injectables/StripeService.html":{}}}],["parsed",{"_index":1504,"title":{},"body":{"injectables/UsersService.html":{}}}],["parseemail",{"_index":756,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["parseemail(val",{"_index":765,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["parsefirstname",{"_index":757,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["parsefirstname(val",{"_index":771,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["parselastname",{"_index":758,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["parselastname(val",{"_index":775,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["parser",{"_index":1245,"title":{},"body":{"injectables/S3Service.html":{}}}],["parserole",{"_index":759,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["parserole(val",{"_index":778,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["parsetimestring",{"_index":1570,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["parsetimestring(timestring",{"_index":1704,"title":{},"body":{"miscellaneous/functions.html":{}}}],["parseurl",{"_index":1243,"title":{},"body":{"injectables/S3Service.html":{}}}],["partialtype",{"_index":1358,"title":{},"body":{"classes/UpdateProfileDto.html":{}}}],["pass",{"_index":461,"title":{},"body":{"injectables/AuthService.html":{},"modules/EmailModule.html":{}}}],["passport",{"_index":1050,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["passportmodule",{"_index":395,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":1051,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["passportstrategy(strategy",{"_index":1016,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["passreqtocallback",{"_index":1057,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["password",{"_index":141,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ChangePasswordDto.html":{},"injectables/CreateUserCommand.html":{},"classes/CreateUserDto.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"classes/ResetPasswordDto.html":{},"classes/UpdateProfileDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["password')@httpcode(httpstatus.ok)@apioperation({summary",{"_index":316,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["password'})@apibody({type",{"_index":336,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["password.dto",{"_index":352,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["password.dto.ts",{"_index":676,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/ForgotPasswordDto.html":{},"classes/ResetPasswordDto.html":{},"coverage.html":{}}}],["password.dto.ts:19",{"_index":695,"title":{},"body":{"classes/ChangePasswordDto.html":{}}}],["password.dto.ts:25",{"_index":1211,"title":{},"body":{"classes/ResetPasswordDto.html":{}}}],["password.dto.ts:35",{"_index":693,"title":{},"body":{"classes/ChangePasswordDto.html":{}}}],["password.dto.ts:41",{"_index":1210,"title":{},"body":{"classes/ResetPasswordDto.html":{}}}],["password.dto.ts:50",{"_index":1213,"title":{},"body":{"classes/ResetPasswordDto.html":{}}}],["password.dto.ts:7",{"_index":928,"title":{},"body":{"classes/ForgotPasswordDto.html":{}}}],["password_character_set",{"_index":794,"title":{},"body":{"injectables/CreateUserCommand.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["password_reset",{"_index":1684,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["password_reset_email_queue_name",{"_index":402,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/PasswordResetEmailConsumer.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["passwordresetemailconsumer",{"_index":1102,"title":{"classes/PasswordResetEmailConsumer.html":{}},"body":{"classes/PasswordResetEmailConsumer.html":{},"coverage.html":{}}}],["passwordresetemailqueue",{"_index":449,"title":{},"body":{"injectables/AuthService.html":{}}}],["passwordresetrequested",{"_index":552,"title":{},"body":{"injectables/AuthService.html":{},"entities/User.html":{}}}],["passwordreseturl",{"_index":443,"title":{},"body":{"injectables/AuthService.html":{}}}],["patch",{"_index":1430,"title":{},"body":{"controllers/UsersController.html":{},"miscellaneous/enumerations.html":{}}}],["patch('update",{"_index":1426,"title":{},"body":{"controllers/UsersController.html":{}}}],["path",{"_index":174,"title":{},"body":{"modules/AppModule.html":{},"classes/CatchEverythingFilter.html":{},"modules/EmailModule.html":{},"interfaces/ErrorResponse.html":{},"entities/User.html":{}}}],["path/webhook",{"_index":175,"title":{},"body":{"modules/AppModule.html":{}}}],["payload",{"_index":512,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["payload.email",{"_index":556,"title":{},"body":{"injectables/AuthService.html":{}}}],["payload.sub",{"_index":537,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["payment",{"_index":1339,"title":{},"body":{"injectables/StripeService.html":{}}}],["payment_intent.succeeded",{"_index":1350,"title":{},"body":{"injectables/StripeService.html":{}}}],["payment_provider",{"_index":1137,"title":{},"body":{"modules/PaymentModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["paymentdriverenum",{"_index":1138,"title":{},"body":{"modules/PaymentModule.html":{},"miscellaneous/enumerations.html":{}}}],["paymentdriverenum.stripe",{"_index":1158,"title":{},"body":{"modules/PaymentModule.html":{}}}],["paymentintent",{"_index":1341,"title":{},"body":{"injectables/StripeService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["paymentmodule",{"_index":1128,"title":{"modules/PaymentModule.html":{}},"body":{"modules/PaymentModule.html":{},"modules.html":{}}}],["per",{"_index":1029,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["permission",{"_index":1227,"title":{},"body":{"guards/RoleGuard.html":{}}}],["phone",{"_index":845,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/User.html":{}}}],["phonenumber",{"_index":822,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateProfileDto.html":{},"entities/User.html":{}}}],["pipeline",{"_index":283,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["pipeline.exec",{"_index":288,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["pipeline.incr(key",{"_index":287,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["pipeline.set(key",{"_index":285,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["pool",{"_index":146,"title":{},"body":{"modules/AppModule.html":{}}}],["port",{"_index":137,"title":{},"body":{"modules/AppModule.html":{},"modules/EmailModule.html":{}}}],["post",{"_index":338,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{},"miscellaneous/enumerations.html":{}}}],["post('change",{"_index":1413,"title":{},"body":{"controllers/UsersController.html":{}}}],["post('forgot",{"_index":373,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('login",{"_index":358,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('refresh",{"_index":368,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('reset",{"_index":377,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('sign",{"_index":1439,"title":{},"body":{"controllers/UsersController.html":{}}}],["postal",{"_index":848,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["postal/zip",{"_index":1391,"title":{},"body":{"entities/User.html":{}}}],["postalcode",{"_index":823,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/User.html":{}}}],["postgresqldriver",{"_index":98,"title":{},"body":{"modules/AppModule.html":{}}}],["prefix",{"_index":308,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["presigner",{"_index":1249,"title":{},"body":{"injectables/S3Service.html":{},"dependencies.html":{}}}],["presigner.presign",{"_index":1280,"title":{},"body":{"injectables/S3Service.html":{}}}],["preventserverstart",{"_index":1765,"title":{},"body":{"miscellaneous/variables.html":{}}}],["primarykey",{"_index":591,"title":{},"body":{"classes/BaseEntity.html":{}}}],["primarykey({type",{"_index":583,"title":{},"body":{"classes/BaseEntity.html":{}}}],["private",{"_index":205,"title":{},"body":{"injectables/AppRedisService.html":{},"injectables/AuthService.html":{},"classes/CatchEverythingFilter.html":{},"injectables/CloudinaryService.html":{},"injectables/CreateUserCommand.html":{},"classes/EmailService.html":{},"injectables/HttpClientService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/MorganMiddleware.html":{},"classes/PasswordResetEmailConsumer.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/S3Service.html":{},"injectables/SchemaService.html":{},"injectables/StripeService.html":{},"injectables/SuccessResponseInterceptor.html":{},"entities/User.html":{},"injectables/UsersService.html":{},"injectables/UsersSubscriber.html":{}}}],["process",{"_index":1104,"title":{},"body":{"classes/PasswordResetEmailConsumer.html":{}}}],["process(job",{"_index":1107,"title":{},"body":{"classes/PasswordResetEmailConsumer.html":{}}}],["processed",{"_index":1127,"title":{},"body":{"classes/PasswordResetEmailConsumer.html":{}}}],["processing",{"_index":1119,"title":{},"body":{"classes/PasswordResetEmailConsumer.html":{}}}],["processor",{"_index":1111,"title":{},"body":{"classes/PasswordResetEmailConsumer.html":{}}}],["processor(password_reset_email_queue_name",{"_index":1116,"title":{},"body":{"classes/PasswordResetEmailConsumer.html":{}}}],["production",{"_index":100,"title":{},"body":{"modules/AppModule.html":{},"injectables/SchemaService.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["profile",{"_index":883,"title":{},"body":{"classes/CreateUserResponseDto.html":{},"classes/GetProfileResponseDto.html":{},"controllers/UsersController.html":{}}}],["profile')@httpcode(httpstatus.ok)@apioperation({summary",{"_index":1427,"title":{},"body":{"controllers/UsersController.html":{}}}],["profile'})@apibody({type",{"_index":1428,"title":{},"body":{"controllers/UsersController.html":{}}}],["profile.dto",{"_index":1436,"title":{},"body":{"controllers/UsersController.html":{}}}],["profile.dto.ts",{"_index":1357,"title":{},"body":{"classes/UpdateProfileDto.html":{},"coverage.html":{}}}],["project",{"_index":1713,"title":{},"body":{"index.html":{}}}],["prometheus",{"_index":1625,"title":{},"body":{"dependencies.html":{}}}],["prometheusexporter",{"_index":1592,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["promise",{"_index":225,"title":{},"body":{"injectables/AppRedisService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CloudinaryService.html":{},"injectables/CreateUserCommand.html":{},"classes/EmailService.html":{},"injectables/HttpClientService.html":{},"interfaces/IPaymentService.html":{},"interfaces/IStrorageService.html":{},"injectables/LocalStrategy.html":{},"guards/RoleGuard.html":{},"injectables/S3Service.html":{},"injectables/StripeService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["promise((resolve",{"_index":736,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["promise.all",{"_index":1510,"title":{},"body":{"injectables/UsersService.html":{}}}],["propagators",{"_index":1759,"title":{},"body":{"miscellaneous/variables.html":{}}}],["properties",{"_index":9,"title":{"properties.html":{}},"body":{"interfaces/ApiResponse.html":{},"injectables/AppRedisService.html":{},"classes/AuthResponseDto.html":{},"injectables/AuthService.html":{},"classes/BaseEntity.html":{},"classes/CatchEverythingFilter.html":{},"classes/ChangePasswordDto.html":{},"injectables/CreateUserCommand.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserResponseDto.html":{},"interfaces/ErrorResponse.html":{},"classes/ForgotPasswordDto.html":{},"classes/GetProfileResponseDto.html":{},"injectables/HttpClientService.html":{},"classes/LoginDto.html":{},"classes/RefreshTokenDto.html":{},"classes/ResetPasswordDto.html":{},"injectables/S3Service.html":{},"injectables/SchemaService.html":{},"entities/User.html":{},"injectables/UsersService.html":{},"properties.html":{}}}],["property",{"_index":592,"title":{},"body":{"classes/BaseEntity.html":{},"entities/User.html":{}}}],["property({type",{"_index":570,"title":{},"body":{"classes/BaseEntity.html":{},"entities/User.html":{}}}],["property({unique",{"_index":1380,"title":{},"body":{"entities/User.html":{}}}],["provide",{"_index":422,"title":{},"body":{"modules/AuthModule.html":{},"modules/PaymentModule.html":{},"modules/StorageModule.html":{}}}],["provided",{"_index":1162,"title":{},"body":{"classes/RefreshTokenDto.html":{}}}],["providers",{"_index":58,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRedisModule.html":{},"modules/AuthModule.html":{},"modules/EmailModule.html":{},"modules/HttpClientModule.html":{},"modules/PaymentModule.html":{},"injectables/S3Service.html":{},"modules/StorageModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"overview.html":{}}}],["public",{"_index":41,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"modules/PaymentModule.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["public()@post('forgot",{"_index":315,"title":{},"body":{"controllers/AuthController.html":{}}}],["public()@post('refresh')@httpcode(httpstatus.ok)@apioperation({summary",{"_index":328,"title":{},"body":{"controllers/AuthController.html":{}}}],["public()@post('reset",{"_index":335,"title":{},"body":{"controllers/AuthController.html":{}}}],["public()@post('sign",{"_index":1416,"title":{},"body":{"controllers/UsersController.html":{}}}],["public_id=${result.public_id",{"_index":747,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["pug",{"_index":1667,"title":{},"body":{"dependencies.html":{}}}],["pugadapter",{"_index":894,"title":{},"body":{"modules/EmailModule.html":{}}}],["put",{"_index":988,"title":{},"body":{"interfaces/IStrorageService.html":{},"injectables/S3Service.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["query",{"_index":1478,"title":{},"body":{"injectables/UsersService.html":{}}}],["query?.email",{"_index":1500,"title":{},"body":{"injectables/UsersService.html":{}}}],["query?.id",{"_index":1498,"title":{},"body":{"injectables/UsersService.html":{}}}],["queue",{"_index":450,"title":{},"body":{"injectables/AuthService.html":{},"modules/PaymentModule.html":{},"injectables/StripeService.html":{},"miscellaneous/variables.html":{}}}],["queued",{"_index":1353,"title":{},"body":{"injectables/StripeService.html":{}}}],["queues",{"_index":167,"title":{},"body":{"modules/AppModule.html":{}}}],["quickly",{"_index":1685,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["r",{"_index":779,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["raw",{"_index":1024,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["readonly",{"_index":170,"title":{},"body":{"modules/AppModule.html":{},"injectables/AppRedisService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CatchEverythingFilter.html":{},"injectables/CloudinaryService.html":{},"injectables/CreateUserCommand.html":{},"classes/EmailService.html":{},"injectables/HttpClientService.html":{},"injectables/MorganMiddleware.html":{},"classes/PasswordResetEmailConsumer.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/RequestContextMiddleware.html":{},"guards/RoleGuard.html":{},"injectables/S3Service.html":{},"injectables/SchemaService.html":{},"injectables/StripeService.html":{},"injectables/SuccessResponseInterceptor.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/UsersSubscriber.html":{}}}],["readylog",{"_index":197,"title":{},"body":{"modules/AppRedisModule.html":{}}}],["received",{"_index":1349,"title":{},"body":{"injectables/StripeService.html":{}}}],["record",{"_index":575,"title":{},"body":{"classes/BaseEntity.html":{},"injectables/CreateUserCommand.html":{},"classes/EmailService.html":{}}}],["redis",{"_index":195,"title":{},"body":{"modules/AppRedisModule.html":{},"injectables/AppRedisService.html":{},"dependencies.html":{}}}],["redis.service",{"_index":192,"title":{},"body":{"modules/AppRedisModule.html":{}}}],["redismodule",{"_index":193,"title":{},"body":{"modules/AppRedisModule.html":{}}}],["redismodule.forrootasync",{"_index":196,"title":{},"body":{"modules/AppRedisModule.html":{}}}],["redisservice",{"_index":216,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["referrer",{"_index":1092,"title":{},"body":{"injectables/MorganMiddleware.html":{}}}],["reflect",{"_index":1669,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":996,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/RoleGuard.html":{}}}],["reflector.createdecorator",{"_index":1769,"title":{},"body":{"miscellaneous/variables.html":{}}}],["refresh",{"_index":311,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/RefreshTokenDto.html":{}}}],["refresh(@body",{"_index":369,"title":{},"body":{"controllers/AuthController.html":{}}}],["refresh(body",{"_index":327,"title":{},"body":{"controllers/AuthController.html":{}}}],["refresh(refreshtoken",{"_index":456,"title":{},"body":{"injectables/AuthService.html":{}}}],["refresh_token",{"_index":361,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["refreshed",{"_index":372,"title":{},"body":{"controllers/AuthController.html":{}}}],["refreshtoken",{"_index":367,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/RefreshTokenDto.html":{}}}],["refreshtokendto",{"_index":331,"title":{"classes/RefreshTokenDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/RefreshTokenDto.html":{},"coverage.html":{}}}],["region",{"_index":1276,"title":{},"body":{"injectables/S3Service.html":{},"modules/StorageModule.html":{}}}],["register",{"_index":1131,"title":{},"body":{"modules/PaymentModule.html":{},"modules/StorageModule.html":{}}}],["reject",{"_index":737,"title":{},"body":{"injectables/CloudinaryService.html":{},"injectables/JwtStrategy.html":{}}}],["reject(error",{"_index":746,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["remote",{"_index":1086,"title":{},"body":{"injectables/MorganMiddleware.html":{}}}],["repository",{"_index":1712,"title":{},"body":{"index.html":{}}}],["req",{"_index":326,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtStrategy.html":{},"injectables/MorganMiddleware.html":{},"injectables/RequestContextMiddleware.html":{},"controllers/UsersController.html":{}}}],["req.url",{"_index":1084,"title":{},"body":{"injectables/MorganMiddleware.html":{}}}],["req.url.match(/\\/v1\\/queues",{"_index":1085,"title":{},"body":{"injectables/MorganMiddleware.html":{}}}],["req.user",{"_index":363,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["req.user.id",{"_index":1451,"title":{},"body":{"controllers/UsersController.html":{}}}],["req?.user?.id",{"_index":1448,"title":{},"body":{"controllers/UsersController.html":{}}}],["req[body",{"_index":1095,"title":{},"body":{"injectables/MorganMiddleware.html":{}}}],["req[header",{"_index":1094,"title":{},"body":{"injectables/MorganMiddleware.html":{}}}],["request",{"_index":317,"title":{},"body":{"controllers/AuthController.html":{},"classes/CatchEverythingFilter.html":{},"injectables/HttpClientService.html":{},"injectables/JwtStrategy.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/RequestContextMiddleware.html":{},"guards/RoleGuard.html":{},"injectables/S3Service.html":{},"injectables/SuccessResponseInterceptor.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["request.method",{"_index":655,"title":{},"body":{"classes/CatchEverythingFilter.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/SuccessResponseInterceptor.html":{}}}],["request.url",{"_index":656,"title":{},"body":{"classes/CatchEverythingFilter.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/SuccessResponseInterceptor.html":{}}}],["request?.user?.role",{"_index":1225,"title":{},"body":{"guards/RoleGuard.html":{}}}],["requestbodyandresponseinterceptor",{"_index":1165,"title":{"injectables/RequestBodyAndResponseInterceptor.html":{}},"body":{"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/SuccessResponseInterceptor.html":{},"coverage.html":{}}}],["requestcontext",{"_index":1205,"title":{},"body":{"injectables/RequestContextMiddleware.html":{}}}],["requestcontext.create(this.orm.em",{"_index":1206,"title":{},"body":{"injectables/RequestContextMiddleware.html":{}}}],["requestcontextmiddleware",{"_index":121,"title":{"injectables/RequestContextMiddleware.html":{}},"body":{"modules/AppModule.html":{},"injectables/RequestContextMiddleware.html":{},"coverage.html":{}}}],["requested",{"_index":559,"title":{},"body":{"injectables/AuthService.html":{},"entities/User.html":{}}}],["requestmethod",{"_index":83,"title":{},"body":{"modules/AppModule.html":{}}}],["requestmethod.all",{"_index":173,"title":{},"body":{"modules/AppModule.html":{}}}],["requesturl",{"_index":641,"title":{},"body":{"classes/CatchEverythingFilter.html":{}}}],["require('buffer",{"_index":716,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["required",{"_index":768,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["requiredrole",{"_index":1222,"title":{},"body":{"guards/RoleGuard.html":{}}}],["res",{"_index":1078,"title":{},"body":{"injectables/MorganMiddleware.html":{},"injectables/RequestContextMiddleware.html":{}}}],["res.statuscode",{"_index":1097,"title":{},"body":{"injectables/MorganMiddleware.html":{}}}],["res[content",{"_index":1089,"title":{},"body":{"injectables/MorganMiddleware.html":{}}}],["reset",{"_index":69,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRedisModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/EmailModule.html":{},"modules/HttpClientModule.html":{},"classes/ResetPasswordDto.html":{},"entities/User.html":{},"modules/UsersModule.html":{},"miscellaneous/enumerations.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["reset'})@apibody({type",{"_index":318,"title":{},"body":{"controllers/AuthController.html":{}}}],["resetpassword",{"_index":312,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["resetpassword(body",{"_index":333,"title":{},"body":{"controllers/AuthController.html":{}}}],["resetpassword(resettoken",{"_index":458,"title":{},"body":{"injectables/AuthService.html":{}}}],["resetpassworddto",{"_index":334,"title":{"classes/ResetPasswordDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/ResetPasswordDto.html":{},"coverage.html":{}}}],["resettoken",{"_index":378,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ResetPasswordDto.html":{}}}],["reseturl",{"_index":545,"title":{},"body":{"injectables/AuthService.html":{},"classes/PasswordResetEmailConsumer.html":{}}}],["resolve(result",{"_index":749,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["resource_type",{"_index":741,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["response",{"_index":639,"title":{},"body":{"classes/CatchEverythingFilter.html":{},"interfaces/IStrorageService.html":{},"injectables/MorganMiddleware.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/RequestContextMiddleware.html":{},"injectables/S3Service.html":{},"injectables/SuccessResponseInterceptor.html":{}}}],["response.dto.ts",{"_index":427,"title":{},"body":{"classes/AuthResponseDto.html":{},"coverage.html":{}}}],["response.dto.ts:14",{"_index":436,"title":{},"body":{"classes/AuthResponseDto.html":{}}}],["response.dto.ts:8",{"_index":432,"title":{},"body":{"classes/AuthResponseDto.html":{}}}],["response.interface",{"_index":354,"title":{},"body":{"controllers/AuthController.html":{},"classes/CatchEverythingFilter.html":{},"controllers/UsersController.html":{}}}],["response.interface.ts",{"_index":7,"title":{},"body":{"interfaces/ApiResponse.html":{},"interfaces/ErrorResponse.html":{},"coverage.html":{}}}],["response.message",{"_index":1191,"title":{},"body":{"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/SuccessResponseInterceptor.html":{}}}],["response.statuscode",{"_index":1188,"title":{},"body":{"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/SuccessResponseInterceptor.html":{}}}],["response.ts",{"_index":1589,"title":{},"body":{"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["response?.data",{"_index":1193,"title":{},"body":{"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/SuccessResponseInterceptor.html":{}}}],["response?.message",{"_index":1190,"title":{},"body":{"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/SuccessResponseInterceptor.html":{}}}],["response?.statuscode",{"_index":1186,"title":{},"body":{"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/SuccessResponseInterceptor.html":{}}}],["responsebody",{"_index":653,"title":{},"body":{"classes/CatchEverythingFilter.html":{}}}],["responsedata",{"_index":1192,"title":{},"body":{"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/SuccessResponseInterceptor.html":{}}}],["result",{"_index":296,"title":{},"body":{"injectables/AppRedisService.html":{},"injectables/AuthService.html":{},"injectables/CloudinaryService.html":{},"injectables/UsersService.html":{}}}],["results",{"_index":22,"title":{},"body":{"interfaces/ApiResponse.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AppRedisModule.html":{},"injectables/AppRedisService.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/AuthResponseDto.html":{},"injectables/AuthService.html":{},"classes/BaseEntity.html":{},"classes/CatchEverythingFilter.html":{},"classes/ChangePasswordDto.html":{},"injectables/CloudinaryService.html":{},"injectables/CreateUserCommand.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserResponseDto.html":{},"modules/EmailModule.html":{},"classes/EmailService.html":{},"interfaces/ErrorResponse.html":{},"classes/ForgotPasswordDto.html":{},"classes/GetProfileResponseDto.html":{},"modules/HttpClientModule.html":{},"injectables/HttpClientService.html":{},"interfaces/IPaymentService.html":{},"interfaces/IStrorageService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"injectables/MorganMiddleware.html":{},"classes/PasswordResetEmailConsumer.html":{},"modules/PaymentModule.html":{},"classes/RefreshTokenDto.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/RequestContextMiddleware.html":{},"classes/ResetPasswordDto.html":{},"guards/RoleGuard.html":{},"injectables/S3Service.html":{},"injectables/SchemaService.html":{},"modules/StorageModule.html":{},"injectables/StripeService.html":{},"injectables/SuccessResponseInterceptor.html":{},"classes/UpdateProfileDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/UsersSubscriber.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["results[ttl",{"_index":290,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["return",{"_index":50,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AppRedisModule.html":{},"injectables/AppRedisService.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CatchEverythingFilter.html":{},"injectables/CloudinaryService.html":{},"injectables/CreateUserCommand.html":{},"classes/CreateUserDto.html":{},"injectables/HttpClientService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/MorganMiddleware.html":{},"modules/PaymentModule.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"guards/RoleGuard.html":{},"injectables/S3Service.html":{},"modules/StorageModule.html":{},"injectables/StripeService.html":{},"injectables/SuccessResponseInterceptor.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/UsersSubscriber.html":{}}}],["returns",{"_index":38,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppRedisService.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CatchEverythingFilter.html":{},"injectables/CloudinaryService.html":{},"injectables/CreateUserCommand.html":{},"classes/EmailService.html":{},"injectables/HttpClientService.html":{},"interfaces/IPaymentService.html":{},"interfaces/IStrorageService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/MorganMiddleware.html":{},"classes/PasswordResetEmailConsumer.html":{},"modules/PaymentModule.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/RequestContextMiddleware.html":{},"guards/RoleGuard.html":{},"injectables/S3Service.html":{},"injectables/SchemaService.html":{},"modules/StorageModule.html":{},"injectables/StripeService.html":{},"injectables/SuccessResponseInterceptor.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/UsersSubscriber.html":{},"miscellaneous/functions.html":{}}}],["role",{"_index":780,"title":{},"body":{"injectables/CreateUserCommand.html":{},"classes/CreateUserDto.html":{},"guards/RoleGuard.html":{},"classes/UpdateProfileDto.html":{},"entities/User.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["roleguard",{"_index":1217,"title":{"guards/RoleGuard.html":{}},"body":{"guards/RoleGuard.html":{},"coverage.html":{}}}],["route",{"_index":166,"title":{},"body":{"modules/AppModule.html":{},"classes/CatchEverythingFilter.html":{},"guards/RoleGuard.html":{}}}],["run",{"_index":760,"title":{},"body":{"injectables/CreateUserCommand.html":{},"index.html":{}}}],["run(inputs",{"_index":783,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["rxjs",{"_index":959,"title":{},"body":{"injectables/HttpClientService.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"guards/RoleGuard.html":{},"injectables/SuccessResponseInterceptor.html":{},"dependencies.html":{}}}],["rxjs/operators",{"_index":1177,"title":{},"body":{"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/SuccessResponseInterceptor.html":{}}}],["s3",{"_index":1233,"title":{},"body":{"injectables/S3Service.html":{},"modules/StorageModule.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{}}}],["s3.service",{"_index":1302,"title":{},"body":{"modules/StorageModule.html":{}}}],["s3bucket",{"_index":1230,"title":{},"body":{"injectables/S3Service.html":{}}}],["s3client",{"_index":1232,"title":{},"body":{"injectables/S3Service.html":{},"modules/StorageModule.html":{}}}],["s3module",{"_index":1304,"title":{},"body":{"modules/StorageModule.html":{}}}],["s3module.forrootasync",{"_index":1305,"title":{},"body":{"modules/StorageModule.html":{}}}],["s3putobjectresponse",{"_index":986,"title":{},"body":{"interfaces/IStrorageService.html":{},"injectables/S3Service.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["s3region",{"_index":1231,"title":{},"body":{"injectables/S3Service.html":{}}}],["s3requestpresigner",{"_index":1246,"title":{},"body":{"injectables/S3Service.html":{}}}],["s3service",{"_index":1228,"title":{"injectables/S3Service.html":{}},"body":{"injectables/S3Service.html":{},"modules/StorageModule.html":{},"coverage.html":{}}}],["s3service(configservice",{"_index":1316,"title":{},"body":{"modules/StorageModule.html":{}}}],["s3service.name",{"_index":1264,"title":{},"body":{"injectables/S3Service.html":{}}}],["s@]+@[^\\s@]+\\.[^\\s@]{2,}$/i",{"_index":802,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["safeuser",{"_index":1446,"title":{},"body":{"controllers/UsersController.html":{}}}],["salt",{"_index":560,"title":{},"body":{"injectables/AuthService.html":{}}}],["saltrounds",{"_index":444,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersSubscriber.html":{}}}],["sanitizebody",{"_index":606,"title":{},"body":{"classes/CatchEverythingFilter.html":{}}}],["sanitizebody(body",{"_index":625,"title":{},"body":{"classes/CatchEverythingFilter.html":{}}}],["schema",{"_index":1293,"title":{},"body":{"injectables/SchemaService.html":{}}}],["schema.service",{"_index":102,"title":{},"body":{"modules/AppModule.html":{}}}],["schemaservice",{"_index":67,"title":{"injectables/SchemaService.html":{}},"body":{"modules/AppModule.html":{},"injectables/SchemaService.html":{},"coverage.html":{},"overview.html":{}}}],["schemaservice.name",{"_index":1295,"title":{},"body":{"injectables/SchemaService.html":{}}}],["sdk/credential",{"_index":1251,"title":{},"body":{"injectables/S3Service.html":{},"dependencies.html":{}}}],["sdk/s3",{"_index":1248,"title":{},"body":{"injectables/S3Service.html":{},"dependencies.html":{}}}],["sdk/util",{"_index":1258,"title":{},"body":{"injectables/S3Service.html":{},"dependencies.html":{}}}],["seconds",{"_index":252,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["secret",{"_index":408,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{}}}],["secretaccesskey",{"_index":1308,"title":{},"body":{"modules/StorageModule.html":{}}}],["secretorkey",{"_index":1055,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["secure",{"_index":901,"title":{},"body":{"modules/EmailModule.html":{}}}],["securely",{"_index":1686,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["sendemail",{"_index":912,"title":{},"body":{"classes/EmailService.html":{}}}],["sendemail(to",{"_index":916,"title":{},"body":{"classes/EmailService.html":{}}}],["sending",{"_index":921,"title":{},"body":{"classes/EmailService.html":{}}}],["sent",{"_index":376,"title":{},"body":{"controllers/AuthController.html":{},"classes/EmailService.html":{},"classes/ResetPasswordDto.html":{}}}],["serializable",{"_index":1509,"title":{},"body":{"injectables/UsersService.html":{}}}],["session",{"_index":1028,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/StripeService.html":{}}}],["session.id",{"_index":1337,"title":{},"body":{"injectables/StripeService.html":{}}}],["set",{"_index":212,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["set(key",{"_index":243,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["setmetadata(is_public_key",{"_index":1752,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setting",{"_index":273,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["setup",{"_index":1714,"title":{},"body":{"index.html":{}}}],["setupswagger",{"_index":1573,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["setupswagger(app",{"_index":1706,"title":{},"body":{"miscellaneous/functions.html":{}}}],["sha256",{"_index":1277,"title":{},"body":{"injectables/S3Service.html":{}}}],["sign",{"_index":1418,"title":{},"body":{"controllers/UsersController.html":{}}}],["signedurlobject",{"_index":1279,"title":{},"body":{"injectables/S3Service.html":{}}}],["signoptions",{"_index":410,"title":{},"body":{"modules/AuthModule.html":{}}}],["single",{"_index":1027,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["size=${file.size",{"_index":732,"title":{},"body":{"injectables/CloudinaryService.html":{},"injectables/S3Service.html":{}}}],["smithy/hash",{"_index":1253,"title":{},"body":{"injectables/S3Service.html":{},"dependencies.html":{}}}],["smithy/protocol",{"_index":1256,"title":{},"body":{"injectables/S3Service.html":{},"dependencies.html":{}}}],["smithy/url",{"_index":1244,"title":{},"body":{"injectables/S3Service.html":{}}}],["smtp.auth.user",{"_index":906,"title":{},"body":{"modules/EmailModule.html":{}}}],["soft",{"_index":580,"title":{},"body":{"classes/BaseEntity.html":{}}}],["softdelete",{"_index":595,"title":{},"body":{"classes/BaseEntity.html":{}}}],["source",{"_index":4,"title":{},"body":{"interfaces/ApiResponse.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AppRedisModule.html":{},"injectables/AppRedisService.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/AuthResponseDto.html":{},"injectables/AuthService.html":{},"classes/BaseEntity.html":{},"classes/CatchEverythingFilter.html":{},"classes/ChangePasswordDto.html":{},"injectables/CloudinaryService.html":{},"injectables/CreateUserCommand.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserResponseDto.html":{},"modules/EmailModule.html":{},"classes/EmailService.html":{},"interfaces/ErrorResponse.html":{},"classes/ForgotPasswordDto.html":{},"classes/GetProfileResponseDto.html":{},"modules/HttpClientModule.html":{},"injectables/HttpClientService.html":{},"interfaces/IPaymentService.html":{},"interfaces/IStrorageService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"injectables/MorganMiddleware.html":{},"classes/PasswordResetEmailConsumer.html":{},"modules/PaymentModule.html":{},"classes/RefreshTokenDto.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/RequestContextMiddleware.html":{},"classes/ResetPasswordDto.html":{},"guards/RoleGuard.html":{},"injectables/S3Service.html":{},"injectables/SchemaService.html":{},"modules/StorageModule.html":{},"injectables/StripeService.html":{},"injectables/SuccessResponseInterceptor.html":{},"classes/UpdateProfileDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/UsersSubscriber.html":{}}}],["springfield",{"_index":865,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["springfield'})@isstring()@isoptional",{"_index":828,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["src/.../auth",{"_index":1744,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../checkout.ts",{"_index":1745,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../common.utils.ts",{"_index":1698,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../index.ts",{"_index":1680,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../main.cli.ts",{"_index":1696,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../main.ts",{"_index":1697,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../payment",{"_index":1746,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../public.decorator.ts",{"_index":1749,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../s3",{"_index":1747,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../swagger.config.ts",{"_index":1701,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../time.util.ts",{"_index":1700,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../tracing.ts",{"_index":1750,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../user.util.ts",{"_index":1699,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/app.controller.ts",{"_index":27,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:12",{"_index":37,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":71,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.module.ts:81",{"_index":76,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":301,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":303,"title":{},"body":{"injectables/AppService.html":{}}}],["src/commands/create",{"_index":751,"title":{},"body":{"injectables/CreateUserCommand.html":{},"coverage.html":{}}}],["src/common/constants",{"_index":403,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CreateUserCommand.html":{},"modules/EmailModule.html":{},"classes/PasswordResetEmailConsumer.html":{},"modules/PaymentModule.html":{},"modules/StorageModule.html":{},"injectables/StripeService.html":{}}}],["src/common/constants/index.ts",{"_index":1555,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/common/decorators/index.ts",{"_index":1559,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/common/entities/base.entitiy",{"_index":1400,"title":{},"body":{"entities/User.html":{}}}],["src/common/entities/base.entitiy.ts",{"_index":565,"title":{},"body":{"classes/BaseEntity.html":{},"coverage.html":{}}}],["src/common/entities/base.entitiy.ts:15",{"_index":581,"title":{},"body":{"classes/BaseEntity.html":{}}}],["src/common/entities/base.entitiy.ts:22",{"_index":578,"title":{},"body":{"classes/BaseEntity.html":{}}}],["src/common/entities/base.entitiy.ts:30",{"_index":589,"title":{},"body":{"classes/BaseEntity.html":{}}}],["src/common/entities/base.entitiy.ts:8",{"_index":585,"title":{},"body":{"classes/BaseEntity.html":{}}}],["src/common/enums",{"_index":720,"title":{},"body":{"injectables/CloudinaryService.html":{},"injectables/CreateUserCommand.html":{},"classes/CreateUserDto.html":{},"interfaces/IStrorageService.html":{},"classes/PasswordResetEmailConsumer.html":{},"modules/PaymentModule.html":{},"injectables/S3Service.html":{},"modules/StorageModule.html":{},"entities/User.html":{}}}],["src/common/enums/index.ts",{"_index":1683,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/common/filters/exception.filter.ts",{"_index":599,"title":{},"body":{"classes/CatchEverythingFilter.html":{},"coverage.html":{}}}],["src/common/filters/exception.filter.ts:108",{"_index":622,"title":{},"body":{"classes/CatchEverythingFilter.html":{}}}],["src/common/filters/exception.filter.ts:119",{"_index":617,"title":{},"body":{"classes/CatchEverythingFilter.html":{}}}],["src/common/filters/exception.filter.ts:123",{"_index":626,"title":{},"body":{"classes/CatchEverythingFilter.html":{}}}],["src/common/filters/exception.filter.ts:20",{"_index":609,"title":{},"body":{"classes/CatchEverythingFilter.html":{}}}],["src/common/filters/exception.filter.ts:27",{"_index":614,"title":{},"body":{"classes/CatchEverythingFilter.html":{}}}],["src/common/filters/exception.filter.ts:78",{"_index":624,"title":{},"body":{"classes/CatchEverythingFilter.html":{}}}],["src/common/filters/exception.filter.ts:92",{"_index":620,"title":{},"body":{"classes/CatchEverythingFilter.html":{}}}],["src/common/guards/role.guard.ts",{"_index":1219,"title":{},"body":{"guards/RoleGuard.html":{},"coverage.html":{}}}],["src/common/guards/role.guard.ts:13",{"_index":1220,"title":{},"body":{"guards/RoleGuard.html":{}}}],["src/common/guards/role.guard.ts:16",{"_index":1221,"title":{},"body":{"guards/RoleGuard.html":{}}}],["src/common/interceptors/response.interceptor.ts",{"_index":1166,"title":{},"body":{"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/SuccessResponseInterceptor.html":{},"coverage.html":{}}}],["src/common/interceptors/response.interceptor.ts:16",{"_index":1354,"title":{},"body":{"injectables/SuccessResponseInterceptor.html":{}}}],["src/common/interceptors/response.interceptor.ts:53",{"_index":1168,"title":{},"body":{"injectables/RequestBodyAndResponseInterceptor.html":{}}}],["src/common/interceptors/response.interceptor.ts:56",{"_index":1171,"title":{},"body":{"injectables/RequestBodyAndResponseInterceptor.html":{}}}],["src/common/interfaces/api",{"_index":6,"title":{},"body":{"interfaces/ApiResponse.html":{},"controllers/AuthController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["src/common/interfaces/error",{"_index":924,"title":{},"body":{"interfaces/ErrorResponse.html":{},"coverage.html":{}}}],["src/common/middlewares/morgan.middleware.ts",{"_index":1075,"title":{},"body":{"injectables/MorganMiddleware.html":{},"coverage.html":{}}}],["src/common/middlewares/morgan.middleware.ts:11",{"_index":1076,"title":{},"body":{"injectables/MorganMiddleware.html":{}}}],["src/common/middlewares/morgan.middleware.ts:14",{"_index":1079,"title":{},"body":{"injectables/MorganMiddleware.html":{}}}],["src/common/middlewares/request",{"_index":1197,"title":{},"body":{"injectables/RequestContextMiddleware.html":{},"coverage.html":{}}}],["src/common/types/index.ts",{"_index":1565,"title":{},"body":{"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/common/utils/common.utils.ts",{"_index":1567,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/common/utils/time.util.ts",{"_index":1569,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/common/utils/user.util",{"_index":1402,"title":{},"body":{"entities/User.html":{},"injectables/UsersSubscriber.html":{}}}],["src/common/utils/user.util.ts",{"_index":1571,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/config/swagger.config.ts",{"_index":1572,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/main.cli.ts",{"_index":1574,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/main.ts",{"_index":1575,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/modules/auth/auth.controller.ts",{"_index":307,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/modules/auth/auth.controller.ts:31",{"_index":325,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/modules/auth/auth.controller.ts:47",{"_index":332,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/modules/auth/auth.controller.ts:63",{"_index":319,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/modules/auth/auth.controller.ts:79",{"_index":337,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/modules/auth/auth.module.ts",{"_index":388,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/modules/auth/auth.service.ts",{"_index":438,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/modules/auth/auth.service.ts:135",{"_index":453,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:160",{"_index":459,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:21",{"_index":468,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:22",{"_index":464,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:23",{"_index":465,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:24",{"_index":467,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:25",{"_index":466,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:26",{"_index":451,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:50",{"_index":462,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:68",{"_index":455,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:83",{"_index":457,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/consumers/auth.consumer.ts",{"_index":1103,"title":{},"body":{"classes/PasswordResetEmailConsumer.html":{},"coverage.html":{}}}],["src/modules/auth/consumers/auth.consumer.ts:12",{"_index":1106,"title":{},"body":{"classes/PasswordResetEmailConsumer.html":{}}}],["src/modules/auth/consumers/auth.consumer.ts:20",{"_index":1109,"title":{},"body":{"classes/PasswordResetEmailConsumer.html":{}}}],["src/modules/auth/decorators/public.decorator",{"_index":1139,"title":{},"body":{"modules/PaymentModule.html":{}}}],["src/modules/auth/decorators/public.decorator.ts",{"_index":1577,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/modules/auth/dto/auth",{"_index":426,"title":{},"body":{"classes/AuthResponseDto.html":{},"coverage.html":{}}}],["src/modules/auth/dto/forgot",{"_index":925,"title":{},"body":{"classes/ForgotPasswordDto.html":{},"coverage.html":{}}}],["src/modules/auth/dto/login.dto.ts",{"_index":1072,"title":{},"body":{"classes/LoginDto.html":{},"coverage.html":{}}}],["src/modules/auth/dto/login.dto.ts:10",{"_index":1073,"title":{},"body":{"classes/LoginDto.html":{}}}],["src/modules/auth/dto/login.dto.ts:16",{"_index":1074,"title":{},"body":{"classes/LoginDto.html":{}}}],["src/modules/auth/dto/refresh",{"_index":1160,"title":{},"body":{"classes/RefreshTokenDto.html":{},"coverage.html":{}}}],["src/modules/auth/dto/reset",{"_index":1207,"title":{},"body":{"classes/ResetPasswordDto.html":{},"coverage.html":{}}}],["src/modules/auth/guards/jwt",{"_index":990,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["src/modules/auth/guards/local",{"_index":1058,"title":{},"body":{"injectables/LocalAuthGuard.html":{},"coverage.html":{}}}],["src/modules/auth/strategies/jwt.strategy.ts",{"_index":1015,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/modules/auth/strategies/jwt.strategy.ts:34",{"_index":1019,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/modules/auth/strategies/jwt.strategy.ts:8",{"_index":1017,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/modules/auth/strategies/local.strategy.ts",{"_index":1060,"title":{},"body":{"injectables/LocalStrategy.html":{},"coverage.html":{}}}],["src/modules/auth/strategies/local.strategy.ts:17",{"_index":1064,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/modules/auth/strategies/local.strategy.ts:9",{"_index":1062,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/modules/auth/types/auth",{"_index":1580,"title":{},"body":{"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/modules/users/dto/change",{"_index":675,"title":{},"body":{"classes/ChangePasswordDto.html":{},"coverage.html":{}}}],["src/modules/users/dto/create",{"_index":815,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/modules/users/dto/responses.dto.ts",{"_index":877,"title":{},"body":{"classes/CreateUserResponseDto.html":{},"classes/GetProfileResponseDto.html":{},"coverage.html":{}}}],["src/modules/users/dto/responses.dto.ts:15",{"_index":879,"title":{},"body":{"classes/CreateUserResponseDto.html":{}}}],["src/modules/users/dto/responses.dto.ts:23",{"_index":930,"title":{},"body":{"classes/GetProfileResponseDto.html":{}}}],["src/modules/users/dto/responses.dto.ts:29",{"_index":929,"title":{},"body":{"classes/GetProfileResponseDto.html":{}}}],["src/modules/users/dto/responses.dto.ts:9",{"_index":880,"title":{},"body":{"classes/CreateUserResponseDto.html":{}}}],["src/modules/users/dto/update",{"_index":1356,"title":{},"body":{"classes/UpdateProfileDto.html":{},"coverage.html":{}}}],["src/modules/users/entities/user.entity.ts",{"_index":1364,"title":{},"body":{"entities/User.html":{},"coverage.html":{}}}],["src/modules/users/entities/user.entity.ts:106",{"_index":1387,"title":{},"body":{"entities/User.html":{}}}],["src/modules/users/entities/user.entity.ts:115",{"_index":1395,"title":{},"body":{"entities/User.html":{}}}],["src/modules/users/entities/user.entity.ts:122",{"_index":1373,"title":{},"body":{"entities/User.html":{}}}],["src/modules/users/entities/user.entity.ts:129",{"_index":1388,"title":{},"body":{"entities/User.html":{}}}],["src/modules/users/entities/user.entity.ts:136",{"_index":1384,"title":{},"body":{"entities/User.html":{}}}],["src/modules/users/entities/user.entity.ts:22",{"_index":1382,"title":{},"body":{"entities/User.html":{}}}],["src/modules/users/entities/user.entity.ts:30",{"_index":1370,"title":{},"body":{"entities/User.html":{}}}],["src/modules/users/entities/user.entity.ts:37",{"_index":1383,"title":{},"body":{"entities/User.html":{}}}],["src/modules/users/entities/user.entity.ts:44",{"_index":1385,"title":{},"body":{"entities/User.html":{}}}],["src/modules/users/entities/user.entity.ts:51",{"_index":1368,"title":{},"body":{"entities/User.html":{}}}],["src/modules/users/entities/user.entity.ts:59",{"_index":1375,"title":{},"body":{"entities/User.html":{}}}],["src/modules/users/entities/user.entity.ts:67",{"_index":1392,"title":{},"body":{"entities/User.html":{}}}],["src/modules/users/entities/user.entity.ts:75",{"_index":1397,"title":{},"body":{"entities/User.html":{}}}],["src/modules/users/entities/user.entity.ts:83",{"_index":1376,"title":{},"body":{"entities/User.html":{}}}],["src/modules/users/entities/user.entity.ts:91",{"_index":1379,"title":{},"body":{"entities/User.html":{}}}],["src/modules/users/entities/user.entity.ts:99",{"_index":1390,"title":{},"body":{"entities/User.html":{}}}],["src/modules/users/subscribers/user.subscriber.ts",{"_index":1520,"title":{},"body":{"injectables/UsersSubscriber.html":{},"coverage.html":{}}}],["src/modules/users/subscribers/user.subscriber.ts:12",{"_index":1530,"title":{},"body":{"injectables/UsersSubscriber.html":{}}}],["src/modules/users/subscribers/user.subscriber.ts:16",{"_index":1527,"title":{},"body":{"injectables/UsersSubscriber.html":{}}}],["src/modules/users/subscribers/user.subscriber.ts:24",{"_index":1529,"title":{},"body":{"injectables/UsersSubscriber.html":{}}}],["src/modules/users/subscribers/user.subscriber.ts:34",{"_index":1537,"title":{},"body":{"injectables/UsersSubscriber.html":{}}}],["src/modules/users/subscribers/user.subscriber.ts:38",{"_index":1535,"title":{},"body":{"injectables/UsersSubscriber.html":{}}}],["src/modules/users/subscribers/user.subscriber.ts:46",{"_index":1533,"title":{},"body":{"injectables/UsersSubscriber.html":{}}}],["src/modules/users/subscribers/user.subscriber.ts:9",{"_index":1524,"title":{},"body":{"injectables/UsersSubscriber.html":{}}}],["src/modules/users/users.controller.ts",{"_index":1409,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/modules/users/users.controller.ts:28",{"_index":1421,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/modules/users/users.controller.ts:40",{"_index":1424,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/modules/users/users.controller.ts:55",{"_index":1429,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/modules/users/users.controller.ts:72",{"_index":1414,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/modules/users/users.module.ts",{"_index":1458,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/modules/users/users.service",{"_index":790,"title":{},"body":{"injectables/CreateUserCommand.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["src/modules/users/users.service.ts",{"_index":1462,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["src/modules/users/users.service.ts:129",{"_index":1470,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/modules/users/users.service.ts:21",{"_index":1482,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/modules/users/users.service.ts:22",{"_index":1468,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/modules/users/users.service.ts:34",{"_index":1472,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/modules/users/users.service.ts:51",{"_index":1477,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/modules/users/users.service.ts:99",{"_index":1481,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/schema.service.ts",{"_index":1282,"title":{},"body":{"injectables/SchemaService.html":{},"coverage.html":{}}}],["src/schema.service.ts:14",{"_index":1284,"title":{},"body":{"injectables/SchemaService.html":{}}}],["src/schema.service.ts:22",{"_index":1285,"title":{},"body":{"injectables/SchemaService.html":{}}}],["src/services/email/email.module.ts",{"_index":889,"title":{},"body":{"modules/EmailModule.html":{}}}],["src/services/email/email.service",{"_index":1113,"title":{},"body":{"classes/PasswordResetEmailConsumer.html":{}}}],["src/services/email/email.service.ts",{"_index":911,"title":{},"body":{"classes/EmailService.html":{},"coverage.html":{}}}],["src/services/email/email.service.ts:11",{"_index":919,"title":{},"body":{"classes/EmailService.html":{}}}],["src/services/email/email.service.ts:4",{"_index":915,"title":{},"body":{"classes/EmailService.html":{}}}],["src/services/http",{"_index":936,"title":{},"body":{"modules/HttpClientModule.html":{},"injectables/HttpClientService.html":{},"coverage.html":{}}}],["src/services/payment/interfaces/payment.interface.ts",{"_index":968,"title":{},"body":{"interfaces/IPaymentService.html":{},"coverage.html":{}}}],["src/services/payment/interfaces/payment.interface.ts:4",{"_index":974,"title":{},"body":{"interfaces/IPaymentService.html":{}}}],["src/services/payment/interfaces/payment.interface.ts:9",{"_index":978,"title":{},"body":{"interfaces/IPaymentService.html":{}}}],["src/services/payment/payment.module.ts",{"_index":1129,"title":{},"body":{"modules/PaymentModule.html":{}}}],["src/services/payment/payment.module.ts:16",{"_index":1132,"title":{},"body":{"modules/PaymentModule.html":{}}}],["src/services/payment/stripe.service.ts",{"_index":1319,"title":{},"body":{"injectables/StripeService.html":{},"coverage.html":{}}}],["src/services/payment/stripe.service.ts:14",{"_index":1321,"title":{},"body":{"injectables/StripeService.html":{}}}],["src/services/payment/stripe.service.ts:23",{"_index":1322,"title":{},"body":{"injectables/StripeService.html":{}}}],["src/services/payment/stripe.service.ts:45",{"_index":1323,"title":{},"body":{"injectables/StripeService.html":{}}}],["src/services/payment/stripe.service.ts:60",{"_index":1327,"title":{},"body":{"injectables/StripeService.html":{}}}],["src/services/payment/types/checkout.ts",{"_index":1584,"title":{},"body":{"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/services/payment/types/payment",{"_index":1585,"title":{},"body":{"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/services/redis/redis.module",{"_index":401,"title":{},"body":{"modules/AuthModule.html":{},"modules/UsersModule.html":{}}}],["src/services/redis/redis.module.ts",{"_index":191,"title":{},"body":{"modules/AppRedisModule.html":{}}}],["src/services/redis/redis.service",{"_index":481,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["src/services/redis/redis.service.ts",{"_index":204,"title":{},"body":{"injectables/AppRedisService.html":{},"coverage.html":{}}}],["src/services/redis/redis.service.ts:106",{"_index":232,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["src/services/redis/redis.service.ts:29",{"_index":247,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["src/services/redis/redis.service.ts:46",{"_index":238,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["src/services/redis/redis.service.ts:57",{"_index":241,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["src/services/redis/redis.service.ts:72",{"_index":219,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["src/services/redis/redis.service.ts:76",{"_index":236,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["src/services/redis/redis.service.ts:8",{"_index":217,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["src/services/redis/redis.service.ts:90",{"_index":223,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["src/services/storage/cloudinary.service.ts",{"_index":702,"title":{},"body":{"injectables/CloudinaryService.html":{},"coverage.html":{}}}],["src/services/storage/cloudinary.service.ts:14",{"_index":705,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["src/services/storage/cloudinary.service.ts:26",{"_index":710,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["src/services/storage/interfaces/storage.interface.ts",{"_index":980,"title":{},"body":{"interfaces/IStrorageService.html":{},"coverage.html":{}}}],["src/services/storage/interfaces/storage.interface.ts:10",{"_index":985,"title":{},"body":{"interfaces/IStrorageService.html":{}}}],["src/services/storage/interfaces/storage.interface.ts:15",{"_index":984,"title":{},"body":{"interfaces/IStrorageService.html":{}}}],["src/services/storage/s3.service.ts",{"_index":1229,"title":{},"body":{"injectables/S3Service.html":{},"coverage.html":{}}}],["src/services/storage/s3.service.ts:22",{"_index":1238,"title":{},"body":{"injectables/S3Service.html":{}}}],["src/services/storage/s3.service.ts:23",{"_index":1239,"title":{},"body":{"injectables/S3Service.html":{}}}],["src/services/storage/s3.service.ts:24",{"_index":1234,"title":{},"body":{"injectables/S3Service.html":{}}}],["src/services/storage/s3.service.ts:35",{"_index":1236,"title":{},"body":{"injectables/S3Service.html":{}}}],["src/services/storage/s3.service.ts:65",{"_index":1235,"title":{},"body":{"injectables/S3Service.html":{}}}],["src/services/storage/storage.module.ts",{"_index":1297,"title":{},"body":{"modules/StorageModule.html":{}}}],["src/services/storage/storage.module.ts:11",{"_index":1298,"title":{},"body":{"modules/StorageModule.html":{}}}],["src/services/storage/types/s3",{"_index":1588,"title":{},"body":{"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/templates/email",{"_index":910,"title":{},"body":{"modules/EmailModule.html":{}}}],["src/tracing.ts",{"_index":1590,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["st",{"_index":827,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["start",{"_index":1718,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":1721,"title":{},"body":{"index.html":{}}}],["start:prodrun",{"_index":1722,"title":{},"body":{"index.html":{}}}],["started",{"_index":1709,"title":{"index.html":{}},"body":{}}],["starter",{"_index":1711,"title":{},"body":{"index.html":{}}}],["starting",{"_index":730,"title":{},"body":{"injectables/CloudinaryService.html":{},"injectables/S3Service.html":{}}}],["state",{"_index":824,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/User.html":{}}}],["state/province",{"_index":1396,"title":{},"body":{"entities/User.html":{}}}],["statements",{"_index":1552,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":1130,"title":{},"body":{"modules/PaymentModule.html":{},"modules/StorageModule.html":{}}}],["status",{"_index":670,"title":{},"body":{"classes/CatchEverythingFilter.html":{},"injectables/MorganMiddleware.html":{}}}],["statuscode",{"_index":13,"title":{},"body":{"interfaces/ApiResponse.html":{},"controllers/AuthController.html":{},"classes/CatchEverythingFilter.html":{},"interfaces/ErrorResponse.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/SuccessResponseInterceptor.html":{},"controllers/UsersController.html":{}}}],["stops",{"_index":1044,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["storage",{"_index":1318,"title":{},"body":{"modules/StorageModule.html":{}}}],["storage_provider",{"_index":1300,"title":{},"body":{"modules/StorageModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["storagedriverenum",{"_index":1301,"title":{},"body":{"modules/StorageModule.html":{},"miscellaneous/enumerations.html":{}}}],["storagedriverenum.cloudinary",{"_index":1313,"title":{},"body":{"modules/StorageModule.html":{}}}],["storagedriverenum.s3",{"_index":1315,"title":{},"body":{"modules/StorageModule.html":{}}}],["storagemodule",{"_index":1296,"title":{"modules/StorageModule.html":{}},"body":{"modules/StorageModule.html":{},"modules.html":{}}}],["store",{"_index":249,"title":{},"body":{"injectables/AppRedisService.html":{},"injectables/JwtStrategy.html":{}}}],["stored",{"_index":1031,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["strategies/jwt.strategy",{"_index":398,"title":{},"body":{"modules/AuthModule.html":{}}}],["strategies/local.strategy",{"_index":397,"title":{},"body":{"modules/AuthModule.html":{}}}],["strategy",{"_index":1049,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["stream",{"_index":717,"title":{},"body":{"injectables/CloudinaryService.html":{},"injectables/MorganMiddleware.html":{},"dependencies.html":{}}}],["street",{"_index":1367,"title":{},"body":{"entities/User.html":{}}}],["strict",{"_index":153,"title":{},"body":{"modules/AppModule.html":{},"modules/EmailModule.html":{}}}],["string",{"_index":17,"title":{},"body":{"interfaces/ApiResponse.html":{},"controllers/AppController.html":{},"injectables/AppRedisService.html":{},"injectables/AppService.html":{},"classes/AuthResponseDto.html":{},"injectables/AuthService.html":{},"classes/BaseEntity.html":{},"classes/CatchEverythingFilter.html":{},"classes/ChangePasswordDto.html":{},"injectables/CreateUserCommand.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserResponseDto.html":{},"classes/EmailService.html":{},"interfaces/ErrorResponse.html":{},"classes/ForgotPasswordDto.html":{},"classes/GetProfileResponseDto.html":{},"injectables/HttpClientService.html":{},"interfaces/IStrorageService.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"injectables/MorganMiddleware.html":{},"classes/RefreshTokenDto.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"classes/ResetPasswordDto.html":{},"guards/RoleGuard.html":{},"injectables/S3Service.html":{},"injectables/SuccessResponseInterceptor.html":{},"entities/User.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["stringvalue",{"_index":463,"title":{},"body":{"injectables/AuthService.html":{}}}],["stripe",{"_index":979,"title":{},"body":{"interfaces/IPaymentService.html":{},"modules/PaymentModule.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"guards/RoleGuard.html":{},"injectables/StripeService.html":{},"injectables/SuccessResponseInterceptor.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{}}}],["stripe.checkout.sessioncreateparams",{"_index":972,"title":{},"body":{"interfaces/IPaymentService.html":{},"injectables/StripeService.html":{}}}],["stripe.paymentintent",{"_index":1345,"title":{},"body":{"injectables/StripeService.html":{}}}],["stripe.paymentintentcreateparams",{"_index":977,"title":{},"body":{"interfaces/IPaymentService.html":{},"injectables/StripeService.html":{}}}],["stripe.paymentintentsucceededevent",{"_index":1325,"title":{},"body":{"injectables/StripeService.html":{}}}],["stripe.paymentintentsucceededevent.data",{"_index":1343,"title":{},"body":{"injectables/StripeService.html":{}}}],["stripe.requestoptions",{"_index":973,"title":{},"body":{"interfaces/IPaymentService.html":{},"injectables/StripeService.html":{}}}],["stripe.service",{"_index":1141,"title":{},"body":{"modules/PaymentModule.html":{}}}],["stripe.webhooksecret.account",{"_index":1150,"title":{},"body":{"modules/PaymentModule.html":{}}}],["stripe.webhooksecret.accounttest",{"_index":1152,"title":{},"body":{"modules/PaymentModule.html":{}}}],["stripe_client_token",{"_index":1134,"title":{},"body":{"modules/PaymentModule.html":{}}}],["stripe_webhook_context_type",{"_index":1173,"title":{},"body":{"injectables/RequestBodyAndResponseInterceptor.html":{},"guards/RoleGuard.html":{},"injectables/SuccessResponseInterceptor.html":{}}}],["stripeclient",{"_index":1155,"title":{},"body":{"modules/PaymentModule.html":{},"injectables/StripeService.html":{}}}],["stripecurrencyenum",{"_index":1682,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["stripemodule",{"_index":1135,"title":{},"body":{"modules/PaymentModule.html":{}}}],["stripemodule.forrootasync",{"_index":1143,"title":{},"body":{"modules/PaymentModule.html":{}}}],["stripesecrets",{"_index":1147,"title":{},"body":{"modules/PaymentModule.html":{}}}],["stripeservice",{"_index":1140,"title":{"injectables/StripeService.html":{}},"body":{"modules/PaymentModule.html":{},"injectables/StripeService.html":{},"coverage.html":{}}}],["stripeservice.name",{"_index":1335,"title":{},"body":{"injectables/StripeService.html":{}}}],["stripewebhookhandler",{"_index":1330,"title":{},"body":{"injectables/StripeService.html":{}}}],["stripewebhookhandler('payment_intent.succeeded",{"_index":1326,"title":{},"body":{"injectables/StripeService.html":{}}}],["strong.pass",{"_index":678,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginDto.html":{}}}],["sub",{"_index":513,"title":{},"body":{"injectables/AuthService.html":{}}}],["subject",{"_index":917,"title":{},"body":{"classes/EmailService.html":{}}}],["subscribers",{"_index":156,"title":{},"body":{"modules/AppModule.html":{}}}],["subscribers/user.subscriber",{"_index":1460,"title":{},"body":{"modules/UsersModule.html":{}}}],["success",{"_index":434,"title":{},"body":{"classes/AuthResponseDto.html":{},"classes/CreateUserResponseDto.html":{},"classes/GetProfileResponseDto.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/SuccessResponseInterceptor.html":{}}}],["successful",{"_index":365,"title":{},"body":{"controllers/AuthController.html":{},"classes/AuthResponseDto.html":{},"injectables/CloudinaryService.html":{},"injectables/HttpClientService.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/S3Service.html":{},"injectables/SuccessResponseInterceptor.html":{}}}],["successfully",{"_index":257,"title":{},"body":{"injectables/AppRedisService.html":{},"classes/CreateUserResponseDto.html":{},"classes/EmailService.html":{},"classes/GetProfileResponseDto.html":{},"classes/PasswordResetEmailConsumer.html":{},"injectables/StripeService.html":{},"controllers/UsersController.html":{}}}],["successresponseinterceptor",{"_index":1178,"title":{"injectables/SuccessResponseInterceptor.html":{}},"body":{"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/SuccessResponseInterceptor.html":{},"coverage.html":{}}}],["summary",{"_index":49,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["super",{"_index":797,"title":{},"body":{"injectables/CreateUserCommand.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/PasswordResetEmailConsumer.html":{}}}],["super.canactivate(context",{"_index":1010,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["support",{"_index":1025,"title":{},"body":{"injectables/JwtStrategy.html":{},"modules.html":{}}}],["svg",{"_index":1730,"title":{},"body":{"modules.html":{}}}],["symbol",{"_index":690,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/ResetPasswordDto.html":{}}}],["synchronized",{"_index":1294,"title":{},"body":{"injectables/SchemaService.html":{}}}],["system",{"_index":1494,"title":{},"body":{"injectables/UsersService.html":{}}}],["t",{"_index":14,"title":{},"body":{"interfaces/ApiResponse.html":{}}}],["table",{"_index":1594,"title":{},"body":{"coverage.html":{}}}],["tablename",{"_index":1403,"title":{},"body":{"entities/User.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":1593,"title":{},"body":{"coverage.html":{}}}],["tap",{"_index":1176,"title":{},"body":{"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/SuccessResponseInterceptor.html":{}}}],["tap((response",{"_index":1195,"title":{},"body":{"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/SuccessResponseInterceptor.html":{}}}],["template",{"_index":907,"title":{},"body":{"modules/EmailModule.html":{},"classes/EmailService.html":{},"miscellaneous/variables.html":{}}}],["template_queue_name",{"_index":1136,"title":{},"body":{"modules/PaymentModule.html":{},"injectables/StripeService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["templatequeue",{"_index":1156,"title":{},"body":{"modules/PaymentModule.html":{},"injectables/StripeService.html":{}}}],["test",{"_index":1725,"title":{},"body":{"index.html":{}}}],["test:cov",{"_index":1728,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":1727,"title":{},"body":{"index.html":{}}}],["tests",{"_index":1723,"title":{},"body":{"index.html":{}}}],["text",{"_index":1366,"title":{},"body":{"entities/User.html":{},"miscellaneous/functions.html":{}}}],["textmappropagator",{"_index":1757,"title":{},"body":{"miscellaneous/variables.html":{}}}],["this.appredis",{"_index":262,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["this.appredis.decr(key",{"_index":292,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["this.appredis.del(...keys",{"_index":300,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["this.appredis.del(key",{"_index":297,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["this.appredis.exists(key",{"_index":293,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["this.appredis.get(key",{"_index":280,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["this.appredis.pipeline",{"_index":284,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["this.appredis.set(...(args",{"_index":278,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["this.appredisservice.exists(cachekey",{"_index":520,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.appredisservice.get(cachekey",{"_index":1503,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.appredisservice.set",{"_index":539,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["this.authservice.forgotpassword(email",{"_index":375,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.login",{"_index":362,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.refresh(refreshtoken",{"_index":370,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.resetpassword",{"_index":381,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.validateuser(email",{"_index":1068,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["this.configservice.get('auth.saltrounds",{"_index":1547,"title":{},"body":{"injectables/UsersSubscriber.html":{}}}],["this.configservice.getorthrow",{"_index":493,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.configservice.getorthrow('auth.jwt.expiresin",{"_index":487,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.configservice.getorthrow('auth.saltrounds",{"_index":498,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.configservice.getorthrow('aws.s3.bucket",{"_index":1260,"title":{},"body":{"injectables/S3Service.html":{}}}],["this.configservice.getorthrow('aws.s3.region",{"_index":1262,"title":{},"body":{"injectables/S3Service.html":{}}}],["this.configservice.getorthrow('cloudinary.apikey",{"_index":727,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["this.configservice.getorthrow('cloudinary.apisecret",{"_index":729,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["this.configservice.getorthrow('cloudinary.cloudname",{"_index":725,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["this.configservice.getorthrow('cloudinary.folder')}/${filecategory",{"_index":740,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["this.configservice.getorthrow('nodeenv",{"_index":1288,"title":{},"body":{"injectables/SchemaService.html":{}}}],["this.configservice.getorthrow('redis.bullboard.password",{"_index":179,"title":{},"body":{"modules/AppModule.html":{}}}],["this.configservice.getorthrow('redis.bullboard.username",{"_index":178,"title":{},"body":{"modules/AppModule.html":{}}}],["this.configservice.getorthrow('redis.namespace",{"_index":264,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["this.configservice.getorthrow('url.passwordreset",{"_index":485,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.em.fork",{"_index":800,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["this.emailservice.sendemail",{"_index":1122,"title":{},"body":{"classes/PasswordResetEmailConsumer.html":{}}}],["this.geterrorcode(exception",{"_index":664,"title":{},"body":{"classes/CatchEverythingFilter.html":{}}}],["this.geterrormessage(exception",{"_index":661,"title":{},"body":{"classes/CatchEverythingFilter.html":{}}}],["this.geterrorname(exception",{"_index":662,"title":{},"body":{"classes/CatchEverythingFilter.html":{}}}],["this.gethttpstatus(exception",{"_index":659,"title":{},"body":{"classes/CatchEverythingFilter.html":{}}}],["this.hashpassword(user",{"_index":1541,"title":{},"body":{"injectables/UsersSubscriber.html":{}}}],["this.httpadapterhost",{"_index":635,"title":{},"body":{"classes/CatchEverythingFilter.html":{}}}],["this.httpagent",{"_index":961,"title":{},"body":{"injectables/HttpClientService.html":{}}}],["this.httpsagent",{"_index":963,"title":{},"body":{"injectables/HttpClientService.html":{}}}],["this.httpservice.axiosref.defaults.httpagent",{"_index":960,"title":{},"body":{"injectables/HttpClientService.html":{}}}],["this.httpservice.axiosref.defaults.httpsagent",{"_index":962,"title":{},"body":{"injectables/HttpClientService.html":{}}}],["this.ispasswordmodified(user",{"_index":1542,"title":{},"body":{"injectables/UsersSubscriber.html":{}}}],["this.jwtexpiresin",{"_index":486,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.jwtnotbefore",{"_index":488,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.jwtrefreshexpriresin",{"_index":492,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.jwtrefreshsecret",{"_index":495,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.jwtservice.sign",{"_index":543,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.jwtservice.sign(newpayload",{"_index":542,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.jwtservice.sign(payload",{"_index":515,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.jwtservice.verify(refreshtoken",{"_index":525,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.jwtservice.verify(resettoken",{"_index":555,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.loggercontext",{"_index":668,"title":{},"body":{"classes/CatchEverythingFilter.html":{}}}],["this.loggerservice.error",{"_index":666,"title":{},"body":{"classes/CatchEverythingFilter.html":{},"injectables/CloudinaryService.html":{}}}],["this.loggerservice.log",{"_index":272,"title":{},"body":{"injectables/AppRedisService.html":{},"injectables/CloudinaryService.html":{},"classes/EmailService.html":{},"injectables/HttpClientService.html":{},"classes/PasswordResetEmailConsumer.html":{},"injectables/S3Service.html":{},"injectables/SchemaService.html":{},"injectables/StripeService.html":{}}}],["this.loggerservice.log(`[${method",{"_index":1196,"title":{},"body":{"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/SuccessResponseInterceptor.html":{}}}],["this.loggerservice.log(`creating",{"_index":1338,"title":{},"body":{"injectables/StripeService.html":{}}}],["this.loggerservice.log(`email",{"_index":923,"title":{},"body":{"classes/EmailService.html":{}}}],["this.loggerservice.log(message.trim",{"_index":1101,"title":{},"body":{"injectables/MorganMiddleware.html":{}}}],["this.loggerservice.warn(message.trim",{"_index":1099,"title":{},"body":{"injectables/MorganMiddleware.html":{}}}],["this.mailerservice.sendmail",{"_index":922,"title":{},"body":{"classes/EmailService.html":{}}}],["this.nanoid",{"_index":808,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["this.normalizefields(user",{"_index":1540,"title":{},"body":{"injectables/UsersSubscriber.html":{}}}],["this.orm.getschemagenerator",{"_index":1290,"title":{},"body":{"injectables/SchemaService.html":{}}}],["this.passwordresetemailqueue.add('send",{"_index":548,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.passwordreseturl",{"_index":484,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.passwordreseturl}?reset",{"_index":546,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.redisservice.getorthrow",{"_index":263,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["this.reflector.get(role",{"_index":1223,"title":{},"body":{"guards/RoleGuard.html":{}}}],["this.reflector.getallandoverride(is_public_key",{"_index":1007,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["this.s3bucket",{"_index":1259,"title":{},"body":{"injectables/S3Service.html":{}}}],["this.s3client.putobject",{"_index":1265,"title":{},"body":{"injectables/S3Service.html":{}}}],["this.s3region",{"_index":1261,"title":{},"body":{"injectables/S3Service.html":{}}}],["this.saltrounds",{"_index":497,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.stripeclient.checkout.sessions.create",{"_index":1336,"title":{},"body":{"injectables/StripeService.html":{}}}],["this.stripeclient.paymentintents.create",{"_index":1342,"title":{},"body":{"injectables/StripeService.html":{}}}],["this.templatequeue.add(template_queue_name",{"_index":1346,"title":{},"body":{"injectables/StripeService.html":{}}}],["this.update",{"_index":1519,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.useremailcachekey",{"_index":1488,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.useremailcachekey}:${query?.email",{"_index":1501,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.useremailcachekey}:${user?.email",{"_index":1513,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.useridcachekey",{"_index":1486,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.useridcachekey}:${query",{"_index":1497,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.useridcachekey}:${query?.id",{"_index":1499,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.useridcachekey}:${user?.id",{"_index":1511,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.assign(user",{"_index":1516,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.create(parsed",{"_index":1506,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.create(userdata",{"_index":1495,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.findone",{"_index":1490,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.findoneorfail",{"_index":1514,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.findoneorfail(query",{"_index":1508,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.getentitymanager().merge(user",{"_index":1507,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.getentitymanager().persistandflush(newuser",{"_index":1496,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.getentitymanager().persistandflush(user",{"_index":1517,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersservice.changepassword(userid",{"_index":1452,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.create",{"_index":807,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["this.usersservice.create(user",{"_index":1442,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findone",{"_index":499,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["this.usersservice.update",{"_index":551,"title":{},"body":{"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"controllers/UsersController.html":{}}}],["throw",{"_index":521,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CreateUserCommand.html":{},"injectables/JwtAuthGuard.html":{},"injectables/LocalStrategy.html":{},"guards/RoleGuard.html":{},"modules/StorageModule.html":{},"injectables/UsersService.html":{}}}],["time",{"_index":250,"title":{},"body":{"injectables/AppRedisService.html":{},"injectables/MorganMiddleware.html":{}}}],["timestamp",{"_index":577,"title":{},"body":{"classes/BaseEntity.html":{},"classes/CatchEverythingFilter.html":{},"interfaces/ErrorResponse.html":{},"entities/User.html":{}}}],["timestamptz",{"_index":571,"title":{},"body":{"classes/BaseEntity.html":{},"entities/User.html":{}}}],["timestring",{"_index":1705,"title":{},"body":{"miscellaneous/functions.html":{}}}],["timezone",{"_index":1653,"title":{},"body":{"dependencies.html":{}}}],["token",{"_index":349,"title":{},"body":{"controllers/AuthController.html":{},"classes/AuthResponseDto.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/RefreshTokenDto.html":{},"classes/ResetPasswordDto.html":{},"coverage.html":{}}}],["token'})@apibody({type",{"_index":330,"title":{},"body":{"controllers/AuthController.html":{}}}],["token=${token",{"_index":547,"title":{},"body":{"injectables/AuthService.html":{}}}],["tokens",{"_index":371,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["tokens.ts",{"_index":1581,"title":{},"body":{"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["tokens:refresh:blacklisted:${refreshtoken",{"_index":518,"title":{},"body":{"injectables/AuthService.html":{}}}],["tostream",{"_index":715,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["tostream(file.buffer).pipe(upload",{"_index":750,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["total",{"_index":1091,"title":{},"body":{"injectables/MorganMiddleware.html":{}}}],["trace",{"_index":1688,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["transform",{"_index":860,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["transformer",{"_index":861,"title":{},"body":{"classes/CreateUserDto.html":{},"dependencies.html":{}}}],["transport",{"_index":898,"title":{},"body":{"modules/EmailModule.html":{}}}],["true",{"_index":126,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRedisModule.html":{},"injectables/AppRedisService.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BaseEntity.html":{},"injectables/CreateUserCommand.html":{},"modules/EmailModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"modules/PaymentModule.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"guards/RoleGuard.html":{},"injectables/SuccessResponseInterceptor.html":{},"entities/User.html":{},"injectables/UsersSubscriber.html":{},"miscellaneous/variables.html":{}}}],["try",{"_index":524,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CreateUserCommand.html":{}}}],["ttl",{"_index":240,"title":{},"body":{"injectables/AppRedisService.html":{},"interfaces/IStrorageService.html":{},"injectables/S3Service.html":{}}}],["ttlinfo",{"_index":267,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["ttl}s",{"_index":268,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["type",{"_index":15,"title":{},"body":{"interfaces/ApiResponse.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppRedisService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/AuthResponseDto.html":{},"injectables/AuthService.html":{},"classes/BaseEntity.html":{},"classes/CatchEverythingFilter.html":{},"classes/ChangePasswordDto.html":{},"injectables/CloudinaryService.html":{},"injectables/CreateUserCommand.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserResponseDto.html":{},"classes/EmailService.html":{},"interfaces/ErrorResponse.html":{},"classes/ForgotPasswordDto.html":{},"classes/GetProfileResponseDto.html":{},"injectables/HttpClientService.html":{},"interfaces/IPaymentService.html":{},"interfaces/IStrorageService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"injectables/MorganMiddleware.html":{},"classes/PasswordResetEmailConsumer.html":{},"modules/PaymentModule.html":{},"classes/RefreshTokenDto.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/RequestContextMiddleware.html":{},"classes/ResetPasswordDto.html":{},"guards/RoleGuard.html":{},"injectables/S3Service.html":{},"injectables/SchemaService.html":{},"injectables/StripeService.html":{},"injectables/SuccessResponseInterceptor.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/UsersSubscriber.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":1742,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typeof",{"_index":648,"title":{},"body":{"classes/CatchEverythingFilter.html":{},"classes/CreateUserDto.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/SuccessResponseInterceptor.html":{},"injectables/UsersService.html":{}}}],["types",{"_index":631,"title":{},"body":{"classes/CatchEverythingFilter.html":{},"dependencies.html":{}}}],["types/auth",{"_index":480,"title":{},"body":{"injectables/AuthService.html":{}}}],["types/bcrypt",{"_index":1633,"title":{},"body":{"dependencies.html":{}}}],["types/chalk",{"_index":1635,"title":{},"body":{"dependencies.html":{}}}],["types/morgan",{"_index":1637,"title":{},"body":{"dependencies.html":{}}}],["types/ms",{"_index":1639,"title":{},"body":{"dependencies.html":{}}}],["types/s3",{"_index":987,"title":{},"body":{"interfaces/IStrorageService.html":{},"injectables/S3Service.html":{}}}],["typescript",{"_index":508,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["unauthorized",{"_index":182,"title":{},"body":{"modules/AppModule.html":{},"injectables/JwtAuthGuard.html":{}}}],["unauthorizedexception",{"_index":472,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/LocalStrategy.html":{}}}],["unauthorizedexception('invalid",{"_index":535,"title":{},"body":{"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{}}}],["unauthorizedexception('refresh",{"_index":533,"title":{},"body":{"injectables/AuthService.html":{}}}],["unauthorizedexception(errorobject",{"_index":1014,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["unauthorizedresponse",{"_index":181,"title":{},"body":{"modules/AppModule.html":{}}}],["undefined",{"_index":618,"title":{},"body":{"classes/CatchEverythingFilter.html":{},"classes/CreateUserDto.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/SuccessResponseInterceptor.html":{},"entities/User.html":{},"injectables/UsersService.html":{}}}],["unique",{"_index":1404,"title":{},"body":{"entities/User.html":{}}}],["unit",{"_index":1724,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":221,"title":{},"body":{"injectables/AppRedisService.html":{},"injectables/JwtStrategy.html":{}}}],["unlicensed",{"_index":1740,"title":{},"body":{"properties.html":{}}}],["unused",{"_index":510,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["up",{"_index":1419,"title":{},"body":{"controllers/UsersController.html":{}}}],["up')@apioperation({summary",{"_index":1417,"title":{},"body":{"controllers/UsersController.html":{}}}],["update",{"_index":588,"title":{},"body":{"classes/BaseEntity.html":{},"injectables/JwtStrategy.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["update(data",{"_index":1479,"title":{},"body":{"injectables/UsersService.html":{}}}],["updated",{"_index":1450,"title":{},"body":{"controllers/UsersController.html":{}}}],["updatedat",{"_index":568,"title":{},"body":{"classes/BaseEntity.html":{}}}],["updateduser",{"_index":1449,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["updateprofile",{"_index":1411,"title":{},"body":{"controllers/UsersController.html":{}}}],["updateprofile(req",{"_index":1425,"title":{},"body":{"controllers/UsersController.html":{}}}],["updateprofiledto",{"_index":1355,"title":{"classes/UpdateProfileDto.html":{}},"body":{"classes/UpdateProfileDto.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["upload",{"_index":703,"title":{},"body":{"injectables/CloudinaryService.html":{},"interfaces/IStrorageService.html":{},"injectables/S3Service.html":{}}}],["upload(file",{"_index":706,"title":{},"body":{"injectables/CloudinaryService.html":{},"interfaces/IStrorageService.html":{},"injectables/S3Service.html":{}}}],["uploadapierrorresponse",{"_index":714,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["uploadapiresponse",{"_index":713,"title":{},"body":{"injectables/CloudinaryService.html":{},"interfaces/IStrorageService.html":{}}}],["uploadfilecategoryenum",{"_index":709,"title":{},"body":{"injectables/CloudinaryService.html":{},"interfaces/IStrorageService.html":{},"injectables/S3Service.html":{},"miscellaneous/enumerations.html":{}}}],["uppercase",{"_index":688,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/ResetPasswordDto.html":{}}}],["url",{"_index":162,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRedisModule.html":{},"injectables/HttpClientService.html":{},"injectables/MorganMiddleware.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/S3Service.html":{},"injectables/SuccessResponseInterceptor.html":{},"entities/User.html":{},"dependencies.html":{}}}],["url=${result.secure_url",{"_index":748,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["usa",{"_index":868,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["usa'})@isstring()@isoptional",{"_index":833,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["usd",{"_index":1692,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["use",{"_index":254,"title":{},"body":{"injectables/AppRedisService.html":{},"injectables/MorganMiddleware.html":{},"injectables/RequestContextMiddleware.html":{}}}],["use(req",{"_index":1077,"title":{},"body":{"injectables/MorganMiddleware.html":{},"injectables/RequestContextMiddleware.html":{}}}],["useclass",{"_index":423,"title":{},"body":{"modules/AuthModule.html":{}}}],["used",{"_index":259,"title":{},"body":{"injectables/AppRedisService.html":{},"injectables/JwtStrategy.html":{}}}],["usefactory",{"_index":130,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRedisModule.html":{},"modules/AuthModule.html":{},"modules/EmailModule.html":{},"modules/PaymentModule.html":{},"modules/StorageModule.html":{}}}],["useguards",{"_index":339,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(localauthguard",{"_index":357,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(localauthguard)@public()@post('login')@httpcode(httpstatus.ok)@apioperation({summary",{"_index":322,"title":{},"body":{"controllers/AuthController.html":{}}}],["user",{"_index":139,"title":{"entities/User.html":{}},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"classes/AuthResponseDto.html":{},"injectables/AuthService.html":{},"classes/ChangePasswordDto.html":{},"injectables/CreateUserCommand.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserResponseDto.html":{},"modules/EmailModule.html":{},"classes/GetProfileResponseDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"injectables/MorganMiddleware.html":{},"classes/ResetPasswordDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/UsersSubscriber.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["user'})@apibody({type",{"_index":1420,"title":{},"body":{"controllers/UsersController.html":{}}}],["user.command",{"_index":120,"title":{},"body":{"modules/AppModule.html":{}}}],["user.command.ts",{"_index":752,"title":{},"body":{"injectables/CreateUserCommand.html":{},"coverage.html":{}}}],["user.command.ts:14",{"_index":763,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["user.command.ts:23",{"_index":785,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["user.command.ts:52",{"_index":769,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["user.command.ts:58",{"_index":774,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["user.command.ts:64",{"_index":777,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["user.command.ts:70",{"_index":781,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["user.dto",{"_index":1361,"title":{},"body":{"classes/UpdateProfileDto.html":{},"controllers/UsersController.html":{}}}],["user.dto.ts",{"_index":816,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:115",{"_index":844,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:125",{"_index":853,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:129",{"_index":831,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:22",{"_index":839,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:30",{"_index":841,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:38",{"_index":843,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:46",{"_index":829,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:54",{"_index":832,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:62",{"_index":850,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:70",{"_index":855,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:78",{"_index":834,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:91",{"_index":837,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:99",{"_index":847,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.email",{"_index":544,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.firstname",{"_index":550,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.id",{"_index":514,"title":{},"body":{"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{}}}],["user.password",{"_index":503,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersSubscriber.html":{}}}],["user.passwordresetrequested",{"_index":557,"title":{},"body":{"injectables/AuthService.html":{}}}],["user@example.com",{"_index":862,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/ForgotPasswordDto.html":{},"classes/LoginDto.html":{}}}],["user@example.com'})@isemail",{"_index":927,"title":{},"body":{"classes/ForgotPasswordDto.html":{},"classes/LoginDto.html":{}}}],["user@example.com'})@isemail()@isnotempty",{"_index":838,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["userdata",{"_index":1473,"title":{},"body":{"injectables/UsersService.html":{}}}],["userdata.email",{"_index":1491,"title":{},"body":{"injectables/UsersService.html":{}}}],["useremailcachekey",{"_index":1463,"title":{},"body":{"injectables/UsersService.html":{}}}],["userid",{"_index":1447,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["useridcachekey",{"_index":1464,"title":{},"body":{"injectables/UsersService.html":{}}}],["usernamefield",{"_index":1067,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["userrepository",{"_index":1466,"title":{},"body":{"injectables/UsersService.html":{}}}],["userrole",{"_index":1224,"title":{},"body":{"guards/RoleGuard.html":{}}}],["userroleenum",{"_index":782,"title":{},"body":{"injectables/CreateUserCommand.html":{},"classes/CreateUserDto.html":{},"entities/User.html":{},"miscellaneous/enumerations.html":{}}}],["userroleenum.admin",{"_index":872,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["userroleenum.user",{"_index":1393,"title":{},"body":{"entities/User.html":{}}}],["userroleenum})@isenum(userroleenum",{"_index":852,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["users",{"_index":177,"title":{},"body":{"modules/AppModule.html":{},"entities/User.html":{},"controllers/UsersController.html":{}}}],["users.controller",{"_index":1459,"title":{},"body":{"modules/UsersModule.html":{}}}],["users.service",{"_index":1431,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["users/entities/user.entity",{"_index":476,"title":{},"body":{"injectables/AuthService.html":{}}}],["users/users.module",{"_index":392,"title":{},"body":{"modules/AuthModule.html":{}}}],["users/users.service",{"_index":473,"title":{},"body":{"injectables/AuthService.html":{}}}],["users:email",{"_index":1489,"title":{},"body":{"injectables/UsersService.html":{}}}],["users:id",{"_index":1487,"title":{},"body":{"injectables/UsersService.html":{}}}],["userscontroller",{"_index":1408,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["usersmodule",{"_index":64,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersservice",{"_index":447,"title":{"injectables/UsersService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/CreateUserCommand.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["userssubscriber",{"_index":110,"title":{"injectables/UsersSubscriber.html":{}},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{},"injectables/UsersSubscriber.html":{},"coverage.html":{},"overview.html":{}}}],["userssubscriber(configservice",{"_index":158,"title":{},"body":{"modules/AppModule.html":{}}}],["using",{"_index":270,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["util",{"_index":1674,"title":{},"body":{"dependencies.html":{}}}],["uuid",{"_index":584,"title":{},"body":{"classes/BaseEntity.html":{},"dependencies.html":{}}}],["uuidv7",{"_index":582,"title":{},"body":{"classes/BaseEntity.html":{}}}],["v2",{"_index":711,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["v7",{"_index":594,"title":{},"body":{"classes/BaseEntity.html":{}}}],["val",{"_index":770,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["validate",{"_index":152,"title":{},"body":{"modules/AppModule.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["validate(email",{"_index":1063,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["validate(req",{"_index":1018,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validateuser",{"_index":445,"title":{},"body":{"injectables/AuthService.html":{}}}],["validateuser(email",{"_index":460,"title":{},"body":{"injectables/AuthService.html":{}}}],["validator",{"_index":700,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/ForgotPasswordDto.html":{},"classes/LoginDto.html":{},"classes/RefreshTokenDto.html":{},"classes/ResetPasswordDto.html":{},"dependencies.html":{}}}],["value",{"_index":244,"title":{},"body":{"injectables/AppRedisService.html":{},"classes/BaseEntity.html":{},"classes/CatchEverythingFilter.html":{},"injectables/CreateUserCommand.html":{},"classes/CreateUserDto.html":{},"injectables/HttpClientService.html":{},"injectables/S3Service.html":{},"injectables/SchemaService.html":{},"entities/User.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["value.replace(/\\+/g",{"_index":870,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["varchar",{"_index":1369,"title":{},"body":{"entities/User.html":{}}}],["variable",{"_index":1556,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":1748,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["vars",{"_index":511,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["version",{"_index":1088,"title":{},"body":{"injectables/MorganMiddleware.html":{},"properties.html":{}}}],["void",{"_index":80,"title":{},"body":{"modules/AppModule.html":{},"classes/CatchEverythingFilter.html":{},"injectables/MorganMiddleware.html":{},"injectables/RequestContextMiddleware.html":{},"injectables/UsersSubscriber.html":{},"miscellaneous/functions.html":{}}}],["w3cbaggagepropagator",{"_index":1762,"title":{},"body":{"miscellaneous/variables.html":{}}}],["w3ctracecontextpropagator",{"_index":1761,"title":{},"body":{"miscellaneous/variables.html":{}}}],["watch",{"_index":1719,"title":{},"body":{"index.html":{}}}],["webhookconfig",{"_index":1146,"title":{},"body":{"modules/PaymentModule.html":{}}}],["webhooks",{"_index":109,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["welcome",{"_index":32,"title":{},"body":{"controllers/AppController.html":{}}}],["welcomemessage",{"_index":29,"title":{},"body":{"controllers/AppController.html":{}}}],["whether",{"_index":1371,"title":{},"body":{"entities/User.html":{}}}],["winston",{"_index":1659,"title":{},"body":{"dependencies.html":{}}}],["without",{"_index":271,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["word",{"_index":1215,"title":{},"body":{"classes/ResetPasswordDto.html":{}}}],["word.'})@isstring()@isnotempty()@matches(/^(?=.*[a",{"_index":1209,"title":{},"body":{"classes/ResetPasswordDto.html":{}}}],["workerhost",{"_index":1112,"title":{},"body":{"classes/PasswordResetEmailConsumer.html":{}}}],["world",{"_index":305,"title":{},"body":{"injectables/AppService.html":{}}}],["write",{"_index":1096,"title":{},"body":{"injectables/MorganMiddleware.html":{}}}],["wrong",{"_index":1047,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["yarn",{"_index":1715,"title":{},"body":{"index.html":{}}}],["yes",{"_index":242,"title":{},"body":{"injectables/AppRedisService.html":{},"interfaces/IPaymentService.html":{},"interfaces/IStrorageService.html":{},"injectables/S3Service.html":{},"injectables/StripeService.html":{},"injectables/UsersService.html":{}}}],["z\\d!@#$%^&*()_",{"_index":683,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/ResetPasswordDto.html":{}}}],["z])(?=.*[!@#$%^&*()_",{"_index":681,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/ResetPasswordDto.html":{}}}],["z])(?=.*[a",{"_index":680,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/ResetPasswordDto.html":{}}}],["za",{"_index":682,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/ResetPasswordDto.html":{}}}],["zoom",{"_index":68,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRedisModule.html":{},"modules/AuthModule.html":{},"modules/EmailModule.html":{},"modules/HttpClientModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"interfaces/ApiResponse.html":{"url":"interfaces/ApiResponse.html","title":"interface - ApiResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ApiResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/interfaces/api-response.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            data\n                                        \n                                \n                                \n                                        \n                                            message\n                                        \n                                \n                                \n                                        \n                                            statusCode\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        data:     T\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     T\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        message\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        message:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        statusCode\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        statusCode:     HttpStatus\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     HttpStatus\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { HttpStatus } from '@nestjs/common';\n\nexport interface ApiResponse {\n  statusCode: HttpStatus;\n  message: string;\n  data?: T;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                welcomeMessage\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        welcomeMessage\n                        \n                    \n                \n            \n            \n                \n                        \n                    welcomeMessage()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@HttpCode(HttpStatus.OK)@Public()@ApiOperation({summary: 'Welcome message for nest-js-boilerplate'})\n                \n            \n\n                    \n                        \n                            Defined in src/app.controller.ts:12\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     literal type\n\n                        \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, HttpCode, HttpStatus } from '@nestjs/common';\nimport { Public } from './modules/auth/decorators/public.decorator';\nimport { ApiOperation, ApiTags } from '@nestjs/swagger';\n\n@ApiTags('app')\n@Controller()\nexport class AppController {\n  @Get()\n  @HttpCode(HttpStatus.OK)\n  @Public()\n  @ApiOperation({ summary: 'Welcome message for nest-js-boilerplate' })\n  welcomeMessage(): { data: string } {\n    return { data: 'Welcome to nest-js-boilerplate! :)' };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nCreateUserCommand\n\nCreateUserCommand\n\nAppModule -->\n\nCreateUserCommand->AppModule\n\n\n\n\n\nSchemaService\n\nSchemaService\n\nAppModule -->\n\nSchemaService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                        \n                            CreateUserCommand\n                        \n                        \n                            SchemaService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        configure\n                        \n                    \n                \n            \n            \n                \nconfigure(consumer: MiddlewareConsumer)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app.module.ts:81\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                consumer\n                                            \n                                                        MiddlewareConsumer\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n    \n\n\n    \n        import {\n  Logger,\n  MiddlewareConsumer,\n  Module,\n  NestModule,\n  RequestMethod,\n} from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport configuration from './config/index.';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { UsersModule } from './modules/users/users.module';\nimport { AuthModule } from './modules/auth/auth.module';\nimport { MorganMiddleware } from './common/middlewares/morgan.middleware';\nimport { MikroOrmModule } from '@mikro-orm/nestjs';\nimport { PostgreSqlDriver } from '@mikro-orm/postgresql';\nimport { PRODUCTION } from './common/constants';\nimport { SchemaService } from './schema.service';\nimport basicAuth from 'express-basic-auth';\nimport { applyRawBodyOnlyTo } from '@golevelup/nestjs-webhooks';\nimport { UsersSubscriber } from './modules/users/subscribers/user.subscriber';\nimport { BullModule } from '@nestjs/bullmq';\nimport { BullBoardModule } from '@bull-board/nestjs';\nimport { ExpressAdapter } from '@bull-board/express';\nimport { CreateUserCommand } from './commands/create-user.command';\nimport { RequestContextMiddleware } from './common/middlewares/request-context.middleware';\n\n@Module({\n  imports: [\n    ConfigModule.forRoot({\n      isGlobal: true,\n      load: [configuration],\n      cache: true,\n    }),\n    MikroOrmModule.forRootAsync({\n      useFactory: async (configService: ConfigService) => {\n        return {\n          driver: PostgreSqlDriver,\n          dbName: configService.getOrThrow('db.name'),\n          host: configService.getOrThrow('db.host'),\n          port: configService.getOrThrow('db.port'),\n          user: configService.getOrThrow('db.username'),\n          password: configService.getOrThrow('db.password'),\n          autoLoadEntities: true,\n          ensureDatabase:\n            configService.getOrThrow('nodeEnv') !== PRODUCTION,\n          pool: {\n            min: configService.getOrThrow('db.pool.min'),\n            max: configService.getOrThrow('db.pool.max'),\n          },\n          forceUtcTimezone: true,\n          validate: true,\n          strict: true,\n          debug: configService.getOrThrow('db.logging'),\n          subscribers: [new UsersSubscriber(configService)],\n        };\n      },\n      inject: [ConfigService],\n    }),\n    UsersModule,\n    AuthModule,\n    BullModule.forRootAsync({\n      inject: [ConfigService],\n      useFactory: (configService: ConfigService) => ({\n        connection: {\n          url: configService.getOrThrow('redis.url'),\n        },\n      }),\n    }),\n    BullBoardModule.forRoot({\n      adapter: ExpressAdapter,\n      route: '/queues',\n    }),\n  ],\n  controllers: [AppController],\n  providers: [AppService, Logger, SchemaService, CreateUserCommand],\n})\nexport class AppModule implements NestModule {\n  constructor(private readonly configService: ConfigService) {}\n\n  configure(consumer: MiddlewareConsumer) {\n    applyRawBodyOnlyTo(consumer, {\n      method: RequestMethod.ALL,\n      path: '*path/webhook',\n    });\n\n    consumer\n      .apply(\n        basicAuth({\n          users: {\n            [this.configService.getOrThrow('redis.bullBoard.username')]:\n              this.configService.getOrThrow('redis.bullBoard.password'),\n          },\n          challenge: true,\n          unauthorizedResponse: 'Unauthorized',\n        }),\n      )\n      .forRoutes({ path: 'queues', method: RequestMethod.ALL });\n\n    consumer.apply(MorganMiddleware).forRoutes('*');\n\n    consumer.apply(RequestContextMiddleware).forRoutes('*');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppRedisModule.html":{"url":"modules/AppRedisModule.html","title":"module - AppRedisModule","body":"\n                   \n\n\n\n\n    Modules\n    AppRedisModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppRedisModule\n\n\n\ncluster_AppRedisModule_exports\n\n\n\ncluster_AppRedisModule_providers\n\n\n\n\nAppRedisService \n\nAppRedisService \n\n\n\nAppRedisModule\n\nAppRedisModule\n\nAppRedisService  -->\n\nAppRedisModule->AppRedisService \n\n\n\n\n\nAppRedisService\n\nAppRedisService\n\nAppRedisModule -->\n\nAppRedisService->AppRedisModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/services/redis/redis.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppRedisService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AppRedisService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Logger, Module } from '@nestjs/common';\nimport { AppRedisService } from './redis.service';\nimport { RedisModule } from '@liaoliaots/nestjs-redis';\nimport { ConfigService } from '@nestjs/config';\n\n@Module({\n  imports: [\n    RedisModule.forRootAsync({\n      inject: [ConfigService],\n      useFactory: async (configService: ConfigService) => {\n        return {\n          readyLog: true,\n          errorLog: true,\n          config: [\n            {\n              namespace: configService.getOrThrow('redis.namespace'),\n              url: configService.getOrThrow('redis.url'),\n            },\n          ],\n        };\n      },\n    }),\n  ],\n  providers: [AppRedisService, Logger],\n  exports: [AppRedisService],\n})\nexport class AppRedisModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppRedisService.html":{"url":"injectables/AppRedisService.html","title":"injectable - AppRedisService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppRedisService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/redis/redis.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                appRedis\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                decrement\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                deleteMany\n                            \n                            \n                                    Async\n                                exists\n                            \n                            \n                                    Async\n                                get\n                            \n                            \n                                    Async\n                                increment\n                            \n                            \n                                    Async\n                                set\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(loggerService: LoggerService, configService: ConfigService, redisService: RedisService)\n                    \n                \n                        \n                            \n                                Defined in src/services/redis/redis.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        loggerService\n                                                  \n                                                        \n                                                                    LoggerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        redisService\n                                                  \n                                                        \n                                                                    RedisService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        decrement\n                        \n                    \n                \n            \n            \n                \n                        \n                    decrement(key: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/redis/redis.service.ts:72\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(key: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/redis/redis.service.ts:90\n                        \n                    \n\n\n            \n                \n                        Delete a Redis key\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Redis key to delete\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                Number of keys deleted (0 or 1)\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        deleteMany\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteMany(keys: string[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/redis/redis.service.ts:106\n                        \n                    \n\n\n            \n                \n                        Delete multiple Redis keys\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                keys\n                                            \n                                                        string[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Array of Redis keys to delete\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                Number of keys deleted\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        exists\n                        \n                    \n                \n            \n            \n                \n                        \n                    exists(key: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/redis/redis.service.ts:76\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        get\n                        \n                    \n                \n            \n            \n                \n                        \n                    get(key: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/redis/redis.service.ts:46\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        increment\n                        \n                    \n                \n            \n            \n                \n                        \n                    increment(key: string, ttl?: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/redis/redis.service.ts:57\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                ttl\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        set\n                        \n                    \n                \n            \n            \n                \n                        \n                    set(key: string, value: any, ttl?: number, nx: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/redis/redis.service.ts:29\n                        \n                    \n\n\n            \n                \n                        Set a Redis key\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    Redis key\n\n                                            \n                                        \n                                        \n                                                value\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    Value to store\n\n                                            \n                                        \n                                        \n                                                ttl\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    Time-to-live in seconds\n\n                                            \n                                        \n                                        \n                                                nx\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    false\n                                            \n\n                                            \n                                                    Set to true to use NX (only set if key does not exist)\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                'OK' if set successfully, null if not (when NX is used)\n\n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        appRedis\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Redis\n\n                    \n                \n                    \n                        \n                                Defined in src/services/redis/redis.service.ts:8\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable, Logger, LoggerService } from '@nestjs/common';\nimport { RedisService } from '@liaoliaots/nestjs-redis';\nimport Redis from 'ioredis';\nimport { ConfigService } from '@nestjs/config';\n\n@Injectable()\nexport class AppRedisService {\n  private readonly appRedis: Redis;\n\n  constructor(\n    @Inject(Logger)\n    private readonly loggerService: LoggerService,\n    private readonly configService: ConfigService,\n    private readonly redisService: RedisService,\n  ) {\n    this.appRedis = this.redisService.getOrThrow(\n      this.configService.getOrThrow('redis.namespace'),\n    );\n  }\n\n  /**\n   * Set a Redis key\n   * @param key Redis key\n   * @param value Value to store\n   * @param ttl Time-to-live in seconds\n   * @param nx Set to true to use NX (only set if key does not exist)\n   * @returns 'OK' if set successfully, null if not (when NX is used)\n   */\n  async set(key: string, value: any, ttl?: number, nx: boolean = false) {\n    const ttlInfo = ttl ? `TTL: ${ttl}s` : 'no TTL';\n    const nxInfo = nx ? 'using NX' : 'without NX';\n\n    this.loggerService.log(\n      `Setting key \"${key}\" (${ttlInfo}, ${nxInfo})`,\n      AppRedisService.name,\n    );\n\n    const args: (string | number)[] = [key, value];\n\n    if (nx) args.push('NX');\n    if (ttl) args.push('EX', ttl);\n\n    return this.appRedis.set(...(args as Parameters));\n  }\n\n  async get(key: string) {\n    const value = await this.appRedis.get(key);\n\n    this.loggerService.log(\n      `Getting key \"${key}\" - ${value ? 'Found' : 'Not Found'}`,\n      AppRedisService.name,\n    );\n\n    return value;\n  }\n\n  async increment(key: string, ttl?: number): Promise {\n    const pipeline = this.appRedis.pipeline();\n\n    if (ttl) {\n      pipeline.set(key, 0, 'EX', ttl, 'NX');\n    }\n\n    pipeline.incr(key);\n\n    const results = await pipeline.exec();\n    const incrResult = results[ttl ? 1 : 0];\n\n    return incrResult[1];\n  }\n\n  async decrement(key: string) {\n    return this.appRedis.decr(key);\n  }\n\n  async exists(key: string): Promise {\n    const exists = await this.appRedis.exists(key);\n    this.loggerService.log(\n      `Checking existence of key \"${key}\" - ${exists ? 'Exists' : 'Does not exist'}`,\n      AppRedisService.name,\n    );\n    return exists > 0;\n  }\n\n  /**\n   * Delete a Redis key\n   * @param key Redis key to delete\n   * @returns Number of keys deleted (0 or 1)\n   */\n  async delete(key: string): Promise {\n    const result = await this.appRedis.del(key);\n\n    this.loggerService.log(\n      `Deleting key \"${key}\" - ${result > 0 ? 'Deleted' : 'Key not found'}`,\n      AppRedisService.name,\n    );\n\n    return result;\n  }\n\n  /**\n   * Delete multiple Redis keys\n   * @param keys Array of Redis keys to delete\n   * @returns Number of keys deleted\n   */\n  async deleteMany(keys: string[]): Promise {\n    if (keys.length === 0) return 0;\n\n    const result = await this.appRedis.del(...keys);\n\n    this.loggerService.log(\n      `Deleting ${keys.length} keys - ${result} deleted`,\n      AppRedisService.name,\n    );\n\n    return result;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app.service.ts:5\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello World!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                forgotPassword\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                login\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                refresh\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                resetPassword\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        forgotPassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    forgotPassword(body: ForgotPasswordDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Post('forgot-password')@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Request password reset'})@ApiBody({type: ForgotPasswordDto})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/auth/auth.controller.ts:63\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            ForgotPasswordDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(req: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(LocalAuthGuard)@Public()@Post('login')@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'User login'})@ApiBody({type: LoginDto})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/auth/auth.controller.ts:31\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        refresh\n                        \n                    \n                \n            \n            \n                \n                        \n                    refresh(body: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Post('refresh')@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Refresh access token'})@ApiBody({type: RefreshTokenDto})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/auth/auth.controller.ts:47\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        resetPassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    resetPassword(body: ResetPasswordDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Post('reset-password')@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Reset user password'})@ApiBody({type: ResetPasswordDto, description: 'Reset password data'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/auth/auth.controller.ts:79\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            ResetPasswordDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Request,\n  Post,\n  UseGuards,\n  Body,\n  HttpStatus,\n  HttpCode,\n} from '@nestjs/common';\nimport { ApiTags, ApiOperation, ApiBody } from '@nestjs/swagger';\nimport { LocalAuthGuard } from './guards/local-auth.guard';\nimport { AuthService } from './auth.service';\nimport { Public } from './decorators/public.decorator';\nimport { LoginDto } from './dto/login.dto';\nimport { RefreshTokenDto } from './dto/refresh-token-dto';\nimport { ForgotPasswordDto } from './dto/forgot-password.dto';\nimport { ResetPasswordDto } from './dto/reset-password.dto';\nimport { ApiResponse } from 'src/common/interfaces/api-response.interface';\n\n@ApiTags('auth')\n@Controller('auth')\nexport class AuthController {\n  constructor(private readonly authService: AuthService) {}\n\n  @UseGuards(LocalAuthGuard)\n  @Public()\n  @Post('login')\n  @HttpCode(HttpStatus.OK)\n  @ApiOperation({ summary: 'User login' })\n  @ApiBody({ type: LoginDto })\n  async login(@Request() req: any): Promise> {\n    const { access_token, refresh_token } = await this.authService.login(\n      req.user,\n    );\n    return {\n      statusCode: HttpStatus.OK,\n      message: 'Login Successful',\n      data: { accessToken: access_token, refreshToken: refresh_token },\n    };\n  }\n\n  @Public()\n  @Post('refresh')\n  @HttpCode(HttpStatus.OK)\n  @ApiOperation({ summary: 'Refresh access token' })\n  @ApiBody({ type: RefreshTokenDto })\n  async refresh(@Body() body: any): Promise> {\n    const { refreshToken } = body;\n    const { access_token, refresh_token } =\n      await this.authService.refresh(refreshToken);\n    return {\n      statusCode: HttpStatus.OK,\n      message: 'Tokens refreshed',\n      data: { accessToken: access_token, refreshToken: refresh_token },\n    };\n  }\n\n  @Public()\n  @Post('forgot-password')\n  @HttpCode(HttpStatus.OK)\n  @ApiOperation({ summary: 'Request password reset' })\n  @ApiBody({ type: ForgotPasswordDto })\n  async forgotPassword(\n    @Body() body: ForgotPasswordDto,\n  ): Promise> {\n    const { email } = body;\n    await this.authService.forgotPassword(email);\n    return {\n      statusCode: HttpStatus.OK,\n      message: 'Password reset email sent',\n    };\n  }\n\n  @Public()\n  @Post('reset-password')\n  @HttpCode(HttpStatus.OK)\n  @ApiOperation({ summary: 'Reset user password' })\n  @ApiBody({ type: ResetPasswordDto, description: 'Reset password data' })\n  async resetPassword(\n    @Body() body: ResetPasswordDto,\n  ): Promise> {\n    const { resetToken, newPassword, confirmPassword } = body;\n    await this.authService.resetPassword(\n      resetToken,\n      newPassword,\n      confirmPassword,\n    );\n    return {\n      statusCode: HttpStatus.OK,\n      message: 'Password reset successful',\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nAppRedisModule\n\nAppRedisModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nAppRedisModule->AuthModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAuthModule -->\n\nUsersModule->AuthModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthModule -->\n\nLocalStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            JwtStrategy\n                        \n                        \n                            LocalStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AppRedisModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { APP_GUARD } from '@nestjs/core';\nimport { AuthController } from './auth.controller';\nimport { AuthService } from './auth.service';\nimport { UsersModule } from '../users/users.module';\nimport { JwtModule } from '@nestjs/jwt';\nimport { PassportModule } from '@nestjs/passport';\nimport { LocalStrategy } from './strategies/local.strategy';\nimport { JwtStrategy } from './strategies/jwt.strategy';\nimport { JwtAuthGuard } from './guards/jwt-auth.guard';\nimport { ConfigService } from '@nestjs/config';\nimport { AppRedisModule } from 'src/services/redis/redis.module';\nimport { BullModule } from '@nestjs/bullmq';\nimport { BullBoardModule } from '@bull-board/nestjs';\nimport { PASSWORD_RESET_EMAIL_QUEUE_NAME } from 'src/common/constants';\nimport { BullMQAdapter } from '@bull-board/api/bullMQAdapter';\n\n@Module({\n  imports: [\n    UsersModule,\n    PassportModule,\n    JwtModule.registerAsync({\n      useFactory: (configService: ConfigService) => ({\n        global: true,\n        secret: configService.get('auth.jwt.secret'),\n        signOptions: {\n          expiresIn: configService.get('auth.jwt.expiresIn'),\n        },\n      }),\n      inject: [ConfigService],\n    }),\n    BullModule.registerQueue({\n      name: PASSWORD_RESET_EMAIL_QUEUE_NAME,\n      defaultJobOptions: {\n        attempts: 5,\n        backoff: { type: 'exponential', delay: 2000 },\n      },\n    }),\n    BullBoardModule.forFeature({\n      name: PASSWORD_RESET_EMAIL_QUEUE_NAME,\n      adapter: BullMQAdapter,\n    }),\n    AppRedisModule,\n  ],\n  controllers: [AuthController],\n  providers: [\n    AuthService,\n    LocalStrategy,\n    JwtStrategy,\n    {\n      provide: APP_GUARD,\n      useClass: JwtAuthGuard,\n    },\n  ],\n  exports: [AuthService],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AuthResponseDto.html":{"url":"classes/AuthResponseDto.html","title":"class - AuthResponseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AuthResponseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/dto/auth-response.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                accessToken\n                            \n                            \n                                    \n                                message\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        accessToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Access token for authenticated user', example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/dto/auth-response.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        message\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Message indicating the success of the operation', example: 'Login Successful'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/dto/auth-response.dto.ts:14\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\n\nexport class AuthResponseDto {\n  @ApiProperty({\n    description: 'Access token for authenticated user',\n    example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...',\n  })\n  accessToken: string;\n\n  @ApiProperty({\n    description: 'Message indicating the success of the operation',\n    example: 'Login Successful',\n  })\n  message: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                jwtExpiresIn\n                            \n                            \n                                    Private\n                                    Readonly\n                                jwtNotBefore\n                            \n                            \n                                    Private\n                                    Readonly\n                                jwtRefreshExpriresIn\n                            \n                            \n                                    Private\n                                    Readonly\n                                jwtRefreshSecret\n                            \n                            \n                                    Private\n                                    Readonly\n                                passwordResetUrl\n                            \n                            \n                                    Private\n                                    Readonly\n                                saltRounds\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                forgotPassword\n                            \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                refresh\n                            \n                            \n                                    Async\n                                resetPassword\n                            \n                            \n                                    Async\n                                validateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(appRedisService: AppRedisService, usersService: UsersService, jwtService: JwtService, configService: ConfigService, passwordResetEmailQueue: Queue)\n                    \n                \n                        \n                            \n                                Defined in src/modules/auth/auth.service.ts:26\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        appRedisService\n                                                  \n                                                        \n                                                                        AppRedisService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        passwordResetEmailQueue\n                                                  \n                                                        \n                                                                    Queue\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        forgotPassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    forgotPassword(email: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/auth/auth.service.ts:135\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(user: User)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/auth/auth.service.ts:68\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            User\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        refresh\n                        \n                    \n                \n            \n            \n                \n                        \n                    refresh(refreshToken: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/auth/auth.service.ts:83\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                refreshToken\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        resetPassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    resetPassword(resetToken: string, newPassword: string, confirmPassword: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/auth/auth.service.ts:160\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                resetToken\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                newPassword\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                confirmPassword\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validateUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    validateUser(email: string, pass: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/auth/auth.service.ts:50\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                pass\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        jwtExpiresIn\n                        \n                    \n                \n            \n                \n                    \n                        Type :     StringValue\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/auth.service.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        jwtNotBefore\n                        \n                    \n                \n            \n                \n                    \n                        Type :     StringValue\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/auth.service.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        jwtRefreshExpriresIn\n                        \n                    \n                \n            \n                \n                    \n                        Type :     StringValue\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/auth.service.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        jwtRefreshSecret\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/auth.service.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        passwordResetUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/auth.service.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        saltRounds\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/auth.service.ts:26\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import bcrypt from 'bcrypt';\nimport {\n  BadRequestException,\n  Injectable,\n  NotFoundException,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { UsersService } from '../users/users.service';\nimport { JsonWebTokenError, JwtService, NotBeforeError } from '@nestjs/jwt';\nimport { User } from '../users/entities/user.entity';\nimport { ConfigService } from '@nestjs/config';\nimport { InjectQueue } from '@nestjs/bullmq';\nimport { PASSWORD_RESET_EMAIL_QUEUE_NAME } from 'src/common/constants';\nimport { Queue } from 'bullmq';\nimport { AuthTokens } from './types/auth-tokens';\nimport { AppRedisService } from 'src/services/redis/redis.service';\nimport ms, { StringValue } from 'ms';\n\n@Injectable()\nexport class AuthService {\n  private readonly passwordResetUrl: string;\n  private readonly jwtExpiresIn: StringValue;\n  private readonly jwtNotBefore: StringValue;\n  private readonly jwtRefreshSecret: string;\n  private readonly jwtRefreshExpriresIn: StringValue;\n  private readonly saltRounds: number;\n\n  constructor(\n    private readonly appRedisService: AppRedisService,\n    private readonly usersService: UsersService,\n    private readonly jwtService: JwtService,\n    private readonly configService: ConfigService,\n    @InjectQueue(PASSWORD_RESET_EMAIL_QUEUE_NAME)\n    private readonly passwordResetEmailQueue: Queue,\n  ) {\n    this.passwordResetUrl =\n      this.configService.getOrThrow('url.passwordReset');\n    this.jwtExpiresIn =\n      this.configService.getOrThrow('auth.jwt.expiresIn');\n    this.jwtNotBefore = `${(ms(this.jwtExpiresIn) - ms('1m')) / ms('1m')}m`;\n    this.jwtRefreshExpriresIn = this.configService.getOrThrow(\n      'auth.jwt.refreshExpiresIn',\n    );\n    this.jwtRefreshSecret = this.configService.getOrThrow(\n      'auth.jwt.refreshSecret',\n    );\n    this.saltRounds = this.configService.getOrThrow('auth.saltRounds');\n  }\n\n  async validateUser(\n    email: string,\n    pass: string,\n  ): Promise | null> {\n    const user = await this.usersService.findOne(\n      { email },\n      { failHandler: () => new NotFoundException('User not found') },\n    );\n\n    if (user && (await bcrypt.compare(pass, user.password))) {\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      const { password, ...result } = user;\n      return result;\n    }\n\n    return null;\n  }\n\n  async login(user: User): Promise {\n    const payload = {\n      sub: user.id,\n    };\n\n    return {\n      access_token: this.jwtService.sign(payload),\n      refresh_token: this.jwtService.sign(payload, {\n        secret: this.jwtRefreshSecret,\n        expiresIn: this.jwtRefreshExpriresIn,\n        notBefore: this.jwtNotBefore,\n      }),\n    };\n  }\n\n  async refresh(refreshToken: string): Promise {\n    let payload: any;\n\n    const cacheKey = `tokens:refresh:blacklisted:${refreshToken}`;\n    const isBlacklisted = await this.appRedisService.exists(cacheKey);\n    if (isBlacklisted) {\n      throw new BadRequestException('Refresh token is blacklisted');\n    }\n\n    try {\n      payload = this.jwtService.verify(refreshToken, {\n        secret: this.jwtRefreshSecret,\n      });\n    } catch (error) {\n      if (\n        error instanceof JsonWebTokenError &&\n        error.message === 'jwt malformed'\n      ) {\n        throw new BadRequestException('Malformed refresh token');\n      } else if (error instanceof NotBeforeError) {\n        throw new UnauthorizedException('Refresh token not active yet');\n      }\n      throw new UnauthorizedException('Invalid refresh token');\n    }\n\n    const user = await this.usersService.findOne(\n      {\n        id: payload.sub,\n      },\n      { failHandler: () => new NotFoundException('User not found') },\n    );\n\n    const newPayload = {\n      sub: user.id,\n    };\n\n    await this.appRedisService.set(\n      cacheKey,\n      '1',\n      (ms(this.jwtRefreshExpriresIn) + ms('1m')) / ms('1s'),\n    );\n\n    return {\n      access_token: this.jwtService.sign(newPayload),\n      refresh_token: this.jwtService.sign(newPayload, {\n        secret: this.jwtRefreshSecret,\n        expiresIn: this.jwtRefreshExpriresIn,\n        notBefore: this.jwtNotBefore,\n      }),\n    };\n  }\n\n  async forgotPassword(email: string): Promise {\n    const user = await this.usersService.findOne(\n      { email },\n      { failHandler: () => new NotFoundException('User not found') },\n    );\n\n    const token = this.jwtService.sign({\n      email: user.email,\n      sub: user.id,\n    });\n\n    const resetUrl = `${this.passwordResetUrl}?reset-token=${token}`;\n\n    await this.passwordResetEmailQueue.add('send-password-reset-email', {\n      email: user.email,\n      firstName: user.firstName,\n      resetUrl,\n    });\n\n    await this.usersService.update({\n      id: user.id,\n      passwordResetRequested: true,\n    });\n  }\n\n  async resetPassword(\n    resetToken: string,\n    newPassword: string,\n    confirmPassword: string,\n  ): Promise {\n    if (newPassword !== confirmPassword) {\n      throw new BadRequestException('Passwords do not match');\n    }\n\n    const payload = this.jwtService.verify(resetToken);\n    const user = await this.usersService.findOne(\n      {\n        email: payload.email,\n      },\n      { failHandler: () => new NotFoundException('User not found') },\n    );\n\n    if (!user.passwordResetRequested) {\n      throw new NotFoundException('Password reset not requested');\n    }\n\n    const salt = await bcrypt.genSalt(this.saltRounds);\n    const hashedPassword = await bcrypt.hash(newPassword, salt);\n    await this.usersService.update({\n      id: user.id,\n      password: hashedPassword,\n      passwordResetRequested: false,\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/BaseEntity.html":{"url":"classes/BaseEntity.html","title":"class - BaseEntity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  BaseEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/entities/base.entitiy.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                    Optional\n                                deletedAt\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Default value : new Date()\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Property({type: 'timestamptz', defaultRaw: 'CURRENT_TIMESTAMP', comment: 'Record creation timestamp'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/entities/base.entitiy.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        deletedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Property({type: 'timestamptz', nullable: true, comment: 'Soft delete timestamp'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/entities/base.entitiy.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : uuidv7()\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryKey({type: 'uuid'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/entities/base.entitiy.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Default value : new Date()\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Property({type: 'timestamptz', defaultRaw: 'CURRENT_TIMESTAMP', onUpdate: () => , comment: 'Record last update timestamp'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/entities/base.entitiy.ts:30\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Filter, Index, PrimaryKey, Property } from '@mikro-orm/core';\nimport { v7 as uuidv7 } from 'uuid';\n\n@Index({ properties: ['deletedAt'] })\n@Filter({ name: 'softDelete', cond: { deletedAt: null }, default: true })\nexport abstract class BaseEntity {\n  @PrimaryKey({ type: 'uuid' })\n  id: string = uuidv7();\n\n  @Property({\n    type: 'timestamptz',\n    nullable: true,\n    comment: 'Soft delete timestamp',\n  })\n  deletedAt?: Date;\n\n  @Property({\n    type: 'timestamptz',\n    defaultRaw: 'CURRENT_TIMESTAMP',\n    comment: 'Record creation timestamp',\n  })\n  createdAt: Date = new Date();\n\n  @Property({\n    type: 'timestamptz',\n    defaultRaw: 'CURRENT_TIMESTAMP',\n    onUpdate: () => new Date(),\n    comment: 'Record last update timestamp',\n  })\n  updatedAt: Date = new Date();\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CatchEverythingFilter.html":{"url":"classes/CatchEverythingFilter.html","title":"class - CatchEverythingFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CatchEverythingFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/filters/exception.filter.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                loggerContext\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                            \n                                    Private\n                                getErrorCode\n                            \n                            \n                                    Private\n                                getErrorMessage\n                            \n                            \n                                    Private\n                                getErrorName\n                            \n                            \n                                    Private\n                                getHttpStatus\n                            \n                            \n                                    Private\n                                sanitizeBody\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(httpAdapterHost: HttpAdapterHost, loggerService: LoggerService)\n                    \n                \n                        \n                            \n                                Defined in src/common/filters/exception.filter.ts:20\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        httpAdapterHost\n                                                  \n                                                        \n                                                                    HttpAdapterHost\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        loggerService\n                                                  \n                                                        \n                                                                    LoggerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        loggerContext\n                        \n                    \n                \n            \n                \n                    \n                        Default value : CatchEverythingFilter.name\n                    \n                \n                    \n                        \n                                Defined in src/common/filters/exception.filter.ts:20\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        catch\n                        \n                    \n                \n            \n            \n                \ncatch(exception: HandledException, host: ArgumentsHost)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/filters/exception.filter.ts:27\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                exception\n                                            \n                                                            HandledException\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                host\n                                            \n                                                        ArgumentsHost\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        getErrorCode\n                        \n                    \n                \n            \n            \n                \n                        \n                    getErrorCode(exception: HandledException)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/filters/exception.filter.ts:119\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                exception\n                                            \n                                                            HandledException\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     string | undefined\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        getErrorMessage\n                        \n                    \n                \n            \n            \n                \n                        \n                    getErrorMessage(exception: HandledException)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/filters/exception.filter.ts:92\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                exception\n                                            \n                                                            HandledException\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        getErrorName\n                        \n                    \n                \n            \n            \n                \n                        \n                    getErrorName(exception: HandledException)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/filters/exception.filter.ts:108\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                exception\n                                            \n                                                            HandledException\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        getHttpStatus\n                        \n                    \n                \n            \n            \n                \n                        \n                    getHttpStatus(exception: HandledException)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/filters/exception.filter.ts:78\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                exception\n                                            \n                                                            HandledException\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         number\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        sanitizeBody\n                        \n                    \n                \n            \n            \n                \n                        \n                    sanitizeBody(body: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/filters/exception.filter.ts:123\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  ExceptionFilter,\n  Catch,\n  ArgumentsHost,\n  HttpException,\n  HttpStatus,\n  ForbiddenException,\n  Logger,\n  LoggerService,\n  Inject,\n  NotFoundException,\n} from '@nestjs/common';\nimport { HttpAdapterHost } from '@nestjs/core';\nimport { AxiosError } from 'axios';\nimport { HandledException } from '../types';\nimport { ErrorResponse } from '../interfaces/error-response.interface';\n\n@Catch()\nexport class CatchEverythingFilter implements ExceptionFilter {\n  private readonly loggerContext = CatchEverythingFilter.name;\n\n  constructor(\n    private readonly httpAdapterHost: HttpAdapterHost,\n    @Inject(Logger) private readonly loggerService: LoggerService,\n  ) {}\n\n  catch(exception: HandledException, host: ArgumentsHost): void {\n    const { httpAdapter } = this.httpAdapterHost;\n    const ctx = host.switchToHttp();\n    const request = ctx.getRequest();\n    const response = ctx.getResponse();\n    const requestUrl = httpAdapter.getRequestUrl(request);\n\n    if (exception instanceof NotFoundException) {\n      const exceptionResponse = exception.getResponse() as any;\n      const message = exceptionResponse?.message || exception.message;\n\n      const isRoutingError =\n        typeof message === 'string' &&\n        (message.startsWith('Cannot ') ||\n          message.includes('Cannot find') ||\n          (message === 'Not Found' && !exceptionResponse?.error));\n\n      if (isRoutingError) {\n        const responseBody = {\n          statusCode: HttpStatus.NOT_FOUND,\n          message: `Route ${request.method} ${request.url} does not exist ¯\\\\_(ツ)_/¯`,\n        };\n\n        httpAdapter.reply(response, responseBody, HttpStatus.NOT_FOUND);\n        return;\n      }\n    }\n\n    const httpStatus = this.getHttpStatus(exception);\n    const errorMessage = this.getErrorMessage(exception);\n    const name = this.getErrorName(exception);\n    const errorCode = this.getErrorCode(exception);\n\n    const responseBody: ErrorResponse = {\n      statusCode: httpStatus,\n      message: errorMessage,\n      errorCode,\n      timestamp: new Date().toISOString(),\n      path: `${request.method} - ${requestUrl}`,\n      name,\n    };\n\n    this.loggerService.error(\n      `Exception caught: ${name} - ${errorMessage}`,\n      exception,\n      this.loggerContext,\n    );\n\n    httpAdapter.reply(response, responseBody, httpStatus);\n  }\n\n  private getHttpStatus(exception: HandledException): number {\n    if (exception instanceof HttpException) return exception.getStatus();\n    if (exception instanceof AxiosError) {\n      const status = exception.response?.status || HttpStatus.BAD_GATEWAY;\n      return status >= 500 && status \n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ChangePasswordDto.html":{"url":"classes/ChangePasswordDto.html","title":"class - ChangePasswordDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ChangePasswordDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/dto/change-password.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                confirmPassword\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                newPassword\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        confirmPassword\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The confirmation of the new password', example: 'Strong.Pass-1'})@IsString()@IsNotEmpty()@Matches(/^(?=.*[a-z])(?=.*[A-Z])(?=.*[!@#$%^&*()_\\-+=\\[\\]{};':\"\\\\|,.<>\\/?])[A-Za-z\\d!@#$%^&*()_\\-+=\\[\\]{};':\"\\\\|,.<>\\/?]{10,}$/, {message: 'Password must be at least 10 characters long and include uppercase, lowercase, and a symbol (e.g. @, #, ., -)'})@MinLength(10)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dto/change-password.dto.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        newPassword\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The new password for the user. Minimum of 10 characters.', example: 'Strong.Pass-1'})@IsString()@IsNotEmpty()@Matches(/^(?=.*[a-z])(?=.*[A-Z])(?=.*[!@#$%^&*()_\\-+=\\[\\]{};':\"\\\\|,.<>\\/?])[A-Za-z\\d!@#$%^&*()_\\-+=\\[\\]{};':\"\\\\|,.<>\\/?]{10,}$/, {message: 'Password must be at least 10 characters long and include uppercase, lowercase, and a symbol (e.g. @, #, ., -)'})@MinLength(10)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dto/change-password.dto.ts:19\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsNotEmpty, IsString, Matches, MinLength } from 'class-validator';\n\nexport class ChangePasswordDto {\n  @ApiProperty({\n    description: 'The new password for the user. Minimum of 10 characters.',\n    example: 'Strong.Pass-1',\n  })\n  @IsString()\n  @IsNotEmpty()\n  @Matches(\n    /^(?=.*[a-z])(?=.*[A-Z])(?=.*[!@#$%^&*()_\\-+=\\[\\]{};':\"\\\\|,.<>\\/?])[A-Za-z\\d!@#$%^&*()_\\-+=\\[\\]{};':\"\\\\|,.<>\\/?]{10,}$/,\n    {\n      message:\n        'Password must be at least 10 characters long and include uppercase, lowercase, and a symbol (e.g. @, #, ., -)',\n    },\n  )\n  @MinLength(10)\n  newPassword: string;\n\n  @ApiProperty({\n    description: 'The confirmation of the new password',\n    example: 'Strong.Pass-1',\n  })\n  @IsString()\n  @IsNotEmpty()\n  @Matches(\n    /^(?=.*[a-z])(?=.*[A-Z])(?=.*[!@#$%^&*()_\\-+=\\[\\]{};':\"\\\\|,.<>\\/?])[A-Za-z\\d!@#$%^&*()_\\-+=\\[\\]{};':\"\\\\|,.<>\\/?]{10,}$/,\n    {\n      message:\n        'Password must be at least 10 characters long and include uppercase, lowercase, and a symbol (e.g. @, #, ., -)',\n    },\n  )\n  @MinLength(10)\n  confirmPassword: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CloudinaryService.html":{"url":"injectables/CloudinaryService.html","title":"injectable - CloudinaryService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CloudinaryService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/storage/cloudinary.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                upload\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, loggerService: LoggerService)\n                    \n                \n                        \n                            \n                                Defined in src/services/storage/cloudinary.service.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        loggerService\n                                                  \n                                                        \n                                                                    LoggerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        upload\n                        \n                    \n                \n            \n            \n                \n                        \n                    upload(file: MemoryStoredFile, fileCategory: UploadFileCategoryEnum)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/storage/cloudinary.service.ts:26\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                file\n                                            \n                                                        MemoryStoredFile\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                fileCategory\n                                            \n                                                            UploadFileCategoryEnum\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable, Logger, LoggerService } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport {\n  v2 as cloudinary,\n  UploadApiResponse,\n  UploadApiErrorResponse,\n} from 'cloudinary';\nimport toStream = require('buffer-to-stream');\nimport { IStrorageService } from './interfaces/storage.interface';\nimport { UploadFileCategoryEnum } from 'src/common/enums';\nimport { MemoryStoredFile } from 'nestjs-form-data';\n\n@Injectable()\nexport class CloudinaryService implements IStrorageService {\n  constructor(\n    private readonly configService: ConfigService,\n    @Inject(Logger) private readonly loggerService: LoggerService,\n  ) {\n    cloudinary.config({\n      cloud_name: this.configService.getOrThrow('cloudinary.cloudName'),\n      api_key: this.configService.getOrThrow('cloudinary.apiKey'),\n      api_secret: this.configService.getOrThrow('cloudinary.apiSecret'),\n    });\n  }\n\n  async upload(\n    file: MemoryStoredFile,\n    fileCategory: UploadFileCategoryEnum,\n  ): Promise {\n    this.loggerService.log(\n      `Starting upload: filename=\"${file.originalName}\", size=${file.size} bytes, category=${fileCategory}`,\n      CloudinaryService.name,\n    );\n\n    return new Promise((resolve, reject) => {\n      const upload = cloudinary.uploader.upload_stream(\n        {\n          folder: `${this.configService.getOrThrow('cloudinary.folder')}/${fileCategory}`,\n          resource_type: 'auto',\n        },\n        (error: UploadApiErrorResponse, result: UploadApiResponse) => {\n          if (error) {\n            this.loggerService.error(\n              `Upload failed: filename=\"${file.originalName}\", error=${error.message}`,\n              error.stack,\n              CloudinaryService.name,\n            );\n            return reject(error);\n          }\n\n          this.loggerService.log(\n            `Upload successful: filename=\"${file.originalName}\", public_id=${result.public_id}, url=${result.secure_url}`,\n            CloudinaryService.name,\n          );\n          return resolve(result);\n        },\n      );\n\n      toStream(file.buffer).pipe(upload);\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CreateUserCommand.html":{"url":"injectables/CreateUserCommand.html","title":"injectable - CreateUserCommand","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CreateUserCommand\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/commands/create-user.command.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        CommandRunner\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                nanoid\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                parseEmail\n                            \n                            \n                                    \n                                parseFirstName\n                            \n                            \n                                    \n                                parseLastName\n                            \n                            \n                                    \n                                parseRole\n                            \n                            \n                                    Async\n                                run\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(em: EntityManager, usersService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/commands/create-user.command.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        em\n                                                  \n                                                        \n                                                                    EntityManager\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        parseEmail\n                        \n                    \n                \n            \n            \n                \n                        \n                    parseEmail(val: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Option({flags: '-e, --email ', required: true})\n                \n            \n\n                    \n                        \n                            Defined in src/commands/create-user.command.ts:52\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                val\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        parseFirstName\n                        \n                    \n                \n            \n            \n                \n                        \n                    parseFirstName(val: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Option({flags: '-f, --first-name ', required: true})\n                \n            \n\n                    \n                        \n                            Defined in src/commands/create-user.command.ts:58\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                val\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        parseLastName\n                        \n                    \n                \n            \n            \n                \n                        \n                    parseLastName(val: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Option({flags: '-l, --last-name ', required: true})\n                \n            \n\n                    \n                        \n                            Defined in src/commands/create-user.command.ts:64\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                val\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        parseRole\n                        \n                    \n                \n            \n            \n                \n                        \n                    parseRole(val: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Option({flags: '-r, --role ', required: true})\n                \n            \n\n                    \n                        \n                            Defined in src/commands/create-user.command.ts:70\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                val\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         UserRoleEnum\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        run\n                        \n                    \n                \n            \n            \n                \n                        \n                    run(inputs: string[], options: Record)\n                \n            \n\n\n                    \n                        \n                            Defined in src/commands/create-user.command.ts:23\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                inputs\n                                            \n                                                        string[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                options\n                                            \n                                                        Record\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        nanoid\n                        \n                    \n                \n            \n                \n                    \n                        Default value : customAlphabet(PASSWORD_CHARACTER_SET, 10)\n                    \n                \n                    \n                        \n                                Defined in src/commands/create-user.command.ts:14\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { Command, CommandRunner } from 'nest-commander';\nimport { UsersService } from 'src/modules/users/users.service';\nimport { Option } from 'nest-commander';\nimport chalk from 'chalk';\nimport { UserRoleEnum } from 'src/common/enums';\nimport { customAlphabet } from 'nanoid';\nimport { PASSWORD_CHARACTER_SET } from 'src/common/constants';\nimport { EntityManager } from '@mikro-orm/core';\n\n@Command({ name: 'create:user', description: 'Create a new user' })\n@Injectable()\nexport class CreateUserCommand extends CommandRunner {\n  private readonly nanoid = customAlphabet(PASSWORD_CHARACTER_SET, 10);\n\n  constructor(\n    private readonly em: EntityManager,\n    private readonly usersService: UsersService,\n  ) {\n    super();\n  }\n\n  async run(inputs: string[], options: Record): Promise {\n    const { email, firstName, lastName, role } = options;\n\n    const forkedEm = this.em.fork();\n\n    try {\n      const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]{2,}$/i;\n\n      if (!emailRegex.test(email)) {\n        throw new Error('Invalid email format');\n      }\n\n      await forkedEm.transactional(async () => {\n        await this.usersService.create({\n          email,\n          firstName,\n          lastName,\n          password: this.nanoid(),\n          role,\n        });\n      });\n      console.log(chalk.green.bold(`✅ Created user with email: ${email}`));\n    } catch (error) {\n      console.error(\n        chalk.red.bold(`❌ Failed to create user: ${error.message}`),\n      );\n    }\n  }\n\n  @Option({ flags: '-e, --email ', required: true }) parseEmail(\n    val: string,\n  ) {\n    return val;\n  }\n\n  @Option({ flags: '-f, --first-name ', required: true }) parseFirstName(\n    val: string,\n  ) {\n    return val;\n  }\n\n  @Option({ flags: '-l, --last-name ', required: true }) parseLastName(\n    val: string,\n  ) {\n    return val;\n  }\n\n  @Option({ flags: '-r, --role ', required: true }) parseRole(\n    val: string,\n  ) {\n    return val as UserRoleEnum;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/dto/create-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                address\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                changePassword\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                city\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                country\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                countryCode\n                            \n                            \n                                    \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                firstName\n                            \n                            \n                                    \n                                    \n                                    \n                                lastName\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                password\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                phoneNumber\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                postalCode\n                            \n                            \n                                    \n                                    \n                                role\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                state\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The address of the user', example: '123 Main St, Springfield'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dto/create-user.dto.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        changePassword\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsBoolean()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dto/create-user.dto.ts:129\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        city\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The city of the user', example: 'Springfield'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dto/create-user.dto.ts:54\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        country\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The country of the user', example: 'USA'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dto/create-user.dto.ts:78\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        countryCode\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The country code of the user', example: '+1'})@IsString()@IsOptional()@Transform( => )\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dto/create-user.dto.ts:91\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The email of the user', example: 'user@example.com'})@IsEmail()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dto/create-user.dto.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The first name of the user', example: 'John'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dto/create-user.dto.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The last name of the user', example: 'Doe'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dto/create-user.dto.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The password of the user', example: 'Strong.Pass-1'})@IsString()@IsNotEmpty()@Matches(/^(?=.*[a-z])(?=.*[A-Z])(?=.*[!@#$%^&*()_\\-+=\\[\\]{};':\"\\\\|,.<>\\/?])[A-Za-z\\d!@#$%^&*()_\\-+=\\[\\]{};':\"\\\\|,.<>\\/?]{10,}$/, {message: 'Password must be at least 10 characters long and include uppercase, lowercase, and a symbol (e.g. @, #, ., -)'})@MinLength(10)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dto/create-user.dto.ts:115\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        phoneNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The phone number of the user', example: '234567890'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dto/create-user.dto.ts:99\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        postalCode\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The postal code of the user', example: '12345'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dto/create-user.dto.ts:62\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserRoleEnum\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Role of the user', example: undefined, enum: UserRoleEnum})@IsEnum(UserRoleEnum, {message: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dto/create-user.dto.ts:125\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        state\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The state of the user', example: 'Illinois'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dto/create-user.dto.ts:70\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsBoolean,\n  IsEmail,\n  IsEnum,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  Matches,\n  MinLength,\n} from 'class-validator';\nimport { ApiProperty } from '@nestjs/swagger';\nimport { UserRoleEnum } from 'src/common/enums';\nimport { Transform } from 'class-transformer';\n\nexport class CreateUserDto {\n  @ApiProperty({\n    description: 'The email of the user',\n    example: 'user@example.com',\n  })\n  @IsEmail()\n  @IsNotEmpty()\n  email: string;\n\n  @ApiProperty({\n    description: 'The first name of the user',\n    example: 'John',\n  })\n  @IsString()\n  @IsNotEmpty()\n  firstName: string;\n\n  @ApiProperty({\n    description: 'The last name of the user',\n    example: 'Doe',\n  })\n  @IsString()\n  @IsNotEmpty()\n  lastName: string;\n\n  @ApiProperty({\n    description: 'The address of the user',\n    example: '123 Main St, Springfield',\n  })\n  @IsString()\n  @IsOptional()\n  address?: string;\n\n  @ApiProperty({\n    description: 'The city of the user',\n    example: 'Springfield',\n  })\n  @IsString()\n  @IsOptional()\n  city?: string;\n\n  @ApiProperty({\n    description: 'The postal code of the user',\n    example: '12345',\n  })\n  @IsString()\n  @IsOptional()\n  postalCode?: string;\n\n  @ApiProperty({\n    description: 'The state of the user',\n    example: 'Illinois',\n  })\n  @IsString()\n  @IsOptional()\n  state?: string;\n\n  @ApiProperty({\n    description: 'The country of the user',\n    example: 'USA',\n  })\n  @IsString()\n  @IsOptional()\n  country?: string;\n\n  @ApiProperty({\n    description: 'The country code of the user',\n    example: '+1',\n  })\n  @IsString()\n  @IsOptional()\n  @Transform(({ value }) => {\n    if (typeof value !== 'string') return value;\n    const cleaned = value.replace(/\\+/g, '');\n    return cleaned ? `+${cleaned}` : '';\n  })\n  countryCode?: string;\n\n  @ApiProperty({\n    description: 'The phone number of the user',\n    example: '234567890',\n  })\n  @IsString()\n  @IsOptional()\n  phoneNumber?: string;\n\n  @ApiProperty({\n    description: 'The password of the user',\n    example: 'Strong.Pass-1',\n  })\n  @IsString()\n  @IsNotEmpty()\n  @Matches(\n    /^(?=.*[a-z])(?=.*[A-Z])(?=.*[!@#$%^&*()_\\-+=\\[\\]{};':\"\\\\|,.<>\\/?])[A-Za-z\\d!@#$%^&*()_\\-+=\\[\\]{};':\"\\\\|,.<>\\/?]{10,}$/,\n    {\n      message:\n        'Password must be at least 10 characters long and include uppercase, lowercase, and a symbol (e.g. @, #, ., -)',\n    },\n  )\n  @MinLength(10)\n  password: string;\n\n  @ApiProperty({\n    description: 'Role of the user',\n    example: UserRoleEnum.ADMIN,\n    enum: UserRoleEnum,\n  })\n  @IsEnum(UserRoleEnum, {\n    message: `role must be one of: ${Object.values(UserRoleEnum).join(', ')}`,\n  })\n  role: UserRoleEnum;\n\n  @IsBoolean()\n  @IsOptional()\n  changePassword?: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserResponseDto.html":{"url":"classes/CreateUserResponseDto.html","title":"class - CreateUserResponseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserResponseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/dto/responses.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                data\n                            \n                            \n                                    \n                                message\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        data\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The newly created user', type: User})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dto/responses.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        message\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Message indicating the success of the operation', example: 'User created successfully'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dto/responses.dto.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { User } from '../entities/user.entity';\n\nexport class CreateUserResponseDto {\n  @ApiProperty({\n    description: 'Message indicating the success of the operation',\n    example: 'User created successfully',\n  })\n  message: string;\n\n  @ApiProperty({\n    description: 'The newly created user',\n    type: User,\n  })\n  data: User;\n}\n\nexport class GetProfileResponseDto {\n  @ApiProperty({\n    description: 'Message indicating the success of the operation',\n    example: 'Profile fetched successfully',\n  })\n  message: string;\n\n  @ApiProperty({\n    description: 'The profile of the user',\n    type: User,\n  })\n  data: User;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/EmailModule.html":{"url":"modules/EmailModule.html","title":"module - EmailModule","body":"\n                   \n\n\n\n\n    Modules\n    EmailModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_EmailModule\n\n\n\ncluster_EmailModule_exports\n\n\n\n\nEmailService \n\nEmailService \n\n\n\nEmailModule\n\nEmailModule\n\nEmailService  -->\n\nEmailModule->EmailService \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/services/email/email.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Exports\n                    \n                        \n                            EmailService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Logger, Module } from '@nestjs/common';\nimport { EmailService } from './email.service';\nimport { MailerModule } from '@nestjs-modules/mailer';\nimport { ConfigService } from '@nestjs/config';\nimport { EMAIL_FROM_NAME } from 'src/common/constants';\nimport { PugAdapter } from '@nestjs-modules/mailer/dist/adapters/pug.adapter';\nimport { join } from 'path';\n\n@Module({\n  imports: [\n    MailerModule.forRootAsync({\n      useFactory: (configService: ConfigService) => ({\n        transport: {\n          host: configService.getOrThrow('smtp.host'),\n          port: configService.getOrThrow('smtp.port'),\n          secure: configService.getOrThrow('smtp.secure'),\n          auth: {\n            user: configService.getOrThrow('smtp.auth.user'),\n            pass: configService.getOrThrow('smtp.auth.pass'),\n          },\n        },\n        defaults: {\n          from: `\"${EMAIL_FROM_NAME}\" ('smtp.auth.user')}>`,\n        },\n        template: {\n          dir: join(process.cwd(), 'src/templates/email'),\n          adapter: new PugAdapter(),\n          options: {\n            strict: true,\n          },\n        },\n      }),\n      inject: [ConfigService],\n    }),\n  ],\n  providers: [EmailService, Logger],\n  controllers: [],\n  exports: [EmailService],\n})\nexport class EmailModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/EmailService.html":{"url":"classes/EmailService.html","title":"class - EmailService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  EmailService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/email/email.service.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                sendEmail\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(mailerService: MailerService, loggerService: LoggerService)\n                    \n                \n                        \n                            \n                                Defined in src/services/email/email.service.ts:4\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        mailerService\n                                                  \n                                                        \n                                                                    MailerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        loggerService\n                                                  \n                                                        \n                                                                    LoggerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        sendEmail\n                        \n                    \n                \n            \n            \n                \n                        \n                    sendEmail(to: string | string[], subject: string, template: string, context: Record)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/email/email.service.ts:11\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                to\n                                            \n                                                        string | string[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                subject\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                template\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                context\n                                            \n                                                        Record\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MailerService } from '@nestjs-modules/mailer';\nimport { Inject, Logger, LoggerService } from '@nestjs/common';\n\nexport class EmailService {\n  constructor(\n    @Inject(MailerService)\n    private readonly mailerService: MailerService,\n    @Inject(Logger) private readonly loggerService: LoggerService,\n  ) {}\n\n  async sendEmail(\n    to: string | string[],\n    subject: string,\n    template: string,\n    context: Record,\n  ): Promise {\n    this.loggerService.log(\n      `Sending email to: ${to} with subject: ${subject}`,\n      'EmailService',\n    );\n\n    await this.mailerService.sendMail({\n      to,\n      subject,\n      template,\n      context,\n    });\n\n    this.loggerService.log(`Email sent successfully to: ${to}`, 'EmailService');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ErrorResponse.html":{"url":"interfaces/ErrorResponse.html","title":"interface - ErrorResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ErrorResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/interfaces/error-response.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            errorCode\n                                        \n                                \n                                \n                                        \n                                            message\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                                \n                                        \n                                            path\n                                        \n                                \n                                \n                                        \n                                            statusCode\n                                        \n                                \n                                \n                                        \n                                            timestamp\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        errorCode\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        errorCode:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        message\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        message:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        path\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        path:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        statusCode\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        statusCode:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        timestamp\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        timestamp:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface ErrorResponse {\n  statusCode: number;\n  message: string;\n  errorCode?: string;\n  timestamp: string;\n  path: string;\n  name: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ForgotPasswordDto.html":{"url":"classes/ForgotPasswordDto.html","title":"class - ForgotPasswordDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ForgotPasswordDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/dto/forgot-password.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                email\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'user@example.com'})@IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/dto/forgot-password.dto.ts:7\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail } from 'class-validator';\nimport { ApiProperty } from '@nestjs/swagger';\n\nexport class ForgotPasswordDto {\n  @ApiProperty({ example: 'user@example.com' })\n  @IsEmail()\n  email: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetProfileResponseDto.html":{"url":"classes/GetProfileResponseDto.html","title":"class - GetProfileResponseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetProfileResponseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/dto/responses.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                data\n                            \n                            \n                                    \n                                message\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        data\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The profile of the user', type: User})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dto/responses.dto.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        message\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Message indicating the success of the operation', example: 'Profile fetched successfully'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dto/responses.dto.ts:23\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { User } from '../entities/user.entity';\n\nexport class CreateUserResponseDto {\n  @ApiProperty({\n    description: 'Message indicating the success of the operation',\n    example: 'User created successfully',\n  })\n  message: string;\n\n  @ApiProperty({\n    description: 'The newly created user',\n    type: User,\n  })\n  data: User;\n}\n\nexport class GetProfileResponseDto {\n  @ApiProperty({\n    description: 'Message indicating the success of the operation',\n    example: 'Profile fetched successfully',\n  })\n  message: string;\n\n  @ApiProperty({\n    description: 'The profile of the user',\n    type: User,\n  })\n  data: User;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/HttpClientModule.html":{"url":"modules/HttpClientModule.html","title":"module - HttpClientModule","body":"\n                   \n\n\n\n\n    Modules\n    HttpClientModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_HttpClientModule\n\n\n\ncluster_HttpClientModule_exports\n\n\n\ncluster_HttpClientModule_providers\n\n\n\n\nHttpClientService \n\nHttpClientService \n\n\n\nHttpClientModule\n\nHttpClientModule\n\nHttpClientService  -->\n\nHttpClientModule->HttpClientService \n\n\n\n\n\nHttpClientService\n\nHttpClientService\n\nHttpClientModule -->\n\nHttpClientService->HttpClientModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/services/http-client/http-client.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            HttpClientService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            HttpClientService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Logger, Module } from '@nestjs/common';\nimport { HttpModule } from '@nestjs/axios';\nimport { HttpClientService } from './http-client.service';\n\n@Module({\n  imports: [HttpModule],\n  providers: [HttpClientService, Logger],\n  exports: [HttpClientService],\n})\nexport class HttpClientModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/HttpClientService.html":{"url":"injectables/HttpClientService.html","title":"injectable - HttpClientService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  HttpClientService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/http-client/http-client.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                httpAgent\n                            \n                            \n                                    Private\n                                    Readonly\n                                httpsAgent\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                makeHttpRequest\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(httpService: HttpService, loggerService: LoggerService)\n                    \n                \n                        \n                            \n                                Defined in src/services/http-client/http-client.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        httpService\n                                                  \n                                                        \n                                                                    HttpService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        loggerService\n                                                  \n                                                        \n                                                                    LoggerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        makeHttpRequest\n                        \n                    \n                \n            \n            \n                \n                        \n                    makeHttpRequest(url: string, options: AxiosRequestConfig)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/http-client/http-client.service.ts:21\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                url\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                options\n                                            \n                                                        AxiosRequestConfig\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        httpAgent\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new http.Agent({ keepAlive: false })\n                    \n                \n                    \n                        \n                                Defined in src/services/http-client/http-client.service.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        httpsAgent\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new https.Agent({ keepAlive: false })\n                    \n                \n                    \n                        \n                                Defined in src/services/http-client/http-client.service.ts:11\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { HttpService } from '@nestjs/axios';\nimport { Inject, Injectable, Logger, LoggerService } from '@nestjs/common';\nimport { AxiosRequestConfig } from 'axios';\nimport http from 'http';\nimport https from 'https';\nimport { lastValueFrom } from 'rxjs';\n\n@Injectable()\nexport class HttpClientService {\n  private readonly httpAgent = new http.Agent({ keepAlive: false });\n  private readonly httpsAgent = new https.Agent({ keepAlive: false });\n\n  constructor(\n    private readonly httpService: HttpService,\n    @Inject(Logger) private readonly loggerService: LoggerService,\n  ) {\n    this.httpService.axiosRef.defaults.httpAgent = this.httpAgent;\n    this.httpService.axiosRef.defaults.httpsAgent = this.httpsAgent;\n  }\n\n  async makeHttpRequest(\n    url: string,\n    options: AxiosRequestConfig,\n  ): Promise {\n    this.loggerService.log(\n      `Making HTTP request to ${url}`,\n      HttpClientService.name,\n    );\n\n    const data =\n      (await lastValueFrom(this.httpService.request({ url, ...options }))) ||\n      {};\n\n    this.loggerService.log(\n      `HTTP request to ${url} successful`,\n      HttpClientService.name,\n    );\n\n    return data;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IPaymentService.html":{"url":"interfaces/IPaymentService.html","title":"interface - IPaymentService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IPaymentService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/payment/interfaces/payment.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        createCheckoutSession\n                                    \n                                \n                                \n                                    \n                                        createPaymentIntent\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        createCheckoutSession\n                        \n                    \n                \n            \n            \n                \ncreateCheckoutSession(params: Stripe.Checkout.SessionCreateParams, options?: Stripe.RequestOptions)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/payment/interfaces/payment.interface.ts:4\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                params\n                                            \n                                                            Stripe.Checkout.SessionCreateParams\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                options\n                                            \n                                                        Stripe.RequestOptions\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createPaymentIntent\n                        \n                    \n                \n            \n            \n                \ncreatePaymentIntent(params: Stripe.PaymentIntentCreateParams, options?: Stripe.RequestOptions)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/payment/interfaces/payment.interface.ts:9\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                params\n                                            \n                                                            Stripe.PaymentIntentCreateParams\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                options\n                                            \n                                                        Stripe.RequestOptions\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import Stripe from 'stripe';\n\nexport interface IPaymentService {\n  createCheckoutSession(\n    params: Stripe.Checkout.SessionCreateParams,\n    options?: Stripe.RequestOptions,\n  ): Promise>;\n\n  createPaymentIntent(\n    params: Stripe.PaymentIntentCreateParams,\n    options?: Stripe.RequestOptions,\n  ): Promise>;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IStrorageService.html":{"url":"interfaces/IStrorageService.html","title":"interface - IStrorageService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IStrorageService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/storage/interfaces/storage.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                        Optional\n                                    \n                                        createPresignedUrlWithoutClient\n                                    \n                                \n                                \n                                    \n                                        upload\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        createPresignedUrlWithoutClient\n                        \n                    \n                \n            \n            \n                \ncreatePresignedUrlWithoutClient(key: string, method?: HttpRequestMethodEnum, ttl?: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/storage/interfaces/storage.interface.ts:15\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                method\n                                            \n                                                            HttpRequestMethodEnum\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                        \n                                                ttl\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        upload\n                        \n                    \n                \n            \n            \n                \nupload(file: MemoryStoredFile, fileCategory: UploadFileCategoryEnum)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/storage/interfaces/storage.interface.ts:10\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                file\n                                            \n                                                        MemoryStoredFile\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                fileCategory\n                                            \n                                                            UploadFileCategoryEnum\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { UploadApiResponse } from 'cloudinary';\nimport { MemoryStoredFile } from 'nestjs-form-data';\nimport {\n  HttpRequestMethodEnum,\n  UploadFileCategoryEnum,\n} from 'src/common/enums';\nimport { S3PutObjectResponse } from '../types/s3-put-object-response';\n\nexport interface IStrorageService {\n  upload(\n    file: MemoryStoredFile,\n    fileCategory: UploadFileCategoryEnum,\n  ): Promise;\n\n  createPresignedUrlWithoutClient?(\n    key: string,\n    method?: HttpRequestMethodEnum,\n    ttl?: number,\n  ): Promise;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtAuthGuard.html":{"url":"injectables/JwtAuthGuard.html","title":"injectable - JwtAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/guards/jwt-auth.guard.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        AuthGuard('jwt')\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                            \n                                handleRequest\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/modules/auth/guards/jwt-auth.guard.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/auth/guards/jwt-auth.guard.ts:16\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        handleRequest\n                        \n                    \n                \n            \n            \n                \nhandleRequest(err: Error, user: any, info: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/auth/guards/jwt-auth.guard.ts:27\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                err\n                                            \n                                                        Error\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                info\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  ExecutionContext,\n  Injectable,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { AuthGuard } from '@nestjs/passport';\nimport { IS_PUBLIC_KEY } from '../decorators/public.decorator';\n\n@Injectable()\nexport class JwtAuthGuard extends AuthGuard('jwt') {\n  constructor(private reflector: Reflector) {\n    super();\n  }\n\n  canActivate(context: ExecutionContext) {\n    const isPublic = this.reflector.getAllAndOverride(IS_PUBLIC_KEY, [\n      context.getHandler(),\n      context.getClass(),\n    ]);\n    if (isPublic) {\n      return true;\n    }\n    return super.canActivate(context);\n  }\n\n  handleRequest(err: Error, user: any, info: any) {\n    if (err || !user) {\n      let errorObject: Error = {\n        name: info?.name || 'UnauthorizedException',\n        message: info?.message || 'Unauthorized',\n      };\n\n      throw new UnauthorizedException(errorObject);\n    }\n\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/strategies/jwt.strategy.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PassportStrategy(Strategy)\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, usersService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/auth/strategies/jwt.strategy.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                        \n                    validate(req: Request, payload: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/auth/strategies/jwt.strategy.ts:34\n                        \n                    \n\n\n            \n                \n                        NOTE: req is available here and can be used to extract the raw JWT.\nThis can support enforcing a single active session per user:\n\nCompare the JWT in the request with the token stored in the user document.\nReject the request if they don't match (i.e., user is logged in elsewhere).\n\nImplementation details:\n\nStore or update the token in the user document during login and token refresh.\nThis logic should be implemented in the\nlogin() (needs to be implemented as login currently stops at the controller level and no it's not wrong)\n and refresh() methods of the AuthService class.\n\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                payload\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ExtractJwt, Strategy } from 'passport-jwt';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Injectable, NotFoundException } from '@nestjs/common';\nimport { UsersService } from 'src/modules/users/users.service';\nimport { ConfigService } from '@nestjs/config';\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  constructor(\n    configService: ConfigService,\n    private usersService: UsersService,\n  ) {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      ignoreExpiration: false,\n      secretOrKey: configService.getOrThrow('auth.jwt.secret'),\n      passReqToCallback: true,\n    });\n  }\n\n  /**\n   * NOTE: `req` is available here and can be used to extract the raw JWT.\n   *\n   * This can support enforcing a single active session per user:\n   * - Compare the JWT in the request with the token stored in the user document.\n   * - Reject the request if they don't match (i.e., user is logged in elsewhere).\n   *\n   * Implementation details:\n   * - Store or update the token in the user document during login and token refresh.\n   * - This logic should be implemented in the\n   * `login()` (needs to be implemented as login currently stops at the controller level and no it's not wrong)\n   *  and `refresh()` methods of the `AuthService` class.\n   */\n  async validate(req: Request, payload: any) {\n    const user = await this.usersService.findOne(\n      {\n        id: payload.sub,\n      },\n      { failHandler: () => new NotFoundException('User not found') },\n    );\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalAuthGuard.html":{"url":"injectables/LocalAuthGuard.html","title":"injectable - LocalAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LocalAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/guards/local-auth.guard.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        AuthGuard('local')\n            \n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class LocalAuthGuard extends AuthGuard('local') {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalStrategy.html":{"url":"injectables/LocalStrategy.html","title":"injectable - LocalStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LocalStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/strategies/local.strategy.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PassportStrategy(Strategy)\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService, usersService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/auth/strategies/local.strategy.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                        \n                    validate(email: string, password: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/auth/strategies/local.strategy.ts:17\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                password\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Strategy } from 'passport-local';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { AuthService } from '../auth.service';\nimport { UsersService } from 'src/modules/users/users.service';\nimport moment from 'moment';\n\n@Injectable()\nexport class LocalStrategy extends PassportStrategy(Strategy) {\n  constructor(\n    private authService: AuthService,\n    private usersService: UsersService,\n  ) {\n    super({ usernameField: 'email' });\n  }\n\n  async validate(email: string, password: string): Promise {\n    const user = await this.authService.validateUser(email, password);\n    if (!user) {\n      throw new UnauthorizedException('Invalid credentials');\n    }\n    await this.usersService.update({\n      id: user.id,\n      lastLoggedIn: moment().utc().toDate(),\n    });\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginDto.html":{"url":"classes/LoginDto.html","title":"class - LoginDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/dto/login.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The email of the user', example: 'user@example.com'})@IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/dto/login.dto.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The password of the user', example: 'Strong.Pass-1'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/dto/login.dto.ts:16\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsEmail } from 'class-validator';\n\nexport class LoginDto {\n  @ApiProperty({\n    description: 'The email of the user',\n    example: 'user@example.com',\n  })\n  @IsEmail()\n  email: string;\n\n  @ApiProperty({\n    description: 'The password of the user',\n    example: 'Strong.Pass-1',\n  })\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MorganMiddleware.html":{"url":"injectables/MorganMiddleware.html","title":"injectable - MorganMiddleware","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  MorganMiddleware\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/middlewares/morgan.middleware.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                use\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(loggerService: LoggerService)\n                    \n                \n                        \n                            \n                                Defined in src/common/middlewares/morgan.middleware.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        loggerService\n                                                  \n                                                        \n                                                                    LoggerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        use\n                        \n                    \n                \n            \n            \n                \nuse(req: any, res: any, next: () => void)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/middlewares/morgan.middleware.ts:14\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                res\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                next\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  Inject,\n  Injectable,\n  Logger,\n  LoggerService,\n  NestMiddleware,\n} from '@nestjs/common';\nimport morgan from 'morgan';\n\n@Injectable()\nexport class MorganMiddleware implements NestMiddleware {\n  constructor(@Inject(Logger) private readonly loggerService: LoggerService) {}\n\n  use(req: any, res: any, next: () => void) {\n    if (req.url === '/' || req.url.match(/\\/v1\\/queues\\/.*$/)) {\n      return next();\n    }\n\n    morgan(\n      ':remote-addr :remote-user :method :url :http-version :status :res[content-length] :response-time ms :total-time ms :referrer :user-agent :req[header] :req[body]',\n      {\n        stream: {\n          write: (message: string) => {\n            const status = res.statusCode;\n            if (status === 404) {\n              this.loggerService.warn(message.trim(), MorganMiddleware.name);\n            } else {\n              this.loggerService.log(message.trim(), MorganMiddleware.name);\n            }\n          },\n        },\n      },\n    )(req, res, next);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PasswordResetEmailConsumer.html":{"url":"classes/PasswordResetEmailConsumer.html","title":"class - PasswordResetEmailConsumer","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PasswordResetEmailConsumer\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/consumers/auth.consumer.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                process\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(emailService: EmailService, loggerService: LoggerService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/auth/consumers/auth.consumer.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        emailService\n                                                  \n                                                        \n                                                                        EmailService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        loggerService\n                                                  \n                                                        \n                                                                    LoggerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        process\n                        \n                    \n                \n            \n            \n                \n                        \n                    process(job: Job)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/auth/consumers/auth.consumer.ts:20\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                job\n                                            \n                                                        Job\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { PASSWORD_RESET_EMAIL_QUEUE_NAME } from 'src/common/constants';\nimport os from 'os';\nimport { Processor, WorkerHost } from '@nestjs/bullmq';\nimport { Job } from 'bullmq';\nimport { EmailService } from 'src/services/email/email.service';\nimport { Inject, Logger, LoggerService } from '@nestjs/common';\nimport { EmailSubjectEnum, EmailTemplateEnum } from 'src/common/enums';\n\n@Processor(PASSWORD_RESET_EMAIL_QUEUE_NAME, {\n  concurrency: os.cpus().length,\n})\nexport class PasswordResetEmailConsumer extends WorkerHost {\n  constructor(\n    private readonly emailService: EmailService,\n    @Inject(Logger) private readonly loggerService: LoggerService,\n  ) {\n    super();\n  }\n\n  async process(job: Job) {\n    const { data } = job;\n\n    this.loggerService.log(\n      `Processing job: ${job.id} for email: ${data?.email}`,\n      'PasswordResetEmailConsumer',\n    );\n\n    await this.emailService.sendEmail(\n      data?.email,\n      EmailSubjectEnum.PASSWORD_RESET,\n      EmailTemplateEnum.PASSWORD_RESET,\n      { resetUrl: data?.resetUrl, firstName: data?.firstName },\n    );\n\n    this.loggerService.log(\n      `Job: ${job.id} processed successfully for email: ${data?.email}`,\n      'PasswordResetEmailConsumer',\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PaymentModule.html":{"url":"modules/PaymentModule.html","title":"module - PaymentModule","body":"\n                   \n\n\n\n\n    Modules\n    PaymentModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/services/payment/payment.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        register\n                        \n                    \n                \n            \n            \n                \n                        \n                    register()\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/payment/payment.module.ts:16\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     DynamicModule\n\n                        \n                \n            \n        \n    \n\n    \n\n\n    \n        import { STRIPE_CLIENT_TOKEN, StripeModule } from '@golevelup/nestjs-stripe';\nimport { DynamicModule, Logger, LoggerService, Module } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { TEMPLATE_QUEUE_NAME, PAYMENT_PROVIDER } from 'src/common/constants';\nimport { PaymentDriverEnum } from 'src/common/enums';\nimport Stripe from 'stripe';\nimport { Public } from 'src/modules/auth/decorators/public.decorator';\nimport { StripeService } from './stripe.service';\nimport { BullModule, getQueueToken } from '@nestjs/bullmq';\nimport { BullBoardModule } from '@bull-board/nestjs';\nimport { BullMQAdapter } from '@bull-board/api/bullMQAdapter';\nimport { Queue } from 'bullmq';\n\n@Module({})\nexport class PaymentModule {\n  static register(): DynamicModule {\n    return {\n      module: PaymentModule,\n      imports: [\n        StripeModule.forRootAsync({\n          useFactory: (configService: ConfigService) => ({\n            apiKey: configService.getOrThrow('stripe.secretKey'),\n            webhookConfig: {\n              stripeSecrets: {\n                account: configService.getOrThrow(\n                  'stripe.webhookSecret.account',\n                ),\n                accountTest: configService.getOrThrow(\n                  'stripe.webhookSecret.accountTest',\n                ),\n              },\n              loggingConfiguration: {\n                logMatchingEventHandlers: true,\n              },\n              decorators: [Public()],\n            },\n          }),\n          inject: [ConfigService],\n        }),\n        BullModule.registerQueue({\n          name: TEMPLATE_QUEUE_NAME,\n          defaultJobOptions: {\n            attempts: 5,\n            backoff: { type: 'exponential', delay: 2000 },\n          },\n        }),\n        BullBoardModule.forFeature({\n          name: TEMPLATE_QUEUE_NAME,\n          adapter: BullMQAdapter,\n        }),\n      ],\n      providers: [\n        {\n          provide: PAYMENT_PROVIDER,\n          useFactory: (\n            configService: ConfigService,\n            loggerService: LoggerService,\n            stripeClient: Stripe,\n            templateQueue: Queue,\n          ) => {\n            const driver = configService.getOrThrow('driver.payment');\n            if (driver === PaymentDriverEnum.STRIPE)\n              return new StripeService(\n                configService,\n                loggerService,\n                stripeClient,\n                templateQueue,\n              );\n          },\n          inject: [\n            ConfigService,\n            Logger,\n            STRIPE_CLIENT_TOKEN,\n            getQueueToken(TEMPLATE_QUEUE_NAME),\n          ],\n        },\n        Logger,\n      ],\n      exports: [PAYMENT_PROVIDER],\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RefreshTokenDto.html":{"url":"classes/RefreshTokenDto.html","title":"class - RefreshTokenDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RefreshTokenDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/dto/refresh-token-dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                refreshToken\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        refreshToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Refresh token provided during login', example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/dto/refresh-token-dto.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsNotEmpty, IsString } from 'class-validator';\n\nexport class RefreshTokenDto {\n  @ApiProperty({\n    description: 'Refresh token provided during login',\n    example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9',\n  })\n  @IsString()\n  @IsNotEmpty()\n  refreshToken: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RequestBodyAndResponseInterceptor.html":{"url":"injectables/RequestBodyAndResponseInterceptor.html","title":"injectable - RequestBodyAndResponseInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RequestBodyAndResponseInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/interceptors/response.interceptor.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(loggerService: LoggerService)\n                    \n                \n                        \n                            \n                                Defined in src/common/interceptors/response.interceptor.ts:53\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        loggerService\n                                                  \n                                                        \n                                                                    LoggerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/interceptors/response.interceptor.ts:56\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                next\n                                            \n                                                        CallHandler\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { STRIPE_WEBHOOK_CONTEXT_TYPE } from '@golevelup/nestjs-stripe';\nimport {\n  CallHandler,\n  ExecutionContext,\n  Inject,\n  Injectable,\n  Logger,\n  LoggerService,\n  NestInterceptor,\n} from '@nestjs/common';\nimport { Observable } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\n\n@Injectable()\nexport class SuccessResponseInterceptor implements NestInterceptor {\n  intercept(context: ExecutionContext, next: CallHandler): Observable {\n    const contextType = context.getType();\n    if (contextType === STRIPE_WEBHOOK_CONTEXT_TYPE) {\n      return next.handle();\n    }\n\n    return next.handle().pipe(\n      map((response) => {\n        const httpResponse = context.switchToHttp().getResponse();\n\n        const statusCode =\n          response?.statusCode && Number.isInteger(response.statusCode)\n            ? response.statusCode\n            : httpResponse.statusCode;\n\n        const message =\n          response?.message && typeof response.message === 'string'\n            ? response.message\n            : 'Operation successful';\n\n        const responseData =\n          response?.data !== undefined ? response?.data : response?.message;\n\n        return {\n          statusCode,\n          success: true,\n          message,\n          data: responseData,\n        };\n      }),\n    );\n  }\n}\n\n@Injectable()\nexport class RequestBodyAndResponseInterceptor implements NestInterceptor {\n  constructor(@Inject(Logger) private readonly loggerService: LoggerService) {}\n\n  intercept(context: ExecutionContext, next: CallHandler): Observable {\n    const request = context.switchToHttp().getRequest();\n    const method = request.method;\n    const url = request.url;\n\n    return next.handle().pipe(\n      tap((response) => {\n        this.loggerService.log(`[${method}] ${url} - Response:`, response);\n      }),\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RequestContextMiddleware.html":{"url":"injectables/RequestContextMiddleware.html","title":"injectable - RequestContextMiddleware","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RequestContextMiddleware\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/middlewares/request-context.middleware.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                use\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(orm: MikroORM)\n                    \n                \n                        \n                            \n                                Defined in src/common/middlewares/request-context.middleware.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        orm\n                                                  \n                                                        \n                                                                    MikroORM\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        use\n                        \n                    \n                \n            \n            \n                \nuse(req: Request, res: Response, next: NextFunction)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/middlewares/request-context.middleware.ts:9\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                res\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                next\n                                            \n                                                        NextFunction\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NestMiddleware } from '@nestjs/common';\nimport { Request, Response, NextFunction } from 'express';\nimport { MikroORM, RequestContext } from '@mikro-orm/core';\n\n@Injectable()\nexport class RequestContextMiddleware implements NestMiddleware {\n  constructor(private readonly orm: MikroORM) {}\n\n  use(req: Request, res: Response, next: NextFunction): void {\n    RequestContext.create(this.orm.em, next);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ResetPasswordDto.html":{"url":"classes/ResetPasswordDto.html","title":"class - ResetPasswordDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ResetPasswordDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/dto/reset-password.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                confirmPassword\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                newPassword\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                resetToken\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        confirmPassword\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The confirmation of the new password', example: 'Asecure-Word.'})@IsString()@IsNotEmpty()@Matches(/^(?=.*[a-z])(?=.*[A-Z])(?=.*[!@#$%^&*()_\\-+=\\[\\]{};':\"\\\\|,.<>\\/?])[A-Za-z\\d!@#$%^&*()_\\-+=\\[\\]{};':\"\\\\|,.<>\\/?]{10,}$/, {message: 'Password must be at least 10 characters long and include uppercase, lowercase, and a symbol (e.g. @, #, ., -)'})@MinLength(10)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/dto/reset-password.dto.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        newPassword\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The new password for the user', example: 'Asecure-Word.'})@IsString()@IsNotEmpty()@Matches(/^(?=.*[a-z])(?=.*[A-Z])(?=.*[!@#$%^&*()_\\-+=\\[\\]{};':\"\\\\|,.<>\\/?])[A-Za-z\\d!@#$%^&*()_\\-+=\\[\\]{};':\"\\\\|,.<>\\/?]{10,}$/, {message: 'Password must be at least 10 characters long and include uppercase, lowercase, and a symbol (e.g. @, #, ., -)'})@MinLength(10)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/dto/reset-password.dto.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        resetToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The reset token sent to the user', example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...'})@IsString()@IsJWT()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/dto/reset-password.dto.ts:50\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport {\n  IsJWT,\n  IsNotEmpty,\n  IsString,\n  Matches,\n  MinLength,\n} from 'class-validator';\n\nexport class ResetPasswordDto {\n  @ApiProperty({\n    description: 'The new password for the user',\n    example: 'Asecure-Word.',\n  })\n  @IsString()\n  @IsNotEmpty()\n  @Matches(\n    /^(?=.*[a-z])(?=.*[A-Z])(?=.*[!@#$%^&*()_\\-+=\\[\\]{};':\"\\\\|,.<>\\/?])[A-Za-z\\d!@#$%^&*()_\\-+=\\[\\]{};':\"\\\\|,.<>\\/?]{10,}$/,\n    {\n      message:\n        'Password must be at least 10 characters long and include uppercase, lowercase, and a symbol (e.g. @, #, ., -)',\n    },\n  )\n  @MinLength(10)\n  newPassword: string;\n\n  @ApiProperty({\n    description: 'The confirmation of the new password',\n    example: 'Asecure-Word.',\n  })\n  @IsString()\n  @IsNotEmpty()\n  @Matches(\n    /^(?=.*[a-z])(?=.*[A-Z])(?=.*[!@#$%^&*()_\\-+=\\[\\]{};':\"\\\\|,.<>\\/?])[A-Za-z\\d!@#$%^&*()_\\-+=\\[\\]{};':\"\\\\|,.<>\\/?]{10,}$/,\n    {\n      message:\n        'Password must be at least 10 characters long and include uppercase, lowercase, and a symbol (e.g. @, #, ., -)',\n    },\n  )\n  @MinLength(10)\n  confirmPassword: string;\n\n  @ApiProperty({\n    description: 'The reset token sent to the user',\n    example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...',\n  })\n  @IsString()\n  @IsJWT()\n  @IsNotEmpty()\n  resetToken: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/RoleGuard.html":{"url":"guards/RoleGuard.html","title":"guard - RoleGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    RoleGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/common/guards/role.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/common/guards/role.guard.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/guards/role.guard.ts:16\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     boolean | Promise | Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import {\n  Injectable,\n  CanActivate,\n  ExecutionContext,\n  ForbiddenException,\n} from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { Role } from '../decorators';\nimport { Observable } from 'rxjs';\nimport { STRIPE_WEBHOOK_CONTEXT_TYPE } from '@golevelup/nestjs-stripe';\n\n@Injectable()\nexport class RoleGuard implements CanActivate {\n  constructor(private readonly reflector: Reflector) {}\n\n  canActivate(\n    context: ExecutionContext,\n  ): boolean | Promise | Observable {\n    const contextType = context.getType();\n\n    if (contextType === STRIPE_WEBHOOK_CONTEXT_TYPE) {\n      return true;\n    }\n\n    const requiredRole = this.reflector.get(Role, context.getHandler());\n\n    if (!requiredRole) {\n      return true;\n    }\n\n    const request = context.switchToHttp().getRequest();\n    const userRole: string = request?.user?.role;\n\n    if (userRole !== requiredRole) {\n      throw new ForbiddenException(\n        'You do not have the necessary permission to access this route!',\n      );\n    }\n\n    return true;\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/S3Service.html":{"url":"injectables/S3Service.html","title":"injectable - S3Service","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  S3Service\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/storage/s3.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                nanoid\n                            \n                            \n                                    Private\n                                s3Bucket\n                            \n                            \n                                    Private\n                                s3Region\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createPresignedUrlWithoutClient\n                            \n                            \n                                    Async\n                                upload\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, loggerService: LoggerService, s3Client: S3)\n                    \n                \n                        \n                            \n                                Defined in src/services/storage/s3.service.ts:24\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        loggerService\n                                                  \n                                                        \n                                                                    LoggerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        s3Client\n                                                  \n                                                        \n                                                                    S3\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createPresignedUrlWithoutClient\n                        \n                    \n                \n            \n            \n                \n                        \n                    createPresignedUrlWithoutClient(key: string, method?: HttpRequestMethodEnum, ttl?: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/storage/s3.service.ts:65\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                method\n                                            \n                                                            HttpRequestMethodEnum\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                        \n                                                ttl\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        upload\n                        \n                    \n                \n            \n            \n                \n                        \n                    upload(file: MemoryStoredFile, fileCategory: UploadFileCategoryEnum)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/storage/s3.service.ts:35\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                file\n                                            \n                                                        MemoryStoredFile\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                fileCategory\n                                            \n                                                            UploadFileCategoryEnum\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        nanoid\n                        \n                    \n                \n            \n                \n                    \n                        Default value : customAlphabet(hexadecimalLowercase, 10)\n                    \n                \n                    \n                        \n                                Defined in src/services/storage/s3.service.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        s3Bucket\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/services/storage/s3.service.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        s3Region\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/services/storage/s3.service.ts:23\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable, Logger, LoggerService } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { IStrorageService } from './interfaces/storage.interface';\nimport {\n  HttpRequestMethodEnum,\n  UploadFileCategoryEnum,\n} from 'src/common/enums';\nimport { MemoryStoredFile } from 'nestjs-form-data';\nimport { InjectS3, S3 } from 'nestjs-s3';\nimport { customAlphabet } from 'nanoid';\nimport { hexadecimalLowercase } from 'nanoid-dictionary';\nimport { S3PutObjectResponse } from './types/s3-put-object-response';\nimport { parseUrl } from '@smithy/url-parser';\nimport { S3RequestPresigner } from '@aws-sdk/s3-request-presigner';\nimport { fromEnv } from '@aws-sdk/credential-providers';\nimport { Hash } from '@smithy/hash-node';\nimport { HttpRequest } from '@smithy/protocol-http';\nimport { formatUrl } from '@aws-sdk/util-format-url';\n\n@Injectable()\nexport class S3Service implements IStrorageService {\n  private s3Bucket: string;\n  private s3Region: string;\n  private readonly nanoid = customAlphabet(hexadecimalLowercase, 10);\n\n  constructor(\n    private readonly configService: ConfigService,\n    @Inject(Logger) private readonly loggerService: LoggerService,\n    @InjectS3() private readonly s3Client: S3,\n  ) {\n    this.s3Bucket = this.configService.getOrThrow('aws.s3.bucket');\n    this.s3Region = this.configService.getOrThrow('aws.s3.region');\n  }\n\n  async upload(\n    file: MemoryStoredFile,\n    fileCategory: UploadFileCategoryEnum,\n  ): Promise {\n    this.s3Bucket = this.configService.getOrThrow('aws.s3.bucket');\n\n    const key = `${fileCategory}/${this.nanoid()}_${file.originalName}`;\n\n    this.loggerService.log(\n      `Starting upload: filename=\"${file.originalName}\", size=${file.size} bytes, category=${fileCategory}`,\n      S3Service.name,\n    );\n\n    await this.s3Client.putObject({\n      Bucket: this.s3Bucket,\n      Key: key,\n      Body: file.buffer,\n      ContentType: file.mimetype,\n    });\n\n    const url = `https://${this.s3Bucket}.s3.${this.s3Region}.amazonaws.com/${key}`;\n\n    this.loggerService.log(\n      `Upload successful: filename=\"${file.originalName}\", key=${key}`,\n      S3Service.name,\n    );\n\n    return { key, url };\n  }\n\n  async createPresignedUrlWithoutClient(\n    key: string,\n    method?: HttpRequestMethodEnum,\n    ttl?: number,\n  ): Promise {\n    const httpMethod = method ?? HttpRequestMethodEnum.GET;\n    const expiresIn = ttl ?? 30 * 60 * 60;\n\n    const url = parseUrl(\n      `https://${this.s3Bucket}.s3.${this.s3Region}.amazonaws.com/${key}`,\n    );\n    const presigner = new S3RequestPresigner({\n      credentials: fromEnv(),\n      region: this.s3Region,\n      sha256: Hash.bind(null, 'sha256'),\n    });\n\n    const signedUrlObject = await presigner.presign(\n      new HttpRequest({ ...url, method: httpMethod }),\n      { expiresIn },\n    );\n    return formatUrl(signedUrlObject);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SchemaService.html":{"url":"injectables/SchemaService.html","title":"injectable - SchemaService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SchemaService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/schema.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                onModuleInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(orm: MikroORM, configService: ConfigService, loggerService: LoggerService)\n                    \n                \n                        \n                            \n                                Defined in src/schema.service.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        orm\n                                                  \n                                                        \n                                                                    MikroORM\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        loggerService\n                                                  \n                                                        \n                                                                    LoggerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \n                        \n                    onModuleInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/schema.service.ts:22\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(SchemaService.name)\n                    \n                \n                    \n                        \n                                Defined in src/schema.service.ts:14\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import {\n  Injectable,\n  OnModuleInit,\n  Logger,\n  LoggerService,\n  Inject,\n} from '@nestjs/common';\nimport { MikroORM } from '@mikro-orm/core';\nimport { ConfigService } from '@nestjs/config';\nimport { PRODUCTION } from './common/constants';\n\n@Injectable()\nexport class SchemaService implements OnModuleInit {\n  private readonly logger = new Logger(SchemaService.name);\n\n  constructor(\n    private readonly orm: MikroORM,\n    private readonly configService: ConfigService,\n    @Inject(Logger) private readonly loggerService: LoggerService,\n  ) {}\n\n  async onModuleInit() {\n    const nodeEnv = this.configService.getOrThrow('nodeEnv');\n\n    if (nodeEnv !== PRODUCTION) {\n      const generator = this.orm.getSchemaGenerator();\n      await generator.updateSchema();\n      this.loggerService.log(\n        '✅ Database schema synchronized',\n        SchemaService.name,\n      );\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/StorageModule.html":{"url":"modules/StorageModule.html","title":"module - StorageModule","body":"\n                   \n\n\n\n\n    Modules\n    StorageModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/services/storage/storage.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        register\n                        \n                    \n                \n            \n            \n                \n                        \n                    register()\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/storage/storage.module.ts:11\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     DynamicModule\n\n                        \n                \n            \n        \n    \n\n    \n\n\n    \n        import { Module, DynamicModule, Logger, LoggerService } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { CloudinaryService } from './cloudinary.service';\nimport { STORAGE_PROVIDER } from 'src/common/constants';\nimport { StorageDriverEnum } from 'src/common/enums';\nimport { S3Service } from './s3.service';\nimport { getS3ConnectionToken, S3, S3Module } from 'nestjs-s3';\n\n@Module({})\nexport class StorageModule {\n  static register(): DynamicModule {\n    return {\n      module: StorageModule,\n      imports: [\n        S3Module.forRootAsync({\n          inject: [ConfigService],\n          useFactory: (configService: ConfigService) => ({\n            config: {\n              credentials: {\n                accessKeyId: configService.get('aws.s3.accessKeyId'),\n                secretAccessKey: configService.get(\n                  'aws.s3.secretAccessKey',\n                ),\n              },\n              region: configService.get('aws.s3.region'),\n            },\n          }),\n        }),\n      ],\n      providers: [\n        {\n          provide: STORAGE_PROVIDER,\n          useFactory: (\n            configService: ConfigService,\n            loggerService: LoggerService,\n            s3Client: S3,\n          ) => {\n            const driver = configService.getOrThrow('driver.storage');\n            if (driver === StorageDriverEnum.CLOUDINARY) {\n              return new CloudinaryService(configService, loggerService);\n            } else if (driver === StorageDriverEnum.S3) {\n              return new S3Service(configService, loggerService, s3Client);\n            }\n\n            throw new Error(`Unsupported storage driver: ${driver}`);\n          },\n          inject: [ConfigService, Logger, getS3ConnectionToken('')],\n        },\n        Logger,\n      ],\n      exports: [STORAGE_PROVIDER],\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/StripeService.html":{"url":"injectables/StripeService.html","title":"injectable - StripeService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  StripeService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/payment/stripe.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createCheckoutSession\n                            \n                            \n                                    Async\n                                createPaymentIntent\n                            \n                            \n                                    \n                                    Async\n                                handlePaymentIntentSucceeded\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, loggerService: LoggerService, stripeClient: Stripe, templateQueue: Queue)\n                    \n                \n                        \n                            \n                                Defined in src/services/payment/stripe.service.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        loggerService\n                                                  \n                                                        \n                                                                    LoggerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        stripeClient\n                                                  \n                                                        \n                                                                    Stripe\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        templateQueue\n                                                  \n                                                        \n                                                                    Queue\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createCheckoutSession\n                        \n                    \n                \n            \n            \n                \n                        \n                    createCheckoutSession(params: Stripe.Checkout.SessionCreateParams, options?: Stripe.RequestOptions)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/payment/stripe.service.ts:23\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                params\n                                            \n                                                            Stripe.Checkout.SessionCreateParams\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                options\n                                            \n                                                        Stripe.RequestOptions\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createPaymentIntent\n                        \n                    \n                \n            \n            \n                \n                        \n                    createPaymentIntent(params: Stripe.PaymentIntentCreateParams, options?: Stripe.RequestOptions)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/payment/stripe.service.ts:45\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                params\n                                            \n                                                            Stripe.PaymentIntentCreateParams\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                options\n                                            \n                                                        Stripe.RequestOptions\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        handlePaymentIntentSucceeded\n                        \n                    \n                \n            \n            \n                \n                        \n                    handlePaymentIntentSucceeded(evt: Stripe.PaymentIntentSucceededEvent)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @StripeWebhookHandler('payment_intent.succeeded')\n                \n            \n\n                    \n                        \n                            Defined in src/services/payment/stripe.service.ts:60\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                evt\n                                            \n                                                            Stripe.PaymentIntentSucceededEvent\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  InjectStripeClient,\n  StripeWebhookHandler,\n} from '@golevelup/nestjs-stripe';\nimport { Inject, Injectable, Logger, LoggerService } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport Stripe from 'stripe';\nimport { TEMPLATE_QUEUE_NAME } from 'src/common/constants';\nimport { IPaymentService } from './interfaces/payment.interface';\nimport { InjectQueue } from '@nestjs/bullmq';\nimport { Queue } from 'bullmq';\n\n@Injectable()\nexport class StripeService implements IPaymentService {\n  constructor(\n    private readonly configService: ConfigService,\n    @Inject(Logger) private readonly loggerService: LoggerService,\n    @InjectStripeClient() private readonly stripeClient: Stripe,\n    @InjectQueue(TEMPLATE_QUEUE_NAME)\n    private readonly templateQueue: Queue,\n  ) {}\n\n  async createCheckoutSession(\n    params: Stripe.Checkout.SessionCreateParams,\n    options?: Stripe.RequestOptions,\n  ): Promise> {\n    this.loggerService.log(\n      `Creating Stripe checkout session`,\n      StripeService.name,\n    );\n\n    const session = await this.stripeClient.checkout.sessions.create(\n      params,\n      options,\n    );\n\n    this.loggerService.log(\n      `Checkout session created successfully with ID: ${session.id}`,\n      StripeService.name,\n    );\n\n    return session;\n  }\n\n  async createPaymentIntent(\n    params: Stripe.PaymentIntentCreateParams,\n    options?: Stripe.RequestOptions,\n  ): Promise> {\n    this.loggerService.log(`Creating Payment Intent`, StripeService.name);\n\n    const paymentIntent = await this.stripeClient.paymentIntents.create(\n      params,\n      options,\n    );\n\n    return paymentIntent;\n  }\n\n  @StripeWebhookHandler('payment_intent.succeeded')\n  async handlePaymentIntentSucceeded(evt: Stripe.PaymentIntentSucceededEvent) {\n    const { data }: { data: Stripe.PaymentIntentSucceededEvent.Data } = evt;\n    const intent = data.object as Stripe.PaymentIntent;\n\n    await this.templateQueue.add(TEMPLATE_QUEUE_NAME, {\n      intent,\n      eventId: evt?.id,\n    });\n\n    this.loggerService.log(\n      `Received Stripe payment_intent.succeeded event: intent id=\"${intent.id}\" and queued into: \"${TEMPLATE_QUEUE_NAME}\"`,\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SuccessResponseInterceptor.html":{"url":"injectables/SuccessResponseInterceptor.html","title":"injectable - SuccessResponseInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SuccessResponseInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/interceptors/response.interceptor.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/interceptors/response.interceptor.ts:16\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                next\n                                            \n                                                        CallHandler\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { STRIPE_WEBHOOK_CONTEXT_TYPE } from '@golevelup/nestjs-stripe';\nimport {\n  CallHandler,\n  ExecutionContext,\n  Inject,\n  Injectable,\n  Logger,\n  LoggerService,\n  NestInterceptor,\n} from '@nestjs/common';\nimport { Observable } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\n\n@Injectable()\nexport class SuccessResponseInterceptor implements NestInterceptor {\n  intercept(context: ExecutionContext, next: CallHandler): Observable {\n    const contextType = context.getType();\n    if (contextType === STRIPE_WEBHOOK_CONTEXT_TYPE) {\n      return next.handle();\n    }\n\n    return next.handle().pipe(\n      map((response) => {\n        const httpResponse = context.switchToHttp().getResponse();\n\n        const statusCode =\n          response?.statusCode && Number.isInteger(response.statusCode)\n            ? response.statusCode\n            : httpResponse.statusCode;\n\n        const message =\n          response?.message && typeof response.message === 'string'\n            ? response.message\n            : 'Operation successful';\n\n        const responseData =\n          response?.data !== undefined ? response?.data : response?.message;\n\n        return {\n          statusCode,\n          success: true,\n          message,\n          data: responseData,\n        };\n      }),\n    );\n  }\n}\n\n@Injectable()\nexport class RequestBodyAndResponseInterceptor implements NestInterceptor {\n  constructor(@Inject(Logger) private readonly loggerService: LoggerService) {}\n\n  intercept(context: ExecutionContext, next: CallHandler): Observable {\n    const request = context.switchToHttp().getRequest();\n    const method = request.method;\n    const url = request.url;\n\n    return next.handle().pipe(\n      tap((response) => {\n        this.loggerService.log(`[${method}] ${url} - Response:`, response);\n      }),\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateProfileDto.html":{"url":"classes/UpdateProfileDto.html","title":"class - UpdateProfileDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateProfileDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/dto/update-profile.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(\n  OmitType(CreateUserDto, [\n    'role',\n    'email',\n    'password',\n    'phoneNumber',\n    'countryCode',\n  ] as const),\n)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { OmitType, PartialType } from '@nestjs/swagger';\nimport { CreateUserDto } from './create-user.dto';\n\nexport class UpdateProfileDto extends PartialType(\n  OmitType(CreateUserDto, [\n    'role',\n    'email',\n    'password',\n    'phoneNumber',\n    'countryCode',\n  ] as const),\n) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/User.html":{"url":"entities/User.html","title":"entity - User","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/entities/user.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Optional\n                                address\n                            \n                            \n                                    \n                                    Optional\n                                avatar\n                            \n                            \n                                    \n                                changePassword\n                            \n                            \n                                    \n                                    Optional\n                                city\n                            \n                            \n                                    \n                                    Optional\n                                country\n                            \n                            \n                                    \n                                    Optional\n                                countryCode\n                            \n                            \n                                    \n                                email\n                            \n                            \n                                    \n                                firstName\n                            \n                            \n                                    \n                                    Optional\n                                lastLoggedIn\n                            \n                            \n                                    \n                                lastName\n                            \n                            \n                                    \n                                password\n                            \n                            \n                                    \n                                passwordResetRequested\n                            \n                            \n                                    \n                                    Optional\n                                phoneNumber\n                            \n                            \n                                    \n                                    Optional\n                                postalCode\n                            \n                            \n                                    \n                                role\n                            \n                            \n                                    \n                                    Optional\n                                state\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Property({type: 'text', nullable: true, comment: 'Street address'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/entities/user.entity.ts:51\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        avatar\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Property({type: 'varchar', length: 500, nullable: true, comment: 'Avatar URL or path'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/entities/user.entity.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        changePassword\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Property({type: 'boolean', default: false, comment: 'Whether user needs to change password'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/entities/user.entity.ts:122\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        city\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Property({type: 'varchar', length: 100, nullable: true, comment: 'City name'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/entities/user.entity.ts:59\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        country\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Property({type: 'varchar', length: 100, nullable: true, comment: 'Country name'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/entities/user.entity.ts:83\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        countryCode\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Property({type: 'varchar', length: 3, nullable: true, comment: 'ISO country code'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/entities/user.entity.ts:91\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Property({unique: true, type: 'varchar', length: 255, comment: 'User email address'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/entities/user.entity.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Property({type: 'varchar', length: 100, comment: 'User first name'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/entities/user.entity.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        lastLoggedIn\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Property({type: 'timestamptz', nullable: true, comment: 'Last login timestamp'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/entities/user.entity.ts:136\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Property({type: 'varchar', length: 100, comment: 'User last name'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/entities/user.entity.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Property({type: 'varchar', length: 255, comment: 'Hashed password'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/entities/user.entity.ts:106\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        passwordResetRequested\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Property({type: 'boolean', default: false, comment: 'Whether password reset was requested'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/entities/user.entity.ts:129\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        phoneNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Property({type: 'varchar', length: 20, nullable: true, comment: 'Phone number'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/entities/user.entity.ts:99\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        postalCode\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Property({type: 'varchar', length: 20, nullable: true, comment: 'Postal/ZIP code'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/entities/user.entity.ts:67\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserRoleEnum\n\n                    \n                \n                \n                    \n                        Default value : UserRoleEnum.USER\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Enum({items: () => UserRoleEnum, type: 'varchar', length: 20, default: undefined, comment: 'User role'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/entities/user.entity.ts:115\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        state\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Property({type: 'varchar', length: 100, nullable: true, comment: 'State/Province'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/entities/user.entity.ts:75\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  Property,\n  Enum,\n  BeforeCreate,\n  BeforeUpdate,\n  Index,\n} from '@mikro-orm/core';\nimport { BaseEntity } from 'src/common/entities/base.entitiy';\nimport { UserRoleEnum } from 'src/common/enums';\nimport { normalizeUserFields } from 'src/common/utils/user.util';\n\n@Entity({ tableName: 'users' })\n@Index({ properties: ['email'] })\nexport class User extends BaseEntity {\n  @Property({\n    unique: true,\n    type: 'varchar',\n    length: 255,\n    comment: 'User email address',\n  })\n  email!: string;\n\n  @Property({\n    type: 'varchar',\n    length: 500,\n    nullable: true,\n    comment: 'Avatar URL or path',\n  })\n  avatar?: string;\n\n  @Property({\n    type: 'varchar',\n    length: 100,\n    comment: 'User first name',\n  })\n  firstName!: string;\n\n  @Property({\n    type: 'varchar',\n    length: 100,\n    comment: 'User last name',\n  })\n  lastName!: string;\n\n  @Property({\n    type: 'text',\n    nullable: true,\n    comment: 'Street address',\n  })\n  address?: string;\n\n  @Property({\n    type: 'varchar',\n    length: 100,\n    nullable: true,\n    comment: 'City name',\n  })\n  city?: string;\n\n  @Property({\n    type: 'varchar',\n    length: 20,\n    nullable: true,\n    comment: 'Postal/ZIP code',\n  })\n  postalCode?: string;\n\n  @Property({\n    type: 'varchar',\n    length: 100,\n    nullable: true,\n    comment: 'State/Province',\n  })\n  state?: string;\n\n  @Property({\n    type: 'varchar',\n    length: 100,\n    nullable: true,\n    comment: 'Country name',\n  })\n  country?: string;\n\n  @Property({\n    type: 'varchar',\n    length: 3,\n    nullable: true,\n    comment: 'ISO country code',\n  })\n  countryCode?: string;\n\n  @Property({\n    type: 'varchar',\n    length: 20,\n    nullable: true,\n    comment: 'Phone number',\n  })\n  phoneNumber?: string;\n\n  @Property({\n    type: 'varchar',\n    length: 255,\n    comment: 'Hashed password',\n  })\n  password!: string;\n\n  @Enum({\n    items: () => UserRoleEnum,\n    type: 'varchar',\n    length: 20,\n    default: UserRoleEnum.USER,\n    comment: 'User role',\n  })\n  role: UserRoleEnum = UserRoleEnum.USER;\n\n  @Property({\n    type: 'boolean',\n    default: false,\n    comment: 'Whether user needs to change password',\n  })\n  changePassword: boolean = false;\n\n  @Property({\n    type: 'boolean',\n    default: false,\n    comment: 'Whether password reset was requested',\n  })\n  passwordResetRequested: boolean = false;\n\n  @Property({\n    type: 'timestamptz',\n    nullable: true,\n    comment: 'Last login timestamp',\n  })\n  lastLoggedIn?: Date;\n\n  @BeforeCreate()\n  @BeforeUpdate()\n  private normalizeFields() {\n    normalizeUserFields(this);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                changePassword\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                create\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                getProfile\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                updateProfile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        changePassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    changePassword(data: ChangePasswordDto, req: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('change-password')@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Change user password'})@ApiBody({type: ChangePasswordDto})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/users/users.controller.ts:72\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                            ChangePasswordDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                req\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(user: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Post('sign-up')@ApiOperation({summary: 'Sign up a new user'})@ApiBody({type: CreateUserDto})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/users/users.controller.ts:28\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        getProfile\n                        \n                    \n                \n            \n            \n                \n                        \n                    getProfile(req: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('profile')@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Get user profile'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/users/users.controller.ts:40\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        updateProfile\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateProfile(req: any, body: UpdateProfileDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch('update-profile')@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Update user profile'})@ApiBody({type: UpdateProfileDto})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/users/users.controller.ts:55\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                body\n                                            \n                                                            UpdateProfileDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Get,\n  HttpCode,\n  HttpStatus,\n  Patch,\n  Post,\n  Request,\n} from '@nestjs/common';\nimport { ApiTags, ApiOperation, ApiBody } from '@nestjs/swagger';\nimport { UsersService } from './users.service';\nimport { Public } from '../auth/decorators/public.decorator';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport { ApiResponse } from 'src/common/interfaces/api-response.interface';\nimport { ChangePasswordDto } from './dto/change-password.dto';\nimport { UpdateProfileDto } from './dto/update-profile.dto';\n\n@ApiTags('users')\n@Controller('users')\nexport class UsersController {\n  constructor(private readonly usersService: UsersService) {}\n\n  @Public()\n  @Post('sign-up')\n  @ApiOperation({ summary: 'Sign up a new user' })\n  @ApiBody({ type: CreateUserDto })\n  async create(@Body() user: CreateUserDto): Promise> {\n    const newUser = await this.usersService.create(user);\n    return {\n      statusCode: HttpStatus.CREATED,\n      message: 'User created successfully',\n      data: newUser,\n    };\n  }\n\n  @Get('profile')\n  @HttpCode(HttpStatus.OK)\n  @ApiOperation({ summary: 'Get user profile' })\n  async getProfile(@Request() req: any): Promise> {\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const { password, ...safeUser } = req.user;\n\n    return {\n      statusCode: HttpStatus.OK,\n      message: 'Profile fetched successfully',\n      data: { user: safeUser },\n    };\n  }\n\n  @Patch('update-profile')\n  @HttpCode(HttpStatus.OK)\n  @ApiOperation({ summary: 'Update user profile' })\n  @ApiBody({ type: UpdateProfileDto })\n  async updateProfile(\n    @Request() req: any,\n    @Body() body: UpdateProfileDto,\n  ): Promise> {\n    const userId = req?.user?.id;\n    const updatedUser = await this.usersService.update({ id: userId, ...body });\n    return {\n      statusCode: HttpStatus.OK,\n      message: 'Profile updated successfully',\n      data: updatedUser,\n    };\n  }\n\n  @Post('change-password')\n  @HttpCode(HttpStatus.OK)\n  @ApiOperation({ summary: 'Change user password' })\n  @ApiBody({ type: ChangePasswordDto })\n  async changePassword(\n    @Body() data: ChangePasswordDto,\n    @Request() req: any,\n  ): Promise> {\n    const userId = req.user.id;\n    await this.usersService.changePassword(userId, data);\n    return {\n      statusCode: HttpStatus.OK,\n      message: 'Password Changed Successfully',\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_imports\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nAppRedisModule\n\nAppRedisModule\n\n\n\nUsersModule\n\nUsersModule\n\nUsersModule -->\n\nAppRedisModule->UsersModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\nUsersSubscriber\n\nUsersSubscriber\n\nUsersModule -->\n\nUsersSubscriber->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UsersService\n                        \n                        \n                            UsersSubscriber\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AppRedisModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UsersService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { UsersService } from './users.service';\nimport { UsersController } from './users.controller';\nimport { MikroOrmModule } from '@mikro-orm/nestjs';\nimport { User } from './entities/user.entity';\nimport { UsersSubscriber } from './subscribers/user.subscriber';\nimport { AppRedisModule } from 'src/services/redis/redis.module';\n\n@Module({\n  imports: [MikroOrmModule.forFeature([User]), AppRedisModule],\n  controllers: [UsersController],\n  providers: [UsersService, UsersSubscriber],\n  exports: [UsersService],\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/users.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                userEmailCacheKey\n                            \n                            \n                                    Private\n                                    Readonly\n                                userIdCacheKey\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                changePassword\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(appRedisService: AppRedisService, configService: ConfigService, userRepository: EntityRepository)\n                    \n                \n                        \n                            \n                                Defined in src/modules/users/users.service.ts:22\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        appRedisService\n                                                  \n                                                        \n                                                                        AppRedisService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        EntityRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        changePassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    changePassword(userId: string, data: ChangePasswordDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/users/users.service.ts:129\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                data\n                                            \n                                                            ChangePasswordDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(userData: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/users/users.service.ts:34\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userData\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(query: FilterQuery, options?: FindOneOrFailOptions)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/users/users.service.ts:51\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                query\n                                            \n                                                            FilterQuery\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                options\n                                            \n                                                            FindOneOrFailOptions\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(data: EntityData)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/users/users.service.ts:99\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                            EntityData\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        userEmailCacheKey\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/users/users.service.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        userIdCacheKey\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/users/users.service.ts:21\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  ConflictException,\n  Injectable,\n  NotFoundException,\n} from '@nestjs/common';\nimport { InjectRepository } from '@mikro-orm/nestjs';\nimport {\n  EntityData,\n  EntityRepository,\n  FilterQuery,\n  FindOneOrFailOptions,\n} from '@mikro-orm/core';\nimport { User } from './entities/user.entity';\nimport { ConfigService } from '@nestjs/config';\nimport { ChangePasswordDto } from './dto/change-password.dto';\nimport { AppRedisService } from 'src/services/redis/redis.service';\n\n@Injectable()\nexport class UsersService {\n  private readonly userIdCacheKey: string;\n  private readonly userEmailCacheKey: string;\n\n  constructor(\n    private readonly appRedisService: AppRedisService,\n    private readonly configService: ConfigService,\n    @InjectRepository(User)\n    private readonly userRepository: EntityRepository,\n  ) {\n    this.userIdCacheKey = `users:id`;\n    this.userEmailCacheKey = `users:email`;\n  }\n\n  async create(userData: any): Promise> {\n    const user = await this.userRepository.findOne({\n      email: userData.email,\n    });\n\n    if (user) {\n      throw new ConflictException('User already exists in the system.');\n    }\n\n    const newUser = this.userRepository.create(userData);\n    await this.userRepository.getEntityManager().persistAndFlush(newUser);\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const { password, ...result } = newUser;\n    return result;\n  }\n\n  async findOne(\n    query: FilterQuery,\n    options?: FindOneOrFailOptions,\n  ): Promise {\n    let cacheKey: string | undefined;\n\n    if (typeof query === 'string') {\n      cacheKey = `${this.userIdCacheKey}:${query}`;\n    } else if (typeof query === 'object' && query !== null) {\n      if ('id' in query && query?.id) {\n        cacheKey = `${this.userIdCacheKey}:${query?.id}`;\n      } else if ('email' in query && query?.email) {\n        cacheKey = `${this.userEmailCacheKey}:${query?.email}`;\n      }\n    }\n\n    if (cacheKey) {\n      const cached = await this.appRedisService.get(cacheKey);\n\n      if (cached) {\n        const parsed = JSON.parse(cached);\n        const user = this.userRepository.create(parsed);\n        return this.userRepository.getEntityManager().merge(user);\n      }\n    }\n\n    const user = await this.userRepository.findOneOrFail(query, options);\n\n    if (cacheKey) {\n      const serializable = { ...user };\n\n      await Promise.all([\n        this.appRedisService.set(\n          `${this.userIdCacheKey}:${user?.id}`,\n          JSON.stringify(serializable),\n          5 * 60,\n        ),\n        this.appRedisService.set(\n          `${this.userEmailCacheKey}:${user?.email}`,\n          JSON.stringify(serializable),\n          5 * 60,\n        ),\n      ]);\n    }\n\n    return user;\n  }\n\n  async update(data: EntityData): Promise> {\n    const user = await this.userRepository.findOneOrFail(\n      { id: data.id },\n      { failHandler: () => new NotFoundException('User not found') },\n    );\n\n    this.userRepository.assign(user, data);\n\n    await this.userRepository.getEntityManager().persistAndFlush(user);\n\n    if (user) {\n      await Promise.all([\n        this.appRedisService.set(\n          `${this.userIdCacheKey}:${user?.id}`,\n          JSON.stringify(user),\n          5 * 60,\n        ),\n        this.appRedisService.set(\n          `${this.userEmailCacheKey}:${user?.email}`,\n          JSON.stringify(user),\n          5 * 60,\n        ),\n      ]);\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const { password, ...result } = user;\n    return result;\n  }\n\n  async changePassword(\n    userId: string,\n    data: ChangePasswordDto,\n  ): Promise> {\n    const { newPassword, confirmPassword } = data;\n\n    if (newPassword !== confirmPassword) {\n      throw new BadRequestException('Passwords do not match');\n    }\n\n    const updatedUser = await this.update({\n      id: userId,\n      password: newPassword,\n      changePassword: false,\n    });\n\n    return updatedUser;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersSubscriber.html":{"url":"injectables/UsersSubscriber.html","title":"injectable - UsersSubscriber","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersSubscriber\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/subscribers/user.subscriber.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                beforeCreate\n                            \n                            \n                                    Async\n                                beforeUpdate\n                            \n                            \n                                getSubscribedEntities\n                            \n                            \n                                    Private\n                                    Async\n                                hashPassword\n                            \n                            \n                                    Private\n                                isPasswordModified\n                            \n                            \n                                    Private\n                                normalizeFields\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/users/subscribers/user.subscriber.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        beforeCreate\n                        \n                    \n                \n            \n            \n                \n                        \n                    beforeCreate(args: EventArgs)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/users/subscribers/user.subscriber.ts:16\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                args\n                                            \n                                                            EventArgs\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        beforeUpdate\n                        \n                    \n                \n            \n            \n                \n                        \n                    beforeUpdate(args: EventArgs)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/users/subscribers/user.subscriber.ts:24\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                args\n                                            \n                                                            EventArgs\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getSubscribedEntities\n                        \n                    \n                \n            \n            \n                \ngetSubscribedEntities()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/users/subscribers/user.subscriber.ts:12\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     EntityName[]\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        hashPassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    hashPassword(user: User)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/users/subscribers/user.subscriber.ts:46\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            User\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        isPasswordModified\n                        \n                    \n                \n            \n            \n                \n                        \n                    isPasswordModified(user: User)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/users/subscribers/user.subscriber.ts:38\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            User\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        normalizeFields\n                        \n                    \n                \n            \n            \n                \n                        \n                    normalizeFields(user: User)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/users/subscribers/user.subscriber.ts:34\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            User\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { EventSubscriber, EntityName, EventArgs } from '@mikro-orm/core';\nimport { Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { User } from '../entities/user.entity';\nimport * as bcrypt from 'bcrypt';\nimport { normalizeUserFields } from 'src/common/utils/user.util';\n\n@Injectable()\nexport class UsersSubscriber implements EventSubscriber {\n  constructor(private readonly configService: ConfigService) {}\n\n  getSubscribedEntities(): EntityName[] {\n    return [User];\n  }\n\n  async beforeCreate(args: EventArgs) {\n    const user = args.entity;\n\n    this.normalizeFields(user);\n\n    await this.hashPassword(user);\n  }\n\n  async beforeUpdate(args: EventArgs) {\n    const user = args.entity;\n\n    this.normalizeFields(user);\n\n    if (this.isPasswordModified(user)) {\n      await this.hashPassword(user);\n    }\n  }\n\n  private normalizeFields(user: User) {\n    normalizeUserFields(user);\n  }\n\n  private isPasswordModified(user: User): boolean {\n    const originalData = (user as any).__helper?.__originalEntityData;\n\n    if (!originalData) return true;\n\n    return user.password !== originalData.password;\n  }\n\n  private async hashPassword(user: User) {\n    const saltRounds = this.configService.get('auth.saltRounds');\n    user.password = await bcrypt.hash(user.password, saltRounds);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/commands/create-user.command.ts\n            \n            injectable\n            CreateUserCommand\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                        src/common/constants/index.ts\n            \n            variable\n            APP_NAME\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/common/constants/index.ts\n            \n            variable\n            EMAIL_FROM_NAME\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/common/constants/index.ts\n            \n            variable\n            PASSWORD_CHARACTER_SET\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/common/constants/index.ts\n            \n            variable\n            PASSWORD_RESET_EMAIL_QUEUE_NAME\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/common/constants/index.ts\n            \n            variable\n            PAYMENT_PROVIDER\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/common/constants/index.ts\n            \n            variable\n            PRODUCTION\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/common/constants/index.ts\n            \n            variable\n            STORAGE_PROVIDER\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/common/constants/index.ts\n            \n            variable\n            TEMPLATE_QUEUE_NAME\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/common/decorators/index.ts\n            \n            variable\n            Role\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/entities/base.entitiy.ts\n            \n            class\n            BaseEntity\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/common/filters/exception.filter.ts\n            \n            class\n            CatchEverythingFilter\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/common/guards/role.guard.ts\n            \n            guard\n            RoleGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/common/interceptors/response.interceptor.ts\n            \n            injectable\n            RequestBodyAndResponseInterceptor\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/common/interceptors/response.interceptor.ts\n            \n            injectable\n            SuccessResponseInterceptor\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/common/interfaces/api-response.interface.ts\n            \n            interface\n            ApiResponse\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/common/interfaces/error-response.interface.ts\n            \n            interface\n            ErrorResponse\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/common/middlewares/morgan.middleware.ts\n            \n            injectable\n            MorganMiddleware\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/common/middlewares/request-context.middleware.ts\n            \n            injectable\n            RequestContextMiddleware\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                        src/common/types/index.ts\n            \n            type alias\n            HandledException\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/common/utils/common.utils.ts\n            \n            function\n            generateSlug\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/common/utils/time.util.ts\n            \n            function\n            parseTimeString\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/common/utils/user.util.ts\n            \n            function\n            normalizeUserFields\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/config/swagger.config.ts\n            \n            function\n            setupSwagger\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/main.cli.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/modules/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/13)\n            \n        \n        \n            \n                \n                src/modules/auth/consumers/auth.consumer.ts\n            \n            class\n            PasswordResetEmailConsumer\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                        src/modules/auth/decorators/public.decorator.ts\n            \n            variable\n            IS_PUBLIC_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/modules/auth/decorators/public.decorator.ts\n            \n            variable\n            Public\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/auth/dto/auth-response.dto.ts\n            \n            class\n            AuthResponseDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/auth/dto/forgot-password.dto.ts\n            \n            class\n            ForgotPasswordDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/modules/auth/dto/login.dto.ts\n            \n            class\n            LoginDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/auth/dto/refresh-token-dto.ts\n            \n            class\n            RefreshTokenDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/modules/auth/dto/reset-password.dto.ts\n            \n            class\n            ResetPasswordDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/modules/auth/guards/jwt-auth.guard.ts\n            \n            injectable\n            JwtAuthGuard\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/modules/auth/guards/local-auth.guard.ts\n            \n            injectable\n            LocalAuthGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/auth/strategies/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                src/modules/auth/strategies/local.strategy.ts\n            \n            injectable\n            LocalStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                        src/modules/auth/types/auth-tokens.ts\n            \n            type alias\n            AuthTokens\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/users/dto/change-password.dto.ts\n            \n            class\n            ChangePasswordDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/users/dto/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/14)\n            \n        \n        \n            \n                \n                src/modules/users/dto/responses.dto.ts\n            \n            class\n            CreateUserResponseDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/users/dto/responses.dto.ts\n            \n            class\n            GetProfileResponseDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/users/dto/update-profile.dto.ts\n            \n            class\n            UpdateProfileDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/users/entities/user.entity.ts\n            \n            entity\n            User\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/users/entities/user.entity.ts\n            \n            class\n            User\n            \n                0 %\n                (0/18)\n            \n        \n        \n            \n                \n                src/modules/users/subscribers/user.subscriber.ts\n            \n            injectable\n            UsersSubscriber\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/modules/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/modules/users/users.service.ts\n            \n            injectable\n            UsersService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/schema.service.ts\n            \n            injectable\n            SchemaService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/services/email/email.service.ts\n            \n            class\n            EmailService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/services/http-client/http-client.service.ts\n            \n            injectable\n            HttpClientService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/services/payment/interfaces/payment.interface.ts\n            \n            interface\n            IPaymentService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/services/payment/stripe.service.ts\n            \n            injectable\n            StripeService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                        src/services/payment/types/checkout.ts\n            \n            type alias\n            Checkout\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/services/payment/types/payment-intent.ts\n            \n            type alias\n            PaymentIntent\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/services/redis/redis.service.ts\n            \n            injectable\n            AppRedisService\n            \n                30 %\n                (3/10)\n            \n        \n        \n            \n                \n                src/services/storage/cloudinary.service.ts\n            \n            injectable\n            CloudinaryService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/services/storage/interfaces/storage.interface.ts\n            \n            interface\n            IStrorageService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/services/storage/s3.service.ts\n            \n            injectable\n            S3Service\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                        src/services/storage/types/s3-put-object-response.ts\n            \n            type alias\n            S3PutObjectResponse\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/tracing.ts\n            \n            variable\n            otelSDK\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/tracing.ts\n            \n            variable\n            prometheusExporter\n            \n                0 %\n                (0/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @aws-sdk/credential-providers : ^3.848.0\n        \n            @aws-sdk/s3-request-presigner : ^3.850.0\n        \n            @aws-sdk/util-format-url : ^3.840.0\n        \n            @bull-board/api : ^6.12.0\n        \n            @bull-board/express : ^6.12.0\n        \n            @bull-board/nestjs : ^6.12.0\n        \n            @compodoc/compodoc : ^1.1.26\n        \n            @golevelup/nestjs-stripe : ^0.9.3\n        \n            @golevelup/nestjs-webhooks : ^0.2.21\n        \n            @liaoliaots/nestjs-redis : ^10.0.0\n        \n            @mikro-orm/core : ^6.4.16\n        \n            @mikro-orm/nestjs : ^6.1.1\n        \n            @mikro-orm/postgresql : ^6.4.16\n        \n            @nestjs-modules/mailer : ^2.0.2\n        \n            @nestjs/axios : ^4.0.0\n        \n            @nestjs/bullmq : ^11.0.3\n        \n            @nestjs/common : ^10.0.0\n        \n            @nestjs/config : ^3.2.2\n        \n            @nestjs/core : ^10.0.0\n        \n            @nestjs/jwt : ^10.2.0\n        \n            @nestjs/mapped-types : *\n        \n            @nestjs/passport : ^10.0.3\n        \n            @nestjs/platform-express : ^10.0.0\n        \n            @nestjs/swagger : ^7.3.1\n        \n            @opentelemetry/auto-instrumentations-node : ^0.62.0\n        \n            @opentelemetry/context-async-hooks : ^2.0.1\n        \n            @opentelemetry/core : ^2.0.1\n        \n            @opentelemetry/exporter-prometheus : ^0.203.0\n        \n            @opentelemetry/propagator-b3 : ^2.0.1\n        \n            @opentelemetry/propagator-jaeger : ^2.0.1\n        \n            @opentelemetry/sdk-node : ^0.203.0\n        \n            @smithy/hash-node : ^4.0.4\n        \n            @smithy/protocol-http : ^5.1.2\n        \n            @types/bcrypt : ^5.0.2\n        \n            @types/chalk : ^2.2.4\n        \n            @types/morgan : ^1.9.10\n        \n            @types/ms : ^2.1.0\n        \n            axios : ^1.10.0\n        \n            bcrypt : ^5.1.1\n        \n            buffer-to-stream : ^1.0.0\n        \n            bullmq : ^5.56.8\n        \n            chalk : ^4.1.2\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.1\n        \n            cloudinary : ^2.7.0\n        \n            express-basic-auth : ^1.2.1\n        \n            helmet : ^8.1.0\n        \n            moment-timezone : ^0.6.0\n        \n            morgan : ^1.10.0\n        \n            ms : ^2.1.3\n        \n            nanoid : ^3.0.0\n        \n            nanoid-dictionary : ^5.0.0\n        \n            nest-commander : ^3.18.0\n        \n            nest-winston : ^1.10.2\n        \n            nestjs-form-data : ^1.9.93\n        \n            nestjs-s3 : ^3.0.1\n        \n            nodemailer : ^7.0.5\n        \n            passport : ^0.7.0\n        \n            passport-jwt : ^4.0.1\n        \n            passport-local : ^1.0.0\n        \n            pug : ^3.0.3\n        \n            reflect-metadata : ^0.1.13\n        \n            rxjs : ^7.8.1\n        \n            stripe : ^18.3.0\n        \n            util : ^0.12.5\n        \n            uuid : ^11.1.0\n        \n            winston : ^3.17.0\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            EmailSubjectEnum   (src/.../index.ts)\n                        \n                        \n                            EmailTemplateEnum   (src/.../index.ts)\n                        \n                        \n                            HttpRequestMethodEnum   (src/.../index.ts)\n                        \n                        \n                            IANATimeZoneDatabaseEnum   (src/.../index.ts)\n                        \n                        \n                            PaymentDriverEnum   (src/.../index.ts)\n                        \n                        \n                            StorageDriverEnum   (src/.../index.ts)\n                        \n                        \n                            StripeCurrencyEnum   (src/.../index.ts)\n                        \n                        \n                            UploadFileCategoryEnum   (src/.../index.ts)\n                        \n                        \n                            UserRoleEnum   (src/.../index.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/common/enums/index.ts\n    \n        \n            \n                \n                    \n                        \n                        EmailSubjectEnum\n                    \n                \n                        \n                            \n                                 PASSWORD_RESET\n                            \n                        \n                        \n                            \n                                Value : 🔐 Reset Your Password Quickly & Securely\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        EmailTemplateEnum\n                    \n                \n                        \n                            \n                                 PASSWORD_RESET\n                            \n                        \n                        \n                            \n                                Value : password-reset\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        HttpRequestMethodEnum\n                    \n                \n                        \n                            \n                                 GET\n                            \n                        \n                        \n                            \n                                Value : GET\n                            \n                        \n                        \n                            \n                                 POST\n                            \n                        \n                        \n                            \n                                Value : POST\n                            \n                        \n                        \n                            \n                                 PUT\n                            \n                        \n                        \n                            \n                                Value : PUT\n                            \n                        \n                        \n                            \n                                 DELETE\n                            \n                        \n                        \n                            \n                                Value : DELETE\n                            \n                        \n                        \n                            \n                                 PATCH\n                            \n                        \n                        \n                            \n                                Value : PATCH\n                            \n                        \n                        \n                            \n                                 HEAD\n                            \n                        \n                        \n                            \n                                Value : HEAD\n                            \n                        \n                        \n                            \n                                 OPTIONS\n                            \n                        \n                        \n                            \n                                Value : OPTIONS\n                            \n                        \n                        \n                            \n                                 TRACE\n                            \n                        \n                        \n                            \n                                Value : TRACE\n                            \n                        \n                        \n                            \n                                 CONNECT\n                            \n                        \n                        \n                            \n                                Value : CONNECT\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        IANATimeZoneDatabaseEnum\n                    \n                \n                        \n                            \n                                 LAGOS\n                            \n                        \n                        \n                            \n                                Value : Africa/lagos\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        PaymentDriverEnum\n                    \n                \n                        \n                            \n                                 STRIPE\n                            \n                        \n                        \n                            \n                                Value : stripe\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        StorageDriverEnum\n                    \n                \n                        \n                            \n                                 CLOUDINARY\n                            \n                        \n                        \n                            \n                                Value : cloudinary\n                            \n                        \n                        \n                            \n                                 S3\n                            \n                        \n                        \n                            \n                                Value : s3\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        StripeCurrencyEnum\n                    \n                \n                        \n                            \n                                 USD\n                            \n                        \n                        \n                            \n                                Value : usd\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        UploadFileCategoryEnum\n                    \n                \n                        \n                            \n                                 AVATAR\n                            \n                        \n                        \n                            \n                                Value : avatars\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        UserRoleEnum\n                    \n                \n                        \n                            \n                                 ADMIN\n                            \n                        \n                        \n                            \n                                Value : admin\n                            \n                        \n                        \n                            \n                                 USER\n                            \n                        \n                        \n                            \n                                Value : user\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.cli.ts)\n                        \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            generateSlug   (src/.../common.utils.ts)\n                        \n                        \n                            normalizeUserFields   (src/.../user.util.ts)\n                        \n                        \n                            parseTimeString   (src/.../time.util.ts)\n                        \n                        \n                            setupSwagger   (src/.../swagger.config.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.cli.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n    src/common/utils/common.utils.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        generateSlug\n                        \n                    \n                \n            \n            \n                \ngenerateSlug(text: string, limit: number)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                text\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    src/common/utils/user.util.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        normalizeUserFields\n                        \n                    \n                \n            \n            \n                \nnormalizeUserFields(user: User)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            User\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    src/common/utils/time.util.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        parseTimeString\n                        \n                    \n                \n            \n            \n                \nparseTimeString(timeString: string)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                timeString\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     literal type\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    src/config/swagger.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        setupSwagger\n                        \n                    \n                \n            \n            \n                \nsetupSwagger(app: INestApplication)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                app\n                                            \n                                                        INestApplication\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nDocumentation\nDescription\n\nNest framework TypeScript starter repository.\nProject setup\nExample :$ yarn installCompile and run the project\nExample :# development\n$ yarn run start\n\n# watch mode\n$ yarn run start:dev\n\n# production mode\n$ yarn run start:prodRun tests\nExample :# unit tests\n$ yarn run test\n\n# e2e tests\n$ yarn run test:e2e\n\n# test coverage\n$ yarn run test:cov\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AppRedisModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        EmailModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        HttpClientModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PaymentModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        StorageModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AppRedisModule\n\n\n\ncluster_AppRedisModule_exports\n\n\n\ncluster_AppRedisModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_EmailModule\n\n\n\ncluster_EmailModule_exports\n\n\n\ncluster_HttpClientModule\n\n\n\ncluster_HttpClientModule_exports\n\n\n\ncluster_HttpClientModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAuthModule -->\n\nUsersModule->AuthModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nCreateUserCommand\n\nCreateUserCommand\n\nAppModule -->\n\nCreateUserCommand->AppModule\n\n\n\n\n\nSchemaService\n\nSchemaService\n\nAppModule -->\n\nSchemaService->AppModule\n\n\n\n\n\nAppRedisService \n\nAppRedisService \n\n\n\nAppRedisModule\n\nAppRedisModule\n\nAuthModule -->\n\nAppRedisModule->AuthModule\n\n\n\nUsersModule -->\n\nAppRedisModule->UsersModule\n\n\n\nAppRedisService  -->\n\nAppRedisModule->AppRedisService \n\n\n\n\n\nAppRedisService\n\nAppRedisService\n\nAppRedisModule -->\n\nAppRedisService->AppRedisModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthModule -->\n\nLocalStrategy->AuthModule\n\n\n\n\n\nEmailService \n\nEmailService \n\n\n\nEmailModule\n\nEmailModule\n\nEmailService  -->\n\nEmailModule->EmailService \n\n\n\n\n\nHttpClientService \n\nHttpClientService \n\n\n\nHttpClientModule\n\nHttpClientModule\n\nHttpClientService  -->\n\nHttpClientModule->HttpClientService \n\n\n\n\n\nHttpClientService\n\nHttpClientService\n\nHttpClientModule -->\n\nHttpClientService->HttpClientModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\nUsersSubscriber\n\nUsersSubscriber\n\nUsersModule -->\n\nUsersSubscriber->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        8 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    3 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    1 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    19 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    15 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Guard\n                \n            \n        \n        \n            \n                \n                    \n                    4 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            AuthTokens   (src/.../auth-tokens.ts)\n                        \n                        \n                            Checkout   (src/.../checkout.ts)\n                        \n                        \n                            HandledException   (src/.../index.ts)\n                        \n                        \n                            PaymentIntent   (src/.../payment-intent.ts)\n                        \n                        \n                            S3PutObjectResponse   (src/.../s3-put-object-response.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/modules/auth/types/auth-tokens.ts\n    \n    \n        \n            \n                \n                    \n                    AuthTokens\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    src/services/payment/types/checkout.ts\n    \n    \n        \n            \n                \n                    \n                    Checkout\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    src/common/types/index.ts\n    \n    \n        \n            \n                \n                    \n                    HandledException\n                \n            \n            \n                \n                        HttpException | AxiosError | ForbiddenException | Error\n\n                \n            \n        \n    \n    src/services/payment/types/payment-intent.ts\n    \n    \n        \n            \n                \n                    \n                    PaymentIntent\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    src/services/storage/types/s3-put-object-response.ts\n    \n    \n        \n            \n                \n                    \n                    S3PutObjectResponse\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            APP_NAME   (src/.../index.ts)\n                        \n                        \n                            EMAIL_FROM_NAME   (src/.../index.ts)\n                        \n                        \n                            IS_PUBLIC_KEY   (src/.../public.decorator.ts)\n                        \n                        \n                            otelSDK   (src/.../tracing.ts)\n                        \n                        \n                            PASSWORD_CHARACTER_SET   (src/.../index.ts)\n                        \n                        \n                            PASSWORD_RESET_EMAIL_QUEUE_NAME   (src/.../index.ts)\n                        \n                        \n                            PAYMENT_PROVIDER   (src/.../index.ts)\n                        \n                        \n                            PRODUCTION   (src/.../index.ts)\n                        \n                        \n                            prometheusExporter   (src/.../tracing.ts)\n                        \n                        \n                            Public   (src/.../public.decorator.ts)\n                        \n                        \n                            Role   (src/.../index.ts)\n                        \n                        \n                            STORAGE_PROVIDER   (src/.../index.ts)\n                        \n                        \n                            TEMPLATE_QUEUE_NAME   (src/.../index.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/common/constants/index.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        APP_NAME\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'nestjs-boilerplate'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        EMAIL_FROM_NAME\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'nestjs'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        PASSWORD_CHARACTER_SET\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!@#$%^&*()_+-=[]{}|;:,.<>?'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        PASSWORD_RESET_EMAIL_QUEUE_NAME\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'password-reset-email-queue'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        PAYMENT_PROVIDER\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'PAYMENT_PROVIDER'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        PRODUCTION\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'production'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        STORAGE_PROVIDER\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'STORAGE_PROVIDER'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        TEMPLATE_QUEUE_NAME\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'template-queue-name'\n                    \n                \n\n\n        \n    \n\n    src/modules/auth/decorators/public.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        IS_PUBLIC_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'isPublic'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => SetMetadata(IS_PUBLIC_KEY, true)\n                    \n                \n\n\n        \n    \n\n    src/tracing.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        otelSDK\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new NodeSDK({\n  metricReader: prometheusExporter,\n  contextManager: new AsyncLocalStorageContextManager(),\n  textMapPropagator: new CompositePropagator({\n    propagators: [\n      new JaegerPropagator(),\n      new W3CTraceContextPropagator(),\n      new W3CBaggagePropagator(),\n      new B3Propagator(),\n    ],\n  }),\n  instrumentations: [getNodeAutoInstrumentations()],\n})\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        prometheusExporter\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new PrometheusExporter(\n  { preventServerStart: true },\n  () => {\n    console.log('Prometheus exporter initialized');\n  },\n)\n                    \n                \n\n\n        \n    \n\n    src/common/decorators/index.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Role\n                        \n                    \n                \n            \n                \n                    \n                        Default value : Reflector.createDecorator()\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
