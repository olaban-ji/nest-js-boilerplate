var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/interfaces/ApiResponse.html",[0,1.902,1,2.462]],["body/interfaces/ApiResponse.html",[0,2.633,1,4.146,2,3.408,3,0.268,4,0.268,5,0.24,6,3.692,7,4.048,8,0.415,9,1.644,10,1.085,11,2.527,12,2.527,13,4.051,14,6.882,15,0.504,16,0.017,17,1.227,18,4.65,19,0.296,20,0.727,21,0.268,22,0.014,23,0.014]],["title/controllers/AppController.html",[24,2.016,25,2.667]],["body/controllers/AppController.html",[3,0.247,4,0.247,5,0.221,8,0.383,11,2.145,12,2.145,15,0.355,16,0.018,17,0.864,18,3.146,19,0.374,20,0.672,21,0.247,22,0.014,23,0.014,24,3.233,25,4.276,26,2.577,27,4.177,28,1.137,29,6.964,30,1.56,31,4.845,32,6.641,33,5.122,34,5.725,35,5.122,36,0.504,37,4.845,38,0.864,39,3.737,40,3.737,41,3.673,42,4.845,43,4.688,44,3.737,45,1.879,46,4.845,47,0.031,48,3.737,49,3.737,50,1.09]],["title/modules/AppModule.html",[51,1.277,52,2.667]],["body/modules/AppModule.html",[3,0.147,4,0.147,5,0.132,10,0.49,15,0.211,16,0.018,19,0.421,20,0.4,21,0.147,22,0.009,23,0.009,25,3.565,26,2.267,28,0.54,36,0.3,38,0.515,47,0.018,50,0.649,51,1.708,52,5.073,53,1.299,54,1.448,55,1.632,56,1.632,57,1.448,58,2.282,59,1.448,60,2.487,61,2.487,62,2.487,63,4.059,64,3.777,65,4.059,66,4.059,67,4.059,68,2.411,69,1.174,70,1.632,71,2.885,72,2.267,73,2.885,74,4.262,75,5.597,76,2.885,77,0.62,78,0.444,79,4.262,80,1.743,81,1.372,82,4.262,83,2.885,84,2.885,85,2.885,86,4.262,87,2.885,88,2.885,89,2.506,90,1.018,91,2.885,92,2.885,93,2.03,94,2.885,95,2.487,96,2.024,97,2.03,98,4.262,99,2.487,100,2.998,101,2.487,102,2.885,103,4.262,104,2.225,105,2.487,106,2.03,107,2.885,108,1.632,109,2.487,110,1.743,111,2.885,112,2.225,113,1.632,114,2.225,115,2.998,116,2.03,117,4.262,118,2.487,119,2.885,120,2.885,121,2.03,122,2.885,123,2.885,124,2.885,125,2.885,126,2.179,127,2.885,128,2.885,129,2.885,130,2.575,131,0.888,132,2.225,133,2.885,134,2.885,135,2.225,136,2.885,137,2.487,138,2.885,139,0.679,140,2.885,141,1.067,142,2.885,143,2.885,144,2.885,145,2.885,146,2.885,147,2.885,148,2.885,149,2.885,150,2.885,151,2.885,152,2.225,153,2.487,154,2.885,155,2.885,156,2.885,157,0.777,158,2.885,159,1.372,160,2.885,161,2.885,162,1.448,163,2.487,164,2.885,165,2.03,166,2.225,167,4.262,168,1.234,169,1.632,170,0.812,171,2.885,172,2.575,173,4.262,174,2.767,175,2.885,176,2.885,177,2.225,178,2.885,179,2.885,180,2.885,181,2.885,182,2.487,183,2.885,184,2.885,185,2.885]],["title/modules/AppRedisModule.html",[51,1.277,186,2.291]],["body/modules/AppRedisModule.html",[3,0.232,4,0.232,5,0.208,16,0.018,19,0.384,20,0.63,21,0.232,22,0.013,23,0.013,47,0.029,50,1.023,51,2.173,53,2.047,54,2.282,55,2.572,56,2.572,57,2.282,58,2.903,59,3.236,68,3.302,69,1.85,70,2.572,72,2.418,81,1.879,89,2.515,90,1.604,126,1.967,130,2.747,131,1.399,159,1.464,162,2.282,163,3.919,186,4.425,187,3.919,188,3.919,189,3.919,190,4.325,191,4.546,192,4.546,193,4.546,194,3.507,195,3.507,196,4.546,197,4.546,198,4.546,199,3.919,200,4.546,201,4.546]],["title/injectables/AppRedisService.html",[190,2.144,202,0.419]],["body/injectables/AppRedisService.html",[3,0.106,4,0.106,5,0.095,8,0.164,9,0.85,10,1.013,15,0.45,16,0.018,17,1.283,19,0.265,20,0.287,21,0.106,22,0.009,23,0.007,28,0.618,36,0.639,38,1.124,47,0.013,50,1.342,77,1.322,78,0.917,81,0.667,89,2.123,90,0.731,126,1.113,131,2.201,159,0.667,170,1.54,190,1.868,194,1.597,195,5.313,202,0.365,203,0.609,204,1.786,205,1.685,206,4.12,207,3.303,208,4.861,209,3.303,210,4.719,211,3.303,212,6.302,213,0.972,214,1.597,215,2.122,216,5.743,217,3.303,218,3.303,219,2.071,220,5.691,221,3.552,222,3.303,223,2.071,224,1.762,225,2.205,226,3.229,227,6.434,228,5.473,229,5.141,230,2.489,231,3.303,232,2.071,233,3.303,234,3.303,235,3.303,236,2.071,237,3.303,238,2.071,239,3.303,240,5.198,241,2.071,242,1.996,243,3.303,244,2.897,245,6.65,246,2.675,247,2.071,248,1.039,249,2.848,250,2.848,251,3.303,252,3.303,253,1.996,254,2.548,255,3.552,256,3.303,257,1.868,258,2.324,259,2.848,260,2.071,261,1.039,262,2.071,263,2.071,264,2.071,265,5.473,266,1.483,267,3.303,268,2.071,269,3.303,270,2.071,271,2.071,272,2.732,273,2.071,274,5.136,275,1.786,276,2.071,277,2.071,278,2.071,279,1.899,280,2.071,281,1.786,282,2.675,283,2.071,284,2.071,285,2.071,286,2.071,287,2.071,288,2.071,289,2.071,290,2.071,291,2.071,292,2.071,293,2.071,294,2.071,295,2.071,296,3.851,297,2.071,298,3.303,299,3.303,300,2.071]],["title/injectables/AppService.html",[65,2.462,202,0.419]],["body/injectables/AppService.html",[3,0.279,4,0.279,5,0.25,8,0.433,16,0.017,17,1.168,19,0.309,20,0.759,21,0.279,22,0.015,23,0.015,28,1.225,36,0.569,38,0.976,47,0.035,50,1.232,65,4.254,202,0.724,203,1.611,301,4.72,302,7.264,303,5.475,304,5.475,305,5.475]],["title/controllers/AuthController.html",[24,2.016,306,2.667]],["body/controllers/AuthController.html",[1,1.743,3,0.137,4,0.137,5,0.123,6,1.888,8,0.212,10,0.918,11,1.906,12,1.906,13,3.055,15,0.476,16,0.018,18,1.743,19,0.382,20,0.372,21,0.137,22,0.009,23,0.009,24,1.427,26,1.427,28,0.755,30,1.739,36,0.561,38,0.963,40,2.07,41,3.5,43,4.467,44,2.07,45,1.041,47,0.017,48,4.166,49,4.166,50,1.215,69,2.57,77,1.161,78,0.831,106,1.888,131,2.145,139,1.271,141,2.458,169,1.518,170,0.755,224,1.727,225,2.402,266,1.363,279,1.997,306,2.841,307,2.314,308,2.314,309,4.185,310,3.264,311,3.8,312,4.185,313,2.684,314,4.281,315,2.684,316,3.481,317,2.186,318,2.684,319,2.684,320,4.903,321,2.684,322,2.684,323,2.684,324,3.415,325,2.684,326,2.622,327,2.684,328,2.684,329,3.115,330,2.684,331,3.415,332,2.684,333,2.684,334,4.281,335,2.684,336,2.314,337,2.684,338,2.07,339,2.684,340,4.993,341,1.888,342,2.684,343,2.314,344,2.582,345,2.07,346,2.314,347,2.684,348,2.684,349,2.284,350,2.684,351,2.684,352,3.115,353,2.684,354,2.07,355,2.684,356,2.684,357,2.684,358,2.684,359,2.684,360,4.656,361,4.656,362,2.684,363,2.314,364,4.656,365,2.284,366,3.481,367,3.745,368,2.684,369,2.684,370,2.684,371,2.314,372,2.684,373,2.684,374,1.644,375,2.684,376,2.07,377,2.684,378,3.115,379,2.622,380,2.622,381,2.684]],["title/modules/AuthModule.html",[51,1.277,63,2.462]],["body/modules/AuthModule.html",[3,0.177,4,0.177,5,0.158,15,0.254,16,0.018,19,0.424,20,0.481,21,0.177,22,0.011,23,0.011,26,2.588,47,0.022,51,1.894,53,1.562,54,1.74,55,1.962,56,1.962,57,1.74,58,2.531,59,2.821,63,4.856,64,4.021,68,2.752,69,1.411,70,1.962,72,2.588,78,0.748,89,2.253,90,1.224,112,2.675,113,1.962,114,2.675,115,3.423,116,2.44,126,1.169,130,2.095,159,1.117,165,2.44,186,4.021,306,3.954,343,2.99,344,3.897,345,2.675,382,2.99,383,3.468,384,2.99,385,2.99,386,4.321,387,4.321,388,3.468,389,4.866,390,2.252,391,3.468,392,3.468,393,3.468,394,2.675,395,4.866,396,2.095,397,3.468,398,3.468,399,3.423,400,3.468,401,2.99,402,3.65,403,1.844,404,4.195,405,2.99,406,3.468,407,3.468,408,2.99,409,3.468,410,3.468,411,2.675,412,3.468,413,2.99,414,2.99,415,2.99,416,2.675,417,2.99,418,2.99,419,2.99,420,2.99,421,2.99,422,2.675,423,3.468]],["title/classes/AuthResponseDto.html",[47,0.024,424,2.924]],["body/classes/AuthResponseDto.html",[3,0.246,4,0.246,5,0.221,8,0.382,9,1.562,12,2.529,15,0.444,16,0.017,17,1.241,19,0.272,21,0.246,22,0.013,23,0.013,30,1.954,36,0.631,45,1.873,47,0.031,139,1.428,224,2.596,310,3.666,329,4.68,349,3.432,365,3.432,366,5.718,424,4.68,425,1.787,426,5.718,427,4.166,428,3.227,429,6.067,430,3.491,431,4.68,432,4.832,433,4.68,434,3.94,435,3.94,436,4.832,437,3.329]],["title/injectables/AuthService.html",[202,0.419,344,2.016]],["body/injectables/AuthService.html",[3,0.093,4,0.093,5,0.083,8,0.144,9,0.767,10,0.877,15,0.463,16,0.018,17,1.276,19,0.356,20,0.252,21,0.093,22,0.007,23,0.007,28,0.557,36,0.657,38,0.858,47,0.012,50,0.981,69,1.212,77,1.11,78,0.794,89,2.014,90,0.643,113,1.03,126,0.614,131,2.037,139,1.458,141,1.396,157,1.628,170,1.993,190,2.92,202,0.329,203,0.536,205,2.18,213,0.876,225,2.237,226,1.494,230,1.101,253,1.101,258,2.095,266,1.537,279,2.337,282,2.832,296,2.095,309,2.567,310,1.799,311,3.069,312,3.256,344,1.584,349,2.72,360,2.567,361,2.567,367,1.405,371,1.57,374,2.394,378,2.297,379,2.832,380,2.832,394,1.405,402,1.183,403,0.969,408,3.256,411,2.297,438,1.57,439,3.777,440,3.777,441,3.777,442,3.777,443,3.777,444,3.256,445,3.777,446,1.57,447,2.587,448,5.447,449,3.777,450,3.069,451,2.978,452,2.978,453,1.821,454,2.978,455,1.821,456,2.978,457,1.821,458,1.821,459,1.821,460,1.821,461,3.256,462,1.821,463,5.447,464,1.821,465,1.821,466,1.821,467,1.821,468,1.821,469,2.297,470,1.57,471,1.281,472,1.405,473,1.821,474,2.978,475,2.978,476,1.821,477,1.57,478,1.183,479,1.405,480,1.821,481,1.57,482,2.297,483,1.821,484,1.821,485,1.821,486,1.821,487,1.821,488,3.777,489,1.821,490,2.978,491,1.821,492,3.777,493,2.978,494,1.821,495,4.362,496,1.821,497,1.821,498,1.821,499,3.761,500,3.365,501,3.365,502,1.821,503,1.57,504,1.405,505,1.405,506,1.03,507,1.405,508,1.405,509,1.405,510,1.405,511,1.405,512,3.761,513,3.777,514,4.146,515,2.978,516,2.978,517,2.567,518,1.821,519,2.978,520,1.821,521,2.92,522,1.821,523,1.821,524,1.57,525,1.821,526,1.405,527,2.452,528,2.567,529,1.57,530,1.405,531,1.821,532,1.821,533,1.821,534,1.57,535,1.57,536,2.136,537,1.57,538,1.821,539,1.57,540,1.821,541,1.821,542,2.978,543,1.821,544,2.978,545,2.567,546,1.821,547,1.821,548,1.821,549,1.183,550,1.821,551,2.297,552,2.567,553,1.57,554,1.405,555,1.821,556,1.821,557,1.821,558,1.821,559,1.57,560,2.978,561,1.821,562,2.978,563,1.821]],["title/classes/BaseEntity.html",[47,0.024,564,2.667]],["body/classes/BaseEntity.html",[3,0.191,4,0.191,5,0.171,8,0.463,9,1.508,10,0.872,15,0.521,16,0.018,17,0.916,19,0.289,21,0.191,22,0.011,23,0.011,30,2.029,36,0.655,47,0.024,78,0.576,96,1.779,126,1.974,157,1.776,208,3.96,244,2.637,248,3.162,258,2.636,425,1.385,536,3.313,564,3.612,565,3.23,566,5.857,567,6.6,568,5.857,569,6.349,570,5.049,571,5.877,572,6.3,573,6.3,574,5.877,575,4.86,576,5.134,577,4.795,578,3.747,579,4.426,580,5.134,581,3.747,582,5.857,583,3.747,584,5.049,585,3.747,586,5.134,587,3.612,588,3.612,589,3.747,590,5.134,591,5.134,592,5.432,593,1.993,594,3.747,595,3.747,596,3.747,597,3.747]],["title/classes/CatchEverythingFilter.html",[47,0.024,598,2.924]],["body/classes/CatchEverythingFilter.html",[3,0.138,4,0.138,5,0.124,8,0.215,9,1.049,10,1.077,12,2.054,13,2.305,15,0.464,16,0.018,17,0.969,18,3.529,19,0.328,20,0.377,21,0.138,22,0.009,23,0.009,28,0.762,36,0.678,38,1.09,47,0.017,50,1.1,77,1.363,78,1.045,80,2.463,81,0.875,135,3.772,157,0.731,159,0.875,166,2.096,168,1.743,170,1.639,174,1.764,205,2.23,213,1.199,215,2.458,226,2.045,244,1.223,248,1.363,255,2.342,261,1.363,266,1.693,282,1.764,317,1.223,320,1.911,354,2.096,390,1.764,425,1.004,471,2.867,526,4.191,528,4.216,577,1.911,598,3.143,599,2.342,600,4.891,601,4.891,602,4.075,603,4.075,604,4.075,605,4.075,606,4.075,607,2.717,608,6.113,609,4.075,610,4.075,611,4.075,612,5.449,613,5.434,614,2.717,615,6.793,616,2.717,617,2.717,618,1.642,619,2.717,620,2.717,621,2.717,622,2.717,623,4.075,624,2.717,625,2.717,626,2.717,627,3.514,628,2.096,629,3.514,630,2.096,631,2.342,632,2.867,633,2.717,634,2.717,635,2.717,636,2.717,637,2.717,638,2.717,639,1.537,640,2.717,641,4.075,642,2.717,643,2.717,644,2.717,645,2.717,646,2.717,647,4.075,648,1.764,649,2.717,650,2.717,651,2.717,652,2.717,653,5.434,654,4.075,655,3.143,656,2.096,657,2.717,658,4.075,659,2.717,660,4.891,661,2.717,662,2.717,663,3.514,664,2.717,665,2.717,666,2.342,667,2.717,668,2.717,669,2.717,670,4.216,671,2.717,672,2.717,673,2.342]],["title/classes/ChangePasswordDto.html",[47,0.024,674,2.462]],["body/classes/ChangePasswordDto.html",[3,0.192,4,0.192,5,0.172,8,0.298,9,1.327,12,2.229,15,0.378,16,0.018,17,1.127,19,0.291,21,0.192,22,0.011,23,0.011,30,1.66,36,0.536,45,1.462,47,0.033,139,1.214,141,2.632,157,1.7,224,2.206,230,3.116,379,3.816,380,3.816,425,1.394,428,2.743,430,3.17,437,2.949,674,3.348,675,5.066,676,2.653,677,4.446,678,4.873,679,4.446,680,4.873,681,4.873,682,4.873,683,4.873,684,4.742,685,5.268,686,4.873,687,4.873,688,4.873,689,4.873,690,4.873,691,4.873,692,4.873,693,3.771,694,5.156,695,3.771,696,4.134,697,4.134,698,4.533,699,2.909,700,2.133]],["title/injectables/CloudinaryService.html",[202,0.419,701,2.667]],["body/injectables/CloudinaryService.html",[3,0.19,4,0.19,5,0.267,8,0.295,10,0.869,11,1.314,15,0.374,16,0.018,19,0.393,20,0.516,21,0.19,22,0.011,23,0.011,28,0.956,36,0.531,38,0.664,47,0.024,50,1.313,77,1.099,78,0.786,81,1.199,89,2.515,90,1.314,131,1.797,157,1.002,159,1.199,168,1.593,170,1.439,202,0.565,203,1.096,205,1.573,213,1.504,215,2.702,225,1.89,261,1.869,266,0.876,272,2.719,296,2.619,365,2.106,527,3.319,666,3.21,701,3.596,702,3.21,703,5.375,704,2.418,705,3.723,706,2.872,707,4.847,708,4.503,709,4.42,710,3.723,711,3.723,712,3.596,713,4.407,714,5.112,715,3.723,716,3.723,717,2.872,718,3.319,719,3.21,720,1.869,721,1.98,722,2.619,723,3.723,724,3.723,725,3.723,726,3.723,727,3.723,728,3.723,729,3.723,730,3.21,731,5.033,732,3.21,733,3.21,734,3.21,735,5.837,736,3.723,737,3.21,738,3.723,739,3.723,740,3.723,741,3.723,742,3.723,743,3.21,744,3.723,745,3.723,746,3.723,747,3.723,748,3.723,749,3.723,750,3.723]],["title/injectables/CreateUserCommand.html",[66,2.462,202,0.419]],["body/injectables/CreateUserCommand.html",[3,0.132,4,0.132,5,0.118,8,0.205,9,1.013,10,1.021,15,0.44,16,0.018,17,1.299,19,0.371,20,0.359,21,0.132,22,0.009,23,0.009,28,0.736,30,1.709,33,3.035,36,0.649,38,1.018,47,0.017,50,1.194,66,2.555,77,1.291,78,1.049,96,1.231,126,2.167,131,1.463,139,1.119,141,0.959,157,1.059,170,1.606,202,0.435,203,0.763,205,1.756,213,1.158,224,1.109,225,1.455,244,1.168,248,1.301,266,1.119,279,1.455,374,2.54,403,1.379,447,2.963,521,1.467,524,2.236,526,2,527,1.684,529,2.236,549,2.555,575,3.667,587,2.768,593,1.379,684,2.555,720,1.301,743,2.236,751,5.543,752,2.236,753,2.093,754,4.755,755,4.094,756,4.755,757,4.755,758,4.755,759,4.755,760,3.935,761,2.593,762,5.308,763,3.935,764,3.935,765,2.593,766,5.308,767,3.935,768,6.429,769,2.593,770,6.916,771,2.593,772,3.935,773,3.035,774,2.593,775,2.593,776,3.935,777,2.593,778,2.593,779,3.935,780,3.002,781,2.593,782,3.345,783,3.935,784,3.002,785,2.593,786,2.593,787,3.935,788,3.935,789,3.392,790,2,791,5.706,792,3.392,793,2.236,794,2,795,2.593,796,2.768,797,1.684,798,3.035,799,2.593,800,2.593,801,2.593,802,2.593,803,2.593,804,2.593,805,2,806,2.593,807,2.593,808,2.593,809,2.593,810,1.684,811,2.593,812,2.593,813,5.308]],["title/classes/CreateUserDto.html",[47,0.024,814,2.462]],["body/classes/CreateUserDto.html",[3,0.117,4,0.117,5,0.105,8,0.181,9,0.92,10,1.194,12,1.753,15,0.499,16,0.018,17,1.308,19,0.28,21,0.117,22,0.008,23,0.008,30,2.193,36,0.708,45,0.887,47,0.028,50,0.804,78,0.764,139,1.734,141,2.206,224,2.874,226,1.793,230,2.159,244,1.98,246,2.32,266,0.539,374,2.194,425,0.846,428,3.573,430,3.696,437,3.417,549,2.855,587,2.514,618,2.159,648,1.486,678,2.756,679,1.973,680,2.756,681,2.756,682,2.756,683,2.756,684,3.226,685,2.756,686,2.756,687,2.756,688,2.756,689,2.756,690,2.756,691,2.756,692,2.756,696,3.792,697,4.651,698,2.756,699,1.765,700,1.294,720,1.148,773,2.756,780,3.231,782,3.495,798,3.391,814,2.32,815,5.941,816,1.973,817,4.646,818,3.093,819,4.646,820,5.145,821,3.391,822,3.391,823,3.79,824,4.646,825,3.573,826,3.573,827,3.573,828,3.573,829,2.288,830,2.288,831,2.288,832,2.288,833,2.288,834,2.288,835,4.284,836,2.288,837,2.288,838,2.288,839,2.288,840,2.288,841,2.288,842,2.288,843,2.288,844,2.288,845,3.081,846,2.288,847,2.288,848,3.573,849,2.288,850,2.288,851,3.081,852,2.288,853,2.288,854,2.288,855,2.288,856,3.573,857,2.756,858,2.288,859,6.345,860,3.573,861,1.973,862,1.765,863,2.288,864,2.288,865,3.573,866,2.288,867,2.288,868,2.288,869,4.396,870,2.288,871,2.288,872,2.288,873,2.288,874,2.288,875,2.288]],["title/classes/CreateUserResponseDto.html",[47,0.024,876,2.667]],["body/classes/CreateUserResponseDto.html",[3,0.228,4,0.228,5,0.205,8,0.354,9,1.488,11,2.387,12,2.575,15,0.513,16,0.017,17,1.142,19,0.326,21,0.295,22,0.013,23,0.013,30,1.861,36,0.601,45,1.736,47,0.037,139,1.796,224,2.894,257,3.621,425,1.655,428,3.074,430,3.212,433,4.937,434,4.156,435,4.156,437,3.514,810,4.392,876,4.066,877,3.453,878,4.983,879,4.477,880,4.477,881,2.907,882,3.15,883,4.458,884,3.453]],["title/modules/EmailModule.html",[51,1.277,885,2.667]],["body/modules/EmailModule.html",[3,0.217,4,0.217,5,0.194,16,0.018,19,0.406,20,0.589,21,0.217,22,0.012,23,0.012,26,2.261,47,0.027,51,2.104,53,1.914,54,2.133,55,2.405,56,2.405,57,2.133,58,2.516,59,3.133,68,3.161,69,1.73,70,2.405,72,2.261,81,1.799,89,2.452,90,1.5,106,2.991,126,1.433,130,2.569,135,3.279,137,3.665,139,1.001,153,3.665,157,1.144,159,1.369,165,2.991,174,2.761,403,2.261,461,3.665,721,2.972,784,2.405,885,4.846,886,3.665,887,3.665,888,4.419,889,4.251,890,4.251,891,4.251,892,3.279,893,4.31,894,5.588,895,4.251,896,4.251,897,4.251,898,4.251,899,4.251,900,4.251,901,4.251,902,4.251,903,4.251,904,4.251,905,4.251,906,4.251,907,3.279,908,4.251,909,4.251,910,4.251]],["title/classes/EmailService.html",[47,0.024,888,2.291]],["body/classes/EmailService.html",[3,0.22,4,0.22,5,0.198,8,0.342,10,0.96,15,0.414,16,0.017,17,1.354,19,0.319,20,0.599,21,0.22,22,0.013,23,0.013,28,1.057,36,0.587,38,0.771,47,0.028,77,1.215,78,0.869,81,1.392,131,1.937,159,1.392,170,1.59,205,1.739,213,1.663,215,2.806,225,2.089,257,2.446,261,2.17,272,2.3,279,1.599,374,1.76,376,3.335,425,1.599,575,4.855,721,2.3,888,4.033,892,3.335,907,5.148,911,3.728,912,6.294,913,4.324,914,7.104,915,4.324,916,4.324,917,7.104,918,4.334,919,4.324,920,4.324,921,4.324,922,4.324,923,4.324]],["title/interfaces/ErrorResponse.html",[0,1.902,632,2.667]],["body/interfaces/ErrorResponse.html",[0,2.472,2,3.199,3,0.251,4,0.251,5,0.225,7,3.8,8,0.39,9,1.581,10,1.044,12,2.472,13,3.962,15,0.538,16,0.017,17,1.393,21,0.251,22,0.014,23,0.014,78,1.077,174,4.549,226,3.358,577,4.928,632,4.32,663,6.039,924,4.247]],["title/classes/ForgotPasswordDto.html",[47,0.024,314,2.667]],["body/classes/ForgotPasswordDto.html",[3,0.271,4,0.271,5,0.243,8,0.42,9,1.656,15,0.389,16,0.017,17,1.147,19,0.363,21,0.271,22,0.014,23,0.014,30,1.71,36,0.552,45,2.059,47,0.041,314,4.525,374,2.816,425,1.964,430,2.665,437,3.228,676,3.736,700,3.004,857,4.961,862,4.096,925,5.545,926,5.311,927,4.578,928,5.311]],["title/classes/GetProfileResponseDto.html",[47,0.024,882,2.667]],["body/classes/GetProfileResponseDto.html",[3,0.229,4,0.229,5,0.205,8,0.355,9,1.49,11,2.389,12,2.576,15,0.513,16,0.017,17,1.143,19,0.326,21,0.295,22,0.013,23,0.013,30,1.864,36,0.602,45,1.74,47,0.037,139,1.786,224,2.896,257,3.625,425,1.66,428,3.079,430,3.216,433,4.943,434,4.161,435,4.161,437,3.517,810,3.759,876,3.158,877,3.462,878,3.87,881,2.915,882,4.073,883,5.222,884,4.466,929,4.489,930,4.489]],["title/modules/HttpClientModule.html",[51,1.277,931,2.667]],["body/modules/HttpClientModule.html",[3,0.252,4,0.252,5,0.226,16,0.017,19,0.378,20,0.685,21,0.252,22,0.014,23,0.014,47,0.032,51,2.258,53,2.224,54,2.479,55,2.794,56,2.794,57,2.479,58,3.017,59,3.362,68,3.48,69,2.011,70,2.794,72,2.627,81,1.981,931,5.247,932,4.259,933,4.259,934,4.259,935,5.021,936,3.81,937,3.81,938,4.94,939,6.152,940,3.81,941,3.208,942,4.94]],["title/injectables/HttpClientService.html",[202,0.419,935,2.462]],["body/injectables/HttpClientService.html",[3,0.185,4,0.185,5,0.166,8,0.287,9,1.293,10,0.854,11,1.773,15,0.368,16,0.018,17,1.028,19,0.381,20,0.503,21,0.185,22,0.011,23,0.011,28,0.94,36,0.646,38,0.648,47,0.023,50,0.817,77,1.08,78,0.773,81,1.169,131,1.773,157,1.673,159,1.169,162,3.276,170,1.985,202,0.555,203,1.069,205,2.171,213,1.479,215,2.684,225,1.858,244,2.263,248,2.522,253,3.757,261,1.822,266,0.855,272,2.672,279,1.343,317,2.263,365,2.054,630,2.801,784,3.517,935,3.263,936,5.034,937,5.034,940,2.801,941,4.037,943,3.131,944,5.761,945,5.761,946,5.761,947,3.631,948,6.751,949,5.025,950,3.631,951,6.217,952,3.631,953,5.025,954,6.217,955,3.631,956,5.025,957,5.025,958,3.631,959,2.358,960,3.631,961,3.631,962,3.631,963,3.631,964,3.631,965,5.025,966,3.631]],["title/interfaces/IPaymentService.html",[0,1.902,967,2.667]],["body/interfaces/IPaymentService.html",[0,2.458,2,3.181,3,0.25,4,0.25,5,0.224,8,0.388,10,1.04,15,0.448,16,0.017,19,0.276,21,0.25,22,0.014,23,0.014,28,1.145,36,0.636,38,1.092,77,1.316,78,0.941,225,2.585,242,3.698,784,4.152,967,4.305,968,4.223,969,5.754,970,5.754,971,4.223,972,5.754,973,6.328,974,4.899,975,6.027,976,4.223,977,5.754,978,4.899,979,3.255]],["title/interfaces/IStrorageService.html",[0,1.902,718,2.462]],["body/interfaces/IStrorageService.html",[0,2.264,2,2.929,3,0.23,4,0.23,5,0.293,8,0.357,10,1.153,11,1.592,15,0.425,16,0.017,17,1.146,19,0.382,21,0.23,22,0.013,23,0.013,28,1.087,36,0.604,38,1.036,77,1.249,78,0.893,172,3.882,220,4.48,225,2.508,226,3.224,240,4.955,242,3.51,639,2.552,703,4.955,706,3.48,707,5.232,708,4.955,709,4.772,712,3.174,713,3.889,718,3.772,720,2.264,721,2.399,722,3.174,980,3.889,981,5.538,982,3.889,983,5.232,984,4.511,985,4.511,986,3.174,987,3.889,988,2.929,989,2.929]],["title/injectables/JwtAuthGuard.html",[202,0.419,399,2.667]],["body/injectables/JwtAuthGuard.html",[3,0.333,4,0.208,5,0.187,8,0.323,10,1.04,12,1.441,15,0.448,16,0.018,19,0.368,20,0.566,21,0.208,22,0.012,23,0.012,28,1.018,36,0.636,38,0.971,47,0.026,50,1.377,77,1.316,78,1.004,126,1.376,139,1.6,157,1.099,169,2.31,182,3.521,202,0.602,203,1.202,213,1.202,266,0.961,346,3.521,390,2.652,396,2.468,399,3.829,472,4.198,521,2.31,527,4.238,753,2.894,797,2.652,918,2.652,990,5.627,991,3.15,992,5.442,993,4.692,994,5.442,995,3.521,996,6.028,997,4.084,998,4.692,999,4.592,1000,4.084,1001,5.442,1002,4.084,1003,5.442,1004,3.521,1005,3.15,1006,4.692,1007,4.084,1008,3.521,1009,4.084,1010,4.084,1011,4.084,1012,4.084,1013,4.084,1014,4.084]],["title/injectables/JwtStrategy.html",[202,0.419,386,2.462]],["body/injectables/JwtStrategy.html",[3,0.166,4,0.166,5,0.149,8,0.258,10,0.791,15,0.341,16,0.018,19,0.353,20,0.451,21,0.166,22,0.01,23,0.01,24,2.476,28,1.108,36,0.484,38,0.581,47,0.035,50,0.733,77,1.001,78,0.716,89,2.41,90,1.149,126,1.098,131,1.672,139,1.668,152,3.59,157,0.877,202,0.514,203,0.958,205,1.002,213,1.37,221,2.808,249,4.013,253,1.968,259,4.013,266,0.767,279,1.204,282,2.115,310,3.939,311,4.169,317,3.022,326,3.527,344,2.476,349,3.687,386,3.022,396,1.968,447,3.187,471,2.291,499,2.808,500,2.512,501,2.512,512,4.682,530,4.835,534,4.013,536,1.842,537,2.808,554,3.59,588,3.274,704,2.115,737,4.013,753,2.476,790,2.512,797,2.115,1015,2.808,1016,4.013,1017,3.257,1018,4.654,1019,3.257,1020,4.654,1021,4.013,1022,4.654,1023,4.654,1024,4.654,1025,4.013,1026,4.654,1027,4.654,1028,4.013,1029,4.654,1030,4.654,1031,4.654,1032,5.926,1033,4.654,1034,4.654,1035,4.654,1036,4.654,1037,4.654,1038,4.654,1039,4.013,1040,4.654,1041,5.926,1042,4.013,1043,4.654,1044,4.654,1045,4.654,1046,4.654,1047,4.654,1048,3.257,1049,2.808,1050,2.512,1051,2.808,1052,3.257,1053,3.257,1054,3.257,1055,3.257,1056,3.257,1057,3.257]],["title/injectables/LocalAuthGuard.html",[202,0.419,341,2.667]],["body/injectables/LocalAuthGuard.html",[3,0.287,4,0.287,5,0.257,16,0.017,19,0.376,20,0.781,21,0.287,22,0.015,23,0.015,47,0.036,202,0.736,203,1.657,341,4.686,396,3.403,753,3.543,991,4.344,1004,4.855,1058,4.855,1059,6.661]],["title/injectables/LocalStrategy.html",[202,0.419,387,2.462]],["body/injectables/LocalStrategy.html",[3,0.215,4,0.215,5,0.193,8,0.334,10,0.945,15,0.407,16,0.018,17,1.259,19,0.398,20,0.585,21,0.215,22,0.012,23,0.012,28,1.04,36,0.578,38,0.753,47,0.027,50,0.95,77,1.196,78,0.855,131,1.915,139,1.464,141,2.445,152,4.29,157,1.136,202,0.615,203,1.242,205,1.712,213,1.637,225,2.056,266,0.993,279,2.056,344,3.753,345,3.256,374,2.264,387,3.612,396,2.55,447,3.416,472,3.256,514,3.639,521,2.387,535,3.639,536,2.387,551,3.256,753,2.958,790,3.256,797,2.741,1016,4.795,1049,3.639,1050,3.256,1051,3.639,1060,3.639,1061,4.221,1062,4.221,1063,5.562,1064,4.221,1065,3.639,1066,4.795,1067,4.221,1068,4.221,1069,3.256,1070,3.639,1071,4.221]],["title/classes/LoginDto.html",[47,0.024,324,2.667]],["body/classes/LoginDto.html",[3,0.249,4,0.249,5,0.223,8,0.387,9,1.573,15,0.448,16,0.017,17,1.246,19,0.344,21,0.249,22,0.014,23,0.014,30,1.967,36,0.635,45,1.894,47,0.039,139,1.644,141,2.659,224,2.614,230,3.692,324,4.298,374,2.927,425,1.806,428,3.249,430,3.505,437,3.345,678,4.712,700,2.763,857,4.712,862,3.768,927,4.212,1072,4.212,1073,4.885,1074,4.885]],["title/injectables/MorganMiddleware.html",[93,2.667,202,0.419]],["body/injectables/MorganMiddleware.html",[3,0.212,4,0.212,5,0.19,8,0.328,10,0.935,12,1.465,15,0.403,16,0.018,17,0.74,19,0.31,20,0.575,21,0.212,22,0.012,23,0.012,28,1.029,36,0.572,38,0.74,47,0.027,50,0.934,77,1.183,78,0.846,80,3.728,81,1.337,93,3.87,139,1.295,159,1.337,162,2.083,168,1.776,170,1.168,172,2.509,202,0.608,203,1.222,205,1.278,213,1.222,214,3.202,215,2.723,250,4.743,254,4.243,266,0.977,326,3.572,482,4.243,506,3.866,639,2.348,670,5.319,717,3.202,941,2.696,1075,3.579,1076,4.151,1077,4.743,1078,5.664,1079,4.151,1080,3.579,1081,4.743,1082,5.319,1083,3.202,1084,4.151,1085,4.151,1086,5.501,1087,4.151,1088,3.579,1089,4.151,1090,3.579,1091,4.151,1092,4.151,1093,4.151,1094,4.151,1095,4.151,1096,4.151,1097,4.151,1098,4.151,1099,4.151,1100,5.501,1101,4.151]],["title/classes/PasswordResetEmailConsumer.html",[47,0.024,1102,2.924]],["body/classes/PasswordResetEmailConsumer.html",[3,0.208,4,0.208,5,0.187,8,0.323,10,0.925,11,1.441,15,0.399,16,0.018,19,0.402,20,0.566,21,0.208,22,0.012,23,0.012,28,1.018,36,0.566,38,0.728,47,0.026,77,1.17,78,0.837,81,1.315,113,2.31,131,1.884,159,1.315,170,1.532,205,1.675,213,1.602,215,2.767,257,2.31,261,2.05,266,0.961,272,2.894,279,1.51,374,2.215,402,2.652,403,2.172,425,1.51,478,2.652,545,3.521,549,2.652,720,2.05,753,2.172,797,2.652,888,4.225,1102,5.034,1103,3.521,1104,5.442,1105,4.084,1106,4.084,1107,5.442,1108,7.249,1109,4.084,1110,5.442,1111,4.084,1112,5.442,1113,4.084,1114,3.521,1115,3.521,1116,4.084,1117,4.084,1118,4.084,1119,4.084,1120,5.442,1121,6.12,1122,4.084,1123,4.084,1124,4.084,1125,4.084,1126,4.084,1127,4.084]],["title/modules/PaymentModule.html",[51,1.277,1128,2.924]],["body/modules/PaymentModule.html",[3,0.184,4,0.184,5,0.165,15,0.264,16,0.018,19,0.416,20,0.5,21,0.184,22,0.011,23,0.011,28,0.675,30,1.162,36,0.375,38,0.644,41,3.023,47,0.023,50,1.126,51,1.935,53,1.625,58,1.625,59,1.811,72,1.92,78,0.77,81,1.849,89,2.604,90,1.274,108,2.042,112,2.784,113,2.042,114,2.784,115,3.52,116,2.539,126,1.216,130,3.023,132,3.859,157,0.971,159,1.611,165,2.539,215,2.404,266,0.85,403,1.92,404,4.314,405,3.112,413,3.112,414,3.112,415,3.112,416,2.784,417,3.112,418,3.112,419,3.112,420,3.112,421,3.112,422,2.784,450,3.52,478,2.344,720,1.811,979,3.298,1128,4.43,1129,3.609,1130,4.314,1131,4.951,1132,3.609,1133,4.951,1134,5.003,1135,3.609,1136,4.04,1137,4.43,1138,3.112,1139,3.609,1140,3.52,1141,3.609,1142,3.609,1143,3.609,1144,3.609,1145,3.609,1146,3.609,1147,3.609,1148,3.609,1149,5.003,1150,3.609,1151,3.609,1152,3.609,1153,3.609,1154,3.609,1155,4.314,1156,4.314,1157,3.609,1158,3.609,1159,3.609]],["title/classes/RefreshTokenDto.html",[47,0.024,331,2.667]],["body/classes/RefreshTokenDto.html",[3,0.258,4,0.258,5,0.232,8,0.401,9,1.609,15,0.371,16,0.017,17,1.115,19,0.352,21,0.258,22,0.014,23,0.014,30,1.632,36,0.527,45,1.965,47,0.04,224,2.168,310,3.776,311,4.397,331,4.397,349,4.002,367,5.227,425,1.874,428,2.695,430,3.136,431,3.908,437,3.136,696,4.397,697,4.397,700,2.866,1039,5.388,1160,5.388,1161,4.369,1162,6.25,1163,5.067,1164,5.067]],["title/injectables/RequestBodyAndResponseInterceptor.html",[202,0.419,1165,2.667]],["body/injectables/RequestBodyAndResponseInterceptor.html",[3,0.187,4,0.187,5,0.168,8,0.291,10,0.861,11,1.297,12,1.788,13,2.867,15,0.371,16,0.018,17,0.656,19,0.352,20,0.51,21,0.258,22,0.011,23,0.011,28,0.948,36,0.527,38,0.656,47,0.032,50,1.406,77,1.09,78,0.779,81,1.184,108,2.08,126,1.239,159,1.184,162,2.543,168,2.168,170,1.035,172,2.222,202,0.641,203,1.082,205,1.132,213,1.082,214,2.836,215,2.628,266,1.665,317,1.656,365,2.08,434,2.388,435,2.388,506,3.535,618,2.222,639,2.867,648,2.388,655,2.836,656,2.836,918,2.388,959,2.388,979,1.956,999,4.612,1083,2.836,1165,3.565,1166,2.836,1167,4.369,1168,3.677,1169,5,1170,5.652,1171,3.677,1172,4.821,1173,3.909,1174,5,1175,3.17,1176,3.17,1177,3.17,1178,2.587,1179,3.909,1180,2.836,1181,3.17,1182,4.369,1183,3.17,1184,3.17,1185,3.17,1186,3.17,1187,3.17,1188,3.17,1189,3.17,1190,4.369,1191,4.369,1192,4.369,1193,4.369,1194,2.836,1195,3.17,1196,3.17]],["title/injectables/RequestContextMiddleware.html",[121,2.667,202,0.419]],["body/injectables/RequestContextMiddleware.html",[3,0.237,4,0.237,5,0.213,8,0.368,10,1.007,15,0.434,16,0.017,19,0.368,20,0.645,21,0.237,22,0.013,23,0.013,28,1.108,36,0.616,38,0.83,47,0.03,77,1.274,78,0.911,80,3.58,96,2.21,104,3.59,121,4.168,168,1.991,169,2.632,170,1.31,202,0.655,203,1.37,213,1.37,254,4.57,317,3.09,326,3.022,506,3.882,593,2.475,639,3.882,1077,5.108,1078,5.62,1081,5.108,1197,5.62,1198,4.012,1199,4.012,1200,5.916,1201,4.654,1202,5.108,1203,6.862,1204,4.654,1205,4.654,1206,4.654]],["title/classes/ResetPasswordDto.html",[47,0.024,334,2.667]],["body/classes/ResetPasswordDto.html",[3,0.182,4,0.182,5,0.163,8,0.283,9,1.279,12,2.179,15,0.418,16,0.018,17,1.198,19,0.28,21,0.182,22,0.011,23,0.011,30,1.839,36,0.594,45,1.385,47,0.032,69,2.022,139,1.453,141,2.598,157,1.662,224,2.443,334,3.495,349,2.81,376,3.832,378,4.406,379,3.709,380,3.709,425,1.321,428,3.038,430,3.371,431,2.756,437,3.098,676,2.514,677,4.283,680,4.762,681,4.762,682,4.762,683,4.762,684,4.563,685,4.762,686,4.762,687,4.762,688,4.762,689,4.762,690,4.762,691,4.762,692,4.762,696,4.343,697,4.343,698,4.406,699,2.756,700,2.021,1207,5.323,1208,6.174,1209,4.968,1210,3.573,1211,3.573,1212,3.573,1213,3.573,1214,4.968,1215,4.968]],["title/guards/RoleGuard.html",[1216,2.924,1217,2.924]],["body/guards/RoleGuard.html",[3,0.211,4,0.211,5,0.189,8,0.328,10,0.933,15,0.402,16,0.018,17,0.739,19,0.385,20,0.574,21,0.211,22,0.012,23,0.012,28,1.027,30,1.334,36,0.571,38,0.739,47,0.027,50,1.387,77,1.181,78,0.845,108,2.343,126,2.077,157,1.115,166,3.195,168,1.772,169,2.343,170,1.166,202,0.607,213,1.219,225,2.031,246,3.567,266,1.545,317,1.865,329,3.195,390,2.689,521,2.343,628,4.237,780,2.343,918,3.567,959,2.689,979,2.203,993,5.888,995,3.571,996,6.052,998,3.571,999,4.617,1008,3.571,1172,4.754,1173,4.237,1179,4.237,1180,3.195,1194,3.195,1217,4.237,1218,4.142,1219,3.571,1220,4.142,1221,4.142,1222,6.163,1223,4.142,1224,5.493,1225,4.142,1226,4.142,1227,4.142]],["title/injectables/S3Service.html",[202,0.419,1228,2.667]],["body/injectables/S3Service.html",[3,0.137,4,0.137,5,0.222,8,0.212,9,1.04,10,0.825,11,0.947,15,0.424,16,0.018,17,1.126,19,0.405,20,0.372,21,0.137,22,0.009,23,0.009,28,0.755,36,0.633,38,0.72,47,0.017,50,0.909,58,1.208,77,1.044,78,0.747,81,0.864,89,2.25,90,0.947,131,1.873,157,1.087,159,0.864,162,2.907,168,1.148,170,1.713,172,3.5,202,0.446,203,0.79,205,2.145,213,1.188,215,2.448,220,4.694,225,1.997,226,2.436,240,4.166,242,2.44,244,1.208,248,1.347,261,1.347,266,1.486,272,2.148,279,1.493,317,1.208,320,1.888,365,1.518,411,3.115,639,1.518,684,2.622,703,4.467,704,1.743,706,2.07,707,4.166,708,3.745,709,3.8,718,2.622,719,2.314,720,1.347,721,2.148,722,1.888,730,2.314,731,3.481,732,2.314,733,2.314,734,2.314,755,4.467,793,2.314,805,2.07,941,1.743,981,4.185,982,2.314,983,4.166,986,1.888,987,2.314,988,1.743,989,1.743,1069,2.07,1228,2.841,1229,2.314,1230,4.855,1231,4.855,1232,4.185,1233,4.075,1234,4.038,1235,2.684,1236,2.684,1237,4.038,1238,2.684,1239,2.684,1240,4.038,1241,2.684,1242,2.314,1243,4.038,1244,2.684,1245,2.684,1246,4.038,1247,4.185,1248,2.314,1249,3.481,1250,4.038,1251,2.314,1252,2.684,1253,2.314,1254,2.314,1255,4.038,1256,2.314,1257,2.684,1258,2.314,1259,4.855,1260,4.038,1261,4.038,1262,2.684,1263,2.684,1264,4.038,1265,2.684,1266,2.684,1267,2.684,1268,2.684,1269,2.684,1270,4.038,1271,2.684,1272,4.038,1273,2.684,1274,2.314,1275,3.481,1276,2.314,1277,4.038,1278,2.684,1279,2.684,1280,2.684,1281,2.684]],["title/injectables/SchemaService.html",[67,2.462,202,0.419]],["body/injectables/SchemaService.html",[3,0.214,4,0.214,5,0.191,8,0.332,9,1.425,10,0.712,15,0.307,16,0.017,19,0.372,20,0.581,21,0.214,22,0.012,23,0.012,28,1.036,36,0.644,38,0.747,47,0.027,67,3.595,77,0.901,78,0.645,81,2.123,89,2.655,90,1.479,96,1.99,100,3.894,101,3.613,131,1.908,157,1.49,159,1.349,168,1.793,170,1.982,202,0.612,203,1.233,205,2.168,213,1.629,215,2.785,244,1.887,248,2.103,261,2.103,266,1.303,272,2.229,279,1.549,593,2.229,1199,3.613,1200,5.685,1202,4.773,1282,3.613,1283,7.042,1284,5.536,1285,4.191,1286,5.536,1287,5.536,1288,4.191,1289,4.191,1290,4.191,1291,4.191,1292,4.191,1293,4.191,1294,4.191,1295,4.191]],["title/modules/StorageModule.html",[51,1.277,1296,2.924]],["body/modules/StorageModule.html",[3,0.204,4,0.204,5,0.183,16,0.018,19,0.4,20,0.555,21,0.204,22,0.012,23,0.012,28,0.748,36,0.416,38,0.714,47,0.026,50,1.363,51,2.041,53,1.802,58,1.802,59,2.008,72,2.128,81,1.95,89,2.625,90,1.412,130,3.244,132,5.207,157,1.63,159,1.728,199,3.45,215,2.618,266,0.942,403,2.128,422,3.086,521,2.263,701,2.815,720,2.008,721,2.128,1069,3.086,1130,4.628,1131,5.222,1133,5.222,1228,2.815,1232,4.628,1233,4.261,1276,3.45,1296,4.672,1297,4.001,1298,4.001,1299,4.001,1300,4.672,1301,3.45,1302,4.001,1303,5.368,1304,4.001,1305,4.001,1306,4.001,1307,4.001,1308,4.001,1309,4.001,1310,4.001,1311,4.001,1312,4.001,1313,4.001,1314,4.001,1315,4.001,1316,4.001,1317,4.001,1318,4.001]],["title/injectables/StripeService.html",[202,0.419,1140,2.667]],["body/injectables/StripeService.html",[3,0.162,4,0.162,5,0.145,8,0.251,10,0.994,11,1.611,15,0.429,16,0.018,19,0.384,20,0.439,21,0.162,22,0.01,23,0.01,28,0.854,30,1.021,36,0.608,38,0.954,47,0.02,50,1.027,77,1.258,78,0.9,81,1.021,89,2.388,90,1.118,108,1.793,113,1.793,131,2.136,159,1.021,168,1.356,170,1.647,202,0.505,203,0.933,205,1.801,213,1.343,215,2.581,225,2.164,242,2.758,257,1.793,261,1.591,266,1.377,272,2.845,279,1.978,403,1.686,450,4.117,477,2.733,478,2.058,536,1.793,704,2.058,784,3.854,810,2.058,967,3.211,969,4.612,970,4.612,971,2.733,972,4.612,973,5.569,975,5.569,976,2.733,977,4.612,979,3.624,1028,5.045,1136,3.211,1140,3.211,1155,4.612,1156,4.612,1319,2.733,1320,4.564,1321,3.169,1322,3.169,1323,3.169,1324,4.564,1325,5.349,1326,4.564,1327,3.169,1328,4.564,1329,4.564,1330,3.169,1331,3.169,1332,3.169,1333,3.169,1334,3.521,1335,5.349,1336,3.169,1337,3.169,1338,3.169,1339,3.169,1340,5.852,1341,3.521,1342,3.169,1343,3.169,1344,3.169,1345,3.169,1346,3.169,1347,3.169,1348,3.169,1349,3.169,1350,3.169,1351,3.169,1352,3.169,1353,3.169]],["title/injectables/SuccessResponseInterceptor.html",[202,0.419,1178,2.667]],["body/injectables/SuccessResponseInterceptor.html",[3,0.192,4,0.192,5,0.172,8,0.298,10,0.641,11,1.331,12,1.82,13,2.917,15,0.276,16,0.018,17,0.673,19,0.356,20,0.523,21,0.263,22,0.011,23,0.011,28,0.965,36,0.392,38,0.673,47,0.033,50,1.421,77,0.811,78,0.58,81,1.214,108,2.133,126,1.271,159,1.214,162,2.588,168,2.206,170,1.061,172,2.279,202,0.65,203,1.11,205,1.161,215,2.278,266,1.676,317,1.698,365,2.133,434,2.449,435,2.449,506,3.573,618,2.279,639,2.917,648,2.449,655,2.909,656,2.909,918,2.449,959,2.449,979,2.006,999,4.654,1083,2.909,1165,2.653,1166,2.909,1167,4.446,1169,5.066,1170,5.703,1172,4.873,1173,3.977,1174,5.066,1175,3.251,1176,3.251,1177,3.251,1178,3.628,1179,3.977,1180,2.909,1181,3.251,1182,4.446,1183,3.251,1184,3.251,1185,3.251,1186,3.251,1187,3.251,1188,3.251,1189,3.251,1190,4.446,1191,4.446,1192,4.446,1193,4.446,1194,2.909,1195,3.251,1196,3.251,1354,3.771]],["title/classes/UpdateProfileDto.html",[47,0.024,1355,2.667]],["body/classes/UpdateProfileDto.html",[3,0.269,4,0.269,5,0.241,16,0.017,19,0.361,21,0.269,22,0.014,23,0.014,45,2.047,47,0.034,141,2.369,266,1.508,374,2.608,425,1.952,753,3.408,780,3.625,796,3.714,814,3.428,821,4.943,822,4.943,1355,4.508,1356,4.551,1357,4.551,1358,6.9,1359,6.408,1360,5.279,1361,4.551]],["title/entities/User.html",[139,0.892,1362,2.924]],["body/entities/User.html",[3,0.103,4,0.103,5,0.092,8,0.32,9,1.042,10,1.185,15,0.548,16,0.017,17,1.29,19,0.261,21,0.103,22,0.007,23,0.007,30,2.205,36,0.712,47,0.013,69,1.316,78,0.908,96,0.958,126,2.384,139,1.531,141,2.253,162,1.623,174,2.1,177,1.556,205,0.621,226,1.623,244,1.823,246,3.835,248,3.058,253,3.569,310,1.954,374,2.202,549,2.628,552,3.49,559,2.788,564,2.275,569,2.788,570,5.774,571,2.788,574,6.418,577,2.275,579,6.012,587,3.257,592,5.905,593,1.073,618,1.219,673,2.788,720,1.012,753,1.073,773,2.494,780,2.867,782,3.566,798,3.122,817,4.899,818,2.847,819,4.37,820,4.899,821,3.122,822,3.122,823,3.49,824,3.49,835,3.992,845,2.788,851,2.788,1042,2.788,1070,3.49,1090,6.237,1362,2.494,1363,1.739,1364,1.739,1365,4.37,1366,2.788,1367,3.233,1368,2.017,1369,7.235,1370,2.017,1371,4.63,1372,2.788,1373,2.017,1374,6.25,1375,2.017,1376,2.017,1377,2.788,1378,3.233,1379,2.017,1380,2.017,1381,4.63,1382,2.017,1383,2.017,1384,2.017,1385,2.017,1386,3.233,1387,2.017,1388,2.017,1389,5.409,1390,2.017,1391,3.233,1392,2.017,1393,4.048,1394,2.017,1395,2.017,1396,3.233,1397,2.017,1398,2.788,1399,2.788,1400,2.017,1401,1.419,1402,1.739,1403,2.017,1404,2.017,1405,2.017,1406,1.739,1407,2.017]],["title/controllers/UsersController.html",[24,2.016,1408,2.667]],["body/controllers/UsersController.html",[1,1.809,3,0.142,4,0.142,5,0.127,6,1.959,8,0.22,10,0.935,11,2.177,12,1.941,13,3.112,15,0.468,16,0.018,18,1.809,19,0.37,20,0.386,21,0.142,22,0.009,23,0.009,24,1.481,26,1.481,28,0.777,30,1.771,36,0.572,38,0.981,40,2.148,41,2.509,43,4.539,44,2.148,45,1.08,47,0.018,48,3.829,49,4.244,50,1.238,77,1.183,78,0.846,131,2.162,139,1.633,141,2.034,157,1.118,169,1.575,170,0.784,177,2.148,225,2.429,257,3.112,266,1.385,279,1.835,308,2.401,316,2.401,317,2.235,320,4.497,326,4.151,336,2.401,338,2.148,340,4.743,352,2.148,354,2.148,363,2.401,364,4.279,447,2.357,504,2.148,505,2.148,506,1.575,507,2.148,508,2.148,509,2.148,510,2.148,511,2.148,536,1.575,551,2.148,588,2.921,674,4.007,796,2.921,810,1.809,814,4.007,818,3.492,883,4.759,884,2.148,1355,4.341,1361,2.401,1372,3.579,1408,2.921,1409,2.401,1410,4.152,1411,4.964,1412,2.785,1413,4.152,1414,2.785,1415,2.785,1416,2.785,1417,2.785,1418,4.152,1419,4.964,1420,2.785,1421,2.785,1422,2.785,1423,2.785,1424,2.785,1425,2.785,1426,4.152,1427,2.785,1428,2.785,1429,2.785,1430,2.401,1431,2.401,1432,2.785,1433,2.785,1434,2.401,1435,2.785,1436,2.785,1437,2.785,1438,2.785,1439,2.785,1440,2.785,1441,3.579,1442,2.785,1443,2.785,1444,2.785,1445,2.785,1446,4.152,1447,4.279,1448,2.785,1449,3.579,1450,2.785,1451,2.785,1452,2.785,1453,2.785]],["title/modules/UsersModule.html",[51,1.277,64,2.291]],["body/modules/UsersModule.html",[3,0.228,4,0.228,5,0.204,16,0.017,19,0.411,20,0.619,21,0.228,22,0.013,23,0.013,26,3.069,47,0.029,51,2.154,53,2.011,54,2.241,55,2.526,56,2.526,57,2.241,58,2.879,59,3.208,64,4.582,68,3.264,69,1.818,70,2.526,72,3.069,95,3.85,96,2.121,97,3.142,110,4.33,139,1.051,186,4.33,401,3.85,447,3.622,881,2.9,1408,4.498,1431,3.85,1454,3.85,1455,3.85,1456,4.466,1457,3.85,1458,4.466,1459,4.466,1460,4.466,1461,4.466]],["title/injectables/UsersService.html",[202,0.419,447,1.8]],["body/injectables/UsersService.html",[3,0.119,4,0.119,5,0.106,8,0.184,9,0.933,10,0.924,11,2.031,15,0.44,16,0.018,17,1.138,19,0.339,20,0.323,21,0.119,22,0.008,23,0.008,28,0.678,36,0.625,38,0.895,47,0.015,50,1.223,77,1.169,78,0.836,89,2.221,90,0.822,96,1.721,97,1.639,131,2.077,139,1.535,141,1.645,157,1.197,170,1.796,190,3.256,202,0.401,203,0.686,205,1.964,210,2.009,213,1.067,225,2.297,242,1.408,253,1.408,258,1.639,266,1.588,279,2.359,282,1.513,296,3.53,352,1.797,374,1.475,379,2.888,380,2.354,416,3.87,446,2.009,447,1.721,470,2.009,471,1.639,481,2.009,500,1.797,501,1.797,504,2.796,505,2.796,506,2.05,507,2.796,508,2.796,509,2.796,510,2.796,511,2.796,517,4.962,521,2.05,536,2.516,539,4.326,553,2.009,554,1.797,588,2.55,593,1.239,618,1.408,648,2.354,674,3.258,784,2.838,796,2.55,818,3.53,881,1.513,989,1.513,1275,4.326,1434,2.009,1441,3.125,1447,3.835,1449,3.125,1462,2.009,1463,4.448,1464,4.448,1465,4.448,1466,4.448,1467,5.018,1468,3.624,1469,2.33,1470,2.33,1471,3.624,1472,2.33,1473,2.33,1474,2.33,1475,5.018,1476,5.018,1477,2.33,1478,6.008,1479,3.624,1480,5.018,1481,2.33,1482,2.33,1483,2.33,1484,2.33,1485,2.33,1486,2.33,1487,2.33,1488,2.33,1489,2.33,1490,2.33,1491,2.33,1492,2.33,1493,2.33,1494,2.33,1495,2.33,1496,2.33,1497,2.33,1498,2.33,1499,2.33,1500,2.33,1501,2.33,1502,3.624,1503,2.33,1504,2.33,1505,2.33,1506,2.33,1507,2.33,1508,2.33,1509,2.33,1510,3.624,1511,3.624,1512,3.624,1513,3.624,1514,2.33,1515,2.33,1516,2.33,1517,2.33,1518,3.624,1519,2.33]],["title/injectables/UsersSubscriber.html",[110,2.291,202,0.419]],["body/injectables/UsersSubscriber.html",[3,0.172,4,0.172,5,0.154,8,0.268,10,1.122,15,0.483,16,0.018,19,0.372,20,0.469,21,0.172,22,0.011,23,0.011,28,0.894,36,0.705,38,1.177,47,0.022,50,1.248,77,1.419,78,1.015,80,2.043,89,2.44,90,1.193,96,1.606,110,2.889,126,1.14,131,2.169,139,1.772,168,1.447,169,1.913,170,0.952,202,0.528,203,0.995,205,2.169,213,0.995,246,3.104,266,1.419,275,4.121,279,2.05,444,4.121,469,3.687,503,4.121,593,1.799,704,2.196,881,2.196,1398,4.121,1399,4.121,1401,2.379,1402,2.915,1406,4.121,1520,2.915,1521,6.027,1522,4.78,1523,4.78,1524,3.382,1525,4.78,1526,6.785,1527,3.382,1528,4.78,1529,3.382,1530,3.382,1531,5.545,1532,4.78,1533,3.382,1534,4.78,1535,3.382,1536,4.78,1537,3.382,1538,4.78,1539,4.78,1540,4.78,1541,4.78,1542,3.382,1543,2.915,1544,4.78,1545,3.382,1546,3.382,1547,3.382,1548,3.382]],["title/coverage.html",[1549,4.462]],["body/coverage.html",[0,2.58,1,1.584,5,0.111,6,1.716,7,2.897,15,0.43,16,0.018,22,0.008,23,0.008,24,2.435,25,1.716,27,2.103,41,1.474,47,0.045,57,1.885,65,1.584,66,1.584,67,1.584,93,1.716,100,1.716,110,1.474,121,1.716,139,0.884,157,0.657,190,1.38,202,0.802,204,2.103,229,6.784,301,2.103,306,1.716,307,2.103,314,1.716,324,1.716,331,1.716,334,1.716,341,1.716,344,1.297,349,1.38,386,1.584,387,1.584,399,1.716,402,1.584,424,1.882,426,2.103,427,2.103,438,2.103,447,1.158,479,1.882,564,1.716,565,2.103,598,1.882,599,2.103,612,1.882,632,1.716,674,1.584,675,2.103,676,3.221,701,1.716,702,2.103,718,1.584,751,2.103,752,2.103,780,1.38,794,1.882,814,1.584,815,2.103,816,2.103,876,1.716,877,2.897,882,1.716,888,1.474,893,1.882,911,2.103,924,2.103,925,2.103,935,1.584,936,1.882,937,1.882,943,2.103,967,1.716,968,2.103,980,2.103,986,1.716,988,1.584,989,1.584,990,2.103,991,2.897,1005,1.882,1015,2.103,1058,2.103,1060,2.103,1072,2.103,1075,2.103,1080,5.055,1102,1.882,1103,2.103,1136,1.716,1137,1.882,1140,1.716,1160,2.103,1161,2.103,1165,1.716,1166,2.897,1178,1.716,1197,2.103,1198,2.103,1207,2.103,1216,1.882,1217,1.882,1219,2.103,1228,1.716,1229,2.103,1274,2.103,1282,2.103,1300,1.882,1319,2.103,1334,1.882,1341,1.882,1355,1.716,1356,2.103,1357,2.103,1362,1.882,1364,3.238,1401,1.716,1408,1.716,1409,2.103,1462,2.103,1520,2.103,1549,2.103,1550,2.439,1551,2.439,1552,2.439,1553,5.552,1554,4.578,1555,5.437,1556,6.908,1557,2.103,1558,7.501,1559,2.103,1560,5.552,1561,2.439,1562,7.051,1563,5.142,1564,3.755,1565,2.103,1566,5.552,1567,2.103,1568,2.103,1569,2.103,1570,2.103,1571,2.103,1572,2.103,1573,2.103,1574,2.103,1575,2.103,1576,2.439,1577,3.238,1578,2.439,1579,2.439,1580,2.103,1581,2.103,1582,2.439,1583,2.439,1584,2.103,1585,2.103,1586,2.103,1587,2.439,1588,2.103,1589,2.103,1590,3.238,1591,2.103,1592,2.103,1593,2.439,1594,2.439]],["title/dependencies.html",[54,2.288,1595,2.729]],["body/dependencies.html",[11,1.166,16,0.018,20,0.458,22,0.01,23,0.01,33,3.628,45,1.282,47,0.03,54,1.659,58,1.489,90,1.166,96,2.6,97,2.326,99,2.85,104,3.628,105,2.85,106,2.326,108,2.661,109,2.85,113,1.87,115,3.852,116,2.326,118,2.85,131,1.017,162,1.659,194,2.55,195,2.55,317,1.489,390,2.147,394,2.55,396,1.998,469,2.55,478,2.147,482,2.55,530,2.55,584,2.85,593,1.758,630,2.55,631,2.85,700,1.87,712,2.326,717,2.55,721,2.913,722,2.326,755,3.628,789,2.85,792,2.85,805,2.55,861,2.85,892,2.55,940,2.55,941,2.147,959,2.147,979,2.502,1050,4.224,1065,2.85,1066,2.85,1082,2.85,1233,2.326,1242,2.85,1247,4.721,1248,2.85,1249,2.85,1251,2.85,1253,2.85,1254,4.721,1256,2.85,1258,2.85,1596,3.306,1597,3.306,1598,3.306,1599,3.306,1600,5.476,1601,3.306,1602,3.306,1603,3.306,1604,3.306,1605,5.966,1606,4.704,1607,3.306,1608,3.306,1609,3.306,1610,3.306,1611,3.306,1612,3.306,1613,3.306,1614,3.306,1615,3.306,1616,3.306,1617,3.306,1618,2.85,1619,3.306,1620,3.306,1621,3.306,1622,5.966,1623,3.306,1624,3.306,1625,3.306,1626,4.704,1627,4.704,1628,3.306,1629,3.306,1630,3.306,1631,3.306,1632,3.306,1633,3.306,1634,3.306,1635,3.306,1636,3.306,1637,3.306,1638,3.306,1639,3.306,1640,3.306,1641,4.704,1642,3.306,1643,3.306,1644,4.704,1645,3.306,1646,3.306,1647,3.306,1648,3.306,1649,3.306,1650,3.306,1651,3.306,1652,3.306,1653,3.306,1654,3.306,1655,3.306,1656,3.306,1657,3.306,1658,3.306,1659,4.704,1660,3.306,1661,3.306,1662,3.306,1663,3.306,1664,3.306,1665,3.306,1666,3.306,1667,3.306,1668,3.306,1669,3.306,1670,3.306,1671,3.306,1672,3.306,1673,3.306,1674,3.306,1675,3.306,1676,3.306,1677,3.306]],["title/miscellaneous/enumerations.html",[1678,1.683,1679,3.931]],["body/miscellaneous/enumerations.html",[8,0.351,16,0.017,22,0.013,23,0.013,69,2.337,139,1.352,141,2.123,208,4.429,244,3.515,338,4.429,709,4.04,712,4.04,782,4.04,784,3.248,979,3.054,983,4.429,988,3.729,1114,4.951,1115,4.951,1138,4.951,1233,4.04,1301,4.951,1365,3.821,1430,4.951,1678,2.357,1679,3.821,1680,5.752,1681,5.742,1682,5.742,1683,4.432,1684,5.742,1685,4.432,1686,4.432,1687,5.742,1688,5.742,1689,5.742,1690,4.432,1691,4.432,1692,5.742,1693,4.432,1694,5.742]],["title/miscellaneous/functions.html",[1678,1.683,1695,3.931]],["body/miscellaneous/functions.html",[8,0.378,10,1.177,15,0.523,16,0.017,17,1.274,22,0.013,23,0.013,38,1.236,39,3.687,57,3.661,77,1.49,78,1.066,80,3.641,139,1.553,226,3.024,1366,4.121,1401,4.239,1543,4.121,1567,4.121,1568,5.195,1569,4.121,1570,5.195,1571,4.121,1572,4.121,1573,5.195,1574,4.121,1575,4.121,1678,2.542,1695,4.121,1696,4.78,1697,4.78,1698,4.78,1699,4.78,1700,4.78,1701,4.78,1702,4.78,1703,6.026,1704,4.78,1705,4.78,1706,4.78,1707,6.026,1708,4.78]],["title/index.html",[8,0.25,281,2.729,1709,3.165]],["body/index.html",[16,0.015,22,0.015,23,0.015,34,5.221,35,4.671,1710,6.056,1711,6.056]],["title/modules.html",[53,2.33]],["body/modules.html",[16,0.014,22,0.014,23,0.014,52,3.805,53,2.435,63,3.512,64,3.268,186,3.268,885,3.805,931,3.805,1021,5.606,1025,6.48,1128,4.171,1296,4.171,1712,7.516,1713,7.516,1714,7.666,1715,6.502]],["title/overview.html",[1716,4.462]],["body/overview.html",[2,2.535,16,0.017,22,0.012,23,0.012,26,2.076,51,1.316,52,5.258,53,1.758,54,1.959,55,2.208,56,2.208,57,1.959,58,1.758,59,1.959,60,3.366,61,3.366,62,3.366,63,4.912,64,4.483,65,3.885,66,3.885,67,3.885,68,2.986,69,1.589,70,2.208,110,3.615,186,4.263,187,3.366,188,3.366,189,3.366,190,3.991,203,1.149,230,3.19,344,3.752,382,3.366,384,3.366,385,3.366,386,3.885,387,3.885,425,1.443,447,3.35,885,4.209,886,3.366,887,3.366,888,3.873,931,4.71,932,3.366,933,3.366,934,3.366,935,4.581,1216,3.011,1363,3.366,1377,3.366,1454,3.366,1455,3.366,1457,3.366,1716,3.366,1717,3.904,1718,3.904,1719,3.904,1720,3.904]],["title/properties.html",[9,1.174,1595,2.729]],["body/properties.html",[9,1.522,16,0.017,22,0.015,23,0.015,224,2.53,1088,5.099,1721,5.914,1722,5.914,1723,5.914,1724,5.914]],["title/miscellaneous/typealiases.html",[1678,1.683,1725,4.56]],["body/miscellaneous/typealiases.html",[8,0.415,15,0.538,16,0.016,22,0.014,23,0.014,39,5.524,479,4.925,527,3.408,612,4.925,627,4.524,628,4.048,629,4.524,986,4.492,988,4.146,989,4.146,1334,4.925,1341,4.925,1565,4.524,1580,4.524,1581,5.505,1584,4.524,1585,4.524,1586,5.505,1588,4.524,1589,5.505,1678,2.791,1680,4.048,1726,5.248,1727,5.248,1728,5.248,1729,5.248,1730,5.248]],["title/miscellaneous/variables.html",[1678,1.683,1731,3.931]],["body/miscellaneous/variables.html",[8,0.304,15,0.531,16,0.018,17,1.293,22,0.012,23,0.012,35,2.965,41,3.157,69,1.565,78,0.591,100,4.176,126,1.761,141,1.422,157,1.925,244,3.38,248,3.766,374,1.565,402,3.393,450,3.676,721,2.779,780,2.956,794,4.03,893,4.03,907,2.965,1005,4.03,1006,3.315,1136,3.676,1137,4.578,1300,4.578,1555,3.315,1557,4.505,1559,3.315,1577,3.315,1590,3.315,1591,4.505,1592,5.49,1618,3.315,1678,2.045,1680,5.592,1731,3.315,1732,5.225,1733,5.225,1734,3.845,1735,3.845,1736,3.845,1737,3.845,1738,3.845,1739,3.845,1740,3.845,1741,3.845,1742,3.845,1743,3.845,1744,3.845,1745,3.845,1746,3.845,1747,3.845,1748,3.845,1749,3.845,1750,3.845,1751,3.845,1752,3.845]]],"invertedIndex":[["",{"_index":16,"title":{},"body":{"interfaces/ApiResponse.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AppRedisModule.html":{},"injectables/AppRedisService.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/AuthResponseDto.html":{},"injectables/AuthService.html":{},"classes/BaseEntity.html":{},"classes/CatchEverythingFilter.html":{},"classes/ChangePasswordDto.html":{},"injectables/CloudinaryService.html":{},"injectables/CreateUserCommand.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserResponseDto.html":{},"modules/EmailModule.html":{},"classes/EmailService.html":{},"interfaces/ErrorResponse.html":{},"classes/ForgotPasswordDto.html":{},"classes/GetProfileResponseDto.html":{},"modules/HttpClientModule.html":{},"injectables/HttpClientService.html":{},"interfaces/IPaymentService.html":{},"interfaces/IStrorageService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"injectables/MorganMiddleware.html":{},"classes/PasswordResetEmailConsumer.html":{},"modules/PaymentModule.html":{},"classes/RefreshTokenDto.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/RequestContextMiddleware.html":{},"classes/ResetPasswordDto.html":{},"guards/RoleGuard.html":{},"injectables/S3Service.html":{},"injectables/SchemaService.html":{},"modules/StorageModule.html":{},"injectables/StripeService.html":{},"injectables/SuccessResponseInterceptor.html":{},"classes/UpdateProfileDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/UsersSubscriber.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":229,"title":{},"body":{"injectables/AppRedisService.html":{},"coverage.html":{}}}],["0.0.1",{"_index":1721,"title":{},"body":{"properties.html":{}}}],["0.1.13",{"_index":1671,"title":{},"body":{"dependencies.html":{}}}],["0.12.5",{"_index":1675,"title":{},"body":{"dependencies.html":{}}}],["0.14.1",{"_index":1648,"title":{},"body":{"dependencies.html":{}}}],["0.2.21",{"_index":1604,"title":{},"body":{"dependencies.html":{}}}],["0.203.0",{"_index":1626,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":1647,"title":{},"body":{"dependencies.html":{}}}],["0.6.0",{"_index":1654,"title":{},"body":{"dependencies.html":{}}}],["0.62.0",{"_index":1619,"title":{},"body":{"dependencies.html":{}}}],["0.7.0",{"_index":1665,"title":{},"body":{"dependencies.html":{}}}],["0.9.3",{"_index":1603,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":1558,"title":{},"body":{"coverage.html":{}}}],["0/13",{"_index":1576,"title":{},"body":{"coverage.html":{}}}],["0/14",{"_index":1582,"title":{},"body":{"coverage.html":{}}}],["0/18",{"_index":1583,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":1553,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":1562,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":1563,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":1560,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":1564,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":1554,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":1561,"title":{},"body":{"coverage.html":{}}}],["0123456789abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz!@#$%^&*()_",{"_index":1734,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1",{"_index":230,"title":{},"body":{"injectables/AppRedisService.html":{},"injectables/AuthService.html":{},"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginDto.html":{},"overview.html":{}}}],["1'})@isstring()@isnotempty()@matches(/^(?=.*[a",{"_index":679,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{}}}],["1'})@isstring()@isoptional()@transform",{"_index":836,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["1.0.0",{"_index":1644,"title":{},"body":{"dependencies.html":{}}}],["1.1.26",{"_index":1602,"title":{},"body":{"dependencies.html":{}}}],["1.10.0",{"_index":1641,"title":{},"body":{"dependencies.html":{}}}],["1.10.2",{"_index":1660,"title":{},"body":{"dependencies.html":{}}}],["1.2.1",{"_index":1650,"title":{},"body":{"dependencies.html":{}}}],["1.9.10",{"_index":1638,"title":{},"body":{"dependencies.html":{}}}],["1.9.93",{"_index":1661,"title":{},"body":{"dependencies.html":{}}}],["1/3",{"_index":1579,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":684,"title":{},"body":{"classes/ChangePasswordDto.html":{},"injectables/CreateUserCommand.html":{},"classes/CreateUserDto.html":{},"classes/ResetPasswordDto.html":{},"injectables/S3Service.html":{}}}],["10.0.0",{"_index":1605,"title":{},"body":{"dependencies.html":{}}}],["10.0.3",{"_index":1614,"title":{},"body":{"dependencies.html":{}}}],["10.2.0",{"_index":1612,"title":{},"body":{"dependencies.html":{}}}],["100",{"_index":1374,"title":{},"body":{"entities/User.html":{}}}],["11.0.3",{"_index":1610,"title":{},"body":{"dependencies.html":{}}}],["11.1.0",{"_index":1676,"title":{},"body":{"dependencies.html":{}}}],["123",{"_index":825,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["12345",{"_index":866,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["12345'})@isstring()@isoptional",{"_index":849,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["15",{"_index":1719,"title":{},"body":{"overview.html":{}}}],["18.3.0",{"_index":1673,"title":{},"body":{"dependencies.html":{}}}],["19",{"_index":1718,"title":{},"body":{"overview.html":{}}}],["2.0.1",{"_index":1622,"title":{},"body":{"dependencies.html":{}}}],["2.0.2",{"_index":1608,"title":{},"body":{"dependencies.html":{}}}],["2.1.0",{"_index":1640,"title":{},"body":{"dependencies.html":{}}}],["2.1.3",{"_index":1655,"title":{},"body":{"dependencies.html":{}}}],["2.2.4",{"_index":1636,"title":{},"body":{"dependencies.html":{}}}],["2.7.0",{"_index":1649,"title":{},"body":{"dependencies.html":{}}}],["20",{"_index":1389,"title":{},"body":{"entities/User.html":{}}}],["2000",{"_index":420,"title":{},"body":{"modules/AuthModule.html":{},"modules/PaymentModule.html":{}}}],["234567890",{"_index":871,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["234567890'})@isstring()@isoptional",{"_index":846,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["255",{"_index":1381,"title":{},"body":{"entities/User.html":{}}}],["3",{"_index":1377,"title":{},"body":{"entities/User.html":{},"overview.html":{}}}],["3.0.0",{"_index":1656,"title":{},"body":{"dependencies.html":{}}}],["3.0.1",{"_index":1662,"title":{},"body":{"dependencies.html":{}}}],["3.0.3",{"_index":1668,"title":{},"body":{"dependencies.html":{}}}],["3.17.0",{"_index":1677,"title":{},"body":{"dependencies.html":{}}}],["3.18.0",{"_index":1658,"title":{},"body":{"dependencies.html":{}}}],["3.2.2",{"_index":1611,"title":{},"body":{"dependencies.html":{}}}],["3.840.0",{"_index":1598,"title":{},"body":{"dependencies.html":{}}}],["3.848.0",{"_index":1596,"title":{},"body":{"dependencies.html":{}}}],["3.850.0",{"_index":1597,"title":{},"body":{"dependencies.html":{}}}],["3/10",{"_index":1587,"title":{},"body":{"coverage.html":{}}}],["30",{"_index":1274,"title":{},"body":{"injectables/S3Service.html":{},"coverage.html":{}}}],["33",{"_index":1578,"title":{},"body":{"coverage.html":{}}}],["4",{"_index":1720,"title":{},"body":{"overview.html":{}}}],["4.0.0",{"_index":1609,"title":{},"body":{"dependencies.html":{}}}],["4.0.1",{"_index":1666,"title":{},"body":{"dependencies.html":{}}}],["4.0.4",{"_index":1631,"title":{},"body":{"dependencies.html":{}}}],["4.1.2",{"_index":1646,"title":{},"body":{"dependencies.html":{}}}],["404",{"_index":1098,"title":{},"body":{"injectables/MorganMiddleware.html":{}}}],["5",{"_index":416,"title":{},"body":{"modules/AuthModule.html":{},"modules/PaymentModule.html":{},"injectables/UsersService.html":{}}}],["5.0.0",{"_index":1657,"title":{},"body":{"dependencies.html":{}}}],["5.0.2",{"_index":1634,"title":{},"body":{"dependencies.html":{}}}],["5.1.1",{"_index":1642,"title":{},"body":{"dependencies.html":{}}}],["5.1.2",{"_index":1632,"title":{},"body":{"dependencies.html":{}}}],["5.56.8",{"_index":1645,"title":{},"body":{"dependencies.html":{}}}],["500",{"_index":673,"title":{},"body":{"classes/CatchEverythingFilter.html":{},"entities/User.html":{}}}],["6.1.1",{"_index":1607,"title":{},"body":{"dependencies.html":{}}}],["6.12.0",{"_index":1600,"title":{},"body":{"dependencies.html":{}}}],["6.4.16",{"_index":1606,"title":{},"body":{"dependencies.html":{}}}],["60",{"_index":1275,"title":{},"body":{"injectables/S3Service.html":{},"injectables/UsersService.html":{}}}],["7.0.5",{"_index":1664,"title":{},"body":{"dependencies.html":{}}}],["7.3.1",{"_index":1616,"title":{},"body":{"dependencies.html":{}}}],["7.8.1",{"_index":1672,"title":{},"body":{"dependencies.html":{}}}],["8",{"_index":1717,"title":{},"body":{"overview.html":{}}}],["8.1.0",{"_index":1652,"title":{},"body":{"dependencies.html":{}}}],["_(ツ)_",{"_index":657,"title":{},"body":{"classes/CatchEverythingFilter.html":{}}}],["abstract",{"_index":597,"title":{},"body":{"classes/BaseEntity.html":{}}}],["access",{"_index":329,"title":{},"body":{"controllers/AuthController.html":{},"classes/AuthResponseDto.html":{},"guards/RoleGuard.html":{}}}],["access_token",{"_index":360,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["accesskeyid",{"_index":1306,"title":{},"body":{"modules/StorageModule.html":{}}}],["accesstoken",{"_index":366,"title":{},"body":{"controllers/AuthController.html":{},"classes/AuthResponseDto.html":{}}}],["account",{"_index":1148,"title":{},"body":{"modules/PaymentModule.html":{}}}],["accounttest",{"_index":1151,"title":{},"body":{"modules/PaymentModule.html":{}}}],["active",{"_index":534,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["adapter",{"_index":165,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/EmailModule.html":{},"modules/PaymentModule.html":{}}}],["addr",{"_index":1087,"title":{},"body":{"injectables/MorganMiddleware.html":{}}}],["address",{"_index":817,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/User.html":{}}}],["admin",{"_index":1694,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["africa/lagos",{"_index":1691,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["agent",{"_index":1093,"title":{},"body":{"injectables/MorganMiddleware.html":{}}}],["alias",{"_index":1566,"title":{},"body":{"coverage.html":{}}}],["aliases",{"_index":1726,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["already",{"_index":1493,"title":{},"body":{"injectables/UsersService.html":{}}}],["any).__helper?.__originalentitydata",{"_index":1545,"title":{},"body":{"injectables/UsersSubscriber.html":{}}}],["api_key",{"_index":726,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["api_secret",{"_index":728,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["apibody",{"_index":340,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["apikey",{"_index":1144,"title":{},"body":{"modules/PaymentModule.html":{}}}],["apioperation",{"_index":43,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["apiproperty",{"_index":437,"title":{},"body":{"classes/AuthResponseDto.html":{},"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserResponseDto.html":{},"classes/ForgotPasswordDto.html":{},"classes/GetProfileResponseDto.html":{},"classes/LoginDto.html":{},"classes/RefreshTokenDto.html":{},"classes/ResetPasswordDto.html":{}}}],["apiproperty({description",{"_index":428,"title":{},"body":{"classes/AuthResponseDto.html":{},"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserResponseDto.html":{},"classes/GetProfileResponseDto.html":{},"classes/LoginDto.html":{},"classes/RefreshTokenDto.html":{},"classes/ResetPasswordDto.html":{}}}],["apiproperty({example",{"_index":926,"title":{},"body":{"classes/ForgotPasswordDto.html":{}}}],["apiresponse",{"_index":1,"title":{"interfaces/ApiResponse.html":{}},"body":{"interfaces/ApiResponse.html":{},"controllers/AuthController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["apitags",{"_index":44,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["apitags('app",{"_index":46,"title":{},"body":{"controllers/AppController.html":{}}}],["apitags('auth",{"_index":355,"title":{},"body":{"controllers/AuthController.html":{}}}],["apitags('users",{"_index":1437,"title":{},"body":{"controllers/UsersController.html":{}}}],["app",{"_index":1708,"title":{},"body":{"miscellaneous/functions.html":{}}}],["app.controller",{"_index":84,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":85,"title":{},"body":{"modules/AppModule.html":{}}}],["app_guard",{"_index":389,"title":{},"body":{"modules/AuthModule.html":{}}}],["app_name",{"_index":1557,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["appcontroller",{"_index":25,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["apply",{"_index":176,"title":{},"body":{"modules/AppModule.html":{}}}],["applyrawbodyonlyto",{"_index":107,"title":{},"body":{"modules/AppModule.html":{}}}],["applyrawbodyonlyto(consumer",{"_index":171,"title":{},"body":{"modules/AppModule.html":{}}}],["appmodule",{"_index":52,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appredis",{"_index":206,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["appredismodule",{"_index":186,"title":{"modules/AppRedisModule.html":{}},"body":{"modules/AppRedisModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["appredisservice",{"_index":190,"title":{"injectables/AppRedisService.html":{}},"body":{"modules/AppRedisModule.html":{},"injectables/AppRedisService.html":{},"injectables/AuthService.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["appredisservice.name",{"_index":274,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["appservice",{"_index":65,"title":{"injectables/AppService.html":{}},"body":{"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["args",{"_index":275,"title":{},"body":{"injectables/AppRedisService.html":{},"injectables/UsersSubscriber.html":{}}}],["args.entity",{"_index":1539,"title":{},"body":{"injectables/UsersSubscriber.html":{}}}],["args.push('ex",{"_index":277,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["args.push('nx",{"_index":276,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["argumentshost",{"_index":613,"title":{},"body":{"classes/CatchEverythingFilter.html":{}}}],["array",{"_index":234,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["asecure",{"_index":1208,"title":{},"body":{"classes/ResetPasswordDto.html":{}}}],["async",{"_index":131,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRedisModule.html":{},"injectables/AppRedisService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CloudinaryService.html":{},"injectables/CreateUserCommand.html":{},"classes/EmailService.html":{},"injectables/HttpClientService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/PasswordResetEmailConsumer.html":{},"injectables/S3Service.html":{},"injectables/SchemaService.html":{},"injectables/StripeService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/UsersSubscriber.html":{},"dependencies.html":{}}}],["asynclocalstoragecontextmanager",{"_index":1739,"title":{},"body":{"miscellaneous/variables.html":{}}}],["attempts",{"_index":415,"title":{},"body":{"modules/AuthModule.html":{},"modules/PaymentModule.html":{}}}],["auth",{"_index":106,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/EmailModule.html":{},"dependencies.html":{}}}],["auth.controller",{"_index":391,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.guard",{"_index":343,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["auth.guard.ts",{"_index":991,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/LocalAuthGuard.html":{},"coverage.html":{}}}],["auth.guard.ts:11",{"_index":997,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["auth.guard.ts:16",{"_index":1000,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["auth.guard.ts:27",{"_index":1002,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["auth.jwt.refreshexpiresin",{"_index":494,"title":{},"body":{"injectables/AuthService.html":{}}}],["auth.jwt.refreshsecret",{"_index":496,"title":{},"body":{"injectables/AuthService.html":{}}}],["auth.service",{"_index":345,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/LocalStrategy.html":{}}}],["auth/decorators/public.decorator",{"_index":1432,"title":{},"body":{"controllers/UsersController.html":{}}}],["authcontroller",{"_index":306,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authenticated",{"_index":429,"title":{},"body":{"classes/AuthResponseDto.html":{}}}],["authguard",{"_index":1004,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/LocalAuthGuard.html":{}}}],["authguard('jwt",{"_index":992,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authguard('local",{"_index":1059,"title":{},"body":{"injectables/LocalAuthGuard.html":{}}}],["authmodule",{"_index":63,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":1724,"title":{},"body":{"properties.html":{}}}],["authresponsedto",{"_index":424,"title":{"classes/AuthResponseDto.html":{}},"body":{"classes/AuthResponseDto.html":{},"coverage.html":{}}}],["authservice",{"_index":344,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["authtokens",{"_index":479,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["auto",{"_index":742,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["autoloadentities",{"_index":143,"title":{},"body":{"modules/AppModule.html":{}}}],["available",{"_index":1021,"title":{},"body":{"injectables/JwtStrategy.html":{},"modules.html":{}}}],["avatar",{"_index":1365,"title":{},"body":{"entities/User.html":{},"miscellaneous/enumerations.html":{}}}],["avatars",{"_index":1693,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["await",{"_index":279,"title":{},"body":{"injectables/AppRedisService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CreateUserCommand.html":{},"classes/EmailService.html":{},"injectables/HttpClientService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/PasswordResetEmailConsumer.html":{},"injectables/S3Service.html":{},"injectables/SchemaService.html":{},"injectables/StripeService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/UsersSubscriber.html":{}}}],["aws",{"_index":1247,"title":{},"body":{"injectables/S3Service.html":{},"dependencies.html":{}}}],["aws.s3.secretaccesskey",{"_index":1310,"title":{},"body":{"modules/StorageModule.html":{}}}],["axios",{"_index":630,"title":{},"body":{"classes/CatchEverythingFilter.html":{},"injectables/HttpClientService.html":{},"dependencies.html":{}}}],["axioserror",{"_index":629,"title":{},"body":{"classes/CatchEverythingFilter.html":{},"miscellaneous/typealiases.html":{}}}],["axiosrequestconfig",{"_index":951,"title":{},"body":{"injectables/HttpClientService.html":{}}}],["b3",{"_index":1628,"title":{},"body":{"dependencies.html":{}}}],["b3propagator",{"_index":1746,"title":{},"body":{"miscellaneous/variables.html":{}}}],["backoff",{"_index":417,"title":{},"body":{"modules/AuthModule.html":{},"modules/PaymentModule.html":{}}}],["badrequestexception",{"_index":470,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["badrequestexception('malformed",{"_index":532,"title":{},"body":{"injectables/AuthService.html":{}}}],["badrequestexception('passwords",{"_index":553,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["badrequestexception('refresh",{"_index":522,"title":{},"body":{"injectables/AuthService.html":{}}}],["baseentity",{"_index":564,"title":{"classes/BaseEntity.html":{}},"body":{"classes/BaseEntity.html":{},"entities/User.html":{},"coverage.html":{}}}],["basic",{"_index":105,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["basicauth",{"_index":103,"title":{},"body":{"modules/AppModule.html":{}}}],["bcrypt",{"_index":469,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersSubscriber.html":{},"dependencies.html":{}}}],["bcrypt.compare(pass",{"_index":502,"title":{},"body":{"injectables/AuthService.html":{}}}],["bcrypt.gensalt(this.saltrounds",{"_index":561,"title":{},"body":{"injectables/AuthService.html":{}}}],["bcrypt.hash(newpassword",{"_index":563,"title":{},"body":{"injectables/AuthService.html":{}}}],["bcrypt.hash(user.password",{"_index":1548,"title":{},"body":{"injectables/UsersSubscriber.html":{}}}],["beforecreate",{"_index":1398,"title":{},"body":{"entities/User.html":{},"injectables/UsersSubscriber.html":{}}}],["beforecreate(args",{"_index":1525,"title":{},"body":{"injectables/UsersSubscriber.html":{}}}],["beforeupdate",{"_index":1399,"title":{},"body":{"entities/User.html":{},"injectables/UsersSubscriber.html":{}}}],["beforeupdate(args",{"_index":1528,"title":{},"body":{"injectables/UsersSubscriber.html":{}}}],["blacklisted",{"_index":523,"title":{},"body":{"injectables/AuthService.html":{}}}],["board/api",{"_index":1599,"title":{},"body":{"dependencies.html":{}}}],["board/api/bullmqadapter",{"_index":405,"title":{},"body":{"modules/AuthModule.html":{},"modules/PaymentModule.html":{}}}],["board/express",{"_index":118,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["board/nestjs",{"_index":116,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PaymentModule.html":{},"dependencies.html":{}}}],["body",{"_index":320,"title":{},"body":{"controllers/AuthController.html":{},"classes/CatchEverythingFilter.html":{},"injectables/S3Service.html":{},"controllers/UsersController.html":{}}}],["boilerplate",{"_index":35,"title":{},"body":{"controllers/AppController.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["boolean",{"_index":246,"title":{},"body":{"injectables/AppRedisService.html":{},"classes/CreateUserDto.html":{},"guards/RoleGuard.html":{},"entities/User.html":{},"injectables/UsersSubscriber.html":{}}}],["bootstrap",{"_index":57,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRedisModule.html":{},"modules/AuthModule.html":{},"modules/EmailModule.html":{},"modules/HttpClientModule.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["browse",{"_index":1714,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1712,"title":{},"body":{"modules.html":{}}}],["bucket",{"_index":1266,"title":{},"body":{"injectables/S3Service.html":{}}}],["buffer",{"_index":1643,"title":{},"body":{"dependencies.html":{}}}],["bull",{"_index":115,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PaymentModule.html":{},"dependencies.html":{}}}],["bullboardmodule",{"_index":114,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PaymentModule.html":{}}}],["bullboardmodule.forfeature",{"_index":421,"title":{},"body":{"modules/AuthModule.html":{},"modules/PaymentModule.html":{}}}],["bullboardmodule.forroot",{"_index":164,"title":{},"body":{"modules/AppModule.html":{}}}],["bullmodule",{"_index":112,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PaymentModule.html":{}}}],["bullmodule.forrootasync",{"_index":160,"title":{},"body":{"modules/AppModule.html":{}}}],["bullmodule.registerqueue",{"_index":413,"title":{},"body":{"modules/AuthModule.html":{},"modules/PaymentModule.html":{}}}],["bullmq",{"_index":478,"title":{},"body":{"injectables/AuthService.html":{},"classes/PasswordResetEmailConsumer.html":{},"modules/PaymentModule.html":{},"injectables/StripeService.html":{},"dependencies.html":{}}}],["bullmqadapter",{"_index":404,"title":{},"body":{"modules/AuthModule.html":{},"modules/PaymentModule.html":{}}}],["bytes",{"_index":733,"title":{},"body":{"injectables/CloudinaryService.html":{},"injectables/S3Service.html":{}}}],["cache",{"_index":128,"title":{},"body":{"modules/AppModule.html":{}}}],["cached",{"_index":1502,"title":{},"body":{"injectables/UsersService.html":{}}}],["cachekey",{"_index":517,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["callhandler",{"_index":1170,"title":{},"body":{"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/SuccessResponseInterceptor.html":{}}}],["canactivate",{"_index":993,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/RoleGuard.html":{}}}],["canactivate(context",{"_index":998,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/RoleGuard.html":{}}}],["catch",{"_index":526,"title":{},"body":{"injectables/AuthService.html":{},"classes/CatchEverythingFilter.html":{},"injectables/CreateUserCommand.html":{}}}],["catch(exception",{"_index":611,"title":{},"body":{"classes/CatchEverythingFilter.html":{}}}],["catcheverythingfilter",{"_index":598,"title":{"classes/CatchEverythingFilter.html":{}},"body":{"classes/CatchEverythingFilter.html":{},"coverage.html":{}}}],["catcheverythingfilter.name",{"_index":610,"title":{},"body":{"classes/CatchEverythingFilter.html":{}}}],["category=${filecategory",{"_index":734,"title":{},"body":{"injectables/CloudinaryService.html":{},"injectables/S3Service.html":{}}}],["caught",{"_index":667,"title":{},"body":{"classes/CatchEverythingFilter.html":{}}}],["chalk",{"_index":792,"title":{},"body":{"injectables/CreateUserCommand.html":{},"dependencies.html":{}}}],["chalk.red.bold",{"_index":812,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["challenge",{"_index":180,"title":{},"body":{"modules/AppModule.html":{}}}],["change",{"_index":1372,"title":{},"body":{"entities/User.html":{},"controllers/UsersController.html":{}}}],["changed",{"_index":1453,"title":{},"body":{"controllers/UsersController.html":{}}}],["changepassword",{"_index":818,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["changepassword(data",{"_index":1412,"title":{},"body":{"controllers/UsersController.html":{}}}],["changepassword(userid",{"_index":1469,"title":{},"body":{"injectables/UsersService.html":{}}}],["changepassworddto",{"_index":674,"title":{"classes/ChangePasswordDto.html":{}},"body":{"classes/ChangePasswordDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["characters",{"_index":685,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/ResetPasswordDto.html":{}}}],["checking",{"_index":294,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["checkout",{"_index":1334,"title":{},"body":{"injectables/StripeService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["city",{"_index":819,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/User.html":{}}}],["class",{"_index":47,"title":{"classes/AuthResponseDto.html":{},"classes/BaseEntity.html":{},"classes/CatchEverythingFilter.html":{},"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserResponseDto.html":{},"classes/EmailService.html":{},"classes/ForgotPasswordDto.html":{},"classes/GetProfileResponseDto.html":{},"classes/LoginDto.html":{},"classes/PasswordResetEmailConsumer.html":{},"classes/RefreshTokenDto.html":{},"classes/ResetPasswordDto.html":{},"classes/UpdateProfileDto.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AppRedisModule.html":{},"injectables/AppRedisService.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/AuthResponseDto.html":{},"injectables/AuthService.html":{},"classes/BaseEntity.html":{},"classes/CatchEverythingFilter.html":{},"classes/ChangePasswordDto.html":{},"injectables/CloudinaryService.html":{},"injectables/CreateUserCommand.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserResponseDto.html":{},"modules/EmailModule.html":{},"classes/EmailService.html":{},"classes/ForgotPasswordDto.html":{},"classes/GetProfileResponseDto.html":{},"modules/HttpClientModule.html":{},"injectables/HttpClientService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"injectables/MorganMiddleware.html":{},"classes/PasswordResetEmailConsumer.html":{},"modules/PaymentModule.html":{},"classes/RefreshTokenDto.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/RequestContextMiddleware.html":{},"classes/ResetPasswordDto.html":{},"guards/RoleGuard.html":{},"injectables/S3Service.html":{},"injectables/SchemaService.html":{},"modules/StorageModule.html":{},"injectables/StripeService.html":{},"injectables/SuccessResponseInterceptor.html":{},"classes/UpdateProfileDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/UsersSubscriber.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":425,"title":{},"body":{"classes/AuthResponseDto.html":{},"classes/BaseEntity.html":{},"classes/CatchEverythingFilter.html":{},"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserResponseDto.html":{},"classes/EmailService.html":{},"classes/ForgotPasswordDto.html":{},"classes/GetProfileResponseDto.html":{},"classes/LoginDto.html":{},"classes/PasswordResetEmailConsumer.html":{},"classes/RefreshTokenDto.html":{},"classes/ResetPasswordDto.html":{},"classes/UpdateProfileDto.html":{},"overview.html":{}}}],["cleaned",{"_index":869,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["client.module.ts",{"_index":938,"title":{},"body":{"modules/HttpClientModule.html":{}}}],["client.service",{"_index":942,"title":{},"body":{"modules/HttpClientModule.html":{}}}],["client.service.ts",{"_index":943,"title":{},"body":{"injectables/HttpClientService.html":{},"coverage.html":{}}}],["client.service.ts:10",{"_index":955,"title":{},"body":{"injectables/HttpClientService.html":{}}}],["client.service.ts:11",{"_index":949,"title":{},"body":{"injectables/HttpClientService.html":{}}}],["client.service.ts:21",{"_index":952,"title":{},"body":{"injectables/HttpClientService.html":{}}}],["client/http",{"_index":937,"title":{},"body":{"modules/HttpClientModule.html":{},"injectables/HttpClientService.html":{},"coverage.html":{}}}],["cloud_name",{"_index":724,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["cloudinary",{"_index":712,"title":{},"body":{"injectables/CloudinaryService.html":{},"interfaces/IStrorageService.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{}}}],["cloudinary.config",{"_index":723,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["cloudinary.service",{"_index":1299,"title":{},"body":{"modules/StorageModule.html":{}}}],["cloudinary.uploader.upload_stream",{"_index":738,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["cloudinaryservice",{"_index":701,"title":{"injectables/CloudinaryService.html":{}},"body":{"injectables/CloudinaryService.html":{},"modules/StorageModule.html":{},"coverage.html":{}}}],["cloudinaryservice(configservice",{"_index":1314,"title":{},"body":{"modules/StorageModule.html":{}}}],["cloudinaryservice.name",{"_index":735,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["cluster_appmodule",{"_index":60,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":62,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":61,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appredismodule",{"_index":187,"title":{},"body":{"modules/AppRedisModule.html":{},"overview.html":{}}}],["cluster_appredismodule_exports",{"_index":188,"title":{},"body":{"modules/AppRedisModule.html":{},"overview.html":{}}}],["cluster_appredismodule_providers",{"_index":189,"title":{},"body":{"modules/AppRedisModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":382,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":385,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":383,"title":{},"body":{"modules/AuthModule.html":{}}}],["cluster_authmodule_providers",{"_index":384,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_emailmodule",{"_index":886,"title":{},"body":{"modules/EmailModule.html":{},"overview.html":{}}}],["cluster_emailmodule_exports",{"_index":887,"title":{},"body":{"modules/EmailModule.html":{},"overview.html":{}}}],["cluster_httpclientmodule",{"_index":932,"title":{},"body":{"modules/HttpClientModule.html":{},"overview.html":{}}}],["cluster_httpclientmodule_exports",{"_index":933,"title":{},"body":{"modules/HttpClientModule.html":{},"overview.html":{}}}],["cluster_httpclientmodule_providers",{"_index":934,"title":{},"body":{"modules/HttpClientModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":1454,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_exports",{"_index":1455,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_imports",{"_index":1456,"title":{},"body":{"modules/UsersModule.html":{}}}],["cluster_usersmodule_providers",{"_index":1457,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["code",{"_index":835,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/User.html":{}}}],["command",{"_index":788,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["commander",{"_index":789,"title":{},"body":{"injectables/CreateUserCommand.html":{},"dependencies.html":{}}}],["commandrunner",{"_index":754,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["commands/create",{"_index":119,"title":{},"body":{"modules/AppModule.html":{}}}],["comment",{"_index":574,"title":{},"body":{"classes/BaseEntity.html":{},"entities/User.html":{}}}],["common/constants",{"_index":101,"title":{},"body":{"modules/AppModule.html":{},"injectables/SchemaService.html":{}}}],["common/middlewares/morgan.middleware",{"_index":94,"title":{},"body":{"modules/AppModule.html":{}}}],["common/middlewares/request",{"_index":122,"title":{},"body":{"modules/AppModule.html":{}}}],["compare",{"_index":1030,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["compodoc/compodoc",{"_index":1601,"title":{},"body":{"dependencies.html":{}}}],["compositepropagator",{"_index":1741,"title":{},"body":{"miscellaneous/variables.html":{}}}],["concurrency",{"_index":1117,"title":{},"body":{"classes/PasswordResetEmailConsumer.html":{}}}],["cond",{"_index":596,"title":{},"body":{"classes/BaseEntity.html":{}}}],["config",{"_index":199,"title":{},"body":{"modules/AppRedisModule.html":{},"modules/StorageModule.html":{}}}],["config/index",{"_index":87,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule",{"_index":88,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule.forroot",{"_index":124,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":89,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRedisModule.html":{},"injectables/AppRedisService.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CloudinaryService.html":{},"modules/EmailModule.html":{},"injectables/JwtStrategy.html":{},"modules/PaymentModule.html":{},"injectables/S3Service.html":{},"injectables/SchemaService.html":{},"modules/StorageModule.html":{},"injectables/StripeService.html":{},"injectables/UsersService.html":{},"injectables/UsersSubscriber.html":{}}}],["configservice.get",{"_index":1309,"title":{},"body":{"modules/StorageModule.html":{}}}],["configservice.get('auth.jwt.expiresin",{"_index":412,"title":{},"body":{"modules/AuthModule.html":{}}}],["configservice.get('auth.jwt.secret",{"_index":409,"title":{},"body":{"modules/AuthModule.html":{}}}],["configservice.get('aws.s3.accesskeyid",{"_index":1307,"title":{},"body":{"modules/StorageModule.html":{}}}],["configservice.get('aws.s3.region",{"_index":1311,"title":{},"body":{"modules/StorageModule.html":{}}}],["configservice.getorthrow",{"_index":1149,"title":{},"body":{"modules/PaymentModule.html":{}}}],["configservice.getorthrow('auth.jwt.secret",{"_index":1056,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["configservice.getorthrow('db.host",{"_index":136,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.getorthrow('db.logging",{"_index":155,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.getorthrow('db.name",{"_index":134,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.getorthrow('db.password",{"_index":142,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.getorthrow('db.pool.max",{"_index":150,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.getorthrow('db.pool.min",{"_index":148,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.getorthrow('db.port",{"_index":138,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.getorthrow('db.username",{"_index":140,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.getorthrow('driver.payment",{"_index":1157,"title":{},"body":{"modules/PaymentModule.html":{}}}],["configservice.getorthrow('driver.storage",{"_index":1312,"title":{},"body":{"modules/StorageModule.html":{}}}],["configservice.getorthrow('nodeenv",{"_index":145,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.getorthrow('redis.namespace",{"_index":201,"title":{},"body":{"modules/AppRedisModule.html":{}}}],["configservice.getorthrow('redis.url",{"_index":163,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRedisModule.html":{}}}],["configservice.getorthrow('smtp.auth.pass",{"_index":904,"title":{},"body":{"modules/EmailModule.html":{}}}],["configservice.getorthrow('smtp.auth.user",{"_index":903,"title":{},"body":{"modules/EmailModule.html":{}}}],["configservice.getorthrow('smtp.host",{"_index":899,"title":{},"body":{"modules/EmailModule.html":{}}}],["configservice.getorthrow('smtp.port",{"_index":900,"title":{},"body":{"modules/EmailModule.html":{}}}],["configservice.getorthrow('smtp.secure",{"_index":902,"title":{},"body":{"modules/EmailModule.html":{}}}],["configservice.getorthrow('stripe.secretkey",{"_index":1145,"title":{},"body":{"modules/PaymentModule.html":{}}}],["configuration",{"_index":86,"title":{},"body":{"modules/AppModule.html":{}}}],["configure",{"_index":73,"title":{},"body":{"modules/AppModule.html":{}}}],["configure(consumer",{"_index":74,"title":{},"body":{"modules/AppModule.html":{}}}],["confirmation",{"_index":677,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/ResetPasswordDto.html":{}}}],["confirmpassword",{"_index":380,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ChangePasswordDto.html":{},"classes/ResetPasswordDto.html":{},"injectables/UsersService.html":{}}}],["conflictexception",{"_index":1483,"title":{},"body":{"injectables/UsersService.html":{}}}],["conflictexception('user",{"_index":1492,"title":{},"body":{"injectables/UsersService.html":{}}}],["connect",{"_index":1689,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["connection",{"_index":161,"title":{},"body":{"modules/AppModule.html":{}}}],["console.error",{"_index":811,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["console.log('prometheus",{"_index":1749,"title":{},"body":{"miscellaneous/variables.html":{}}}],["console.log(chalk.green.bold",{"_index":809,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["const",{"_index":266,"title":{},"body":{"injectables/AppRedisService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CatchEverythingFilter.html":{},"injectables/CloudinaryService.html":{},"injectables/CreateUserCommand.html":{},"classes/CreateUserDto.html":{},"injectables/HttpClientService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/MorganMiddleware.html":{},"classes/PasswordResetEmailConsumer.html":{},"modules/PaymentModule.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"guards/RoleGuard.html":{},"injectables/S3Service.html":{},"injectables/SchemaService.html":{},"modules/StorageModule.html":{},"injectables/StripeService.html":{},"injectables/SuccessResponseInterceptor.html":{},"classes/UpdateProfileDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/UsersSubscriber.html":{}}}],["constructor",{"_index":213,"title":{},"body":{"injectables/AppRedisService.html":{},"injectables/AuthService.html":{},"classes/CatchEverythingFilter.html":{},"injectables/CloudinaryService.html":{},"injectables/CreateUserCommand.html":{},"classes/EmailService.html":{},"injectables/HttpClientService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/MorganMiddleware.html":{},"classes/PasswordResetEmailConsumer.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/RequestContextMiddleware.html":{},"guards/RoleGuard.html":{},"injectables/S3Service.html":{},"injectables/SchemaService.html":{},"injectables/StripeService.html":{},"injectables/UsersService.html":{},"injectables/UsersSubscriber.html":{}}}],["constructor(@inject(logger",{"_index":1083,"title":{},"body":{"injectables/MorganMiddleware.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/SuccessResponseInterceptor.html":{}}}],["constructor(appredisservice",{"_index":446,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["constructor(authservice",{"_index":1061,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["constructor(configservice",{"_index":704,"title":{},"body":{"injectables/CloudinaryService.html":{},"injectables/JwtStrategy.html":{},"injectables/S3Service.html":{},"injectables/StripeService.html":{},"injectables/UsersSubscriber.html":{}}}],["constructor(em",{"_index":761,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["constructor(emailservice",{"_index":1105,"title":{},"body":{"classes/PasswordResetEmailConsumer.html":{}}}],["constructor(httpadapterhost",{"_index":607,"title":{},"body":{"classes/CatchEverythingFilter.html":{}}}],["constructor(httpservice",{"_index":947,"title":{},"body":{"injectables/HttpClientService.html":{}}}],["constructor(loggerservice",{"_index":214,"title":{},"body":{"injectables/AppRedisService.html":{},"injectables/MorganMiddleware.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{}}}],["constructor(mailerservice",{"_index":913,"title":{},"body":{"classes/EmailService.html":{}}}],["constructor(orm",{"_index":1199,"title":{},"body":{"injectables/RequestContextMiddleware.html":{},"injectables/SchemaService.html":{}}}],["constructor(private",{"_index":169,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/JwtAuthGuard.html":{},"injectables/RequestContextMiddleware.html":{},"guards/RoleGuard.html":{},"controllers/UsersController.html":{},"injectables/UsersSubscriber.html":{}}}],["constructor(reflector",{"_index":995,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/RoleGuard.html":{}}}],["consumer",{"_index":79,"title":{},"body":{"modules/AppModule.html":{}}}],["consumer.apply(morganmiddleware).forroutes",{"_index":184,"title":{},"body":{"modules/AppModule.html":{}}}],["consumer.apply(requestcontextmiddleware).forroutes",{"_index":185,"title":{},"body":{"modules/AppModule.html":{}}}],["contenttype",{"_index":1268,"title":{},"body":{"injectables/S3Service.html":{}}}],["context",{"_index":918,"title":{},"body":{"classes/EmailService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"guards/RoleGuard.html":{},"injectables/SuccessResponseInterceptor.html":{}}}],["context.getclass",{"_index":1009,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["context.gethandler",{"_index":1008,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/RoleGuard.html":{}}}],["context.gettype",{"_index":1180,"title":{},"body":{"injectables/RequestBodyAndResponseInterceptor.html":{},"guards/RoleGuard.html":{},"injectables/SuccessResponseInterceptor.html":{}}}],["context.middleware",{"_index":123,"title":{},"body":{"modules/AppModule.html":{}}}],["context.middleware.ts",{"_index":1198,"title":{},"body":{"injectables/RequestContextMiddleware.html":{},"coverage.html":{}}}],["context.middleware.ts:6",{"_index":1201,"title":{},"body":{"injectables/RequestContextMiddleware.html":{}}}],["context.middleware.ts:9",{"_index":1204,"title":{},"body":{"injectables/RequestContextMiddleware.html":{}}}],["context.switchtohttp().getrequest",{"_index":1194,"title":{},"body":{"injectables/RequestBodyAndResponseInterceptor.html":{},"guards/RoleGuard.html":{},"injectables/SuccessResponseInterceptor.html":{}}}],["context.switchtohttp().getresponse",{"_index":1185,"title":{},"body":{"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/SuccessResponseInterceptor.html":{}}}],["contextmanager",{"_index":1738,"title":{},"body":{"miscellaneous/variables.html":{}}}],["contexttype",{"_index":1179,"title":{},"body":{"injectables/RequestBodyAndResponseInterceptor.html":{},"guards/RoleGuard.html":{},"injectables/SuccessResponseInterceptor.html":{}}}],["controller",{"_index":24,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/JwtStrategy.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":356,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('users",{"_index":1438,"title":{},"body":{"controllers/UsersController.html":{}}}],["controllers",{"_index":26,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"modules/EmailModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["country",{"_index":820,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/User.html":{}}}],["countrycode",{"_index":821,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateProfileDto.html":{},"entities/User.html":{}}}],["coverage",{"_index":1549,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":796,"title":{},"body":{"injectables/CreateUserCommand.html":{},"classes/UpdateProfileDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["create(@body",{"_index":1440,"title":{},"body":{"controllers/UsersController.html":{}}}],["create(user",{"_index":1415,"title":{},"body":{"controllers/UsersController.html":{}}}],["create(userdata",{"_index":1471,"title":{},"body":{"injectables/UsersService.html":{}}}],["create:user",{"_index":795,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["createcheckoutsession",{"_index":969,"title":{},"body":{"interfaces/IPaymentService.html":{},"injectables/StripeService.html":{}}}],["createcheckoutsession(params",{"_index":971,"title":{},"body":{"interfaces/IPaymentService.html":{},"injectables/StripeService.html":{}}}],["created",{"_index":810,"title":{},"body":{"injectables/CreateUserCommand.html":{},"classes/CreateUserResponseDto.html":{},"classes/GetProfileResponseDto.html":{},"injectables/StripeService.html":{},"controllers/UsersController.html":{}}}],["createdat",{"_index":566,"title":{},"body":{"classes/BaseEntity.html":{}}}],["createpaymentintent",{"_index":970,"title":{},"body":{"interfaces/IPaymentService.html":{},"injectables/StripeService.html":{}}}],["createpaymentintent(params",{"_index":976,"title":{},"body":{"interfaces/IPaymentService.html":{},"injectables/StripeService.html":{}}}],["createpresignedurlwithoutclient",{"_index":981,"title":{},"body":{"interfaces/IStrorageService.html":{},"injectables/S3Service.html":{}}}],["createpresignedurlwithoutclient(key",{"_index":982,"title":{},"body":{"interfaces/IStrorageService.html":{},"injectables/S3Service.html":{}}}],["createusercommand",{"_index":66,"title":{"injectables/CreateUserCommand.html":{}},"body":{"modules/AppModule.html":{},"injectables/CreateUserCommand.html":{},"coverage.html":{},"overview.html":{}}}],["createuserdto",{"_index":814,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/CreateUserDto.html":{},"classes/UpdateProfileDto.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["createuserresponsedto",{"_index":876,"title":{"classes/CreateUserResponseDto.html":{}},"body":{"classes/CreateUserResponseDto.html":{},"classes/GetProfileResponseDto.html":{},"coverage.html":{}}}],["creating",{"_index":1333,"title":{},"body":{"injectables/StripeService.html":{}}}],["creation",{"_index":576,"title":{},"body":{"classes/BaseEntity.html":{}}}],["credentials",{"_index":1069,"title":{},"body":{"injectables/LocalStrategy.html":{},"injectables/S3Service.html":{},"modules/StorageModule.html":{}}}],["ctx",{"_index":636,"title":{},"body":{"classes/CatchEverythingFilter.html":{}}}],["ctx.getrequest",{"_index":638,"title":{},"body":{"classes/CatchEverythingFilter.html":{}}}],["ctx.getresponse",{"_index":640,"title":{},"body":{"classes/CatchEverythingFilter.html":{}}}],["current_timestamp",{"_index":573,"title":{},"body":{"classes/BaseEntity.html":{}}}],["currently",{"_index":1043,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["customalphabet",{"_index":793,"title":{},"body":{"injectables/CreateUserCommand.html":{},"injectables/S3Service.html":{}}}],["customalphabet(hexadecimallowercase",{"_index":1237,"title":{},"body":{"injectables/S3Service.html":{}}}],["customalphabet(password_character_set",{"_index":787,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["data",{"_index":11,"title":{},"body":{"interfaces/ApiResponse.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/CloudinaryService.html":{},"classes/CreateUserResponseDto.html":{},"classes/GetProfileResponseDto.html":{},"injectables/HttpClientService.html":{},"interfaces/IStrorageService.html":{},"classes/PasswordResetEmailConsumer.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/S3Service.html":{},"injectables/StripeService.html":{},"injectables/SuccessResponseInterceptor.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["data.id",{"_index":1515,"title":{},"body":{"injectables/UsersService.html":{}}}],["data.object",{"_index":1344,"title":{},"body":{"injectables/StripeService.html":{}}}],["data?.email",{"_index":1121,"title":{},"body":{"classes/PasswordResetEmailConsumer.html":{}}}],["data?.firstname",{"_index":1126,"title":{},"body":{"classes/PasswordResetEmailConsumer.html":{}}}],["data?.reseturl",{"_index":1125,"title":{},"body":{"classes/PasswordResetEmailConsumer.html":{}}}],["database",{"_index":1292,"title":{},"body":{"injectables/SchemaService.html":{}}}],["date",{"_index":569,"title":{},"body":{"classes/BaseEntity.html":{},"entities/User.html":{}}}],["date().toisostring",{"_index":665,"title":{},"body":{"classes/CatchEverythingFilter.html":{}}}],["dbname",{"_index":133,"title":{},"body":{"modules/AppModule.html":{}}}],["debug",{"_index":154,"title":{},"body":{"modules/AppModule.html":{}}}],["declarations",{"_index":56,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRedisModule.html":{},"modules/AuthModule.html":{},"modules/EmailModule.html":{},"modules/HttpClientModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["decorators",{"_index":30,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/AuthResponseDto.html":{},"classes/BaseEntity.html":{},"classes/ChangePasswordDto.html":{},"injectables/CreateUserCommand.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserResponseDto.html":{},"classes/ForgotPasswordDto.html":{},"classes/GetProfileResponseDto.html":{},"classes/LoginDto.html":{},"modules/PaymentModule.html":{},"classes/RefreshTokenDto.html":{},"classes/ResetPasswordDto.html":{},"guards/RoleGuard.html":{},"injectables/StripeService.html":{},"entities/User.html":{},"controllers/UsersController.html":{}}}],["decorators/public.decorator",{"_index":346,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtAuthGuard.html":{}}}],["decrement",{"_index":207,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["decrement(key",{"_index":218,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["default",{"_index":248,"title":{},"body":{"injectables/AppRedisService.html":{},"classes/BaseEntity.html":{},"classes/CatchEverythingFilter.html":{},"injectables/CreateUserCommand.html":{},"injectables/HttpClientService.html":{},"injectables/S3Service.html":{},"injectables/SchemaService.html":{},"entities/User.html":{},"miscellaneous/variables.html":{}}}],["defaultjoboptions",{"_index":414,"title":{},"body":{"modules/AuthModule.html":{},"modules/PaymentModule.html":{}}}],["defaultraw",{"_index":572,"title":{},"body":{"classes/BaseEntity.html":{}}}],["defaults",{"_index":905,"title":{},"body":{"modules/EmailModule.html":{}}}],["defined",{"_index":36,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppRedisService.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthResponseDto.html":{},"injectables/AuthService.html":{},"classes/BaseEntity.html":{},"classes/CatchEverythingFilter.html":{},"classes/ChangePasswordDto.html":{},"injectables/CloudinaryService.html":{},"injectables/CreateUserCommand.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserResponseDto.html":{},"classes/EmailService.html":{},"classes/ForgotPasswordDto.html":{},"classes/GetProfileResponseDto.html":{},"injectables/HttpClientService.html":{},"interfaces/IPaymentService.html":{},"interfaces/IStrorageService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"injectables/MorganMiddleware.html":{},"classes/PasswordResetEmailConsumer.html":{},"modules/PaymentModule.html":{},"classes/RefreshTokenDto.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/RequestContextMiddleware.html":{},"classes/ResetPasswordDto.html":{},"guards/RoleGuard.html":{},"injectables/S3Service.html":{},"injectables/SchemaService.html":{},"modules/StorageModule.html":{},"injectables/StripeService.html":{},"injectables/SuccessResponseInterceptor.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/UsersSubscriber.html":{}}}],["delay",{"_index":419,"title":{},"body":{"modules/AuthModule.html":{},"modules/PaymentModule.html":{}}}],["delete",{"_index":208,"title":{},"body":{"injectables/AppRedisService.html":{},"classes/BaseEntity.html":{},"miscellaneous/enumerations.html":{}}}],["delete(key",{"_index":222,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["deleted",{"_index":228,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["deletedat",{"_index":567,"title":{},"body":{"classes/BaseEntity.html":{}}}],["deletemany",{"_index":209,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["deletemany(keys",{"_index":231,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["deleting",{"_index":298,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["dependencies",{"_index":54,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AppRedisModule.html":{},"modules/AuthModule.html":{},"modules/EmailModule.html":{},"modules/HttpClientModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":224,"title":{},"body":{"injectables/AppRedisService.html":{},"controllers/AuthController.html":{},"classes/AuthResponseDto.html":{},"classes/ChangePasswordDto.html":{},"injectables/CreateUserCommand.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserResponseDto.html":{},"classes/GetProfileResponseDto.html":{},"classes/LoginDto.html":{},"classes/RefreshTokenDto.html":{},"classes/ResetPasswordDto.html":{},"properties.html":{}}}],["details",{"_index":1038,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["dictionary",{"_index":1242,"title":{},"body":{"injectables/S3Service.html":{},"dependencies.html":{}}}],["dir",{"_index":908,"title":{},"body":{"modules/EmailModule.html":{}}}],["disable",{"_index":505,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["document",{"_index":1032,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["documentation",{"_index":1550,"title":{},"body":{"coverage.html":{}}}],["doe",{"_index":864,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["doe'})@isstring()@isnotempty",{"_index":842,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["don't",{"_index":1033,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["driver",{"_index":132,"title":{},"body":{"modules/AppModule.html":{},"modules/PaymentModule.html":{},"modules/StorageModule.html":{}}}],["dto",{"_index":350,"title":{},"body":{"controllers/AuthController.html":{}}}],["dto.ts",{"_index":1161,"title":{},"body":{"classes/RefreshTokenDto.html":{},"coverage.html":{}}}],["dto.ts:11",{"_index":1164,"title":{},"body":{"classes/RefreshTokenDto.html":{}}}],["dto/change",{"_index":1434,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dto/create",{"_index":1433,"title":{},"body":{"controllers/UsersController.html":{}}}],["dto/forgot",{"_index":351,"title":{},"body":{"controllers/AuthController.html":{}}}],["dto/login.dto",{"_index":347,"title":{},"body":{"controllers/AuthController.html":{}}}],["dto/refresh",{"_index":348,"title":{},"body":{"controllers/AuthController.html":{}}}],["dto/reset",{"_index":353,"title":{},"body":{"controllers/AuthController.html":{}}}],["dto/update",{"_index":1435,"title":{},"body":{"controllers/UsersController.html":{}}}],["during",{"_index":1039,"title":{},"body":{"injectables/JwtStrategy.html":{},"classes/RefreshTokenDto.html":{}}}],["dynamicmodule",{"_index":1133,"title":{},"body":{"modules/PaymentModule.html":{},"modules/StorageModule.html":{}}}],["e",{"_index":767,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["e.g",{"_index":691,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/ResetPasswordDto.html":{}}}],["elsewhere",{"_index":1036,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["em",{"_index":764,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["email",{"_index":374,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CreateUserCommand.html":{},"classes/CreateUserDto.html":{},"classes/EmailService.html":{},"classes/ForgotPasswordDto.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"classes/PasswordResetEmailConsumer.html":{},"classes/UpdateProfileDto.html":{},"entities/User.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["email.service",{"_index":890,"title":{},"body":{"modules/EmailModule.html":{}}}],["email_from_name",{"_index":893,"title":{},"body":{"modules/EmailModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["emailmodule",{"_index":885,"title":{"modules/EmailModule.html":{}},"body":{"modules/EmailModule.html":{},"modules.html":{},"overview.html":{}}}],["emailregex",{"_index":801,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["emailregex.test(email",{"_index":803,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["emailservice",{"_index":888,"title":{"classes/EmailService.html":{}},"body":{"modules/EmailModule.html":{},"classes/EmailService.html":{},"classes/PasswordResetEmailConsumer.html":{},"coverage.html":{},"overview.html":{}}}],["emailsubjectenum",{"_index":1114,"title":{},"body":{"classes/PasswordResetEmailConsumer.html":{},"miscellaneous/enumerations.html":{}}}],["emailsubjectenum.password_reset",{"_index":1123,"title":{},"body":{"classes/PasswordResetEmailConsumer.html":{}}}],["emailtemplateenum",{"_index":1115,"title":{},"body":{"classes/PasswordResetEmailConsumer.html":{},"miscellaneous/enumerations.html":{}}}],["emailtemplateenum.password_reset",{"_index":1124,"title":{},"body":{"classes/PasswordResetEmailConsumer.html":{}}}],["enforcing",{"_index":1026,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["ensuredatabase",{"_index":144,"title":{},"body":{"modules/AppModule.html":{}}}],["entities",{"_index":1363,"title":{},"body":{"entities/User.html":{},"overview.html":{}}}],["entities/user.entity",{"_index":881,"title":{},"body":{"classes/CreateUserResponseDto.html":{},"classes/GetProfileResponseDto.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/UsersSubscriber.html":{}}}],["entity",{"_index":1362,"title":{"entities/User.html":{}},"body":{"entities/User.html":{},"coverage.html":{}}}],["entitydata",{"_index":1480,"title":{},"body":{"injectables/UsersService.html":{}}}],["entitymanager",{"_index":762,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["entityname",{"_index":1531,"title":{},"body":{"injectables/UsersSubscriber.html":{}}}],["entityrepository",{"_index":1467,"title":{},"body":{"injectables/UsersService.html":{}}}],["enum",{"_index":851,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/User.html":{}}}],["enum({items",{"_index":1394,"title":{},"body":{"entities/User.html":{}}}],["enumerations",{"_index":1679,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["err",{"_index":1003,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["error",{"_index":527,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CloudinaryService.html":{},"injectables/CreateUserCommand.html":{},"injectables/JwtAuthGuard.html":{},"miscellaneous/typealiases.html":{}}}],["error('invalid",{"_index":804,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["error(`unsupported",{"_index":1317,"title":{},"body":{"modules/StorageModule.html":{}}}],["error.message",{"_index":529,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CreateUserCommand.html":{}}}],["error.stack",{"_index":745,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["error=${error.message",{"_index":744,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["errorcode",{"_index":663,"title":{},"body":{"classes/CatchEverythingFilter.html":{},"interfaces/ErrorResponse.html":{}}}],["errorlog",{"_index":198,"title":{},"body":{"modules/AppRedisModule.html":{}}}],["errormessage",{"_index":660,"title":{},"body":{"classes/CatchEverythingFilter.html":{}}}],["errorobject",{"_index":1011,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["errorresponse",{"_index":632,"title":{"interfaces/ErrorResponse.html":{}},"body":{"classes/CatchEverythingFilter.html":{},"interfaces/ErrorResponse.html":{},"coverage.html":{}}}],["eslint",{"_index":504,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["eslint/no",{"_index":509,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["event",{"_index":1351,"title":{},"body":{"injectables/StripeService.html":{}}}],["eventargs",{"_index":1526,"title":{},"body":{"injectables/UsersSubscriber.html":{}}}],["eventid",{"_index":1347,"title":{},"body":{"injectables/StripeService.html":{}}}],["eventsubscriber",{"_index":1538,"title":{},"body":{"injectables/UsersSubscriber.html":{}}}],["evt",{"_index":1328,"title":{},"body":{"injectables/StripeService.html":{}}}],["evt?.id",{"_index":1348,"title":{},"body":{"injectables/StripeService.html":{}}}],["ex",{"_index":286,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["example",{"_index":430,"title":{},"body":{"classes/AuthResponseDto.html":{},"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserResponseDto.html":{},"classes/ForgotPasswordDto.html":{},"classes/GetProfileResponseDto.html":{},"classes/LoginDto.html":{},"classes/RefreshTokenDto.html":{},"classes/ResetPasswordDto.html":{}}}],["exception",{"_index":615,"title":{},"body":{"classes/CatchEverythingFilter.html":{}}}],["exception.getresponse",{"_index":644,"title":{},"body":{"classes/CatchEverythingFilter.html":{}}}],["exception.getstatus",{"_index":669,"title":{},"body":{"classes/CatchEverythingFilter.html":{}}}],["exception.message",{"_index":646,"title":{},"body":{"classes/CatchEverythingFilter.html":{}}}],["exception.response?.status",{"_index":671,"title":{},"body":{"classes/CatchEverythingFilter.html":{}}}],["exceptionfilter",{"_index":600,"title":{},"body":{"classes/CatchEverythingFilter.html":{}}}],["exceptionresponse",{"_index":643,"title":{},"body":{"classes/CatchEverythingFilter.html":{}}}],["exceptionresponse?.error",{"_index":652,"title":{},"body":{"classes/CatchEverythingFilter.html":{}}}],["exceptionresponse?.message",{"_index":645,"title":{},"body":{"classes/CatchEverythingFilter.html":{}}}],["executioncontext",{"_index":999,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"guards/RoleGuard.html":{},"injectables/SuccessResponseInterceptor.html":{}}}],["exist",{"_index":255,"title":{},"body":{"injectables/AppRedisService.html":{},"classes/CatchEverythingFilter.html":{}}}],["existence",{"_index":295,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["exists",{"_index":210,"title":{},"body":{"injectables/AppRedisService.html":{},"injectables/UsersService.html":{}}}],["exists(key",{"_index":235,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["expiresin",{"_index":411,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/S3Service.html":{}}}],["exponential",{"_index":418,"title":{},"body":{"modules/AuthModule.html":{},"modules/PaymentModule.html":{}}}],["export",{"_index":21,"title":{},"body":{"interfaces/ApiResponse.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AppRedisModule.html":{},"injectables/AppRedisService.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/AuthResponseDto.html":{},"injectables/AuthService.html":{},"classes/BaseEntity.html":{},"classes/CatchEverythingFilter.html":{},"classes/ChangePasswordDto.html":{},"injectables/CloudinaryService.html":{},"injectables/CreateUserCommand.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserResponseDto.html":{},"modules/EmailModule.html":{},"classes/EmailService.html":{},"interfaces/ErrorResponse.html":{},"classes/ForgotPasswordDto.html":{},"classes/GetProfileResponseDto.html":{},"modules/HttpClientModule.html":{},"injectables/HttpClientService.html":{},"interfaces/IPaymentService.html":{},"interfaces/IStrorageService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"injectables/MorganMiddleware.html":{},"classes/PasswordResetEmailConsumer.html":{},"modules/PaymentModule.html":{},"classes/RefreshTokenDto.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/RequestContextMiddleware.html":{},"classes/ResetPasswordDto.html":{},"guards/RoleGuard.html":{},"injectables/S3Service.html":{},"injectables/SchemaService.html":{},"modules/StorageModule.html":{},"injectables/StripeService.html":{},"injectables/SuccessResponseInterceptor.html":{},"classes/UpdateProfileDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/UsersSubscriber.html":{}}}],["exporter",{"_index":1750,"title":{},"body":{"miscellaneous/variables.html":{}}}],["exports",{"_index":59,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRedisModule.html":{},"modules/AuthModule.html":{},"modules/EmailModule.html":{},"modules/HttpClientModule.html":{},"modules/PaymentModule.html":{},"modules/StorageModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["express",{"_index":104,"title":{},"body":{"modules/AppModule.html":{},"injectables/RequestContextMiddleware.html":{},"dependencies.html":{}}}],["expressadapter",{"_index":117,"title":{},"body":{"modules/AppModule.html":{}}}],["extends",{"_index":753,"title":{},"body":{"injectables/CreateUserCommand.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/PasswordResetEmailConsumer.html":{},"classes/UpdateProfileDto.html":{},"entities/User.html":{}}}],["extract",{"_index":1023,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt",{"_index":1048,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":1053,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["eyjhbgcioijiuzi1niisinr5cci6ikpxvcj9",{"_index":431,"title":{},"body":{"classes/AuthResponseDto.html":{},"classes/RefreshTokenDto.html":{},"classes/ResetPasswordDto.html":{}}}],["eyjhbgcioijiuzi1niisinr5cci6ikpxvcj9'})@isstring()@isnotempty",{"_index":1163,"title":{},"body":{"classes/RefreshTokenDto.html":{}}}],["eyjhbgcioijiuzi1niisinr5cci6ikpxvcj9...'})@isstring()@isjwt()@isnotempty",{"_index":1212,"title":{},"body":{"classes/ResetPasswordDto.html":{}}}],["f",{"_index":772,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["failed",{"_index":743,"title":{},"body":{"injectables/CloudinaryService.html":{},"injectables/CreateUserCommand.html":{}}}],["failhandler",{"_index":500,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/UsersService.html":{}}}],["false",{"_index":253,"title":{},"body":{"injectables/AppRedisService.html":{},"injectables/AuthService.html":{},"injectables/HttpClientService.html":{},"injectables/JwtStrategy.html":{},"entities/User.html":{},"injectables/UsersService.html":{}}}],["fetched",{"_index":884,"title":{},"body":{"classes/CreateUserResponseDto.html":{},"classes/GetProfileResponseDto.html":{},"controllers/UsersController.html":{}}}],["file",{"_index":5,"title":{},"body":{"interfaces/ApiResponse.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AppRedisModule.html":{},"injectables/AppRedisService.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/AuthResponseDto.html":{},"injectables/AuthService.html":{},"classes/BaseEntity.html":{},"classes/CatchEverythingFilter.html":{},"classes/ChangePasswordDto.html":{},"injectables/CloudinaryService.html":{},"injectables/CreateUserCommand.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserResponseDto.html":{},"modules/EmailModule.html":{},"classes/EmailService.html":{},"interfaces/ErrorResponse.html":{},"classes/ForgotPasswordDto.html":{},"classes/GetProfileResponseDto.html":{},"modules/HttpClientModule.html":{},"injectables/HttpClientService.html":{},"interfaces/IPaymentService.html":{},"interfaces/IStrorageService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"injectables/MorganMiddleware.html":{},"classes/PasswordResetEmailConsumer.html":{},"modules/PaymentModule.html":{},"classes/RefreshTokenDto.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/RequestContextMiddleware.html":{},"classes/ResetPasswordDto.html":{},"guards/RoleGuard.html":{},"injectables/S3Service.html":{},"injectables/SchemaService.html":{},"modules/StorageModule.html":{},"injectables/StripeService.html":{},"injectables/SuccessResponseInterceptor.html":{},"classes/UpdateProfileDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/UsersSubscriber.html":{},"coverage.html":{}}}],["file.buffer",{"_index":1267,"title":{},"body":{"injectables/S3Service.html":{}}}],["file.mimetype",{"_index":1269,"title":{},"body":{"injectables/S3Service.html":{}}}],["filecategory",{"_index":708,"title":{},"body":{"injectables/CloudinaryService.html":{},"interfaces/IStrorageService.html":{},"injectables/S3Service.html":{}}}],["filecategory}/${this.nanoid()}_${file.originalname",{"_index":1263,"title":{},"body":{"injectables/S3Service.html":{}}}],["filename=\"${file.originalname",{"_index":731,"title":{},"body":{"injectables/CloudinaryService.html":{},"injectables/S3Service.html":{}}}],["filter",{"_index":590,"title":{},"body":{"classes/BaseEntity.html":{}}}],["filterquery",{"_index":1475,"title":{},"body":{"injectables/UsersService.html":{}}}],["find",{"_index":651,"title":{},"body":{"classes/CatchEverythingFilter.html":{}}}],["findone",{"_index":1465,"title":{},"body":{"injectables/UsersService.html":{}}}],["findone(query",{"_index":1474,"title":{},"body":{"injectables/UsersService.html":{}}}],["findoneorfailoptions",{"_index":1476,"title":{},"body":{"injectables/UsersService.html":{}}}],["first",{"_index":773,"title":{},"body":{"injectables/CreateUserCommand.html":{},"classes/CreateUserDto.html":{},"entities/User.html":{}}}],["firstname",{"_index":549,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CreateUserCommand.html":{},"classes/CreateUserDto.html":{},"classes/PasswordResetEmailConsumer.html":{},"entities/User.html":{}}}],["flags",{"_index":813,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["folder",{"_index":739,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["forbiddenexception",{"_index":628,"title":{},"body":{"classes/CatchEverythingFilter.html":{},"guards/RoleGuard.html":{},"miscellaneous/typealiases.html":{}}}],["forceutctimezone",{"_index":151,"title":{},"body":{"modules/AppModule.html":{}}}],["forgotpassword",{"_index":309,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["forgotpassword(body",{"_index":313,"title":{},"body":{"controllers/AuthController.html":{}}}],["forgotpassword(email",{"_index":452,"title":{},"body":{"injectables/AuthService.html":{}}}],["forgotpassworddto",{"_index":314,"title":{"classes/ForgotPasswordDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/ForgotPasswordDto.html":{},"coverage.html":{}}}],["forkedem",{"_index":799,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["forkedem.transactional(async",{"_index":806,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["form",{"_index":722,"title":{},"body":{"injectables/CloudinaryService.html":{},"interfaces/IStrorageService.html":{},"injectables/S3Service.html":{},"dependencies.html":{}}}],["format",{"_index":805,"title":{},"body":{"injectables/CreateUserCommand.html":{},"injectables/S3Service.html":{},"dependencies.html":{}}}],["formaturl",{"_index":1257,"title":{},"body":{"injectables/S3Service.html":{}}}],["formaturl(signedurlobject",{"_index":1281,"title":{},"body":{"injectables/S3Service.html":{}}}],["forroutes",{"_index":183,"title":{},"body":{"modules/AppModule.html":{}}}],["found",{"_index":282,"title":{},"body":{"injectables/AppRedisService.html":{},"injectables/AuthService.html":{},"classes/CatchEverythingFilter.html":{},"injectables/JwtStrategy.html":{},"injectables/UsersService.html":{}}}],["fromenv",{"_index":1250,"title":{},"body":{"injectables/S3Service.html":{}}}],["function",{"_index":1080,"title":{},"body":{"injectables/MorganMiddleware.html":{},"coverage.html":{}}}],["functions",{"_index":1695,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["generateslug",{"_index":1568,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["generateslug(text",{"_index":1702,"title":{},"body":{"miscellaneous/functions.html":{}}}],["generator",{"_index":1289,"title":{},"body":{"injectables/SchemaService.html":{}}}],["generator.updateschema",{"_index":1291,"title":{},"body":{"injectables/SchemaService.html":{}}}],["get('profile",{"_index":1444,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('profile')@httpcode(httpstatus.ok)@apioperation({summary",{"_index":1423,"title":{},"body":{"controllers/UsersController.html":{}}}],["get()@httpcode(httpstatus.ok)@public()@apioperation({summary",{"_index":31,"title":{},"body":{"controllers/AppController.html":{}}}],["get(key",{"_index":237,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["geterrorcode",{"_index":602,"title":{},"body":{"classes/CatchEverythingFilter.html":{}}}],["geterrorcode(exception",{"_index":616,"title":{},"body":{"classes/CatchEverythingFilter.html":{}}}],["geterrormessage",{"_index":603,"title":{},"body":{"classes/CatchEverythingFilter.html":{}}}],["geterrormessage(exception",{"_index":619,"title":{},"body":{"classes/CatchEverythingFilter.html":{}}}],["geterrorname",{"_index":604,"title":{},"body":{"classes/CatchEverythingFilter.html":{}}}],["geterrorname(exception",{"_index":621,"title":{},"body":{"classes/CatchEverythingFilter.html":{}}}],["gethello",{"_index":302,"title":{},"body":{"injectables/AppService.html":{}}}],["gethttpstatus",{"_index":605,"title":{},"body":{"classes/CatchEverythingFilter.html":{}}}],["gethttpstatus(exception",{"_index":623,"title":{},"body":{"classes/CatchEverythingFilter.html":{}}}],["getnodeautoinstrumentations",{"_index":1747,"title":{},"body":{"miscellaneous/variables.html":{}}}],["getprofile",{"_index":1410,"title":{},"body":{"controllers/UsersController.html":{}}}],["getprofile(@request",{"_index":1445,"title":{},"body":{"controllers/UsersController.html":{}}}],["getprofile(req",{"_index":1422,"title":{},"body":{"controllers/UsersController.html":{}}}],["getprofileresponsedto",{"_index":882,"title":{"classes/GetProfileResponseDto.html":{}},"body":{"classes/CreateUserResponseDto.html":{},"classes/GetProfileResponseDto.html":{},"coverage.html":{}}}],["getqueuetoken",{"_index":1142,"title":{},"body":{"modules/PaymentModule.html":{}}}],["getqueuetoken(template_queue_name",{"_index":1159,"title":{},"body":{"modules/PaymentModule.html":{}}}],["gets3connectiontoken",{"_index":1303,"title":{},"body":{"modules/StorageModule.html":{}}}],["getsubscribedentities",{"_index":1521,"title":{},"body":{"injectables/UsersSubscriber.html":{}}}],["getting",{"_index":281,"title":{"index.html":{}},"body":{"injectables/AppRedisService.html":{}}}],["global",{"_index":407,"title":{},"body":{"modules/AuthModule.html":{}}}],["golevelup/nestjs",{"_index":108,"title":{},"body":{"modules/AppModule.html":{},"modules/PaymentModule.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"guards/RoleGuard.html":{},"injectables/StripeService.html":{},"injectables/SuccessResponseInterceptor.html":{},"dependencies.html":{}}}],["graph",{"_index":1715,"title":{},"body":{"modules.html":{}}}],["guard",{"_index":1216,"title":{"guards/RoleGuard.html":{}},"body":{"coverage.html":{},"overview.html":{}}}],["guards",{"_index":1218,"title":{},"body":{"guards/RoleGuard.html":{}}}],["guards/jwt",{"_index":400,"title":{},"body":{"modules/AuthModule.html":{}}}],["guards/local",{"_index":342,"title":{},"body":{"controllers/AuthController.html":{}}}],["handledexception",{"_index":612,"title":{},"body":{"classes/CatchEverythingFilter.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["handlepaymentintentsucceeded",{"_index":1320,"title":{},"body":{"injectables/StripeService.html":{}}}],["handlepaymentintentsucceeded(evt",{"_index":1324,"title":{},"body":{"injectables/StripeService.html":{}}}],["handlerequest",{"_index":994,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["handlerequest(err",{"_index":1001,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["hash",{"_index":1252,"title":{},"body":{"injectables/S3Service.html":{}}}],["hash.bind(null",{"_index":1278,"title":{},"body":{"injectables/S3Service.html":{}}}],["hashed",{"_index":1386,"title":{},"body":{"entities/User.html":{}}}],["hashedpassword",{"_index":562,"title":{},"body":{"injectables/AuthService.html":{}}}],["hashpassword",{"_index":1522,"title":{},"body":{"injectables/UsersSubscriber.html":{}}}],["hashpassword(user",{"_index":1532,"title":{},"body":{"injectables/UsersSubscriber.html":{}}}],["head",{"_index":1687,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["hello",{"_index":304,"title":{},"body":{"injectables/AppService.html":{}}}],["helmet",{"_index":1651,"title":{},"body":{"dependencies.html":{}}}],["here",{"_index":1022,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["hexadecimallowercase",{"_index":1241,"title":{},"body":{"injectables/S3Service.html":{}}}],["hooks",{"_index":1621,"title":{},"body":{"dependencies.html":{}}}],["host",{"_index":135,"title":{},"body":{"modules/AppModule.html":{},"classes/CatchEverythingFilter.html":{},"modules/EmailModule.html":{}}}],["host.switchtohttp",{"_index":637,"title":{},"body":{"classes/CatchEverythingFilter.html":{}}}],["http",{"_index":941,"title":{},"body":{"modules/HttpClientModule.html":{},"injectables/HttpClientService.html":{},"injectables/MorganMiddleware.html":{},"injectables/S3Service.html":{},"dependencies.html":{}}}],["http.agent",{"_index":953,"title":{},"body":{"injectables/HttpClientService.html":{}}}],["httpadapter",{"_index":634,"title":{},"body":{"classes/CatchEverythingFilter.html":{}}}],["httpadapter.getrequesturl(request",{"_index":642,"title":{},"body":{"classes/CatchEverythingFilter.html":{}}}],["httpadapter.reply(response",{"_index":658,"title":{},"body":{"classes/CatchEverythingFilter.html":{}}}],["httpadapterhost",{"_index":608,"title":{},"body":{"classes/CatchEverythingFilter.html":{}}}],["httpagent",{"_index":944,"title":{},"body":{"injectables/HttpClientService.html":{}}}],["httpclientmodule",{"_index":931,"title":{"modules/HttpClientModule.html":{}},"body":{"modules/HttpClientModule.html":{},"modules.html":{},"overview.html":{}}}],["httpclientservice",{"_index":935,"title":{"injectables/HttpClientService.html":{}},"body":{"modules/HttpClientModule.html":{},"injectables/HttpClientService.html":{},"coverage.html":{},"overview.html":{}}}],["httpclientservice.name",{"_index":965,"title":{},"body":{"injectables/HttpClientService.html":{}}}],["httpcode",{"_index":40,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["httpcode(httpstatus.ok",{"_index":48,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["httpexception",{"_index":627,"title":{},"body":{"classes/CatchEverythingFilter.html":{},"miscellaneous/typealiases.html":{}}}],["httpmethod",{"_index":1272,"title":{},"body":{"injectables/S3Service.html":{}}}],["httpmodule",{"_index":939,"title":{},"body":{"modules/HttpClientModule.html":{}}}],["httprequest",{"_index":1255,"title":{},"body":{"injectables/S3Service.html":{}}}],["httprequestmethodenum",{"_index":983,"title":{},"body":{"interfaces/IStrorageService.html":{},"injectables/S3Service.html":{},"miscellaneous/enumerations.html":{}}}],["httprequestmethodenum.get",{"_index":1273,"title":{},"body":{"injectables/S3Service.html":{}}}],["httpresponse",{"_index":1184,"title":{},"body":{"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/SuccessResponseInterceptor.html":{}}}],["httpresponse.statuscode",{"_index":1189,"title":{},"body":{"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/SuccessResponseInterceptor.html":{}}}],["https",{"_index":957,"title":{},"body":{"injectables/HttpClientService.html":{}}}],["https.agent",{"_index":956,"title":{},"body":{"injectables/HttpClientService.html":{}}}],["https://${this.s3bucket}.s3.${this.s3region}.amazonaws.com/${key",{"_index":1270,"title":{},"body":{"injectables/S3Service.html":{}}}],["https://olaban",{"_index":1710,"title":{},"body":{"index.html":{}}}],["httpsagent",{"_index":945,"title":{},"body":{"injectables/HttpClientService.html":{}}}],["httpservice",{"_index":948,"title":{},"body":{"injectables/HttpClientService.html":{}}}],["httpstatus",{"_index":18,"title":{},"body":{"interfaces/ApiResponse.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/CatchEverythingFilter.html":{},"controllers/UsersController.html":{}}}],["httpstatus.bad_gateway",{"_index":672,"title":{},"body":{"classes/CatchEverythingFilter.html":{}}}],["httpstatus.created",{"_index":1443,"title":{},"body":{"controllers/UsersController.html":{}}}],["httpstatus.not_found",{"_index":654,"title":{},"body":{"classes/CatchEverythingFilter.html":{}}}],["httpstatus.ok",{"_index":364,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["i.e",{"_index":1034,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["ianatimezonedatabaseenum",{"_index":1681,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["id",{"_index":536,"title":{},"body":{"injectables/AuthService.html":{},"classes/BaseEntity.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/StripeService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["id=\"${intent.id",{"_index":1352,"title":{},"body":{"injectables/StripeService.html":{}}}],["identifier",{"_index":1551,"title":{},"body":{"coverage.html":{}}}],["ignoreexpiration",{"_index":1054,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["illinois",{"_index":867,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["illinois'})@isstring()@isoptional",{"_index":854,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["implementation",{"_index":1037,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["implemented",{"_index":1041,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["implements",{"_index":168,"title":{},"body":{"modules/AppModule.html":{},"classes/CatchEverythingFilter.html":{},"injectables/CloudinaryService.html":{},"injectables/MorganMiddleware.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/RequestContextMiddleware.html":{},"guards/RoleGuard.html":{},"injectables/S3Service.html":{},"injectables/SchemaService.html":{},"injectables/StripeService.html":{},"injectables/SuccessResponseInterceptor.html":{},"injectables/UsersSubscriber.html":{}}}],["import",{"_index":19,"title":{},"body":{"interfaces/ApiResponse.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AppRedisModule.html":{},"injectables/AppRedisService.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/AuthResponseDto.html":{},"injectables/AuthService.html":{},"classes/BaseEntity.html":{},"classes/CatchEverythingFilter.html":{},"classes/ChangePasswordDto.html":{},"injectables/CloudinaryService.html":{},"injectables/CreateUserCommand.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserResponseDto.html":{},"modules/EmailModule.html":{},"classes/EmailService.html":{},"classes/ForgotPasswordDto.html":{},"classes/GetProfileResponseDto.html":{},"modules/HttpClientModule.html":{},"injectables/HttpClientService.html":{},"interfaces/IPaymentService.html":{},"interfaces/IStrorageService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"injectables/MorganMiddleware.html":{},"classes/PasswordResetEmailConsumer.html":{},"modules/PaymentModule.html":{},"classes/RefreshTokenDto.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/RequestContextMiddleware.html":{},"classes/ResetPasswordDto.html":{},"guards/RoleGuard.html":{},"injectables/S3Service.html":{},"injectables/SchemaService.html":{},"modules/StorageModule.html":{},"injectables/StripeService.html":{},"injectables/SuccessResponseInterceptor.html":{},"classes/UpdateProfileDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/UsersSubscriber.html":{}}}],["imports",{"_index":72,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRedisModule.html":{},"modules/AuthModule.html":{},"modules/EmailModule.html":{},"modules/HttpClientModule.html":{},"modules/PaymentModule.html":{},"modules/StorageModule.html":{},"modules/UsersModule.html":{}}}],["include",{"_index":687,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/ResetPasswordDto.html":{}}}],["increment",{"_index":211,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["increment(key",{"_index":239,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["incrresult",{"_index":289,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["incrresult[1",{"_index":291,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["index",{"_index":8,"title":{"index.html":{}},"body":{"interfaces/ApiResponse.html":{},"controllers/AppController.html":{},"injectables/AppRedisService.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthResponseDto.html":{},"injectables/AuthService.html":{},"classes/BaseEntity.html":{},"classes/CatchEverythingFilter.html":{},"classes/ChangePasswordDto.html":{},"injectables/CloudinaryService.html":{},"injectables/CreateUserCommand.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserResponseDto.html":{},"classes/EmailService.html":{},"interfaces/ErrorResponse.html":{},"classes/ForgotPasswordDto.html":{},"classes/GetProfileResponseDto.html":{},"injectables/HttpClientService.html":{},"interfaces/IPaymentService.html":{},"interfaces/IStrorageService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"injectables/MorganMiddleware.html":{},"classes/PasswordResetEmailConsumer.html":{},"classes/RefreshTokenDto.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/RequestContextMiddleware.html":{},"classes/ResetPasswordDto.html":{},"guards/RoleGuard.html":{},"injectables/S3Service.html":{},"injectables/SchemaService.html":{},"injectables/StripeService.html":{},"injectables/SuccessResponseInterceptor.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/UsersSubscriber.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["indicating",{"_index":433,"title":{},"body":{"classes/AuthResponseDto.html":{},"classes/CreateUserResponseDto.html":{},"classes/GetProfileResponseDto.html":{}}}],["inestapplication",{"_index":1707,"title":{},"body":{"miscellaneous/functions.html":{}}}],["info",{"_index":3,"title":{},"body":{"interfaces/ApiResponse.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AppRedisModule.html":{},"injectables/AppRedisService.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/AuthResponseDto.html":{},"injectables/AuthService.html":{},"classes/BaseEntity.html":{},"classes/CatchEverythingFilter.html":{},"classes/ChangePasswordDto.html":{},"injectables/CloudinaryService.html":{},"injectables/CreateUserCommand.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserResponseDto.html":{},"modules/EmailModule.html":{},"classes/EmailService.html":{},"interfaces/ErrorResponse.html":{},"classes/ForgotPasswordDto.html":{},"classes/GetProfileResponseDto.html":{},"modules/HttpClientModule.html":{},"injectables/HttpClientService.html":{},"interfaces/IPaymentService.html":{},"interfaces/IStrorageService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"injectables/MorganMiddleware.html":{},"classes/PasswordResetEmailConsumer.html":{},"modules/PaymentModule.html":{},"classes/RefreshTokenDto.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/RequestContextMiddleware.html":{},"classes/ResetPasswordDto.html":{},"guards/RoleGuard.html":{},"injectables/S3Service.html":{},"injectables/SchemaService.html":{},"modules/StorageModule.html":{},"injectables/StripeService.html":{},"injectables/SuccessResponseInterceptor.html":{},"classes/UpdateProfileDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/UsersSubscriber.html":{}}}],["info?.message",{"_index":1013,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["info?.name",{"_index":1012,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["initialized",{"_index":1751,"title":{},"body":{"miscellaneous/variables.html":{}}}],["inject",{"_index":159,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRedisModule.html":{},"injectables/AppRedisService.html":{},"modules/AuthModule.html":{},"classes/CatchEverythingFilter.html":{},"injectables/CloudinaryService.html":{},"modules/EmailModule.html":{},"classes/EmailService.html":{},"injectables/HttpClientService.html":{},"injectables/MorganMiddleware.html":{},"classes/PasswordResetEmailConsumer.html":{},"modules/PaymentModule.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/S3Service.html":{},"injectables/SchemaService.html":{},"modules/StorageModule.html":{},"injectables/StripeService.html":{},"injectables/SuccessResponseInterceptor.html":{}}}],["inject(logger",{"_index":261,"title":{},"body":{"injectables/AppRedisService.html":{},"classes/CatchEverythingFilter.html":{},"injectables/CloudinaryService.html":{},"classes/EmailService.html":{},"injectables/HttpClientService.html":{},"classes/PasswordResetEmailConsumer.html":{},"injectables/S3Service.html":{},"injectables/SchemaService.html":{},"injectables/StripeService.html":{}}}],["inject(mailerservice",{"_index":920,"title":{},"body":{"classes/EmailService.html":{}}}],["injectable",{"_index":202,"title":{"injectables/AppRedisService.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/CloudinaryService.html":{},"injectables/CreateUserCommand.html":{},"injectables/HttpClientService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/MorganMiddleware.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/RequestContextMiddleware.html":{},"injectables/S3Service.html":{},"injectables/SchemaService.html":{},"injectables/StripeService.html":{},"injectables/SuccessResponseInterceptor.html":{},"injectables/UsersService.html":{},"injectables/UsersSubscriber.html":{}},"body":{"injectables/AppRedisService.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/CloudinaryService.html":{},"injectables/CreateUserCommand.html":{},"injectables/HttpClientService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/MorganMiddleware.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/RequestContextMiddleware.html":{},"guards/RoleGuard.html":{},"injectables/S3Service.html":{},"injectables/SchemaService.html":{},"injectables/StripeService.html":{},"injectables/SuccessResponseInterceptor.html":{},"injectables/UsersService.html":{},"injectables/UsersSubscriber.html":{},"coverage.html":{}}}],["injectables",{"_index":203,"title":{},"body":{"injectables/AppRedisService.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/CloudinaryService.html":{},"injectables/CreateUserCommand.html":{},"injectables/HttpClientService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/MorganMiddleware.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/RequestContextMiddleware.html":{},"injectables/S3Service.html":{},"injectables/SchemaService.html":{},"injectables/StripeService.html":{},"injectables/SuccessResponseInterceptor.html":{},"injectables/UsersService.html":{},"injectables/UsersSubscriber.html":{},"overview.html":{}}}],["injectqueue",{"_index":477,"title":{},"body":{"injectables/AuthService.html":{},"injectables/StripeService.html":{}}}],["injectqueue(password_reset_email_queue_name",{"_index":483,"title":{},"body":{"injectables/AuthService.html":{}}}],["injectqueue(template_queue_name",{"_index":1332,"title":{},"body":{"injectables/StripeService.html":{}}}],["injectrepository",{"_index":1484,"title":{},"body":{"injectables/UsersService.html":{}}}],["injectrepository(user",{"_index":1485,"title":{},"body":{"injectables/UsersService.html":{}}}],["injects3",{"_index":1240,"title":{},"body":{"injectables/S3Service.html":{}}}],["injectstripeclient",{"_index":1329,"title":{},"body":{"injectables/StripeService.html":{}}}],["inputs",{"_index":786,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["instanceof",{"_index":528,"title":{},"body":{"injectables/AuthService.html":{},"classes/CatchEverythingFilter.html":{}}}],["instrumentations",{"_index":1618,"title":{},"body":{"dependencies.html":{},"miscellaneous/variables.html":{}}}],["intent",{"_index":1340,"title":{},"body":{"injectables/StripeService.html":{}}}],["intent.ts",{"_index":1586,"title":{},"body":{"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["intercept",{"_index":1167,"title":{},"body":{"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/SuccessResponseInterceptor.html":{}}}],["intercept(context",{"_index":1169,"title":{},"body":{"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/SuccessResponseInterceptor.html":{}}}],["interface",{"_index":0,"title":{"interfaces/ApiResponse.html":{},"interfaces/ErrorResponse.html":{},"interfaces/IPaymentService.html":{},"interfaces/IStrorageService.html":{}},"body":{"interfaces/ApiResponse.html":{},"interfaces/ErrorResponse.html":{},"interfaces/IPaymentService.html":{},"interfaces/IStrorageService.html":{},"coverage.html":{}}}],["interfaces",{"_index":2,"title":{},"body":{"interfaces/ApiResponse.html":{},"interfaces/ErrorResponse.html":{},"interfaces/IPaymentService.html":{},"interfaces/IStrorageService.html":{},"overview.html":{}}}],["interfaces/error",{"_index":633,"title":{},"body":{"classes/CatchEverythingFilter.html":{}}}],["interfaces/payment.interface",{"_index":1331,"title":{},"body":{"injectables/StripeService.html":{}}}],["interfaces/storage.interface",{"_index":719,"title":{},"body":{"injectables/CloudinaryService.html":{},"injectables/S3Service.html":{}}}],["ioredis",{"_index":260,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["ipaymentservice",{"_index":967,"title":{"interfaces/IPaymentService.html":{}},"body":{"interfaces/IPaymentService.html":{},"injectables/StripeService.html":{},"coverage.html":{}}}],["is_public_key",{"_index":1005,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["isblacklisted",{"_index":519,"title":{},"body":{"injectables/AuthService.html":{}}}],["isboolean",{"_index":856,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isboolean()@isoptional",{"_index":830,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isemail",{"_index":857,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/ForgotPasswordDto.html":{},"classes/LoginDto.html":{}}}],["isenum",{"_index":858,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isenum(userroleenum",{"_index":873,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isglobal",{"_index":125,"title":{},"body":{"modules/AppModule.html":{}}}],["isjwt",{"_index":1214,"title":{},"body":{"classes/ResetPasswordDto.html":{}}}],["isnotempty",{"_index":696,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/RefreshTokenDto.html":{},"classes/ResetPasswordDto.html":{}}}],["iso",{"_index":1378,"title":{},"body":{"entities/User.html":{}}}],["isoptional",{"_index":859,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["ispasswordmodified",{"_index":1523,"title":{},"body":{"injectables/UsersSubscriber.html":{}}}],["ispasswordmodified(user",{"_index":1534,"title":{},"body":{"injectables/UsersSubscriber.html":{}}}],["ispublic",{"_index":1006,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"miscellaneous/variables.html":{}}}],["isroutingerror",{"_index":647,"title":{},"body":{"classes/CatchEverythingFilter.html":{}}}],["isstring",{"_index":697,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/RefreshTokenDto.html":{},"classes/ResetPasswordDto.html":{}}}],["istrorageservice",{"_index":718,"title":{"interfaces/IStrorageService.html":{}},"body":{"injectables/CloudinaryService.html":{},"interfaces/IStrorageService.html":{},"injectables/S3Service.html":{},"coverage.html":{}}}],["it's",{"_index":1046,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["items",{"_index":1405,"title":{},"body":{"entities/User.html":{}}}],["jaeger",{"_index":1629,"title":{},"body":{"dependencies.html":{}}}],["jaegerpropagator",{"_index":1743,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ji.github.io/nest",{"_index":1711,"title":{},"body":{"index.html":{}}}],["job",{"_index":1108,"title":{},"body":{"classes/PasswordResetEmailConsumer.html":{}}}],["job.id",{"_index":1120,"title":{},"body":{"classes/PasswordResetEmailConsumer.html":{}}}],["john",{"_index":863,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["john'})@isstring()@isnotempty",{"_index":840,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["join",{"_index":896,"title":{},"body":{"modules/EmailModule.html":{}}}],["join(process.cwd",{"_index":909,"title":{},"body":{"modules/EmailModule.html":{}}}],["js",{"_index":34,"title":{},"body":{"controllers/AppController.html":{},"index.html":{}}}],["json.parse(cached",{"_index":1505,"title":{},"body":{"injectables/UsersService.html":{}}}],["json.stringify(serializable",{"_index":1512,"title":{},"body":{"injectables/UsersService.html":{}}}],["json.stringify(user",{"_index":1518,"title":{},"body":{"injectables/UsersService.html":{}}}],["jsonwebtokenerror",{"_index":474,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwt",{"_index":530,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["jwtauthguard",{"_index":399,"title":{"injectables/JwtAuthGuard.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["jwtexpiresin",{"_index":439,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtfromrequest",{"_index":1052,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtmodule",{"_index":393,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.registerasync",{"_index":406,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtnotbefore",{"_index":440,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtrefreshexpriresin",{"_index":441,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtrefreshsecret",{"_index":442,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtservice",{"_index":448,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtstrategy",{"_index":386,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["keepalive",{"_index":954,"title":{},"body":{"injectables/HttpClientService.html":{}}}],["key",{"_index":220,"title":{},"body":{"injectables/AppRedisService.html":{},"interfaces/IStrorageService.html":{},"injectables/S3Service.html":{}}}],["key=${key",{"_index":1271,"title":{},"body":{"injectables/S3Service.html":{}}}],["keys",{"_index":227,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["keys.length",{"_index":299,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["l",{"_index":776,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["lagos",{"_index":1690,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["last",{"_index":587,"title":{},"body":{"classes/BaseEntity.html":{},"injectables/CreateUserCommand.html":{},"classes/CreateUserDto.html":{},"entities/User.html":{}}}],["lastloggedin",{"_index":1070,"title":{},"body":{"injectables/LocalStrategy.html":{},"entities/User.html":{}}}],["lastname",{"_index":798,"title":{},"body":{"injectables/CreateUserCommand.html":{},"classes/CreateUserDto.html":{},"entities/User.html":{}}}],["lastvaluefrom",{"_index":958,"title":{},"body":{"injectables/HttpClientService.html":{}}}],["lastvaluefrom(this.httpservice.request",{"_index":966,"title":{},"body":{"injectables/HttpClientService.html":{}}}],["legend",{"_index":55,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRedisModule.html":{},"modules/AuthModule.html":{},"modules/EmailModule.html":{},"modules/HttpClientModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["length",{"_index":1090,"title":{},"body":{"injectables/MorganMiddleware.html":{},"entities/User.html":{}}}],["level",{"_index":1045,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["liaoliaots/nestjs",{"_index":194,"title":{},"body":{"modules/AppRedisModule.html":{},"injectables/AppRedisService.html":{},"dependencies.html":{}}}],["license",{"_index":1722,"title":{},"body":{"properties.html":{}}}],["limit",{"_index":1703,"title":{},"body":{"miscellaneous/functions.html":{}}}],["line",{"_index":507,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["literal",{"_index":39,"title":{},"body":{"controllers/AppController.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["live",{"_index":251,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["load",{"_index":127,"title":{},"body":{"modules/AppModule.html":{}}}],["local",{"_index":1065,"title":{},"body":{"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["localauthguard",{"_index":341,"title":{"injectables/LocalAuthGuard.html":{}},"body":{"controllers/AuthController.html":{},"injectables/LocalAuthGuard.html":{},"coverage.html":{}}}],["localstrategy",{"_index":387,"title":{"injectables/LocalStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/LocalStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["logged",{"_index":1035,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["logger",{"_index":81,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRedisModule.html":{},"injectables/AppRedisService.html":{},"classes/CatchEverythingFilter.html":{},"injectables/CloudinaryService.html":{},"modules/EmailModule.html":{},"classes/EmailService.html":{},"modules/HttpClientModule.html":{},"injectables/HttpClientService.html":{},"injectables/MorganMiddleware.html":{},"classes/PasswordResetEmailConsumer.html":{},"modules/PaymentModule.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/S3Service.html":{},"injectables/SchemaService.html":{},"modules/StorageModule.html":{},"injectables/StripeService.html":{},"injectables/SuccessResponseInterceptor.html":{}}}],["logger(schemaservice.name",{"_index":1286,"title":{},"body":{"injectables/SchemaService.html":{}}}],["loggercontext",{"_index":601,"title":{},"body":{"classes/CatchEverythingFilter.html":{}}}],["loggerservice",{"_index":215,"title":{},"body":{"injectables/AppRedisService.html":{},"classes/CatchEverythingFilter.html":{},"injectables/CloudinaryService.html":{},"classes/EmailService.html":{},"injectables/HttpClientService.html":{},"injectables/MorganMiddleware.html":{},"classes/PasswordResetEmailConsumer.html":{},"modules/PaymentModule.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/S3Service.html":{},"injectables/SchemaService.html":{},"modules/StorageModule.html":{},"injectables/StripeService.html":{},"injectables/SuccessResponseInterceptor.html":{}}}],["loggingconfiguration",{"_index":1153,"title":{},"body":{"modules/PaymentModule.html":{}}}],["logic",{"_index":1040,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["login",{"_index":310,"title":{},"body":{"controllers/AuthController.html":{},"classes/AuthResponseDto.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/RefreshTokenDto.html":{},"entities/User.html":{}}}],["login'})@apibody({type",{"_index":323,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(@request",{"_index":359,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(req",{"_index":321,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(user",{"_index":454,"title":{},"body":{"injectables/AuthService.html":{}}}],["logindto",{"_index":324,"title":{"classes/LoginDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/LoginDto.html":{},"coverage.html":{}}}],["logmatchingeventhandlers",{"_index":1154,"title":{},"body":{"modules/PaymentModule.html":{}}}],["long",{"_index":686,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/ResetPasswordDto.html":{}}}],["lowercase",{"_index":689,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/ResetPasswordDto.html":{}}}],["mailermodule",{"_index":891,"title":{},"body":{"modules/EmailModule.html":{}}}],["mailermodule.forrootasync",{"_index":897,"title":{},"body":{"modules/EmailModule.html":{}}}],["mailerservice",{"_index":914,"title":{},"body":{"classes/EmailService.html":{}}}],["main",{"_index":826,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["makehttprequest",{"_index":946,"title":{},"body":{"injectables/HttpClientService.html":{}}}],["makehttprequest(url",{"_index":950,"title":{},"body":{"injectables/HttpClientService.html":{}}}],["making",{"_index":964,"title":{},"body":{"injectables/HttpClientService.html":{}}}],["malformed",{"_index":531,"title":{},"body":{"injectables/AuthService.html":{}}}],["map",{"_index":1175,"title":{},"body":{"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/SuccessResponseInterceptor.html":{}}}],["map((response",{"_index":1183,"title":{},"body":{"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/SuccessResponseInterceptor.html":{}}}],["match",{"_index":554,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/UsersService.html":{}}}],["matches",{"_index":698,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/ResetPasswordDto.html":{}}}],["matching",{"_index":23,"title":{},"body":{"interfaces/ApiResponse.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AppRedisModule.html":{},"injectables/AppRedisService.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/AuthResponseDto.html":{},"injectables/AuthService.html":{},"classes/BaseEntity.html":{},"classes/CatchEverythingFilter.html":{},"classes/ChangePasswordDto.html":{},"injectables/CloudinaryService.html":{},"injectables/CreateUserCommand.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserResponseDto.html":{},"modules/EmailModule.html":{},"classes/EmailService.html":{},"interfaces/ErrorResponse.html":{},"classes/ForgotPasswordDto.html":{},"classes/GetProfileResponseDto.html":{},"modules/HttpClientModule.html":{},"injectables/HttpClientService.html":{},"interfaces/IPaymentService.html":{},"interfaces/IStrorageService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"injectables/MorganMiddleware.html":{},"classes/PasswordResetEmailConsumer.html":{},"modules/PaymentModule.html":{},"classes/RefreshTokenDto.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/RequestContextMiddleware.html":{},"classes/ResetPasswordDto.html":{},"guards/RoleGuard.html":{},"injectables/S3Service.html":{},"injectables/SchemaService.html":{},"modules/StorageModule.html":{},"injectables/StripeService.html":{},"injectables/SuccessResponseInterceptor.html":{},"classes/UpdateProfileDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/UsersSubscriber.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["max",{"_index":149,"title":{},"body":{"modules/AppModule.html":{}}}],["memorystoredfile",{"_index":707,"title":{},"body":{"injectables/CloudinaryService.html":{},"interfaces/IStrorageService.html":{},"injectables/S3Service.html":{}}}],["message",{"_index":12,"title":{},"body":{"interfaces/ApiResponse.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/AuthResponseDto.html":{},"classes/CatchEverythingFilter.html":{},"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserResponseDto.html":{},"interfaces/ErrorResponse.html":{},"classes/GetProfileResponseDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/MorganMiddleware.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"classes/ResetPasswordDto.html":{},"injectables/SuccessResponseInterceptor.html":{},"controllers/UsersController.html":{}}}],["message.includes('cannot",{"_index":650,"title":{},"body":{"classes/CatchEverythingFilter.html":{}}}],["message.startswith('cannot",{"_index":649,"title":{},"body":{"classes/CatchEverythingFilter.html":{}}}],["metadata",{"_index":1670,"title":{},"body":{"dependencies.html":{}}}],["method",{"_index":172,"title":{},"body":{"modules/AppModule.html":{},"interfaces/IStrorageService.html":{},"injectables/MorganMiddleware.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/S3Service.html":{},"injectables/SuccessResponseInterceptor.html":{}}}],["methods",{"_index":28,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppRedisService.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CatchEverythingFilter.html":{},"injectables/CloudinaryService.html":{},"injectables/CreateUserCommand.html":{},"classes/EmailService.html":{},"injectables/HttpClientService.html":{},"interfaces/IPaymentService.html":{},"interfaces/IStrorageService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/MorganMiddleware.html":{},"classes/PasswordResetEmailConsumer.html":{},"modules/PaymentModule.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/RequestContextMiddleware.html":{},"guards/RoleGuard.html":{},"injectables/S3Service.html":{},"injectables/SchemaService.html":{},"modules/StorageModule.html":{},"injectables/StripeService.html":{},"injectables/SuccessResponseInterceptor.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/UsersSubscriber.html":{}}}],["metricreader",{"_index":1737,"title":{},"body":{"miscellaneous/variables.html":{}}}],["middlewareconsumer",{"_index":75,"title":{},"body":{"modules/AppModule.html":{}}}],["mikro",{"_index":96,"title":{},"body":{"modules/AppModule.html":{},"classes/BaseEntity.html":{},"injectables/CreateUserCommand.html":{},"injectables/RequestContextMiddleware.html":{},"injectables/SchemaService.html":{},"entities/User.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/UsersSubscriber.html":{},"dependencies.html":{}}}],["mikroorm",{"_index":1200,"title":{},"body":{"injectables/RequestContextMiddleware.html":{},"injectables/SchemaService.html":{}}}],["mikroormmodule",{"_index":95,"title":{},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{}}}],["mikroormmodule.forfeature([user",{"_index":1461,"title":{},"body":{"modules/UsersModule.html":{}}}],["mikroormmodule.forrootasync",{"_index":129,"title":{},"body":{"modules/AppModule.html":{}}}],["min",{"_index":147,"title":{},"body":{"modules/AppModule.html":{}}}],["minimum",{"_index":694,"title":{},"body":{"classes/ChangePasswordDto.html":{}}}],["minlength",{"_index":699,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/ResetPasswordDto.html":{}}}],["minlength(10",{"_index":692,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/ResetPasswordDto.html":{}}}],["miscellaneous",{"_index":1678,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["module",{"_index":51,"title":{"modules/AppModule.html":{},"modules/AppRedisModule.html":{},"modules/AuthModule.html":{},"modules/EmailModule.html":{},"modules/HttpClientModule.html":{},"modules/PaymentModule.html":{},"modules/StorageModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AppRedisModule.html":{},"modules/AuthModule.html":{},"modules/EmailModule.html":{},"modules/HttpClientModule.html":{},"modules/PaymentModule.html":{},"modules/StorageModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["modules",{"_index":53,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AppRedisModule.html":{},"modules/AuthModule.html":{},"modules/EmailModule.html":{},"modules/HttpClientModule.html":{},"modules/PaymentModule.html":{},"modules/StorageModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["modules/auth/auth.module",{"_index":92,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/auth/decorators/public.decorator",{"_index":42,"title":{},"body":{"controllers/AppController.html":{}}}],["modules/mailer",{"_index":892,"title":{},"body":{"modules/EmailModule.html":{},"classes/EmailService.html":{},"dependencies.html":{}}}],["modules/mailer/dist/adapters/pug.adapter",{"_index":895,"title":{},"body":{"modules/EmailModule.html":{}}}],["modules/users/subscribers/user.subscriber",{"_index":111,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/users/users.module",{"_index":91,"title":{},"body":{"modules/AppModule.html":{}}}],["moment",{"_index":1066,"title":{},"body":{"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["moment().utc().todate",{"_index":1071,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["morgan",{"_index":1082,"title":{},"body":{"injectables/MorganMiddleware.html":{},"dependencies.html":{}}}],["morganmiddleware",{"_index":93,"title":{"injectables/MorganMiddleware.html":{}},"body":{"modules/AppModule.html":{},"injectables/MorganMiddleware.html":{},"coverage.html":{}}}],["morganmiddleware.name",{"_index":1100,"title":{},"body":{"injectables/MorganMiddleware.html":{}}}],["ms",{"_index":482,"title":{},"body":{"injectables/AuthService.html":{},"injectables/MorganMiddleware.html":{},"dependencies.html":{}}}],["ms('1m",{"_index":490,"title":{},"body":{"injectables/AuthService.html":{}}}],["ms('1m')}m",{"_index":491,"title":{},"body":{"injectables/AuthService.html":{}}}],["ms('1s",{"_index":541,"title":{},"body":{"injectables/AuthService.html":{}}}],["ms(this.jwtexpiresin",{"_index":489,"title":{},"body":{"injectables/AuthService.html":{}}}],["ms(this.jwtrefreshexpriresin",{"_index":540,"title":{},"body":{"injectables/AuthService.html":{}}}],["multiple",{"_index":233,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["name",{"_index":78,"title":{},"body":{"modules/AppModule.html":{},"injectables/AppRedisService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BaseEntity.html":{},"classes/CatchEverythingFilter.html":{},"injectables/CloudinaryService.html":{},"injectables/CreateUserCommand.html":{},"classes/CreateUserDto.html":{},"classes/EmailService.html":{},"interfaces/ErrorResponse.html":{},"injectables/HttpClientService.html":{},"interfaces/IPaymentService.html":{},"interfaces/IStrorageService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/MorganMiddleware.html":{},"classes/PasswordResetEmailConsumer.html":{},"modules/PaymentModule.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/RequestContextMiddleware.html":{},"guards/RoleGuard.html":{},"injectables/S3Service.html":{},"injectables/SchemaService.html":{},"injectables/StripeService.html":{},"injectables/SuccessResponseInterceptor.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/UsersSubscriber.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["namespace",{"_index":200,"title":{},"body":{"modules/AppRedisModule.html":{}}}],["nanoid",{"_index":755,"title":{},"body":{"injectables/CreateUserCommand.html":{},"injectables/S3Service.html":{},"dependencies.html":{}}}],["necessary",{"_index":1226,"title":{},"body":{"guards/RoleGuard.html":{}}}],["needs",{"_index":1042,"title":{},"body":{"injectables/JwtStrategy.html":{},"entities/User.html":{}}}],["nest",{"_index":33,"title":{},"body":{"controllers/AppController.html":{},"injectables/CreateUserCommand.html":{},"dependencies.html":{}}}],["nestinterceptor",{"_index":1174,"title":{},"body":{"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/SuccessResponseInterceptor.html":{}}}],["nestjs",{"_index":721,"title":{},"body":{"injectables/CloudinaryService.html":{},"modules/EmailModule.html":{},"classes/EmailService.html":{},"interfaces/IStrorageService.html":{},"injectables/S3Service.html":{},"modules/StorageModule.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["nestjs/axios",{"_index":940,"title":{},"body":{"modules/HttpClientModule.html":{},"injectables/HttpClientService.html":{},"dependencies.html":{}}}],["nestjs/bullmq",{"_index":113,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/PasswordResetEmailConsumer.html":{},"modules/PaymentModule.html":{},"injectables/StripeService.html":{},"dependencies.html":{}}}],["nestjs/common",{"_index":20,"title":{},"body":{"interfaces/ApiResponse.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AppRedisModule.html":{},"injectables/AppRedisService.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CatchEverythingFilter.html":{},"injectables/CloudinaryService.html":{},"injectables/CreateUserCommand.html":{},"modules/EmailModule.html":{},"classes/EmailService.html":{},"modules/HttpClientModule.html":{},"injectables/HttpClientService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/MorganMiddleware.html":{},"classes/PasswordResetEmailConsumer.html":{},"modules/PaymentModule.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/RequestContextMiddleware.html":{},"guards/RoleGuard.html":{},"injectables/S3Service.html":{},"injectables/SchemaService.html":{},"modules/StorageModule.html":{},"injectables/StripeService.html":{},"injectables/SuccessResponseInterceptor.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/UsersSubscriber.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":90,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRedisModule.html":{},"injectables/AppRedisService.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CloudinaryService.html":{},"modules/EmailModule.html":{},"injectables/JwtStrategy.html":{},"modules/PaymentModule.html":{},"injectables/S3Service.html":{},"injectables/SchemaService.html":{},"modules/StorageModule.html":{},"injectables/StripeService.html":{},"injectables/UsersService.html":{},"injectables/UsersSubscriber.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":390,"title":{},"body":{"modules/AuthModule.html":{},"classes/CatchEverythingFilter.html":{},"injectables/JwtAuthGuard.html":{},"guards/RoleGuard.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":394,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["nestjs/mapped",{"_index":1613,"title":{},"body":{"dependencies.html":{}}}],["nestjs/passport",{"_index":396,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":1615,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":45,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/AuthResponseDto.html":{},"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserResponseDto.html":{},"classes/ForgotPasswordDto.html":{},"classes/GetProfileResponseDto.html":{},"classes/LoginDto.html":{},"classes/RefreshTokenDto.html":{},"classes/ResetPasswordDto.html":{},"classes/UpdateProfileDto.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["nestmiddleware",{"_index":1081,"title":{},"body":{"injectables/MorganMiddleware.html":{},"injectables/RequestContextMiddleware.html":{}}}],["nestmodule",{"_index":82,"title":{},"body":{"modules/AppModule.html":{}}}],["new",{"_index":157,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"classes/BaseEntity.html":{},"classes/CatchEverythingFilter.html":{},"classes/ChangePasswordDto.html":{},"injectables/CloudinaryService.html":{},"injectables/CreateUserCommand.html":{},"modules/EmailModule.html":{},"injectables/HttpClientService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"modules/PaymentModule.html":{},"classes/ResetPasswordDto.html":{},"guards/RoleGuard.html":{},"injectables/S3Service.html":{},"injectables/SchemaService.html":{},"modules/StorageModule.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["newly",{"_index":878,"title":{},"body":{"classes/CreateUserResponseDto.html":{},"classes/GetProfileResponseDto.html":{}}}],["newpassword",{"_index":379,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ChangePasswordDto.html":{},"classes/ResetPasswordDto.html":{},"injectables/UsersService.html":{}}}],["newpayload",{"_index":538,"title":{},"body":{"injectables/AuthService.html":{}}}],["newuser",{"_index":1441,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["next",{"_index":506,"title":{},"body":{"injectables/AuthService.html":{},"injectables/MorganMiddleware.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/RequestContextMiddleware.html":{},"injectables/SuccessResponseInterceptor.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["next.handle",{"_index":1181,"title":{},"body":{"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/SuccessResponseInterceptor.html":{}}}],["next.handle().pipe",{"_index":1182,"title":{},"body":{"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/SuccessResponseInterceptor.html":{}}}],["nextfunction",{"_index":1203,"title":{},"body":{"injectables/RequestContextMiddleware.html":{}}}],["node",{"_index":1254,"title":{},"body":{"injectables/S3Service.html":{},"dependencies.html":{}}}],["nodeenv",{"_index":1287,"title":{},"body":{"injectables/SchemaService.html":{}}}],["nodemailer",{"_index":1663,"title":{},"body":{"dependencies.html":{}}}],["nodesdk",{"_index":1736,"title":{},"body":{"miscellaneous/variables.html":{}}}],["normalizefields",{"_index":1406,"title":{},"body":{"entities/User.html":{},"injectables/UsersSubscriber.html":{}}}],["normalizefields(user",{"_index":1536,"title":{},"body":{"injectables/UsersSubscriber.html":{}}}],["normalizeuserfields",{"_index":1401,"title":{},"body":{"entities/User.html":{},"injectables/UsersSubscriber.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["normalizeuserfields(this",{"_index":1407,"title":{},"body":{"entities/User.html":{}}}],["normalizeuserfields(user",{"_index":1543,"title":{},"body":{"injectables/UsersSubscriber.html":{},"miscellaneous/functions.html":{}}}],["notbefore",{"_index":516,"title":{},"body":{"injectables/AuthService.html":{}}}],["notbeforeerror",{"_index":475,"title":{},"body":{"injectables/AuthService.html":{}}}],["note",{"_index":1020,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["notfoundexception",{"_index":471,"title":{},"body":{"injectables/AuthService.html":{},"classes/CatchEverythingFilter.html":{},"injectables/JwtStrategy.html":{},"injectables/UsersService.html":{}}}],["notfoundexception('password",{"_index":558,"title":{},"body":{"injectables/AuthService.html":{}}}],["notfoundexception('user",{"_index":501,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/UsersService.html":{}}}],["null",{"_index":258,"title":{},"body":{"injectables/AppRedisService.html":{},"injectables/AuthService.html":{},"classes/BaseEntity.html":{},"injectables/UsersService.html":{}}}],["nullable",{"_index":579,"title":{},"body":{"classes/BaseEntity.html":{},"entities/User.html":{}}}],["number",{"_index":226,"title":{},"body":{"injectables/AppRedisService.html":{},"injectables/AuthService.html":{},"classes/CatchEverythingFilter.html":{},"classes/CreateUserDto.html":{},"interfaces/ErrorResponse.html":{},"interfaces/IStrorageService.html":{},"injectables/S3Service.html":{},"entities/User.html":{},"miscellaneous/functions.html":{}}}],["number.isinteger(response.statuscode",{"_index":1187,"title":{},"body":{"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/SuccessResponseInterceptor.html":{}}}],["nx",{"_index":245,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["nxinfo",{"_index":269,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["object",{"_index":989,"title":{},"body":{"interfaces/IStrorageService.html":{},"injectables/S3Service.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["object.values(userroleenum).join",{"_index":875,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["observable",{"_index":1172,"title":{},"body":{"injectables/RequestBodyAndResponseInterceptor.html":{},"guards/RoleGuard.html":{},"injectables/SuccessResponseInterceptor.html":{}}}],["ok",{"_index":256,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["omittype",{"_index":1360,"title":{},"body":{"classes/UpdateProfileDto.html":{}}}],["omittype(createuserdto",{"_index":1359,"title":{},"body":{"classes/UpdateProfileDto.html":{}}}],["one",{"_index":874,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["onmoduleinit",{"_index":1283,"title":{},"body":{"injectables/SchemaService.html":{}}}],["onupdate",{"_index":586,"title":{},"body":{"classes/BaseEntity.html":{}}}],["opentelemetry/auto",{"_index":1617,"title":{},"body":{"dependencies.html":{}}}],["opentelemetry/context",{"_index":1620,"title":{},"body":{"dependencies.html":{}}}],["opentelemetry/core",{"_index":1623,"title":{},"body":{"dependencies.html":{}}}],["opentelemetry/exporter",{"_index":1624,"title":{},"body":{"dependencies.html":{}}}],["opentelemetry/propagator",{"_index":1627,"title":{},"body":{"dependencies.html":{}}}],["opentelemetry/sdk",{"_index":1630,"title":{},"body":{"dependencies.html":{}}}],["operation",{"_index":435,"title":{},"body":{"classes/AuthResponseDto.html":{},"classes/CreateUserResponseDto.html":{},"classes/GetProfileResponseDto.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/SuccessResponseInterceptor.html":{}}}],["option",{"_index":791,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["option({flags",{"_index":766,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["optional",{"_index":10,"title":{},"body":{"interfaces/ApiResponse.html":{},"modules/AppModule.html":{},"injectables/AppRedisService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/BaseEntity.html":{},"classes/CatchEverythingFilter.html":{},"injectables/CloudinaryService.html":{},"injectables/CreateUserCommand.html":{},"classes/CreateUserDto.html":{},"classes/EmailService.html":{},"interfaces/ErrorResponse.html":{},"injectables/HttpClientService.html":{},"interfaces/IPaymentService.html":{},"interfaces/IStrorageService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/MorganMiddleware.html":{},"classes/PasswordResetEmailConsumer.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/RequestContextMiddleware.html":{},"guards/RoleGuard.html":{},"injectables/S3Service.html":{},"injectables/SchemaService.html":{},"injectables/StripeService.html":{},"injectables/SuccessResponseInterceptor.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/UsersSubscriber.html":{},"miscellaneous/functions.html":{}}}],["options",{"_index":784,"title":{},"body":{"injectables/CreateUserCommand.html":{},"modules/EmailModule.html":{},"injectables/HttpClientService.html":{},"interfaces/IPaymentService.html":{},"injectables/StripeService.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{}}}],["originaldata",{"_index":1544,"title":{},"body":{"injectables/UsersSubscriber.html":{}}}],["originaldata.password",{"_index":1546,"title":{},"body":{"injectables/UsersSubscriber.html":{}}}],["orm",{"_index":1202,"title":{},"body":{"injectables/RequestContextMiddleware.html":{},"injectables/SchemaService.html":{}}}],["orm/core",{"_index":593,"title":{},"body":{"classes/BaseEntity.html":{},"injectables/CreateUserCommand.html":{},"injectables/RequestContextMiddleware.html":{},"injectables/SchemaService.html":{},"entities/User.html":{},"injectables/UsersService.html":{},"injectables/UsersSubscriber.html":{},"dependencies.html":{}}}],["orm/nestjs",{"_index":97,"title":{},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["orm/postgresql",{"_index":99,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["os",{"_index":1110,"title":{},"body":{"classes/PasswordResetEmailConsumer.html":{}}}],["os.cpus().length",{"_index":1118,"title":{},"body":{"classes/PasswordResetEmailConsumer.html":{}}}],["otelsdk",{"_index":1591,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["out",{"_index":70,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRedisModule.html":{},"modules/AuthModule.html":{},"modules/EmailModule.html":{},"modules/HttpClientModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["overview",{"_index":1716,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":1595,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["param",{"_index":265,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["parameters",{"_index":77,"title":{},"body":{"modules/AppModule.html":{},"injectables/AppRedisService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CatchEverythingFilter.html":{},"injectables/CloudinaryService.html":{},"injectables/CreateUserCommand.html":{},"classes/EmailService.html":{},"injectables/HttpClientService.html":{},"interfaces/IPaymentService.html":{},"interfaces/IStrorageService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/MorganMiddleware.html":{},"classes/PasswordResetEmailConsumer.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/RequestContextMiddleware.html":{},"guards/RoleGuard.html":{},"injectables/S3Service.html":{},"injectables/SchemaService.html":{},"injectables/StripeService.html":{},"injectables/SuccessResponseInterceptor.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/UsersSubscriber.html":{},"miscellaneous/functions.html":{}}}],["params",{"_index":975,"title":{},"body":{"interfaces/IPaymentService.html":{},"injectables/StripeService.html":{}}}],["parsed",{"_index":1504,"title":{},"body":{"injectables/UsersService.html":{}}}],["parseemail",{"_index":756,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["parseemail(val",{"_index":765,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["parsefirstname",{"_index":757,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["parsefirstname(val",{"_index":771,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["parselastname",{"_index":758,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["parselastname(val",{"_index":775,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["parser",{"_index":1245,"title":{},"body":{"injectables/S3Service.html":{}}}],["parserole",{"_index":759,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["parserole(val",{"_index":778,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["parsetimestring",{"_index":1570,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["parsetimestring(timestring",{"_index":1704,"title":{},"body":{"miscellaneous/functions.html":{}}}],["parseurl",{"_index":1243,"title":{},"body":{"injectables/S3Service.html":{}}}],["partialtype",{"_index":1358,"title":{},"body":{"classes/UpdateProfileDto.html":{}}}],["pass",{"_index":461,"title":{},"body":{"injectables/AuthService.html":{},"modules/EmailModule.html":{}}}],["passport",{"_index":1050,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["passportmodule",{"_index":395,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":1051,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["passportstrategy(strategy",{"_index":1016,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["passreqtocallback",{"_index":1057,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["password",{"_index":141,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ChangePasswordDto.html":{},"injectables/CreateUserCommand.html":{},"classes/CreateUserDto.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"classes/ResetPasswordDto.html":{},"classes/UpdateProfileDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["password')@httpcode(httpstatus.ok)@apioperation({summary",{"_index":316,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["password'})@apibody({type",{"_index":336,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["password.dto",{"_index":352,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["password.dto.ts",{"_index":676,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/ForgotPasswordDto.html":{},"classes/ResetPasswordDto.html":{},"coverage.html":{}}}],["password.dto.ts:19",{"_index":695,"title":{},"body":{"classes/ChangePasswordDto.html":{}}}],["password.dto.ts:25",{"_index":1211,"title":{},"body":{"classes/ResetPasswordDto.html":{}}}],["password.dto.ts:35",{"_index":693,"title":{},"body":{"classes/ChangePasswordDto.html":{}}}],["password.dto.ts:41",{"_index":1210,"title":{},"body":{"classes/ResetPasswordDto.html":{}}}],["password.dto.ts:50",{"_index":1213,"title":{},"body":{"classes/ResetPasswordDto.html":{}}}],["password.dto.ts:7",{"_index":928,"title":{},"body":{"classes/ForgotPasswordDto.html":{}}}],["password_character_set",{"_index":794,"title":{},"body":{"injectables/CreateUserCommand.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["password_reset",{"_index":1684,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["password_reset_email_queue_name",{"_index":402,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/PasswordResetEmailConsumer.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["passwordresetemailconsumer",{"_index":1102,"title":{"classes/PasswordResetEmailConsumer.html":{}},"body":{"classes/PasswordResetEmailConsumer.html":{},"coverage.html":{}}}],["passwordresetemailqueue",{"_index":449,"title":{},"body":{"injectables/AuthService.html":{}}}],["passwordresetrequested",{"_index":552,"title":{},"body":{"injectables/AuthService.html":{},"entities/User.html":{}}}],["passwordreseturl",{"_index":443,"title":{},"body":{"injectables/AuthService.html":{}}}],["patch",{"_index":1430,"title":{},"body":{"controllers/UsersController.html":{},"miscellaneous/enumerations.html":{}}}],["patch('update",{"_index":1426,"title":{},"body":{"controllers/UsersController.html":{}}}],["path",{"_index":174,"title":{},"body":{"modules/AppModule.html":{},"classes/CatchEverythingFilter.html":{},"modules/EmailModule.html":{},"interfaces/ErrorResponse.html":{},"entities/User.html":{}}}],["path/webhook",{"_index":175,"title":{},"body":{"modules/AppModule.html":{}}}],["payload",{"_index":512,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["payload.email",{"_index":556,"title":{},"body":{"injectables/AuthService.html":{}}}],["payload.sub",{"_index":537,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["payment",{"_index":1339,"title":{},"body":{"injectables/StripeService.html":{}}}],["payment_intent.succeeded",{"_index":1350,"title":{},"body":{"injectables/StripeService.html":{}}}],["payment_provider",{"_index":1137,"title":{},"body":{"modules/PaymentModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["paymentdriverenum",{"_index":1138,"title":{},"body":{"modules/PaymentModule.html":{},"miscellaneous/enumerations.html":{}}}],["paymentdriverenum.stripe",{"_index":1158,"title":{},"body":{"modules/PaymentModule.html":{}}}],["paymentintent",{"_index":1341,"title":{},"body":{"injectables/StripeService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["paymentmodule",{"_index":1128,"title":{"modules/PaymentModule.html":{}},"body":{"modules/PaymentModule.html":{},"modules.html":{}}}],["per",{"_index":1029,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["permission",{"_index":1227,"title":{},"body":{"guards/RoleGuard.html":{}}}],["phone",{"_index":845,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/User.html":{}}}],["phonenumber",{"_index":822,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateProfileDto.html":{},"entities/User.html":{}}}],["pipeline",{"_index":283,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["pipeline.exec",{"_index":288,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["pipeline.incr(key",{"_index":287,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["pipeline.set(key",{"_index":285,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["pool",{"_index":146,"title":{},"body":{"modules/AppModule.html":{}}}],["port",{"_index":137,"title":{},"body":{"modules/AppModule.html":{},"modules/EmailModule.html":{}}}],["post",{"_index":338,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{},"miscellaneous/enumerations.html":{}}}],["post('change",{"_index":1413,"title":{},"body":{"controllers/UsersController.html":{}}}],["post('forgot",{"_index":373,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('login",{"_index":358,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('refresh",{"_index":368,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('reset",{"_index":377,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('sign",{"_index":1439,"title":{},"body":{"controllers/UsersController.html":{}}}],["postal",{"_index":848,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["postal/zip",{"_index":1391,"title":{},"body":{"entities/User.html":{}}}],["postalcode",{"_index":823,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/User.html":{}}}],["postgresqldriver",{"_index":98,"title":{},"body":{"modules/AppModule.html":{}}}],["prefix",{"_index":308,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["presigner",{"_index":1249,"title":{},"body":{"injectables/S3Service.html":{},"dependencies.html":{}}}],["presigner.presign",{"_index":1280,"title":{},"body":{"injectables/S3Service.html":{}}}],["preventserverstart",{"_index":1748,"title":{},"body":{"miscellaneous/variables.html":{}}}],["primarykey",{"_index":591,"title":{},"body":{"classes/BaseEntity.html":{}}}],["primarykey({type",{"_index":583,"title":{},"body":{"classes/BaseEntity.html":{}}}],["private",{"_index":205,"title":{},"body":{"injectables/AppRedisService.html":{},"injectables/AuthService.html":{},"classes/CatchEverythingFilter.html":{},"injectables/CloudinaryService.html":{},"injectables/CreateUserCommand.html":{},"classes/EmailService.html":{},"injectables/HttpClientService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/MorganMiddleware.html":{},"classes/PasswordResetEmailConsumer.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/S3Service.html":{},"injectables/SchemaService.html":{},"injectables/StripeService.html":{},"injectables/SuccessResponseInterceptor.html":{},"entities/User.html":{},"injectables/UsersService.html":{},"injectables/UsersSubscriber.html":{}}}],["process",{"_index":1104,"title":{},"body":{"classes/PasswordResetEmailConsumer.html":{}}}],["process(job",{"_index":1107,"title":{},"body":{"classes/PasswordResetEmailConsumer.html":{}}}],["processed",{"_index":1127,"title":{},"body":{"classes/PasswordResetEmailConsumer.html":{}}}],["processing",{"_index":1119,"title":{},"body":{"classes/PasswordResetEmailConsumer.html":{}}}],["processor",{"_index":1111,"title":{},"body":{"classes/PasswordResetEmailConsumer.html":{}}}],["processor(password_reset_email_queue_name",{"_index":1116,"title":{},"body":{"classes/PasswordResetEmailConsumer.html":{}}}],["production",{"_index":100,"title":{},"body":{"modules/AppModule.html":{},"injectables/SchemaService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["profile",{"_index":883,"title":{},"body":{"classes/CreateUserResponseDto.html":{},"classes/GetProfileResponseDto.html":{},"controllers/UsersController.html":{}}}],["profile')@httpcode(httpstatus.ok)@apioperation({summary",{"_index":1427,"title":{},"body":{"controllers/UsersController.html":{}}}],["profile'})@apibody({type",{"_index":1428,"title":{},"body":{"controllers/UsersController.html":{}}}],["profile.dto",{"_index":1436,"title":{},"body":{"controllers/UsersController.html":{}}}],["profile.dto.ts",{"_index":1357,"title":{},"body":{"classes/UpdateProfileDto.html":{},"coverage.html":{}}}],["prometheus",{"_index":1625,"title":{},"body":{"dependencies.html":{}}}],["prometheusexporter",{"_index":1592,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["promise",{"_index":225,"title":{},"body":{"injectables/AppRedisService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CloudinaryService.html":{},"injectables/CreateUserCommand.html":{},"classes/EmailService.html":{},"injectables/HttpClientService.html":{},"interfaces/IPaymentService.html":{},"interfaces/IStrorageService.html":{},"injectables/LocalStrategy.html":{},"guards/RoleGuard.html":{},"injectables/S3Service.html":{},"injectables/StripeService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["promise((resolve",{"_index":736,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["promise.all",{"_index":1510,"title":{},"body":{"injectables/UsersService.html":{}}}],["propagators",{"_index":1742,"title":{},"body":{"miscellaneous/variables.html":{}}}],["properties",{"_index":9,"title":{"properties.html":{}},"body":{"interfaces/ApiResponse.html":{},"injectables/AppRedisService.html":{},"classes/AuthResponseDto.html":{},"injectables/AuthService.html":{},"classes/BaseEntity.html":{},"classes/CatchEverythingFilter.html":{},"classes/ChangePasswordDto.html":{},"injectables/CreateUserCommand.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserResponseDto.html":{},"interfaces/ErrorResponse.html":{},"classes/ForgotPasswordDto.html":{},"classes/GetProfileResponseDto.html":{},"injectables/HttpClientService.html":{},"classes/LoginDto.html":{},"classes/RefreshTokenDto.html":{},"classes/ResetPasswordDto.html":{},"injectables/S3Service.html":{},"injectables/SchemaService.html":{},"entities/User.html":{},"injectables/UsersService.html":{},"properties.html":{}}}],["property",{"_index":592,"title":{},"body":{"classes/BaseEntity.html":{},"entities/User.html":{}}}],["property({type",{"_index":570,"title":{},"body":{"classes/BaseEntity.html":{},"entities/User.html":{}}}],["property({unique",{"_index":1380,"title":{},"body":{"entities/User.html":{}}}],["provide",{"_index":422,"title":{},"body":{"modules/AuthModule.html":{},"modules/PaymentModule.html":{},"modules/StorageModule.html":{}}}],["provided",{"_index":1162,"title":{},"body":{"classes/RefreshTokenDto.html":{}}}],["providers",{"_index":58,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRedisModule.html":{},"modules/AuthModule.html":{},"modules/EmailModule.html":{},"modules/HttpClientModule.html":{},"modules/PaymentModule.html":{},"injectables/S3Service.html":{},"modules/StorageModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"overview.html":{}}}],["public",{"_index":41,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"modules/PaymentModule.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["public()@post('forgot",{"_index":315,"title":{},"body":{"controllers/AuthController.html":{}}}],["public()@post('refresh')@httpcode(httpstatus.ok)@apioperation({summary",{"_index":328,"title":{},"body":{"controllers/AuthController.html":{}}}],["public()@post('reset",{"_index":335,"title":{},"body":{"controllers/AuthController.html":{}}}],["public()@post('sign",{"_index":1416,"title":{},"body":{"controllers/UsersController.html":{}}}],["public_id=${result.public_id",{"_index":747,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["pug",{"_index":1667,"title":{},"body":{"dependencies.html":{}}}],["pugadapter",{"_index":894,"title":{},"body":{"modules/EmailModule.html":{}}}],["put",{"_index":988,"title":{},"body":{"interfaces/IStrorageService.html":{},"injectables/S3Service.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["query",{"_index":1478,"title":{},"body":{"injectables/UsersService.html":{}}}],["query?.email",{"_index":1500,"title":{},"body":{"injectables/UsersService.html":{}}}],["query?.id",{"_index":1498,"title":{},"body":{"injectables/UsersService.html":{}}}],["queue",{"_index":450,"title":{},"body":{"injectables/AuthService.html":{},"modules/PaymentModule.html":{},"injectables/StripeService.html":{},"miscellaneous/variables.html":{}}}],["queued",{"_index":1353,"title":{},"body":{"injectables/StripeService.html":{}}}],["queues",{"_index":167,"title":{},"body":{"modules/AppModule.html":{}}}],["quickly",{"_index":1685,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["r",{"_index":779,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["raw",{"_index":1024,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["readonly",{"_index":170,"title":{},"body":{"modules/AppModule.html":{},"injectables/AppRedisService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CatchEverythingFilter.html":{},"injectables/CloudinaryService.html":{},"injectables/CreateUserCommand.html":{},"classes/EmailService.html":{},"injectables/HttpClientService.html":{},"injectables/MorganMiddleware.html":{},"classes/PasswordResetEmailConsumer.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/RequestContextMiddleware.html":{},"guards/RoleGuard.html":{},"injectables/S3Service.html":{},"injectables/SchemaService.html":{},"injectables/StripeService.html":{},"injectables/SuccessResponseInterceptor.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/UsersSubscriber.html":{}}}],["readylog",{"_index":197,"title":{},"body":{"modules/AppRedisModule.html":{}}}],["received",{"_index":1349,"title":{},"body":{"injectables/StripeService.html":{}}}],["record",{"_index":575,"title":{},"body":{"classes/BaseEntity.html":{},"injectables/CreateUserCommand.html":{},"classes/EmailService.html":{}}}],["redis",{"_index":195,"title":{},"body":{"modules/AppRedisModule.html":{},"injectables/AppRedisService.html":{},"dependencies.html":{}}}],["redis.service",{"_index":192,"title":{},"body":{"modules/AppRedisModule.html":{}}}],["redismodule",{"_index":193,"title":{},"body":{"modules/AppRedisModule.html":{}}}],["redismodule.forrootasync",{"_index":196,"title":{},"body":{"modules/AppRedisModule.html":{}}}],["redisservice",{"_index":216,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["referrer",{"_index":1092,"title":{},"body":{"injectables/MorganMiddleware.html":{}}}],["reflect",{"_index":1669,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":996,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/RoleGuard.html":{}}}],["reflector.createdecorator",{"_index":1752,"title":{},"body":{"miscellaneous/variables.html":{}}}],["refresh",{"_index":311,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/RefreshTokenDto.html":{}}}],["refresh(@body",{"_index":369,"title":{},"body":{"controllers/AuthController.html":{}}}],["refresh(body",{"_index":327,"title":{},"body":{"controllers/AuthController.html":{}}}],["refresh(refreshtoken",{"_index":456,"title":{},"body":{"injectables/AuthService.html":{}}}],["refresh_token",{"_index":361,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["refreshed",{"_index":372,"title":{},"body":{"controllers/AuthController.html":{}}}],["refreshtoken",{"_index":367,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/RefreshTokenDto.html":{}}}],["refreshtokendto",{"_index":331,"title":{"classes/RefreshTokenDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/RefreshTokenDto.html":{},"coverage.html":{}}}],["region",{"_index":1276,"title":{},"body":{"injectables/S3Service.html":{},"modules/StorageModule.html":{}}}],["register",{"_index":1131,"title":{},"body":{"modules/PaymentModule.html":{},"modules/StorageModule.html":{}}}],["reject",{"_index":737,"title":{},"body":{"injectables/CloudinaryService.html":{},"injectables/JwtStrategy.html":{}}}],["reject(error",{"_index":746,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["remote",{"_index":1086,"title":{},"body":{"injectables/MorganMiddleware.html":{}}}],["req",{"_index":326,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtStrategy.html":{},"injectables/MorganMiddleware.html":{},"injectables/RequestContextMiddleware.html":{},"controllers/UsersController.html":{}}}],["req.url",{"_index":1084,"title":{},"body":{"injectables/MorganMiddleware.html":{}}}],["req.url.match(/\\/v1\\/queues",{"_index":1085,"title":{},"body":{"injectables/MorganMiddleware.html":{}}}],["req.user",{"_index":363,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["req.user.id",{"_index":1451,"title":{},"body":{"controllers/UsersController.html":{}}}],["req?.user?.id",{"_index":1448,"title":{},"body":{"controllers/UsersController.html":{}}}],["req[body",{"_index":1095,"title":{},"body":{"injectables/MorganMiddleware.html":{}}}],["req[header",{"_index":1094,"title":{},"body":{"injectables/MorganMiddleware.html":{}}}],["request",{"_index":317,"title":{},"body":{"controllers/AuthController.html":{},"classes/CatchEverythingFilter.html":{},"injectables/HttpClientService.html":{},"injectables/JwtStrategy.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/RequestContextMiddleware.html":{},"guards/RoleGuard.html":{},"injectables/S3Service.html":{},"injectables/SuccessResponseInterceptor.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["request.method",{"_index":655,"title":{},"body":{"classes/CatchEverythingFilter.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/SuccessResponseInterceptor.html":{}}}],["request.url",{"_index":656,"title":{},"body":{"classes/CatchEverythingFilter.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/SuccessResponseInterceptor.html":{}}}],["request?.user?.role",{"_index":1225,"title":{},"body":{"guards/RoleGuard.html":{}}}],["requestbodyandresponseinterceptor",{"_index":1165,"title":{"injectables/RequestBodyAndResponseInterceptor.html":{}},"body":{"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/SuccessResponseInterceptor.html":{},"coverage.html":{}}}],["requestcontext",{"_index":1205,"title":{},"body":{"injectables/RequestContextMiddleware.html":{}}}],["requestcontext.create(this.orm.em",{"_index":1206,"title":{},"body":{"injectables/RequestContextMiddleware.html":{}}}],["requestcontextmiddleware",{"_index":121,"title":{"injectables/RequestContextMiddleware.html":{}},"body":{"modules/AppModule.html":{},"injectables/RequestContextMiddleware.html":{},"coverage.html":{}}}],["requested",{"_index":559,"title":{},"body":{"injectables/AuthService.html":{},"entities/User.html":{}}}],["requestmethod",{"_index":83,"title":{},"body":{"modules/AppModule.html":{}}}],["requestmethod.all",{"_index":173,"title":{},"body":{"modules/AppModule.html":{}}}],["requesturl",{"_index":641,"title":{},"body":{"classes/CatchEverythingFilter.html":{}}}],["require('buffer",{"_index":716,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["required",{"_index":768,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["requiredrole",{"_index":1222,"title":{},"body":{"guards/RoleGuard.html":{}}}],["res",{"_index":1078,"title":{},"body":{"injectables/MorganMiddleware.html":{},"injectables/RequestContextMiddleware.html":{}}}],["res.statuscode",{"_index":1097,"title":{},"body":{"injectables/MorganMiddleware.html":{}}}],["res[content",{"_index":1089,"title":{},"body":{"injectables/MorganMiddleware.html":{}}}],["reset",{"_index":69,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRedisModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/EmailModule.html":{},"modules/HttpClientModule.html":{},"classes/ResetPasswordDto.html":{},"entities/User.html":{},"modules/UsersModule.html":{},"miscellaneous/enumerations.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["reset'})@apibody({type",{"_index":318,"title":{},"body":{"controllers/AuthController.html":{}}}],["resetpassword",{"_index":312,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["resetpassword(body",{"_index":333,"title":{},"body":{"controllers/AuthController.html":{}}}],["resetpassword(resettoken",{"_index":458,"title":{},"body":{"injectables/AuthService.html":{}}}],["resetpassworddto",{"_index":334,"title":{"classes/ResetPasswordDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/ResetPasswordDto.html":{},"coverage.html":{}}}],["resettoken",{"_index":378,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ResetPasswordDto.html":{}}}],["reseturl",{"_index":545,"title":{},"body":{"injectables/AuthService.html":{},"classes/PasswordResetEmailConsumer.html":{}}}],["resolve(result",{"_index":749,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["resource_type",{"_index":741,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["response",{"_index":639,"title":{},"body":{"classes/CatchEverythingFilter.html":{},"interfaces/IStrorageService.html":{},"injectables/MorganMiddleware.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/RequestContextMiddleware.html":{},"injectables/S3Service.html":{},"injectables/SuccessResponseInterceptor.html":{}}}],["response.dto.ts",{"_index":427,"title":{},"body":{"classes/AuthResponseDto.html":{},"coverage.html":{}}}],["response.dto.ts:14",{"_index":436,"title":{},"body":{"classes/AuthResponseDto.html":{}}}],["response.dto.ts:8",{"_index":432,"title":{},"body":{"classes/AuthResponseDto.html":{}}}],["response.interface",{"_index":354,"title":{},"body":{"controllers/AuthController.html":{},"classes/CatchEverythingFilter.html":{},"controllers/UsersController.html":{}}}],["response.interface.ts",{"_index":7,"title":{},"body":{"interfaces/ApiResponse.html":{},"interfaces/ErrorResponse.html":{},"coverage.html":{}}}],["response.message",{"_index":1191,"title":{},"body":{"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/SuccessResponseInterceptor.html":{}}}],["response.statuscode",{"_index":1188,"title":{},"body":{"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/SuccessResponseInterceptor.html":{}}}],["response.ts",{"_index":1589,"title":{},"body":{"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["response?.data",{"_index":1193,"title":{},"body":{"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/SuccessResponseInterceptor.html":{}}}],["response?.message",{"_index":1190,"title":{},"body":{"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/SuccessResponseInterceptor.html":{}}}],["response?.statuscode",{"_index":1186,"title":{},"body":{"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/SuccessResponseInterceptor.html":{}}}],["responsebody",{"_index":653,"title":{},"body":{"classes/CatchEverythingFilter.html":{}}}],["responsedata",{"_index":1192,"title":{},"body":{"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/SuccessResponseInterceptor.html":{}}}],["result",{"_index":296,"title":{},"body":{"injectables/AppRedisService.html":{},"injectables/AuthService.html":{},"injectables/CloudinaryService.html":{},"injectables/UsersService.html":{}}}],["results",{"_index":22,"title":{},"body":{"interfaces/ApiResponse.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AppRedisModule.html":{},"injectables/AppRedisService.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/AuthResponseDto.html":{},"injectables/AuthService.html":{},"classes/BaseEntity.html":{},"classes/CatchEverythingFilter.html":{},"classes/ChangePasswordDto.html":{},"injectables/CloudinaryService.html":{},"injectables/CreateUserCommand.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserResponseDto.html":{},"modules/EmailModule.html":{},"classes/EmailService.html":{},"interfaces/ErrorResponse.html":{},"classes/ForgotPasswordDto.html":{},"classes/GetProfileResponseDto.html":{},"modules/HttpClientModule.html":{},"injectables/HttpClientService.html":{},"interfaces/IPaymentService.html":{},"interfaces/IStrorageService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"injectables/MorganMiddleware.html":{},"classes/PasswordResetEmailConsumer.html":{},"modules/PaymentModule.html":{},"classes/RefreshTokenDto.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/RequestContextMiddleware.html":{},"classes/ResetPasswordDto.html":{},"guards/RoleGuard.html":{},"injectables/S3Service.html":{},"injectables/SchemaService.html":{},"modules/StorageModule.html":{},"injectables/StripeService.html":{},"injectables/SuccessResponseInterceptor.html":{},"classes/UpdateProfileDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/UsersSubscriber.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["results[ttl",{"_index":290,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["return",{"_index":50,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AppRedisModule.html":{},"injectables/AppRedisService.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CatchEverythingFilter.html":{},"injectables/CloudinaryService.html":{},"injectables/CreateUserCommand.html":{},"classes/CreateUserDto.html":{},"injectables/HttpClientService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/MorganMiddleware.html":{},"modules/PaymentModule.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"guards/RoleGuard.html":{},"injectables/S3Service.html":{},"modules/StorageModule.html":{},"injectables/StripeService.html":{},"injectables/SuccessResponseInterceptor.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/UsersSubscriber.html":{}}}],["returns",{"_index":38,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppRedisService.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CatchEverythingFilter.html":{},"injectables/CloudinaryService.html":{},"injectables/CreateUserCommand.html":{},"classes/EmailService.html":{},"injectables/HttpClientService.html":{},"interfaces/IPaymentService.html":{},"interfaces/IStrorageService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/MorganMiddleware.html":{},"classes/PasswordResetEmailConsumer.html":{},"modules/PaymentModule.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/RequestContextMiddleware.html":{},"guards/RoleGuard.html":{},"injectables/S3Service.html":{},"injectables/SchemaService.html":{},"modules/StorageModule.html":{},"injectables/StripeService.html":{},"injectables/SuccessResponseInterceptor.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/UsersSubscriber.html":{},"miscellaneous/functions.html":{}}}],["role",{"_index":780,"title":{},"body":{"injectables/CreateUserCommand.html":{},"classes/CreateUserDto.html":{},"guards/RoleGuard.html":{},"classes/UpdateProfileDto.html":{},"entities/User.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["roleguard",{"_index":1217,"title":{"guards/RoleGuard.html":{}},"body":{"guards/RoleGuard.html":{},"coverage.html":{}}}],["route",{"_index":166,"title":{},"body":{"modules/AppModule.html":{},"classes/CatchEverythingFilter.html":{},"guards/RoleGuard.html":{}}}],["run",{"_index":760,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["run(inputs",{"_index":783,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["rxjs",{"_index":959,"title":{},"body":{"injectables/HttpClientService.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"guards/RoleGuard.html":{},"injectables/SuccessResponseInterceptor.html":{},"dependencies.html":{}}}],["rxjs/operators",{"_index":1177,"title":{},"body":{"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/SuccessResponseInterceptor.html":{}}}],["s3",{"_index":1233,"title":{},"body":{"injectables/S3Service.html":{},"modules/StorageModule.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{}}}],["s3.service",{"_index":1302,"title":{},"body":{"modules/StorageModule.html":{}}}],["s3bucket",{"_index":1230,"title":{},"body":{"injectables/S3Service.html":{}}}],["s3client",{"_index":1232,"title":{},"body":{"injectables/S3Service.html":{},"modules/StorageModule.html":{}}}],["s3module",{"_index":1304,"title":{},"body":{"modules/StorageModule.html":{}}}],["s3module.forrootasync",{"_index":1305,"title":{},"body":{"modules/StorageModule.html":{}}}],["s3putobjectresponse",{"_index":986,"title":{},"body":{"interfaces/IStrorageService.html":{},"injectables/S3Service.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["s3region",{"_index":1231,"title":{},"body":{"injectables/S3Service.html":{}}}],["s3requestpresigner",{"_index":1246,"title":{},"body":{"injectables/S3Service.html":{}}}],["s3service",{"_index":1228,"title":{"injectables/S3Service.html":{}},"body":{"injectables/S3Service.html":{},"modules/StorageModule.html":{},"coverage.html":{}}}],["s3service(configservice",{"_index":1316,"title":{},"body":{"modules/StorageModule.html":{}}}],["s3service.name",{"_index":1264,"title":{},"body":{"injectables/S3Service.html":{}}}],["s@]+@[^\\s@]+\\.[^\\s@]{2,}$/i",{"_index":802,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["safeuser",{"_index":1446,"title":{},"body":{"controllers/UsersController.html":{}}}],["salt",{"_index":560,"title":{},"body":{"injectables/AuthService.html":{}}}],["saltrounds",{"_index":444,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersSubscriber.html":{}}}],["sanitizebody",{"_index":606,"title":{},"body":{"classes/CatchEverythingFilter.html":{}}}],["sanitizebody(body",{"_index":625,"title":{},"body":{"classes/CatchEverythingFilter.html":{}}}],["schema",{"_index":1293,"title":{},"body":{"injectables/SchemaService.html":{}}}],["schema.service",{"_index":102,"title":{},"body":{"modules/AppModule.html":{}}}],["schemaservice",{"_index":67,"title":{"injectables/SchemaService.html":{}},"body":{"modules/AppModule.html":{},"injectables/SchemaService.html":{},"coverage.html":{},"overview.html":{}}}],["schemaservice.name",{"_index":1295,"title":{},"body":{"injectables/SchemaService.html":{}}}],["sdk/credential",{"_index":1251,"title":{},"body":{"injectables/S3Service.html":{},"dependencies.html":{}}}],["sdk/s3",{"_index":1248,"title":{},"body":{"injectables/S3Service.html":{},"dependencies.html":{}}}],["sdk/util",{"_index":1258,"title":{},"body":{"injectables/S3Service.html":{},"dependencies.html":{}}}],["seconds",{"_index":252,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["secret",{"_index":408,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{}}}],["secretaccesskey",{"_index":1308,"title":{},"body":{"modules/StorageModule.html":{}}}],["secretorkey",{"_index":1055,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["secure",{"_index":901,"title":{},"body":{"modules/EmailModule.html":{}}}],["securely",{"_index":1686,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["sendemail",{"_index":912,"title":{},"body":{"classes/EmailService.html":{}}}],["sendemail(to",{"_index":916,"title":{},"body":{"classes/EmailService.html":{}}}],["sending",{"_index":921,"title":{},"body":{"classes/EmailService.html":{}}}],["sent",{"_index":376,"title":{},"body":{"controllers/AuthController.html":{},"classes/EmailService.html":{},"classes/ResetPasswordDto.html":{}}}],["serializable",{"_index":1509,"title":{},"body":{"injectables/UsersService.html":{}}}],["session",{"_index":1028,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/StripeService.html":{}}}],["session.id",{"_index":1337,"title":{},"body":{"injectables/StripeService.html":{}}}],["set",{"_index":212,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["set(key",{"_index":243,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["setmetadata(is_public_key",{"_index":1735,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setting",{"_index":273,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["setupswagger",{"_index":1573,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["setupswagger(app",{"_index":1706,"title":{},"body":{"miscellaneous/functions.html":{}}}],["sha256",{"_index":1277,"title":{},"body":{"injectables/S3Service.html":{}}}],["sign",{"_index":1418,"title":{},"body":{"controllers/UsersController.html":{}}}],["signedurlobject",{"_index":1279,"title":{},"body":{"injectables/S3Service.html":{}}}],["signoptions",{"_index":410,"title":{},"body":{"modules/AuthModule.html":{}}}],["single",{"_index":1027,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["size=${file.size",{"_index":732,"title":{},"body":{"injectables/CloudinaryService.html":{},"injectables/S3Service.html":{}}}],["smithy/hash",{"_index":1253,"title":{},"body":{"injectables/S3Service.html":{},"dependencies.html":{}}}],["smithy/protocol",{"_index":1256,"title":{},"body":{"injectables/S3Service.html":{},"dependencies.html":{}}}],["smithy/url",{"_index":1244,"title":{},"body":{"injectables/S3Service.html":{}}}],["smtp.auth.user",{"_index":906,"title":{},"body":{"modules/EmailModule.html":{}}}],["soft",{"_index":580,"title":{},"body":{"classes/BaseEntity.html":{}}}],["softdelete",{"_index":595,"title":{},"body":{"classes/BaseEntity.html":{}}}],["source",{"_index":4,"title":{},"body":{"interfaces/ApiResponse.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AppRedisModule.html":{},"injectables/AppRedisService.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/AuthResponseDto.html":{},"injectables/AuthService.html":{},"classes/BaseEntity.html":{},"classes/CatchEverythingFilter.html":{},"classes/ChangePasswordDto.html":{},"injectables/CloudinaryService.html":{},"injectables/CreateUserCommand.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserResponseDto.html":{},"modules/EmailModule.html":{},"classes/EmailService.html":{},"interfaces/ErrorResponse.html":{},"classes/ForgotPasswordDto.html":{},"classes/GetProfileResponseDto.html":{},"modules/HttpClientModule.html":{},"injectables/HttpClientService.html":{},"interfaces/IPaymentService.html":{},"interfaces/IStrorageService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"injectables/MorganMiddleware.html":{},"classes/PasswordResetEmailConsumer.html":{},"modules/PaymentModule.html":{},"classes/RefreshTokenDto.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/RequestContextMiddleware.html":{},"classes/ResetPasswordDto.html":{},"guards/RoleGuard.html":{},"injectables/S3Service.html":{},"injectables/SchemaService.html":{},"modules/StorageModule.html":{},"injectables/StripeService.html":{},"injectables/SuccessResponseInterceptor.html":{},"classes/UpdateProfileDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/UsersSubscriber.html":{}}}],["springfield",{"_index":865,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["springfield'})@isstring()@isoptional",{"_index":828,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["src/.../auth",{"_index":1727,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../checkout.ts",{"_index":1728,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../common.utils.ts",{"_index":1698,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../index.ts",{"_index":1680,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../main.cli.ts",{"_index":1696,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../main.ts",{"_index":1697,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../payment",{"_index":1729,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../public.decorator.ts",{"_index":1732,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../s3",{"_index":1730,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../swagger.config.ts",{"_index":1701,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../time.util.ts",{"_index":1700,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../tracing.ts",{"_index":1733,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../user.util.ts",{"_index":1699,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/app.controller.ts",{"_index":27,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:12",{"_index":37,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":71,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.module.ts:81",{"_index":76,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":301,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":303,"title":{},"body":{"injectables/AppService.html":{}}}],["src/commands/create",{"_index":751,"title":{},"body":{"injectables/CreateUserCommand.html":{},"coverage.html":{}}}],["src/common/constants",{"_index":403,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CreateUserCommand.html":{},"modules/EmailModule.html":{},"classes/PasswordResetEmailConsumer.html":{},"modules/PaymentModule.html":{},"modules/StorageModule.html":{},"injectables/StripeService.html":{}}}],["src/common/constants/index.ts",{"_index":1555,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/common/decorators/index.ts",{"_index":1559,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/common/entities/base.entitiy",{"_index":1400,"title":{},"body":{"entities/User.html":{}}}],["src/common/entities/base.entitiy.ts",{"_index":565,"title":{},"body":{"classes/BaseEntity.html":{},"coverage.html":{}}}],["src/common/entities/base.entitiy.ts:15",{"_index":581,"title":{},"body":{"classes/BaseEntity.html":{}}}],["src/common/entities/base.entitiy.ts:22",{"_index":578,"title":{},"body":{"classes/BaseEntity.html":{}}}],["src/common/entities/base.entitiy.ts:30",{"_index":589,"title":{},"body":{"classes/BaseEntity.html":{}}}],["src/common/entities/base.entitiy.ts:8",{"_index":585,"title":{},"body":{"classes/BaseEntity.html":{}}}],["src/common/enums",{"_index":720,"title":{},"body":{"injectables/CloudinaryService.html":{},"injectables/CreateUserCommand.html":{},"classes/CreateUserDto.html":{},"interfaces/IStrorageService.html":{},"classes/PasswordResetEmailConsumer.html":{},"modules/PaymentModule.html":{},"injectables/S3Service.html":{},"modules/StorageModule.html":{},"entities/User.html":{}}}],["src/common/enums/index.ts",{"_index":1683,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/common/filters/exception.filter.ts",{"_index":599,"title":{},"body":{"classes/CatchEverythingFilter.html":{},"coverage.html":{}}}],["src/common/filters/exception.filter.ts:108",{"_index":622,"title":{},"body":{"classes/CatchEverythingFilter.html":{}}}],["src/common/filters/exception.filter.ts:119",{"_index":617,"title":{},"body":{"classes/CatchEverythingFilter.html":{}}}],["src/common/filters/exception.filter.ts:123",{"_index":626,"title":{},"body":{"classes/CatchEverythingFilter.html":{}}}],["src/common/filters/exception.filter.ts:20",{"_index":609,"title":{},"body":{"classes/CatchEverythingFilter.html":{}}}],["src/common/filters/exception.filter.ts:27",{"_index":614,"title":{},"body":{"classes/CatchEverythingFilter.html":{}}}],["src/common/filters/exception.filter.ts:78",{"_index":624,"title":{},"body":{"classes/CatchEverythingFilter.html":{}}}],["src/common/filters/exception.filter.ts:92",{"_index":620,"title":{},"body":{"classes/CatchEverythingFilter.html":{}}}],["src/common/guards/role.guard.ts",{"_index":1219,"title":{},"body":{"guards/RoleGuard.html":{},"coverage.html":{}}}],["src/common/guards/role.guard.ts:13",{"_index":1220,"title":{},"body":{"guards/RoleGuard.html":{}}}],["src/common/guards/role.guard.ts:16",{"_index":1221,"title":{},"body":{"guards/RoleGuard.html":{}}}],["src/common/interceptors/response.interceptor.ts",{"_index":1166,"title":{},"body":{"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/SuccessResponseInterceptor.html":{},"coverage.html":{}}}],["src/common/interceptors/response.interceptor.ts:16",{"_index":1354,"title":{},"body":{"injectables/SuccessResponseInterceptor.html":{}}}],["src/common/interceptors/response.interceptor.ts:53",{"_index":1168,"title":{},"body":{"injectables/RequestBodyAndResponseInterceptor.html":{}}}],["src/common/interceptors/response.interceptor.ts:56",{"_index":1171,"title":{},"body":{"injectables/RequestBodyAndResponseInterceptor.html":{}}}],["src/common/interfaces/api",{"_index":6,"title":{},"body":{"interfaces/ApiResponse.html":{},"controllers/AuthController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["src/common/interfaces/error",{"_index":924,"title":{},"body":{"interfaces/ErrorResponse.html":{},"coverage.html":{}}}],["src/common/middlewares/morgan.middleware.ts",{"_index":1075,"title":{},"body":{"injectables/MorganMiddleware.html":{},"coverage.html":{}}}],["src/common/middlewares/morgan.middleware.ts:11",{"_index":1076,"title":{},"body":{"injectables/MorganMiddleware.html":{}}}],["src/common/middlewares/morgan.middleware.ts:14",{"_index":1079,"title":{},"body":{"injectables/MorganMiddleware.html":{}}}],["src/common/middlewares/request",{"_index":1197,"title":{},"body":{"injectables/RequestContextMiddleware.html":{},"coverage.html":{}}}],["src/common/types/index.ts",{"_index":1565,"title":{},"body":{"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/common/utils/common.utils.ts",{"_index":1567,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/common/utils/time.util.ts",{"_index":1569,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/common/utils/user.util",{"_index":1402,"title":{},"body":{"entities/User.html":{},"injectables/UsersSubscriber.html":{}}}],["src/common/utils/user.util.ts",{"_index":1571,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/config/swagger.config.ts",{"_index":1572,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/main.cli.ts",{"_index":1574,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/main.ts",{"_index":1575,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/modules/auth/auth.controller.ts",{"_index":307,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/modules/auth/auth.controller.ts:31",{"_index":325,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/modules/auth/auth.controller.ts:47",{"_index":332,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/modules/auth/auth.controller.ts:63",{"_index":319,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/modules/auth/auth.controller.ts:79",{"_index":337,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/modules/auth/auth.module.ts",{"_index":388,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/modules/auth/auth.service.ts",{"_index":438,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/modules/auth/auth.service.ts:135",{"_index":453,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:160",{"_index":459,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:21",{"_index":468,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:22",{"_index":464,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:23",{"_index":465,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:24",{"_index":467,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:25",{"_index":466,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:26",{"_index":451,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:50",{"_index":462,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:68",{"_index":455,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:83",{"_index":457,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/consumers/auth.consumer.ts",{"_index":1103,"title":{},"body":{"classes/PasswordResetEmailConsumer.html":{},"coverage.html":{}}}],["src/modules/auth/consumers/auth.consumer.ts:12",{"_index":1106,"title":{},"body":{"classes/PasswordResetEmailConsumer.html":{}}}],["src/modules/auth/consumers/auth.consumer.ts:20",{"_index":1109,"title":{},"body":{"classes/PasswordResetEmailConsumer.html":{}}}],["src/modules/auth/decorators/public.decorator",{"_index":1139,"title":{},"body":{"modules/PaymentModule.html":{}}}],["src/modules/auth/decorators/public.decorator.ts",{"_index":1577,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/modules/auth/dto/auth",{"_index":426,"title":{},"body":{"classes/AuthResponseDto.html":{},"coverage.html":{}}}],["src/modules/auth/dto/forgot",{"_index":925,"title":{},"body":{"classes/ForgotPasswordDto.html":{},"coverage.html":{}}}],["src/modules/auth/dto/login.dto.ts",{"_index":1072,"title":{},"body":{"classes/LoginDto.html":{},"coverage.html":{}}}],["src/modules/auth/dto/login.dto.ts:10",{"_index":1073,"title":{},"body":{"classes/LoginDto.html":{}}}],["src/modules/auth/dto/login.dto.ts:16",{"_index":1074,"title":{},"body":{"classes/LoginDto.html":{}}}],["src/modules/auth/dto/refresh",{"_index":1160,"title":{},"body":{"classes/RefreshTokenDto.html":{},"coverage.html":{}}}],["src/modules/auth/dto/reset",{"_index":1207,"title":{},"body":{"classes/ResetPasswordDto.html":{},"coverage.html":{}}}],["src/modules/auth/guards/jwt",{"_index":990,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["src/modules/auth/guards/local",{"_index":1058,"title":{},"body":{"injectables/LocalAuthGuard.html":{},"coverage.html":{}}}],["src/modules/auth/strategies/jwt.strategy.ts",{"_index":1015,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/modules/auth/strategies/jwt.strategy.ts:34",{"_index":1019,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/modules/auth/strategies/jwt.strategy.ts:8",{"_index":1017,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/modules/auth/strategies/local.strategy.ts",{"_index":1060,"title":{},"body":{"injectables/LocalStrategy.html":{},"coverage.html":{}}}],["src/modules/auth/strategies/local.strategy.ts:17",{"_index":1064,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/modules/auth/strategies/local.strategy.ts:9",{"_index":1062,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/modules/auth/types/auth",{"_index":1580,"title":{},"body":{"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/modules/users/dto/change",{"_index":675,"title":{},"body":{"classes/ChangePasswordDto.html":{},"coverage.html":{}}}],["src/modules/users/dto/create",{"_index":815,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/modules/users/dto/responses.dto.ts",{"_index":877,"title":{},"body":{"classes/CreateUserResponseDto.html":{},"classes/GetProfileResponseDto.html":{},"coverage.html":{}}}],["src/modules/users/dto/responses.dto.ts:15",{"_index":879,"title":{},"body":{"classes/CreateUserResponseDto.html":{}}}],["src/modules/users/dto/responses.dto.ts:23",{"_index":930,"title":{},"body":{"classes/GetProfileResponseDto.html":{}}}],["src/modules/users/dto/responses.dto.ts:29",{"_index":929,"title":{},"body":{"classes/GetProfileResponseDto.html":{}}}],["src/modules/users/dto/responses.dto.ts:9",{"_index":880,"title":{},"body":{"classes/CreateUserResponseDto.html":{}}}],["src/modules/users/dto/update",{"_index":1356,"title":{},"body":{"classes/UpdateProfileDto.html":{},"coverage.html":{}}}],["src/modules/users/entities/user.entity.ts",{"_index":1364,"title":{},"body":{"entities/User.html":{},"coverage.html":{}}}],["src/modules/users/entities/user.entity.ts:106",{"_index":1387,"title":{},"body":{"entities/User.html":{}}}],["src/modules/users/entities/user.entity.ts:115",{"_index":1395,"title":{},"body":{"entities/User.html":{}}}],["src/modules/users/entities/user.entity.ts:122",{"_index":1373,"title":{},"body":{"entities/User.html":{}}}],["src/modules/users/entities/user.entity.ts:129",{"_index":1388,"title":{},"body":{"entities/User.html":{}}}],["src/modules/users/entities/user.entity.ts:136",{"_index":1384,"title":{},"body":{"entities/User.html":{}}}],["src/modules/users/entities/user.entity.ts:22",{"_index":1382,"title":{},"body":{"entities/User.html":{}}}],["src/modules/users/entities/user.entity.ts:30",{"_index":1370,"title":{},"body":{"entities/User.html":{}}}],["src/modules/users/entities/user.entity.ts:37",{"_index":1383,"title":{},"body":{"entities/User.html":{}}}],["src/modules/users/entities/user.entity.ts:44",{"_index":1385,"title":{},"body":{"entities/User.html":{}}}],["src/modules/users/entities/user.entity.ts:51",{"_index":1368,"title":{},"body":{"entities/User.html":{}}}],["src/modules/users/entities/user.entity.ts:59",{"_index":1375,"title":{},"body":{"entities/User.html":{}}}],["src/modules/users/entities/user.entity.ts:67",{"_index":1392,"title":{},"body":{"entities/User.html":{}}}],["src/modules/users/entities/user.entity.ts:75",{"_index":1397,"title":{},"body":{"entities/User.html":{}}}],["src/modules/users/entities/user.entity.ts:83",{"_index":1376,"title":{},"body":{"entities/User.html":{}}}],["src/modules/users/entities/user.entity.ts:91",{"_index":1379,"title":{},"body":{"entities/User.html":{}}}],["src/modules/users/entities/user.entity.ts:99",{"_index":1390,"title":{},"body":{"entities/User.html":{}}}],["src/modules/users/subscribers/user.subscriber.ts",{"_index":1520,"title":{},"body":{"injectables/UsersSubscriber.html":{},"coverage.html":{}}}],["src/modules/users/subscribers/user.subscriber.ts:12",{"_index":1530,"title":{},"body":{"injectables/UsersSubscriber.html":{}}}],["src/modules/users/subscribers/user.subscriber.ts:16",{"_index":1527,"title":{},"body":{"injectables/UsersSubscriber.html":{}}}],["src/modules/users/subscribers/user.subscriber.ts:24",{"_index":1529,"title":{},"body":{"injectables/UsersSubscriber.html":{}}}],["src/modules/users/subscribers/user.subscriber.ts:34",{"_index":1537,"title":{},"body":{"injectables/UsersSubscriber.html":{}}}],["src/modules/users/subscribers/user.subscriber.ts:38",{"_index":1535,"title":{},"body":{"injectables/UsersSubscriber.html":{}}}],["src/modules/users/subscribers/user.subscriber.ts:46",{"_index":1533,"title":{},"body":{"injectables/UsersSubscriber.html":{}}}],["src/modules/users/subscribers/user.subscriber.ts:9",{"_index":1524,"title":{},"body":{"injectables/UsersSubscriber.html":{}}}],["src/modules/users/users.controller.ts",{"_index":1409,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/modules/users/users.controller.ts:28",{"_index":1421,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/modules/users/users.controller.ts:40",{"_index":1424,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/modules/users/users.controller.ts:55",{"_index":1429,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/modules/users/users.controller.ts:72",{"_index":1414,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/modules/users/users.module.ts",{"_index":1458,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/modules/users/users.service",{"_index":790,"title":{},"body":{"injectables/CreateUserCommand.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["src/modules/users/users.service.ts",{"_index":1462,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["src/modules/users/users.service.ts:129",{"_index":1470,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/modules/users/users.service.ts:21",{"_index":1482,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/modules/users/users.service.ts:22",{"_index":1468,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/modules/users/users.service.ts:34",{"_index":1472,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/modules/users/users.service.ts:51",{"_index":1477,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/modules/users/users.service.ts:99",{"_index":1481,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/schema.service.ts",{"_index":1282,"title":{},"body":{"injectables/SchemaService.html":{},"coverage.html":{}}}],["src/schema.service.ts:14",{"_index":1284,"title":{},"body":{"injectables/SchemaService.html":{}}}],["src/schema.service.ts:22",{"_index":1285,"title":{},"body":{"injectables/SchemaService.html":{}}}],["src/services/email/email.module.ts",{"_index":889,"title":{},"body":{"modules/EmailModule.html":{}}}],["src/services/email/email.service",{"_index":1113,"title":{},"body":{"classes/PasswordResetEmailConsumer.html":{}}}],["src/services/email/email.service.ts",{"_index":911,"title":{},"body":{"classes/EmailService.html":{},"coverage.html":{}}}],["src/services/email/email.service.ts:11",{"_index":919,"title":{},"body":{"classes/EmailService.html":{}}}],["src/services/email/email.service.ts:4",{"_index":915,"title":{},"body":{"classes/EmailService.html":{}}}],["src/services/http",{"_index":936,"title":{},"body":{"modules/HttpClientModule.html":{},"injectables/HttpClientService.html":{},"coverage.html":{}}}],["src/services/payment/interfaces/payment.interface.ts",{"_index":968,"title":{},"body":{"interfaces/IPaymentService.html":{},"coverage.html":{}}}],["src/services/payment/interfaces/payment.interface.ts:4",{"_index":974,"title":{},"body":{"interfaces/IPaymentService.html":{}}}],["src/services/payment/interfaces/payment.interface.ts:9",{"_index":978,"title":{},"body":{"interfaces/IPaymentService.html":{}}}],["src/services/payment/payment.module.ts",{"_index":1129,"title":{},"body":{"modules/PaymentModule.html":{}}}],["src/services/payment/payment.module.ts:16",{"_index":1132,"title":{},"body":{"modules/PaymentModule.html":{}}}],["src/services/payment/stripe.service.ts",{"_index":1319,"title":{},"body":{"injectables/StripeService.html":{},"coverage.html":{}}}],["src/services/payment/stripe.service.ts:14",{"_index":1321,"title":{},"body":{"injectables/StripeService.html":{}}}],["src/services/payment/stripe.service.ts:23",{"_index":1322,"title":{},"body":{"injectables/StripeService.html":{}}}],["src/services/payment/stripe.service.ts:45",{"_index":1323,"title":{},"body":{"injectables/StripeService.html":{}}}],["src/services/payment/stripe.service.ts:60",{"_index":1327,"title":{},"body":{"injectables/StripeService.html":{}}}],["src/services/payment/types/checkout.ts",{"_index":1584,"title":{},"body":{"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/services/payment/types/payment",{"_index":1585,"title":{},"body":{"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/services/redis/redis.module",{"_index":401,"title":{},"body":{"modules/AuthModule.html":{},"modules/UsersModule.html":{}}}],["src/services/redis/redis.module.ts",{"_index":191,"title":{},"body":{"modules/AppRedisModule.html":{}}}],["src/services/redis/redis.service",{"_index":481,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["src/services/redis/redis.service.ts",{"_index":204,"title":{},"body":{"injectables/AppRedisService.html":{},"coverage.html":{}}}],["src/services/redis/redis.service.ts:106",{"_index":232,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["src/services/redis/redis.service.ts:29",{"_index":247,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["src/services/redis/redis.service.ts:46",{"_index":238,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["src/services/redis/redis.service.ts:57",{"_index":241,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["src/services/redis/redis.service.ts:72",{"_index":219,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["src/services/redis/redis.service.ts:76",{"_index":236,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["src/services/redis/redis.service.ts:8",{"_index":217,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["src/services/redis/redis.service.ts:90",{"_index":223,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["src/services/storage/cloudinary.service.ts",{"_index":702,"title":{},"body":{"injectables/CloudinaryService.html":{},"coverage.html":{}}}],["src/services/storage/cloudinary.service.ts:14",{"_index":705,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["src/services/storage/cloudinary.service.ts:26",{"_index":710,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["src/services/storage/interfaces/storage.interface.ts",{"_index":980,"title":{},"body":{"interfaces/IStrorageService.html":{},"coverage.html":{}}}],["src/services/storage/interfaces/storage.interface.ts:10",{"_index":985,"title":{},"body":{"interfaces/IStrorageService.html":{}}}],["src/services/storage/interfaces/storage.interface.ts:15",{"_index":984,"title":{},"body":{"interfaces/IStrorageService.html":{}}}],["src/services/storage/s3.service.ts",{"_index":1229,"title":{},"body":{"injectables/S3Service.html":{},"coverage.html":{}}}],["src/services/storage/s3.service.ts:22",{"_index":1238,"title":{},"body":{"injectables/S3Service.html":{}}}],["src/services/storage/s3.service.ts:23",{"_index":1239,"title":{},"body":{"injectables/S3Service.html":{}}}],["src/services/storage/s3.service.ts:24",{"_index":1234,"title":{},"body":{"injectables/S3Service.html":{}}}],["src/services/storage/s3.service.ts:35",{"_index":1236,"title":{},"body":{"injectables/S3Service.html":{}}}],["src/services/storage/s3.service.ts:65",{"_index":1235,"title":{},"body":{"injectables/S3Service.html":{}}}],["src/services/storage/storage.module.ts",{"_index":1297,"title":{},"body":{"modules/StorageModule.html":{}}}],["src/services/storage/storage.module.ts:11",{"_index":1298,"title":{},"body":{"modules/StorageModule.html":{}}}],["src/services/storage/types/s3",{"_index":1588,"title":{},"body":{"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/templates/email",{"_index":910,"title":{},"body":{"modules/EmailModule.html":{}}}],["src/tracing.ts",{"_index":1590,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["st",{"_index":827,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["started",{"_index":1709,"title":{"index.html":{}},"body":{}}],["starting",{"_index":730,"title":{},"body":{"injectables/CloudinaryService.html":{},"injectables/S3Service.html":{}}}],["state",{"_index":824,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/User.html":{}}}],["state/province",{"_index":1396,"title":{},"body":{"entities/User.html":{}}}],["statements",{"_index":1552,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":1130,"title":{},"body":{"modules/PaymentModule.html":{},"modules/StorageModule.html":{}}}],["status",{"_index":670,"title":{},"body":{"classes/CatchEverythingFilter.html":{},"injectables/MorganMiddleware.html":{}}}],["statuscode",{"_index":13,"title":{},"body":{"interfaces/ApiResponse.html":{},"controllers/AuthController.html":{},"classes/CatchEverythingFilter.html":{},"interfaces/ErrorResponse.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/SuccessResponseInterceptor.html":{},"controllers/UsersController.html":{}}}],["stops",{"_index":1044,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["storage",{"_index":1318,"title":{},"body":{"modules/StorageModule.html":{}}}],["storage_provider",{"_index":1300,"title":{},"body":{"modules/StorageModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["storagedriverenum",{"_index":1301,"title":{},"body":{"modules/StorageModule.html":{},"miscellaneous/enumerations.html":{}}}],["storagedriverenum.cloudinary",{"_index":1313,"title":{},"body":{"modules/StorageModule.html":{}}}],["storagedriverenum.s3",{"_index":1315,"title":{},"body":{"modules/StorageModule.html":{}}}],["storagemodule",{"_index":1296,"title":{"modules/StorageModule.html":{}},"body":{"modules/StorageModule.html":{},"modules.html":{}}}],["store",{"_index":249,"title":{},"body":{"injectables/AppRedisService.html":{},"injectables/JwtStrategy.html":{}}}],["stored",{"_index":1031,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["strategies/jwt.strategy",{"_index":398,"title":{},"body":{"modules/AuthModule.html":{}}}],["strategies/local.strategy",{"_index":397,"title":{},"body":{"modules/AuthModule.html":{}}}],["strategy",{"_index":1049,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["stream",{"_index":717,"title":{},"body":{"injectables/CloudinaryService.html":{},"injectables/MorganMiddleware.html":{},"dependencies.html":{}}}],["street",{"_index":1367,"title":{},"body":{"entities/User.html":{}}}],["strict",{"_index":153,"title":{},"body":{"modules/AppModule.html":{},"modules/EmailModule.html":{}}}],["string",{"_index":17,"title":{},"body":{"interfaces/ApiResponse.html":{},"controllers/AppController.html":{},"injectables/AppRedisService.html":{},"injectables/AppService.html":{},"classes/AuthResponseDto.html":{},"injectables/AuthService.html":{},"classes/BaseEntity.html":{},"classes/CatchEverythingFilter.html":{},"classes/ChangePasswordDto.html":{},"injectables/CreateUserCommand.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserResponseDto.html":{},"classes/EmailService.html":{},"interfaces/ErrorResponse.html":{},"classes/ForgotPasswordDto.html":{},"classes/GetProfileResponseDto.html":{},"injectables/HttpClientService.html":{},"interfaces/IStrorageService.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"injectables/MorganMiddleware.html":{},"classes/RefreshTokenDto.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"classes/ResetPasswordDto.html":{},"guards/RoleGuard.html":{},"injectables/S3Service.html":{},"injectables/SuccessResponseInterceptor.html":{},"entities/User.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["stringvalue",{"_index":463,"title":{},"body":{"injectables/AuthService.html":{}}}],["stripe",{"_index":979,"title":{},"body":{"interfaces/IPaymentService.html":{},"modules/PaymentModule.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"guards/RoleGuard.html":{},"injectables/StripeService.html":{},"injectables/SuccessResponseInterceptor.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{}}}],["stripe.checkout.sessioncreateparams",{"_index":972,"title":{},"body":{"interfaces/IPaymentService.html":{},"injectables/StripeService.html":{}}}],["stripe.paymentintent",{"_index":1345,"title":{},"body":{"injectables/StripeService.html":{}}}],["stripe.paymentintentcreateparams",{"_index":977,"title":{},"body":{"interfaces/IPaymentService.html":{},"injectables/StripeService.html":{}}}],["stripe.paymentintentsucceededevent",{"_index":1325,"title":{},"body":{"injectables/StripeService.html":{}}}],["stripe.paymentintentsucceededevent.data",{"_index":1343,"title":{},"body":{"injectables/StripeService.html":{}}}],["stripe.requestoptions",{"_index":973,"title":{},"body":{"interfaces/IPaymentService.html":{},"injectables/StripeService.html":{}}}],["stripe.service",{"_index":1141,"title":{},"body":{"modules/PaymentModule.html":{}}}],["stripe.webhooksecret.account",{"_index":1150,"title":{},"body":{"modules/PaymentModule.html":{}}}],["stripe.webhooksecret.accounttest",{"_index":1152,"title":{},"body":{"modules/PaymentModule.html":{}}}],["stripe_client_token",{"_index":1134,"title":{},"body":{"modules/PaymentModule.html":{}}}],["stripe_webhook_context_type",{"_index":1173,"title":{},"body":{"injectables/RequestBodyAndResponseInterceptor.html":{},"guards/RoleGuard.html":{},"injectables/SuccessResponseInterceptor.html":{}}}],["stripeclient",{"_index":1155,"title":{},"body":{"modules/PaymentModule.html":{},"injectables/StripeService.html":{}}}],["stripecurrencyenum",{"_index":1682,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["stripemodule",{"_index":1135,"title":{},"body":{"modules/PaymentModule.html":{}}}],["stripemodule.forrootasync",{"_index":1143,"title":{},"body":{"modules/PaymentModule.html":{}}}],["stripesecrets",{"_index":1147,"title":{},"body":{"modules/PaymentModule.html":{}}}],["stripeservice",{"_index":1140,"title":{"injectables/StripeService.html":{}},"body":{"modules/PaymentModule.html":{},"injectables/StripeService.html":{},"coverage.html":{}}}],["stripeservice.name",{"_index":1335,"title":{},"body":{"injectables/StripeService.html":{}}}],["stripewebhookhandler",{"_index":1330,"title":{},"body":{"injectables/StripeService.html":{}}}],["stripewebhookhandler('payment_intent.succeeded",{"_index":1326,"title":{},"body":{"injectables/StripeService.html":{}}}],["strong.pass",{"_index":678,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginDto.html":{}}}],["sub",{"_index":513,"title":{},"body":{"injectables/AuthService.html":{}}}],["subject",{"_index":917,"title":{},"body":{"classes/EmailService.html":{}}}],["subscribers",{"_index":156,"title":{},"body":{"modules/AppModule.html":{}}}],["subscribers/user.subscriber",{"_index":1460,"title":{},"body":{"modules/UsersModule.html":{}}}],["success",{"_index":434,"title":{},"body":{"classes/AuthResponseDto.html":{},"classes/CreateUserResponseDto.html":{},"classes/GetProfileResponseDto.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/SuccessResponseInterceptor.html":{}}}],["successful",{"_index":365,"title":{},"body":{"controllers/AuthController.html":{},"classes/AuthResponseDto.html":{},"injectables/CloudinaryService.html":{},"injectables/HttpClientService.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/S3Service.html":{},"injectables/SuccessResponseInterceptor.html":{}}}],["successfully",{"_index":257,"title":{},"body":{"injectables/AppRedisService.html":{},"classes/CreateUserResponseDto.html":{},"classes/EmailService.html":{},"classes/GetProfileResponseDto.html":{},"classes/PasswordResetEmailConsumer.html":{},"injectables/StripeService.html":{},"controllers/UsersController.html":{}}}],["successresponseinterceptor",{"_index":1178,"title":{"injectables/SuccessResponseInterceptor.html":{}},"body":{"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/SuccessResponseInterceptor.html":{},"coverage.html":{}}}],["summary",{"_index":49,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["super",{"_index":797,"title":{},"body":{"injectables/CreateUserCommand.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/PasswordResetEmailConsumer.html":{}}}],["super.canactivate(context",{"_index":1010,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["support",{"_index":1025,"title":{},"body":{"injectables/JwtStrategy.html":{},"modules.html":{}}}],["svg",{"_index":1713,"title":{},"body":{"modules.html":{}}}],["symbol",{"_index":690,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/ResetPasswordDto.html":{}}}],["synchronized",{"_index":1294,"title":{},"body":{"injectables/SchemaService.html":{}}}],["system",{"_index":1494,"title":{},"body":{"injectables/UsersService.html":{}}}],["t",{"_index":14,"title":{},"body":{"interfaces/ApiResponse.html":{}}}],["table",{"_index":1594,"title":{},"body":{"coverage.html":{}}}],["tablename",{"_index":1403,"title":{},"body":{"entities/User.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":1593,"title":{},"body":{"coverage.html":{}}}],["tap",{"_index":1176,"title":{},"body":{"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/SuccessResponseInterceptor.html":{}}}],["tap((response",{"_index":1195,"title":{},"body":{"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/SuccessResponseInterceptor.html":{}}}],["template",{"_index":907,"title":{},"body":{"modules/EmailModule.html":{},"classes/EmailService.html":{},"miscellaneous/variables.html":{}}}],["template_queue_name",{"_index":1136,"title":{},"body":{"modules/PaymentModule.html":{},"injectables/StripeService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["templatequeue",{"_index":1156,"title":{},"body":{"modules/PaymentModule.html":{},"injectables/StripeService.html":{}}}],["text",{"_index":1366,"title":{},"body":{"entities/User.html":{},"miscellaneous/functions.html":{}}}],["textmappropagator",{"_index":1740,"title":{},"body":{"miscellaneous/variables.html":{}}}],["this.appredis",{"_index":262,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["this.appredis.decr(key",{"_index":292,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["this.appredis.del(...keys",{"_index":300,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["this.appredis.del(key",{"_index":297,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["this.appredis.exists(key",{"_index":293,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["this.appredis.get(key",{"_index":280,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["this.appredis.pipeline",{"_index":284,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["this.appredis.set(...(args",{"_index":278,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["this.appredisservice.exists(cachekey",{"_index":520,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.appredisservice.get(cachekey",{"_index":1503,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.appredisservice.set",{"_index":539,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["this.authservice.forgotpassword(email",{"_index":375,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.login",{"_index":362,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.refresh(refreshtoken",{"_index":370,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.resetpassword",{"_index":381,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.validateuser(email",{"_index":1068,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["this.configservice.get('auth.saltrounds",{"_index":1547,"title":{},"body":{"injectables/UsersSubscriber.html":{}}}],["this.configservice.getorthrow",{"_index":493,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.configservice.getorthrow('auth.jwt.expiresin",{"_index":487,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.configservice.getorthrow('auth.saltrounds",{"_index":498,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.configservice.getorthrow('aws.s3.bucket",{"_index":1260,"title":{},"body":{"injectables/S3Service.html":{}}}],["this.configservice.getorthrow('aws.s3.region",{"_index":1262,"title":{},"body":{"injectables/S3Service.html":{}}}],["this.configservice.getorthrow('cloudinary.apikey",{"_index":727,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["this.configservice.getorthrow('cloudinary.apisecret",{"_index":729,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["this.configservice.getorthrow('cloudinary.cloudname",{"_index":725,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["this.configservice.getorthrow('cloudinary.folder')}/${filecategory",{"_index":740,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["this.configservice.getorthrow('nodeenv",{"_index":1288,"title":{},"body":{"injectables/SchemaService.html":{}}}],["this.configservice.getorthrow('redis.bullboard.password",{"_index":179,"title":{},"body":{"modules/AppModule.html":{}}}],["this.configservice.getorthrow('redis.bullboard.username",{"_index":178,"title":{},"body":{"modules/AppModule.html":{}}}],["this.configservice.getorthrow('redis.namespace",{"_index":264,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["this.configservice.getorthrow('url.passwordreset",{"_index":485,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.em.fork",{"_index":800,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["this.emailservice.sendemail",{"_index":1122,"title":{},"body":{"classes/PasswordResetEmailConsumer.html":{}}}],["this.geterrorcode(exception",{"_index":664,"title":{},"body":{"classes/CatchEverythingFilter.html":{}}}],["this.geterrormessage(exception",{"_index":661,"title":{},"body":{"classes/CatchEverythingFilter.html":{}}}],["this.geterrorname(exception",{"_index":662,"title":{},"body":{"classes/CatchEverythingFilter.html":{}}}],["this.gethttpstatus(exception",{"_index":659,"title":{},"body":{"classes/CatchEverythingFilter.html":{}}}],["this.hashpassword(user",{"_index":1541,"title":{},"body":{"injectables/UsersSubscriber.html":{}}}],["this.httpadapterhost",{"_index":635,"title":{},"body":{"classes/CatchEverythingFilter.html":{}}}],["this.httpagent",{"_index":961,"title":{},"body":{"injectables/HttpClientService.html":{}}}],["this.httpsagent",{"_index":963,"title":{},"body":{"injectables/HttpClientService.html":{}}}],["this.httpservice.axiosref.defaults.httpagent",{"_index":960,"title":{},"body":{"injectables/HttpClientService.html":{}}}],["this.httpservice.axiosref.defaults.httpsagent",{"_index":962,"title":{},"body":{"injectables/HttpClientService.html":{}}}],["this.ispasswordmodified(user",{"_index":1542,"title":{},"body":{"injectables/UsersSubscriber.html":{}}}],["this.jwtexpiresin",{"_index":486,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.jwtnotbefore",{"_index":488,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.jwtrefreshexpriresin",{"_index":492,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.jwtrefreshsecret",{"_index":495,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.jwtservice.sign",{"_index":543,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.jwtservice.sign(newpayload",{"_index":542,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.jwtservice.sign(payload",{"_index":515,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.jwtservice.verify(refreshtoken",{"_index":525,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.jwtservice.verify(resettoken",{"_index":555,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.loggercontext",{"_index":668,"title":{},"body":{"classes/CatchEverythingFilter.html":{}}}],["this.loggerservice.error",{"_index":666,"title":{},"body":{"classes/CatchEverythingFilter.html":{},"injectables/CloudinaryService.html":{}}}],["this.loggerservice.log",{"_index":272,"title":{},"body":{"injectables/AppRedisService.html":{},"injectables/CloudinaryService.html":{},"classes/EmailService.html":{},"injectables/HttpClientService.html":{},"classes/PasswordResetEmailConsumer.html":{},"injectables/S3Service.html":{},"injectables/SchemaService.html":{},"injectables/StripeService.html":{}}}],["this.loggerservice.log(`[${method",{"_index":1196,"title":{},"body":{"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/SuccessResponseInterceptor.html":{}}}],["this.loggerservice.log(`creating",{"_index":1338,"title":{},"body":{"injectables/StripeService.html":{}}}],["this.loggerservice.log(`email",{"_index":923,"title":{},"body":{"classes/EmailService.html":{}}}],["this.loggerservice.log(message.trim",{"_index":1101,"title":{},"body":{"injectables/MorganMiddleware.html":{}}}],["this.loggerservice.warn(message.trim",{"_index":1099,"title":{},"body":{"injectables/MorganMiddleware.html":{}}}],["this.mailerservice.sendmail",{"_index":922,"title":{},"body":{"classes/EmailService.html":{}}}],["this.nanoid",{"_index":808,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["this.normalizefields(user",{"_index":1540,"title":{},"body":{"injectables/UsersSubscriber.html":{}}}],["this.orm.getschemagenerator",{"_index":1290,"title":{},"body":{"injectables/SchemaService.html":{}}}],["this.passwordresetemailqueue.add('send",{"_index":548,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.passwordreseturl",{"_index":484,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.passwordreseturl}?reset",{"_index":546,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.redisservice.getorthrow",{"_index":263,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["this.reflector.get(role",{"_index":1223,"title":{},"body":{"guards/RoleGuard.html":{}}}],["this.reflector.getallandoverride(is_public_key",{"_index":1007,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["this.s3bucket",{"_index":1259,"title":{},"body":{"injectables/S3Service.html":{}}}],["this.s3client.putobject",{"_index":1265,"title":{},"body":{"injectables/S3Service.html":{}}}],["this.s3region",{"_index":1261,"title":{},"body":{"injectables/S3Service.html":{}}}],["this.saltrounds",{"_index":497,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.stripeclient.checkout.sessions.create",{"_index":1336,"title":{},"body":{"injectables/StripeService.html":{}}}],["this.stripeclient.paymentintents.create",{"_index":1342,"title":{},"body":{"injectables/StripeService.html":{}}}],["this.templatequeue.add(template_queue_name",{"_index":1346,"title":{},"body":{"injectables/StripeService.html":{}}}],["this.update",{"_index":1519,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.useremailcachekey",{"_index":1488,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.useremailcachekey}:${query?.email",{"_index":1501,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.useremailcachekey}:${user?.email",{"_index":1513,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.useridcachekey",{"_index":1486,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.useridcachekey}:${query",{"_index":1497,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.useridcachekey}:${query?.id",{"_index":1499,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.useridcachekey}:${user?.id",{"_index":1511,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.assign(user",{"_index":1516,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.create(parsed",{"_index":1506,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.create(userdata",{"_index":1495,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.findone",{"_index":1490,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.findoneorfail",{"_index":1514,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.findoneorfail(query",{"_index":1508,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.getentitymanager().merge(user",{"_index":1507,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.getentitymanager().persistandflush(newuser",{"_index":1496,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.getentitymanager().persistandflush(user",{"_index":1517,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersservice.changepassword(userid",{"_index":1452,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.create",{"_index":807,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["this.usersservice.create(user",{"_index":1442,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findone",{"_index":499,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["this.usersservice.update",{"_index":551,"title":{},"body":{"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"controllers/UsersController.html":{}}}],["throw",{"_index":521,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CreateUserCommand.html":{},"injectables/JwtAuthGuard.html":{},"injectables/LocalStrategy.html":{},"guards/RoleGuard.html":{},"modules/StorageModule.html":{},"injectables/UsersService.html":{}}}],["time",{"_index":250,"title":{},"body":{"injectables/AppRedisService.html":{},"injectables/MorganMiddleware.html":{}}}],["timestamp",{"_index":577,"title":{},"body":{"classes/BaseEntity.html":{},"classes/CatchEverythingFilter.html":{},"interfaces/ErrorResponse.html":{},"entities/User.html":{}}}],["timestamptz",{"_index":571,"title":{},"body":{"classes/BaseEntity.html":{},"entities/User.html":{}}}],["timestring",{"_index":1705,"title":{},"body":{"miscellaneous/functions.html":{}}}],["timezone",{"_index":1653,"title":{},"body":{"dependencies.html":{}}}],["token",{"_index":349,"title":{},"body":{"controllers/AuthController.html":{},"classes/AuthResponseDto.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/RefreshTokenDto.html":{},"classes/ResetPasswordDto.html":{},"coverage.html":{}}}],["token'})@apibody({type",{"_index":330,"title":{},"body":{"controllers/AuthController.html":{}}}],["token=${token",{"_index":547,"title":{},"body":{"injectables/AuthService.html":{}}}],["tokens",{"_index":371,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["tokens.ts",{"_index":1581,"title":{},"body":{"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["tokens:refresh:blacklisted:${refreshtoken",{"_index":518,"title":{},"body":{"injectables/AuthService.html":{}}}],["tostream",{"_index":715,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["tostream(file.buffer).pipe(upload",{"_index":750,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["total",{"_index":1091,"title":{},"body":{"injectables/MorganMiddleware.html":{}}}],["trace",{"_index":1688,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["transform",{"_index":860,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["transformer",{"_index":861,"title":{},"body":{"classes/CreateUserDto.html":{},"dependencies.html":{}}}],["transport",{"_index":898,"title":{},"body":{"modules/EmailModule.html":{}}}],["true",{"_index":126,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRedisModule.html":{},"injectables/AppRedisService.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BaseEntity.html":{},"injectables/CreateUserCommand.html":{},"modules/EmailModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"modules/PaymentModule.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"guards/RoleGuard.html":{},"injectables/SuccessResponseInterceptor.html":{},"entities/User.html":{},"injectables/UsersSubscriber.html":{},"miscellaneous/variables.html":{}}}],["try",{"_index":524,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CreateUserCommand.html":{}}}],["ttl",{"_index":240,"title":{},"body":{"injectables/AppRedisService.html":{},"interfaces/IStrorageService.html":{},"injectables/S3Service.html":{}}}],["ttlinfo",{"_index":267,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["ttl}s",{"_index":268,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["type",{"_index":15,"title":{},"body":{"interfaces/ApiResponse.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppRedisService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/AuthResponseDto.html":{},"injectables/AuthService.html":{},"classes/BaseEntity.html":{},"classes/CatchEverythingFilter.html":{},"classes/ChangePasswordDto.html":{},"injectables/CloudinaryService.html":{},"injectables/CreateUserCommand.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserResponseDto.html":{},"classes/EmailService.html":{},"interfaces/ErrorResponse.html":{},"classes/ForgotPasswordDto.html":{},"classes/GetProfileResponseDto.html":{},"injectables/HttpClientService.html":{},"interfaces/IPaymentService.html":{},"interfaces/IStrorageService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"injectables/MorganMiddleware.html":{},"classes/PasswordResetEmailConsumer.html":{},"modules/PaymentModule.html":{},"classes/RefreshTokenDto.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/RequestContextMiddleware.html":{},"classes/ResetPasswordDto.html":{},"guards/RoleGuard.html":{},"injectables/S3Service.html":{},"injectables/SchemaService.html":{},"injectables/StripeService.html":{},"injectables/SuccessResponseInterceptor.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/UsersSubscriber.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":1725,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typeof",{"_index":648,"title":{},"body":{"classes/CatchEverythingFilter.html":{},"classes/CreateUserDto.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/SuccessResponseInterceptor.html":{},"injectables/UsersService.html":{}}}],["types",{"_index":631,"title":{},"body":{"classes/CatchEverythingFilter.html":{},"dependencies.html":{}}}],["types/auth",{"_index":480,"title":{},"body":{"injectables/AuthService.html":{}}}],["types/bcrypt",{"_index":1633,"title":{},"body":{"dependencies.html":{}}}],["types/chalk",{"_index":1635,"title":{},"body":{"dependencies.html":{}}}],["types/morgan",{"_index":1637,"title":{},"body":{"dependencies.html":{}}}],["types/ms",{"_index":1639,"title":{},"body":{"dependencies.html":{}}}],["types/s3",{"_index":987,"title":{},"body":{"interfaces/IStrorageService.html":{},"injectables/S3Service.html":{}}}],["typescript",{"_index":508,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["unauthorized",{"_index":182,"title":{},"body":{"modules/AppModule.html":{},"injectables/JwtAuthGuard.html":{}}}],["unauthorizedexception",{"_index":472,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/LocalStrategy.html":{}}}],["unauthorizedexception('invalid",{"_index":535,"title":{},"body":{"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{}}}],["unauthorizedexception('refresh",{"_index":533,"title":{},"body":{"injectables/AuthService.html":{}}}],["unauthorizedexception(errorobject",{"_index":1014,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["unauthorizedresponse",{"_index":181,"title":{},"body":{"modules/AppModule.html":{}}}],["undefined",{"_index":618,"title":{},"body":{"classes/CatchEverythingFilter.html":{},"classes/CreateUserDto.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/SuccessResponseInterceptor.html":{},"entities/User.html":{},"injectables/UsersService.html":{}}}],["unique",{"_index":1404,"title":{},"body":{"entities/User.html":{}}}],["unknown",{"_index":221,"title":{},"body":{"injectables/AppRedisService.html":{},"injectables/JwtStrategy.html":{}}}],["unlicensed",{"_index":1723,"title":{},"body":{"properties.html":{}}}],["unused",{"_index":510,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["up",{"_index":1419,"title":{},"body":{"controllers/UsersController.html":{}}}],["up')@apioperation({summary",{"_index":1417,"title":{},"body":{"controllers/UsersController.html":{}}}],["update",{"_index":588,"title":{},"body":{"classes/BaseEntity.html":{},"injectables/JwtStrategy.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["update(data",{"_index":1479,"title":{},"body":{"injectables/UsersService.html":{}}}],["updated",{"_index":1450,"title":{},"body":{"controllers/UsersController.html":{}}}],["updatedat",{"_index":568,"title":{},"body":{"classes/BaseEntity.html":{}}}],["updateduser",{"_index":1449,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["updateprofile",{"_index":1411,"title":{},"body":{"controllers/UsersController.html":{}}}],["updateprofile(req",{"_index":1425,"title":{},"body":{"controllers/UsersController.html":{}}}],["updateprofiledto",{"_index":1355,"title":{"classes/UpdateProfileDto.html":{}},"body":{"classes/UpdateProfileDto.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["upload",{"_index":703,"title":{},"body":{"injectables/CloudinaryService.html":{},"interfaces/IStrorageService.html":{},"injectables/S3Service.html":{}}}],["upload(file",{"_index":706,"title":{},"body":{"injectables/CloudinaryService.html":{},"interfaces/IStrorageService.html":{},"injectables/S3Service.html":{}}}],["uploadapierrorresponse",{"_index":714,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["uploadapiresponse",{"_index":713,"title":{},"body":{"injectables/CloudinaryService.html":{},"interfaces/IStrorageService.html":{}}}],["uploadfilecategoryenum",{"_index":709,"title":{},"body":{"injectables/CloudinaryService.html":{},"interfaces/IStrorageService.html":{},"injectables/S3Service.html":{},"miscellaneous/enumerations.html":{}}}],["uppercase",{"_index":688,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/ResetPasswordDto.html":{}}}],["url",{"_index":162,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRedisModule.html":{},"injectables/HttpClientService.html":{},"injectables/MorganMiddleware.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/S3Service.html":{},"injectables/SuccessResponseInterceptor.html":{},"entities/User.html":{},"dependencies.html":{}}}],["url=${result.secure_url",{"_index":748,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["usa",{"_index":868,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["usa'})@isstring()@isoptional",{"_index":833,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["usd",{"_index":1692,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["use",{"_index":254,"title":{},"body":{"injectables/AppRedisService.html":{},"injectables/MorganMiddleware.html":{},"injectables/RequestContextMiddleware.html":{}}}],["use(req",{"_index":1077,"title":{},"body":{"injectables/MorganMiddleware.html":{},"injectables/RequestContextMiddleware.html":{}}}],["useclass",{"_index":423,"title":{},"body":{"modules/AuthModule.html":{}}}],["used",{"_index":259,"title":{},"body":{"injectables/AppRedisService.html":{},"injectables/JwtStrategy.html":{}}}],["usefactory",{"_index":130,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRedisModule.html":{},"modules/AuthModule.html":{},"modules/EmailModule.html":{},"modules/PaymentModule.html":{},"modules/StorageModule.html":{}}}],["useguards",{"_index":339,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(localauthguard",{"_index":357,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(localauthguard)@public()@post('login')@httpcode(httpstatus.ok)@apioperation({summary",{"_index":322,"title":{},"body":{"controllers/AuthController.html":{}}}],["user",{"_index":139,"title":{"entities/User.html":{}},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"classes/AuthResponseDto.html":{},"injectables/AuthService.html":{},"classes/ChangePasswordDto.html":{},"injectables/CreateUserCommand.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserResponseDto.html":{},"modules/EmailModule.html":{},"classes/GetProfileResponseDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"injectables/MorganMiddleware.html":{},"classes/ResetPasswordDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/UsersSubscriber.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["user'})@apibody({type",{"_index":1420,"title":{},"body":{"controllers/UsersController.html":{}}}],["user.command",{"_index":120,"title":{},"body":{"modules/AppModule.html":{}}}],["user.command.ts",{"_index":752,"title":{},"body":{"injectables/CreateUserCommand.html":{},"coverage.html":{}}}],["user.command.ts:14",{"_index":763,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["user.command.ts:23",{"_index":785,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["user.command.ts:52",{"_index":769,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["user.command.ts:58",{"_index":774,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["user.command.ts:64",{"_index":777,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["user.command.ts:70",{"_index":781,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["user.dto",{"_index":1361,"title":{},"body":{"classes/UpdateProfileDto.html":{},"controllers/UsersController.html":{}}}],["user.dto.ts",{"_index":816,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:115",{"_index":844,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:125",{"_index":853,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:129",{"_index":831,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:22",{"_index":839,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:30",{"_index":841,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:38",{"_index":843,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:46",{"_index":829,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:54",{"_index":832,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:62",{"_index":850,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:70",{"_index":855,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:78",{"_index":834,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:91",{"_index":837,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:99",{"_index":847,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.email",{"_index":544,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.firstname",{"_index":550,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.id",{"_index":514,"title":{},"body":{"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{}}}],["user.password",{"_index":503,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersSubscriber.html":{}}}],["user.passwordresetrequested",{"_index":557,"title":{},"body":{"injectables/AuthService.html":{}}}],["user@example.com",{"_index":862,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/ForgotPasswordDto.html":{},"classes/LoginDto.html":{}}}],["user@example.com'})@isemail",{"_index":927,"title":{},"body":{"classes/ForgotPasswordDto.html":{},"classes/LoginDto.html":{}}}],["user@example.com'})@isemail()@isnotempty",{"_index":838,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["userdata",{"_index":1473,"title":{},"body":{"injectables/UsersService.html":{}}}],["userdata.email",{"_index":1491,"title":{},"body":{"injectables/UsersService.html":{}}}],["useremailcachekey",{"_index":1463,"title":{},"body":{"injectables/UsersService.html":{}}}],["userid",{"_index":1447,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["useridcachekey",{"_index":1464,"title":{},"body":{"injectables/UsersService.html":{}}}],["usernamefield",{"_index":1067,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["userrepository",{"_index":1466,"title":{},"body":{"injectables/UsersService.html":{}}}],["userrole",{"_index":1224,"title":{},"body":{"guards/RoleGuard.html":{}}}],["userroleenum",{"_index":782,"title":{},"body":{"injectables/CreateUserCommand.html":{},"classes/CreateUserDto.html":{},"entities/User.html":{},"miscellaneous/enumerations.html":{}}}],["userroleenum.admin",{"_index":872,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["userroleenum.user",{"_index":1393,"title":{},"body":{"entities/User.html":{}}}],["userroleenum})@isenum(userroleenum",{"_index":852,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["users",{"_index":177,"title":{},"body":{"modules/AppModule.html":{},"entities/User.html":{},"controllers/UsersController.html":{}}}],["users.controller",{"_index":1459,"title":{},"body":{"modules/UsersModule.html":{}}}],["users.service",{"_index":1431,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["users/entities/user.entity",{"_index":476,"title":{},"body":{"injectables/AuthService.html":{}}}],["users/users.module",{"_index":392,"title":{},"body":{"modules/AuthModule.html":{}}}],["users/users.service",{"_index":473,"title":{},"body":{"injectables/AuthService.html":{}}}],["users:email",{"_index":1489,"title":{},"body":{"injectables/UsersService.html":{}}}],["users:id",{"_index":1487,"title":{},"body":{"injectables/UsersService.html":{}}}],["userscontroller",{"_index":1408,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["usersmodule",{"_index":64,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersservice",{"_index":447,"title":{"injectables/UsersService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/CreateUserCommand.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["userssubscriber",{"_index":110,"title":{"injectables/UsersSubscriber.html":{}},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{},"injectables/UsersSubscriber.html":{},"coverage.html":{},"overview.html":{}}}],["userssubscriber(configservice",{"_index":158,"title":{},"body":{"modules/AppModule.html":{}}}],["using",{"_index":270,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["util",{"_index":1674,"title":{},"body":{"dependencies.html":{}}}],["uuid",{"_index":584,"title":{},"body":{"classes/BaseEntity.html":{},"dependencies.html":{}}}],["uuidv7",{"_index":582,"title":{},"body":{"classes/BaseEntity.html":{}}}],["v2",{"_index":711,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["v7",{"_index":594,"title":{},"body":{"classes/BaseEntity.html":{}}}],["val",{"_index":770,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["validate",{"_index":152,"title":{},"body":{"modules/AppModule.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["validate(email",{"_index":1063,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["validate(req",{"_index":1018,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validateuser",{"_index":445,"title":{},"body":{"injectables/AuthService.html":{}}}],["validateuser(email",{"_index":460,"title":{},"body":{"injectables/AuthService.html":{}}}],["validator",{"_index":700,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/ForgotPasswordDto.html":{},"classes/LoginDto.html":{},"classes/RefreshTokenDto.html":{},"classes/ResetPasswordDto.html":{},"dependencies.html":{}}}],["value",{"_index":244,"title":{},"body":{"injectables/AppRedisService.html":{},"classes/BaseEntity.html":{},"classes/CatchEverythingFilter.html":{},"injectables/CreateUserCommand.html":{},"classes/CreateUserDto.html":{},"injectables/HttpClientService.html":{},"injectables/S3Service.html":{},"injectables/SchemaService.html":{},"entities/User.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["value.replace(/\\+/g",{"_index":870,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["varchar",{"_index":1369,"title":{},"body":{"entities/User.html":{}}}],["variable",{"_index":1556,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":1731,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["vars",{"_index":511,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["version",{"_index":1088,"title":{},"body":{"injectables/MorganMiddleware.html":{},"properties.html":{}}}],["void",{"_index":80,"title":{},"body":{"modules/AppModule.html":{},"classes/CatchEverythingFilter.html":{},"injectables/MorganMiddleware.html":{},"injectables/RequestContextMiddleware.html":{},"injectables/UsersSubscriber.html":{},"miscellaneous/functions.html":{}}}],["w3cbaggagepropagator",{"_index":1745,"title":{},"body":{"miscellaneous/variables.html":{}}}],["w3ctracecontextpropagator",{"_index":1744,"title":{},"body":{"miscellaneous/variables.html":{}}}],["webhookconfig",{"_index":1146,"title":{},"body":{"modules/PaymentModule.html":{}}}],["webhooks",{"_index":109,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["welcome",{"_index":32,"title":{},"body":{"controllers/AppController.html":{}}}],["welcomemessage",{"_index":29,"title":{},"body":{"controllers/AppController.html":{}}}],["whether",{"_index":1371,"title":{},"body":{"entities/User.html":{}}}],["winston",{"_index":1659,"title":{},"body":{"dependencies.html":{}}}],["without",{"_index":271,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["word",{"_index":1215,"title":{},"body":{"classes/ResetPasswordDto.html":{}}}],["word.'})@isstring()@isnotempty()@matches(/^(?=.*[a",{"_index":1209,"title":{},"body":{"classes/ResetPasswordDto.html":{}}}],["workerhost",{"_index":1112,"title":{},"body":{"classes/PasswordResetEmailConsumer.html":{}}}],["world",{"_index":305,"title":{},"body":{"injectables/AppService.html":{}}}],["write",{"_index":1096,"title":{},"body":{"injectables/MorganMiddleware.html":{}}}],["wrong",{"_index":1047,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["yes",{"_index":242,"title":{},"body":{"injectables/AppRedisService.html":{},"interfaces/IPaymentService.html":{},"interfaces/IStrorageService.html":{},"injectables/S3Service.html":{},"injectables/StripeService.html":{},"injectables/UsersService.html":{}}}],["z\\d!@#$%^&*()_",{"_index":683,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/ResetPasswordDto.html":{}}}],["z])(?=.*[!@#$%^&*()_",{"_index":681,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/ResetPasswordDto.html":{}}}],["z])(?=.*[a",{"_index":680,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/ResetPasswordDto.html":{}}}],["za",{"_index":682,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/ResetPasswordDto.html":{}}}],["zoom",{"_index":68,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRedisModule.html":{},"modules/AuthModule.html":{},"modules/EmailModule.html":{},"modules/HttpClientModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"interfaces/ApiResponse.html":{"url":"interfaces/ApiResponse.html","title":"interface - ApiResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ApiResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/interfaces/api-response.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            data\n                                        \n                                \n                                \n                                        \n                                            message\n                                        \n                                \n                                \n                                        \n                                            statusCode\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        data:     T\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     T\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        message\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        message:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        statusCode\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        statusCode:     HttpStatus\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     HttpStatus\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { HttpStatus } from '@nestjs/common';\n\nexport interface ApiResponse {\n  statusCode: HttpStatus;\n  message: string;\n  data?: T;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                welcomeMessage\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        welcomeMessage\n                        \n                    \n                \n            \n            \n                \n                        \n                    welcomeMessage()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@HttpCode(HttpStatus.OK)@Public()@ApiOperation({summary: 'Welcome message for nest-js-boilerplate'})\n                \n            \n\n                    \n                        \n                            Defined in src/app.controller.ts:12\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     literal type\n\n                        \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, HttpCode, HttpStatus } from '@nestjs/common';\nimport { Public } from './modules/auth/decorators/public.decorator';\nimport { ApiOperation, ApiTags } from '@nestjs/swagger';\n\n@ApiTags('app')\n@Controller()\nexport class AppController {\n  @Get()\n  @HttpCode(HttpStatus.OK)\n  @Public()\n  @ApiOperation({ summary: 'Welcome message for nest-js-boilerplate' })\n  welcomeMessage(): { data: string } {\n    return { data: 'Welcome to nest-js-boilerplate! :)' };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nCreateUserCommand\n\nCreateUserCommand\n\nAppModule -->\n\nCreateUserCommand->AppModule\n\n\n\n\n\nSchemaService\n\nSchemaService\n\nAppModule -->\n\nSchemaService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                        \n                            CreateUserCommand\n                        \n                        \n                            SchemaService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        configure\n                        \n                    \n                \n            \n            \n                \nconfigure(consumer: MiddlewareConsumer)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app.module.ts:81\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                consumer\n                                            \n                                                        MiddlewareConsumer\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n    \n\n\n    \n        import {\n  Logger,\n  MiddlewareConsumer,\n  Module,\n  NestModule,\n  RequestMethod,\n} from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport configuration from './config/index.';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { UsersModule } from './modules/users/users.module';\nimport { AuthModule } from './modules/auth/auth.module';\nimport { MorganMiddleware } from './common/middlewares/morgan.middleware';\nimport { MikroOrmModule } from '@mikro-orm/nestjs';\nimport { PostgreSqlDriver } from '@mikro-orm/postgresql';\nimport { PRODUCTION } from './common/constants';\nimport { SchemaService } from './schema.service';\nimport basicAuth from 'express-basic-auth';\nimport { applyRawBodyOnlyTo } from '@golevelup/nestjs-webhooks';\nimport { UsersSubscriber } from './modules/users/subscribers/user.subscriber';\nimport { BullModule } from '@nestjs/bullmq';\nimport { BullBoardModule } from '@bull-board/nestjs';\nimport { ExpressAdapter } from '@bull-board/express';\nimport { CreateUserCommand } from './commands/create-user.command';\nimport { RequestContextMiddleware } from './common/middlewares/request-context.middleware';\n\n@Module({\n  imports: [\n    ConfigModule.forRoot({\n      isGlobal: true,\n      load: [configuration],\n      cache: true,\n    }),\n    MikroOrmModule.forRootAsync({\n      useFactory: async (configService: ConfigService) => {\n        return {\n          driver: PostgreSqlDriver,\n          dbName: configService.getOrThrow('db.name'),\n          host: configService.getOrThrow('db.host'),\n          port: configService.getOrThrow('db.port'),\n          user: configService.getOrThrow('db.username'),\n          password: configService.getOrThrow('db.password'),\n          autoLoadEntities: true,\n          ensureDatabase:\n            configService.getOrThrow('nodeEnv') !== PRODUCTION,\n          pool: {\n            min: configService.getOrThrow('db.pool.min'),\n            max: configService.getOrThrow('db.pool.max'),\n          },\n          forceUtcTimezone: true,\n          validate: true,\n          strict: true,\n          debug: configService.getOrThrow('db.logging'),\n          subscribers: [new UsersSubscriber(configService)],\n        };\n      },\n      inject: [ConfigService],\n    }),\n    UsersModule,\n    AuthModule,\n    BullModule.forRootAsync({\n      inject: [ConfigService],\n      useFactory: (configService: ConfigService) => ({\n        connection: {\n          url: configService.getOrThrow('redis.url'),\n        },\n      }),\n    }),\n    BullBoardModule.forRoot({\n      adapter: ExpressAdapter,\n      route: '/queues',\n    }),\n  ],\n  controllers: [AppController],\n  providers: [AppService, Logger, SchemaService, CreateUserCommand],\n})\nexport class AppModule implements NestModule {\n  constructor(private readonly configService: ConfigService) {}\n\n  configure(consumer: MiddlewareConsumer) {\n    applyRawBodyOnlyTo(consumer, {\n      method: RequestMethod.ALL,\n      path: '*path/webhook',\n    });\n\n    consumer\n      .apply(\n        basicAuth({\n          users: {\n            [this.configService.getOrThrow('redis.bullBoard.username')]:\n              this.configService.getOrThrow('redis.bullBoard.password'),\n          },\n          challenge: true,\n          unauthorizedResponse: 'Unauthorized',\n        }),\n      )\n      .forRoutes({ path: 'queues', method: RequestMethod.ALL });\n\n    consumer.apply(MorganMiddleware).forRoutes('*');\n\n    consumer.apply(RequestContextMiddleware).forRoutes('*');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppRedisModule.html":{"url":"modules/AppRedisModule.html","title":"module - AppRedisModule","body":"\n                   \n\n\n\n\n    Modules\n    AppRedisModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppRedisModule\n\n\n\ncluster_AppRedisModule_exports\n\n\n\ncluster_AppRedisModule_providers\n\n\n\n\nAppRedisService \n\nAppRedisService \n\n\n\nAppRedisModule\n\nAppRedisModule\n\nAppRedisService  -->\n\nAppRedisModule->AppRedisService \n\n\n\n\n\nAppRedisService\n\nAppRedisService\n\nAppRedisModule -->\n\nAppRedisService->AppRedisModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/services/redis/redis.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppRedisService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AppRedisService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Logger, Module } from '@nestjs/common';\nimport { AppRedisService } from './redis.service';\nimport { RedisModule } from '@liaoliaots/nestjs-redis';\nimport { ConfigService } from '@nestjs/config';\n\n@Module({\n  imports: [\n    RedisModule.forRootAsync({\n      inject: [ConfigService],\n      useFactory: async (configService: ConfigService) => {\n        return {\n          readyLog: true,\n          errorLog: true,\n          config: [\n            {\n              namespace: configService.getOrThrow('redis.namespace'),\n              url: configService.getOrThrow('redis.url'),\n            },\n          ],\n        };\n      },\n    }),\n  ],\n  providers: [AppRedisService, Logger],\n  exports: [AppRedisService],\n})\nexport class AppRedisModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppRedisService.html":{"url":"injectables/AppRedisService.html","title":"injectable - AppRedisService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppRedisService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/redis/redis.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                appRedis\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                decrement\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                deleteMany\n                            \n                            \n                                    Async\n                                exists\n                            \n                            \n                                    Async\n                                get\n                            \n                            \n                                    Async\n                                increment\n                            \n                            \n                                    Async\n                                set\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(loggerService: LoggerService, configService: ConfigService, redisService: RedisService)\n                    \n                \n                        \n                            \n                                Defined in src/services/redis/redis.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        loggerService\n                                                  \n                                                        \n                                                                    LoggerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        redisService\n                                                  \n                                                        \n                                                                    RedisService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        decrement\n                        \n                    \n                \n            \n            \n                \n                        \n                    decrement(key: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/redis/redis.service.ts:72\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(key: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/redis/redis.service.ts:90\n                        \n                    \n\n\n            \n                \n                        Delete a Redis key\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Redis key to delete\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                Number of keys deleted (0 or 1)\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        deleteMany\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteMany(keys: string[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/redis/redis.service.ts:106\n                        \n                    \n\n\n            \n                \n                        Delete multiple Redis keys\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                keys\n                                            \n                                                        string[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Array of Redis keys to delete\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                Number of keys deleted\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        exists\n                        \n                    \n                \n            \n            \n                \n                        \n                    exists(key: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/redis/redis.service.ts:76\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        get\n                        \n                    \n                \n            \n            \n                \n                        \n                    get(key: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/redis/redis.service.ts:46\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        increment\n                        \n                    \n                \n            \n            \n                \n                        \n                    increment(key: string, ttl?: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/redis/redis.service.ts:57\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                ttl\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        set\n                        \n                    \n                \n            \n            \n                \n                        \n                    set(key: string, value: any, ttl?: number, nx: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/redis/redis.service.ts:29\n                        \n                    \n\n\n            \n                \n                        Set a Redis key\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    Redis key\n\n                                            \n                                        \n                                        \n                                                value\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    Value to store\n\n                                            \n                                        \n                                        \n                                                ttl\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    Time-to-live in seconds\n\n                                            \n                                        \n                                        \n                                                nx\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    false\n                                            \n\n                                            \n                                                    Set to true to use NX (only set if key does not exist)\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                'OK' if set successfully, null if not (when NX is used)\n\n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        appRedis\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Redis\n\n                    \n                \n                    \n                        \n                                Defined in src/services/redis/redis.service.ts:8\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable, Logger, LoggerService } from '@nestjs/common';\nimport { RedisService } from '@liaoliaots/nestjs-redis';\nimport Redis from 'ioredis';\nimport { ConfigService } from '@nestjs/config';\n\n@Injectable()\nexport class AppRedisService {\n  private readonly appRedis: Redis;\n\n  constructor(\n    @Inject(Logger)\n    private readonly loggerService: LoggerService,\n    private readonly configService: ConfigService,\n    private readonly redisService: RedisService,\n  ) {\n    this.appRedis = this.redisService.getOrThrow(\n      this.configService.getOrThrow('redis.namespace'),\n    );\n  }\n\n  /**\n   * Set a Redis key\n   * @param key Redis key\n   * @param value Value to store\n   * @param ttl Time-to-live in seconds\n   * @param nx Set to true to use NX (only set if key does not exist)\n   * @returns 'OK' if set successfully, null if not (when NX is used)\n   */\n  async set(key: string, value: any, ttl?: number, nx: boolean = false) {\n    const ttlInfo = ttl ? `TTL: ${ttl}s` : 'no TTL';\n    const nxInfo = nx ? 'using NX' : 'without NX';\n\n    this.loggerService.log(\n      `Setting key \"${key}\" (${ttlInfo}, ${nxInfo})`,\n      AppRedisService.name,\n    );\n\n    const args: (string | number)[] = [key, value];\n\n    if (nx) args.push('NX');\n    if (ttl) args.push('EX', ttl);\n\n    return this.appRedis.set(...(args as Parameters));\n  }\n\n  async get(key: string) {\n    const value = await this.appRedis.get(key);\n\n    this.loggerService.log(\n      `Getting key \"${key}\" - ${value ? 'Found' : 'Not Found'}`,\n      AppRedisService.name,\n    );\n\n    return value;\n  }\n\n  async increment(key: string, ttl?: number): Promise {\n    const pipeline = this.appRedis.pipeline();\n\n    if (ttl) {\n      pipeline.set(key, 0, 'EX', ttl, 'NX');\n    }\n\n    pipeline.incr(key);\n\n    const results = await pipeline.exec();\n    const incrResult = results[ttl ? 1 : 0];\n\n    return incrResult[1];\n  }\n\n  async decrement(key: string) {\n    return this.appRedis.decr(key);\n  }\n\n  async exists(key: string): Promise {\n    const exists = await this.appRedis.exists(key);\n    this.loggerService.log(\n      `Checking existence of key \"${key}\" - ${exists ? 'Exists' : 'Does not exist'}`,\n      AppRedisService.name,\n    );\n    return exists > 0;\n  }\n\n  /**\n   * Delete a Redis key\n   * @param key Redis key to delete\n   * @returns Number of keys deleted (0 or 1)\n   */\n  async delete(key: string): Promise {\n    const result = await this.appRedis.del(key);\n\n    this.loggerService.log(\n      `Deleting key \"${key}\" - ${result > 0 ? 'Deleted' : 'Key not found'}`,\n      AppRedisService.name,\n    );\n\n    return result;\n  }\n\n  /**\n   * Delete multiple Redis keys\n   * @param keys Array of Redis keys to delete\n   * @returns Number of keys deleted\n   */\n  async deleteMany(keys: string[]): Promise {\n    if (keys.length === 0) return 0;\n\n    const result = await this.appRedis.del(...keys);\n\n    this.loggerService.log(\n      `Deleting ${keys.length} keys - ${result} deleted`,\n      AppRedisService.name,\n    );\n\n    return result;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app.service.ts:5\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello World!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                forgotPassword\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                login\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                refresh\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                resetPassword\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        forgotPassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    forgotPassword(body: ForgotPasswordDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Post('forgot-password')@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Request password reset'})@ApiBody({type: ForgotPasswordDto})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/auth/auth.controller.ts:63\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            ForgotPasswordDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(req: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(LocalAuthGuard)@Public()@Post('login')@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'User login'})@ApiBody({type: LoginDto})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/auth/auth.controller.ts:31\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        refresh\n                        \n                    \n                \n            \n            \n                \n                        \n                    refresh(body: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Post('refresh')@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Refresh access token'})@ApiBody({type: RefreshTokenDto})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/auth/auth.controller.ts:47\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        resetPassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    resetPassword(body: ResetPasswordDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Post('reset-password')@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Reset user password'})@ApiBody({type: ResetPasswordDto, description: 'Reset password data'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/auth/auth.controller.ts:79\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            ResetPasswordDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Request,\n  Post,\n  UseGuards,\n  Body,\n  HttpStatus,\n  HttpCode,\n} from '@nestjs/common';\nimport { ApiTags, ApiOperation, ApiBody } from '@nestjs/swagger';\nimport { LocalAuthGuard } from './guards/local-auth.guard';\nimport { AuthService } from './auth.service';\nimport { Public } from './decorators/public.decorator';\nimport { LoginDto } from './dto/login.dto';\nimport { RefreshTokenDto } from './dto/refresh-token-dto';\nimport { ForgotPasswordDto } from './dto/forgot-password.dto';\nimport { ResetPasswordDto } from './dto/reset-password.dto';\nimport { ApiResponse } from 'src/common/interfaces/api-response.interface';\n\n@ApiTags('auth')\n@Controller('auth')\nexport class AuthController {\n  constructor(private readonly authService: AuthService) {}\n\n  @UseGuards(LocalAuthGuard)\n  @Public()\n  @Post('login')\n  @HttpCode(HttpStatus.OK)\n  @ApiOperation({ summary: 'User login' })\n  @ApiBody({ type: LoginDto })\n  async login(@Request() req: any): Promise> {\n    const { access_token, refresh_token } = await this.authService.login(\n      req.user,\n    );\n    return {\n      statusCode: HttpStatus.OK,\n      message: 'Login Successful',\n      data: { accessToken: access_token, refreshToken: refresh_token },\n    };\n  }\n\n  @Public()\n  @Post('refresh')\n  @HttpCode(HttpStatus.OK)\n  @ApiOperation({ summary: 'Refresh access token' })\n  @ApiBody({ type: RefreshTokenDto })\n  async refresh(@Body() body: any): Promise> {\n    const { refreshToken } = body;\n    const { access_token, refresh_token } =\n      await this.authService.refresh(refreshToken);\n    return {\n      statusCode: HttpStatus.OK,\n      message: 'Tokens refreshed',\n      data: { accessToken: access_token, refreshToken: refresh_token },\n    };\n  }\n\n  @Public()\n  @Post('forgot-password')\n  @HttpCode(HttpStatus.OK)\n  @ApiOperation({ summary: 'Request password reset' })\n  @ApiBody({ type: ForgotPasswordDto })\n  async forgotPassword(\n    @Body() body: ForgotPasswordDto,\n  ): Promise> {\n    const { email } = body;\n    await this.authService.forgotPassword(email);\n    return {\n      statusCode: HttpStatus.OK,\n      message: 'Password reset email sent',\n    };\n  }\n\n  @Public()\n  @Post('reset-password')\n  @HttpCode(HttpStatus.OK)\n  @ApiOperation({ summary: 'Reset user password' })\n  @ApiBody({ type: ResetPasswordDto, description: 'Reset password data' })\n  async resetPassword(\n    @Body() body: ResetPasswordDto,\n  ): Promise> {\n    const { resetToken, newPassword, confirmPassword } = body;\n    await this.authService.resetPassword(\n      resetToken,\n      newPassword,\n      confirmPassword,\n    );\n    return {\n      statusCode: HttpStatus.OK,\n      message: 'Password reset successful',\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_AuthModule_exports\n\n\n\n\nAppRedisModule\n\nAppRedisModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nAppRedisModule->AuthModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAuthModule -->\n\nUsersModule->AuthModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthModule -->\n\nLocalStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            JwtStrategy\n                        \n                        \n                            LocalStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AppRedisModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { APP_GUARD } from '@nestjs/core';\nimport { AuthController } from './auth.controller';\nimport { AuthService } from './auth.service';\nimport { UsersModule } from '../users/users.module';\nimport { JwtModule } from '@nestjs/jwt';\nimport { PassportModule } from '@nestjs/passport';\nimport { LocalStrategy } from './strategies/local.strategy';\nimport { JwtStrategy } from './strategies/jwt.strategy';\nimport { JwtAuthGuard } from './guards/jwt-auth.guard';\nimport { ConfigService } from '@nestjs/config';\nimport { AppRedisModule } from 'src/services/redis/redis.module';\nimport { BullModule } from '@nestjs/bullmq';\nimport { BullBoardModule } from '@bull-board/nestjs';\nimport { PASSWORD_RESET_EMAIL_QUEUE_NAME } from 'src/common/constants';\nimport { BullMQAdapter } from '@bull-board/api/bullMQAdapter';\n\n@Module({\n  imports: [\n    UsersModule,\n    PassportModule,\n    JwtModule.registerAsync({\n      useFactory: (configService: ConfigService) => ({\n        global: true,\n        secret: configService.get('auth.jwt.secret'),\n        signOptions: {\n          expiresIn: configService.get('auth.jwt.expiresIn'),\n        },\n      }),\n      inject: [ConfigService],\n    }),\n    BullModule.registerQueue({\n      name: PASSWORD_RESET_EMAIL_QUEUE_NAME,\n      defaultJobOptions: {\n        attempts: 5,\n        backoff: { type: 'exponential', delay: 2000 },\n      },\n    }),\n    BullBoardModule.forFeature({\n      name: PASSWORD_RESET_EMAIL_QUEUE_NAME,\n      adapter: BullMQAdapter,\n    }),\n    AppRedisModule,\n  ],\n  controllers: [AuthController],\n  providers: [\n    AuthService,\n    LocalStrategy,\n    JwtStrategy,\n    {\n      provide: APP_GUARD,\n      useClass: JwtAuthGuard,\n    },\n  ],\n  exports: [AuthService],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AuthResponseDto.html":{"url":"classes/AuthResponseDto.html","title":"class - AuthResponseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AuthResponseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/dto/auth-response.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                accessToken\n                            \n                            \n                                    \n                                message\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        accessToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Access token for authenticated user', example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/dto/auth-response.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        message\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Message indicating the success of the operation', example: 'Login Successful'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/dto/auth-response.dto.ts:14\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\n\nexport class AuthResponseDto {\n  @ApiProperty({\n    description: 'Access token for authenticated user',\n    example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...',\n  })\n  accessToken: string;\n\n  @ApiProperty({\n    description: 'Message indicating the success of the operation',\n    example: 'Login Successful',\n  })\n  message: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                jwtExpiresIn\n                            \n                            \n                                    Private\n                                    Readonly\n                                jwtNotBefore\n                            \n                            \n                                    Private\n                                    Readonly\n                                jwtRefreshExpriresIn\n                            \n                            \n                                    Private\n                                    Readonly\n                                jwtRefreshSecret\n                            \n                            \n                                    Private\n                                    Readonly\n                                passwordResetUrl\n                            \n                            \n                                    Private\n                                    Readonly\n                                saltRounds\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                forgotPassword\n                            \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                refresh\n                            \n                            \n                                    Async\n                                resetPassword\n                            \n                            \n                                    Async\n                                validateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(appRedisService: AppRedisService, usersService: UsersService, jwtService: JwtService, configService: ConfigService, passwordResetEmailQueue: Queue)\n                    \n                \n                        \n                            \n                                Defined in src/modules/auth/auth.service.ts:26\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        appRedisService\n                                                  \n                                                        \n                                                                        AppRedisService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        passwordResetEmailQueue\n                                                  \n                                                        \n                                                                    Queue\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        forgotPassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    forgotPassword(email: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/auth/auth.service.ts:135\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(user: User)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/auth/auth.service.ts:68\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            User\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        refresh\n                        \n                    \n                \n            \n            \n                \n                        \n                    refresh(refreshToken: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/auth/auth.service.ts:83\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                refreshToken\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        resetPassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    resetPassword(resetToken: string, newPassword: string, confirmPassword: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/auth/auth.service.ts:160\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                resetToken\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                newPassword\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                confirmPassword\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validateUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    validateUser(email: string, pass: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/auth/auth.service.ts:50\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                pass\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        jwtExpiresIn\n                        \n                    \n                \n            \n                \n                    \n                        Type :     StringValue\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/auth.service.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        jwtNotBefore\n                        \n                    \n                \n            \n                \n                    \n                        Type :     StringValue\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/auth.service.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        jwtRefreshExpriresIn\n                        \n                    \n                \n            \n                \n                    \n                        Type :     StringValue\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/auth.service.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        jwtRefreshSecret\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/auth.service.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        passwordResetUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/auth.service.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        saltRounds\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/auth.service.ts:26\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import bcrypt from 'bcrypt';\nimport {\n  BadRequestException,\n  Injectable,\n  NotFoundException,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { UsersService } from '../users/users.service';\nimport { JsonWebTokenError, JwtService, NotBeforeError } from '@nestjs/jwt';\nimport { User } from '../users/entities/user.entity';\nimport { ConfigService } from '@nestjs/config';\nimport { InjectQueue } from '@nestjs/bullmq';\nimport { PASSWORD_RESET_EMAIL_QUEUE_NAME } from 'src/common/constants';\nimport { Queue } from 'bullmq';\nimport { AuthTokens } from './types/auth-tokens';\nimport { AppRedisService } from 'src/services/redis/redis.service';\nimport ms, { StringValue } from 'ms';\n\n@Injectable()\nexport class AuthService {\n  private readonly passwordResetUrl: string;\n  private readonly jwtExpiresIn: StringValue;\n  private readonly jwtNotBefore: StringValue;\n  private readonly jwtRefreshSecret: string;\n  private readonly jwtRefreshExpriresIn: StringValue;\n  private readonly saltRounds: number;\n\n  constructor(\n    private readonly appRedisService: AppRedisService,\n    private readonly usersService: UsersService,\n    private readonly jwtService: JwtService,\n    private readonly configService: ConfigService,\n    @InjectQueue(PASSWORD_RESET_EMAIL_QUEUE_NAME)\n    private readonly passwordResetEmailQueue: Queue,\n  ) {\n    this.passwordResetUrl =\n      this.configService.getOrThrow('url.passwordReset');\n    this.jwtExpiresIn =\n      this.configService.getOrThrow('auth.jwt.expiresIn');\n    this.jwtNotBefore = `${(ms(this.jwtExpiresIn) - ms('1m')) / ms('1m')}m`;\n    this.jwtRefreshExpriresIn = this.configService.getOrThrow(\n      'auth.jwt.refreshExpiresIn',\n    );\n    this.jwtRefreshSecret = this.configService.getOrThrow(\n      'auth.jwt.refreshSecret',\n    );\n    this.saltRounds = this.configService.getOrThrow('auth.saltRounds');\n  }\n\n  async validateUser(\n    email: string,\n    pass: string,\n  ): Promise | null> {\n    const user = await this.usersService.findOne(\n      { email },\n      { failHandler: () => new NotFoundException('User not found') },\n    );\n\n    if (user && (await bcrypt.compare(pass, user.password))) {\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      const { password, ...result } = user;\n      return result;\n    }\n\n    return null;\n  }\n\n  async login(user: User): Promise {\n    const payload = {\n      sub: user.id,\n    };\n\n    return {\n      access_token: this.jwtService.sign(payload),\n      refresh_token: this.jwtService.sign(payload, {\n        secret: this.jwtRefreshSecret,\n        expiresIn: this.jwtRefreshExpriresIn,\n        notBefore: this.jwtNotBefore,\n      }),\n    };\n  }\n\n  async refresh(refreshToken: string): Promise {\n    let payload: any;\n\n    const cacheKey = `tokens:refresh:blacklisted:${refreshToken}`;\n    const isBlacklisted = await this.appRedisService.exists(cacheKey);\n    if (isBlacklisted) {\n      throw new BadRequestException('Refresh token is blacklisted');\n    }\n\n    try {\n      payload = this.jwtService.verify(refreshToken, {\n        secret: this.jwtRefreshSecret,\n      });\n    } catch (error) {\n      if (\n        error instanceof JsonWebTokenError &&\n        error.message === 'jwt malformed'\n      ) {\n        throw new BadRequestException('Malformed refresh token');\n      } else if (error instanceof NotBeforeError) {\n        throw new UnauthorizedException('Refresh token not active yet');\n      }\n      throw new UnauthorizedException('Invalid refresh token');\n    }\n\n    const user = await this.usersService.findOne(\n      {\n        id: payload.sub,\n      },\n      { failHandler: () => new NotFoundException('User not found') },\n    );\n\n    const newPayload = {\n      sub: user.id,\n    };\n\n    await this.appRedisService.set(\n      cacheKey,\n      '1',\n      (ms(this.jwtRefreshExpriresIn) + ms('1m')) / ms('1s'),\n    );\n\n    return {\n      access_token: this.jwtService.sign(newPayload),\n      refresh_token: this.jwtService.sign(newPayload, {\n        secret: this.jwtRefreshSecret,\n        expiresIn: this.jwtRefreshExpriresIn,\n        notBefore: this.jwtNotBefore,\n      }),\n    };\n  }\n\n  async forgotPassword(email: string): Promise {\n    const user = await this.usersService.findOne(\n      { email },\n      { failHandler: () => new NotFoundException('User not found') },\n    );\n\n    const token = this.jwtService.sign({\n      email: user.email,\n      sub: user.id,\n    });\n\n    const resetUrl = `${this.passwordResetUrl}?reset-token=${token}`;\n\n    await this.passwordResetEmailQueue.add('send-password-reset-email', {\n      email: user.email,\n      firstName: user.firstName,\n      resetUrl,\n    });\n\n    await this.usersService.update({\n      id: user.id,\n      passwordResetRequested: true,\n    });\n  }\n\n  async resetPassword(\n    resetToken: string,\n    newPassword: string,\n    confirmPassword: string,\n  ): Promise {\n    if (newPassword !== confirmPassword) {\n      throw new BadRequestException('Passwords do not match');\n    }\n\n    const payload = this.jwtService.verify(resetToken);\n    const user = await this.usersService.findOne(\n      {\n        email: payload.email,\n      },\n      { failHandler: () => new NotFoundException('User not found') },\n    );\n\n    if (!user.passwordResetRequested) {\n      throw new NotFoundException('Password reset not requested');\n    }\n\n    const salt = await bcrypt.genSalt(this.saltRounds);\n    const hashedPassword = await bcrypt.hash(newPassword, salt);\n    await this.usersService.update({\n      id: user.id,\n      password: hashedPassword,\n      passwordResetRequested: false,\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/BaseEntity.html":{"url":"classes/BaseEntity.html","title":"class - BaseEntity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  BaseEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/entities/base.entitiy.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                    Optional\n                                deletedAt\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Default value : new Date()\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Property({type: 'timestamptz', defaultRaw: 'CURRENT_TIMESTAMP', comment: 'Record creation timestamp'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/entities/base.entitiy.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        deletedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Property({type: 'timestamptz', nullable: true, comment: 'Soft delete timestamp'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/entities/base.entitiy.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : uuidv7()\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryKey({type: 'uuid'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/entities/base.entitiy.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Default value : new Date()\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Property({type: 'timestamptz', defaultRaw: 'CURRENT_TIMESTAMP', onUpdate: () => , comment: 'Record last update timestamp'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/entities/base.entitiy.ts:30\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Filter, Index, PrimaryKey, Property } from '@mikro-orm/core';\nimport { v7 as uuidv7 } from 'uuid';\n\n@Index({ properties: ['deletedAt'] })\n@Filter({ name: 'softDelete', cond: { deletedAt: null }, default: true })\nexport abstract class BaseEntity {\n  @PrimaryKey({ type: 'uuid' })\n  id: string = uuidv7();\n\n  @Property({\n    type: 'timestamptz',\n    nullable: true,\n    comment: 'Soft delete timestamp',\n  })\n  deletedAt?: Date;\n\n  @Property({\n    type: 'timestamptz',\n    defaultRaw: 'CURRENT_TIMESTAMP',\n    comment: 'Record creation timestamp',\n  })\n  createdAt: Date = new Date();\n\n  @Property({\n    type: 'timestamptz',\n    defaultRaw: 'CURRENT_TIMESTAMP',\n    onUpdate: () => new Date(),\n    comment: 'Record last update timestamp',\n  })\n  updatedAt: Date = new Date();\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CatchEverythingFilter.html":{"url":"classes/CatchEverythingFilter.html","title":"class - CatchEverythingFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CatchEverythingFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/filters/exception.filter.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                loggerContext\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                            \n                                    Private\n                                getErrorCode\n                            \n                            \n                                    Private\n                                getErrorMessage\n                            \n                            \n                                    Private\n                                getErrorName\n                            \n                            \n                                    Private\n                                getHttpStatus\n                            \n                            \n                                    Private\n                                sanitizeBody\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(httpAdapterHost: HttpAdapterHost, loggerService: LoggerService)\n                    \n                \n                        \n                            \n                                Defined in src/common/filters/exception.filter.ts:20\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        httpAdapterHost\n                                                  \n                                                        \n                                                                    HttpAdapterHost\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        loggerService\n                                                  \n                                                        \n                                                                    LoggerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        loggerContext\n                        \n                    \n                \n            \n                \n                    \n                        Default value : CatchEverythingFilter.name\n                    \n                \n                    \n                        \n                                Defined in src/common/filters/exception.filter.ts:20\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        catch\n                        \n                    \n                \n            \n            \n                \ncatch(exception: HandledException, host: ArgumentsHost)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/filters/exception.filter.ts:27\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                exception\n                                            \n                                                            HandledException\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                host\n                                            \n                                                        ArgumentsHost\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        getErrorCode\n                        \n                    \n                \n            \n            \n                \n                        \n                    getErrorCode(exception: HandledException)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/filters/exception.filter.ts:119\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                exception\n                                            \n                                                            HandledException\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     string | undefined\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        getErrorMessage\n                        \n                    \n                \n            \n            \n                \n                        \n                    getErrorMessage(exception: HandledException)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/filters/exception.filter.ts:92\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                exception\n                                            \n                                                            HandledException\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        getErrorName\n                        \n                    \n                \n            \n            \n                \n                        \n                    getErrorName(exception: HandledException)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/filters/exception.filter.ts:108\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                exception\n                                            \n                                                            HandledException\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        getHttpStatus\n                        \n                    \n                \n            \n            \n                \n                        \n                    getHttpStatus(exception: HandledException)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/filters/exception.filter.ts:78\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                exception\n                                            \n                                                            HandledException\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         number\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        sanitizeBody\n                        \n                    \n                \n            \n            \n                \n                        \n                    sanitizeBody(body: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/filters/exception.filter.ts:123\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  ExceptionFilter,\n  Catch,\n  ArgumentsHost,\n  HttpException,\n  HttpStatus,\n  ForbiddenException,\n  Logger,\n  LoggerService,\n  Inject,\n  NotFoundException,\n} from '@nestjs/common';\nimport { HttpAdapterHost } from '@nestjs/core';\nimport { AxiosError } from 'axios';\nimport { HandledException } from '../types';\nimport { ErrorResponse } from '../interfaces/error-response.interface';\n\n@Catch()\nexport class CatchEverythingFilter implements ExceptionFilter {\n  private readonly loggerContext = CatchEverythingFilter.name;\n\n  constructor(\n    private readonly httpAdapterHost: HttpAdapterHost,\n    @Inject(Logger) private readonly loggerService: LoggerService,\n  ) {}\n\n  catch(exception: HandledException, host: ArgumentsHost): void {\n    const { httpAdapter } = this.httpAdapterHost;\n    const ctx = host.switchToHttp();\n    const request = ctx.getRequest();\n    const response = ctx.getResponse();\n    const requestUrl = httpAdapter.getRequestUrl(request);\n\n    if (exception instanceof NotFoundException) {\n      const exceptionResponse = exception.getResponse() as any;\n      const message = exceptionResponse?.message || exception.message;\n\n      const isRoutingError =\n        typeof message === 'string' &&\n        (message.startsWith('Cannot ') ||\n          message.includes('Cannot find') ||\n          (message === 'Not Found' && !exceptionResponse?.error));\n\n      if (isRoutingError) {\n        const responseBody = {\n          statusCode: HttpStatus.NOT_FOUND,\n          message: `Route ${request.method} ${request.url} does not exist ¯\\\\_(ツ)_/¯`,\n        };\n\n        httpAdapter.reply(response, responseBody, HttpStatus.NOT_FOUND);\n        return;\n      }\n    }\n\n    const httpStatus = this.getHttpStatus(exception);\n    const errorMessage = this.getErrorMessage(exception);\n    const name = this.getErrorName(exception);\n    const errorCode = this.getErrorCode(exception);\n\n    const responseBody: ErrorResponse = {\n      statusCode: httpStatus,\n      message: errorMessage,\n      errorCode,\n      timestamp: new Date().toISOString(),\n      path: `${request.method} - ${requestUrl}`,\n      name,\n    };\n\n    this.loggerService.error(\n      `Exception caught: ${name} - ${errorMessage}`,\n      exception,\n      this.loggerContext,\n    );\n\n    httpAdapter.reply(response, responseBody, httpStatus);\n  }\n\n  private getHttpStatus(exception: HandledException): number {\n    if (exception instanceof HttpException) return exception.getStatus();\n    if (exception instanceof AxiosError) {\n      const status = exception.response?.status || HttpStatus.BAD_GATEWAY;\n      return status >= 500 && status \n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ChangePasswordDto.html":{"url":"classes/ChangePasswordDto.html","title":"class - ChangePasswordDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ChangePasswordDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/dto/change-password.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                confirmPassword\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                newPassword\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        confirmPassword\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The confirmation of the new password', example: 'Strong.Pass-1'})@IsString()@IsNotEmpty()@Matches(/^(?=.*[a-z])(?=.*[A-Z])(?=.*[!@#$%^&*()_\\-+=\\[\\]{};':\"\\\\|,.<>\\/?])[A-Za-z\\d!@#$%^&*()_\\-+=\\[\\]{};':\"\\\\|,.<>\\/?]{10,}$/, {message: 'Password must be at least 10 characters long and include uppercase, lowercase, and a symbol (e.g. @, #, ., -)'})@MinLength(10)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dto/change-password.dto.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        newPassword\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The new password for the user. Minimum of 10 characters.', example: 'Strong.Pass-1'})@IsString()@IsNotEmpty()@Matches(/^(?=.*[a-z])(?=.*[A-Z])(?=.*[!@#$%^&*()_\\-+=\\[\\]{};':\"\\\\|,.<>\\/?])[A-Za-z\\d!@#$%^&*()_\\-+=\\[\\]{};':\"\\\\|,.<>\\/?]{10,}$/, {message: 'Password must be at least 10 characters long and include uppercase, lowercase, and a symbol (e.g. @, #, ., -)'})@MinLength(10)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dto/change-password.dto.ts:19\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsNotEmpty, IsString, Matches, MinLength } from 'class-validator';\n\nexport class ChangePasswordDto {\n  @ApiProperty({\n    description: 'The new password for the user. Minimum of 10 characters.',\n    example: 'Strong.Pass-1',\n  })\n  @IsString()\n  @IsNotEmpty()\n  @Matches(\n    /^(?=.*[a-z])(?=.*[A-Z])(?=.*[!@#$%^&*()_\\-+=\\[\\]{};':\"\\\\|,.<>\\/?])[A-Za-z\\d!@#$%^&*()_\\-+=\\[\\]{};':\"\\\\|,.<>\\/?]{10,}$/,\n    {\n      message:\n        'Password must be at least 10 characters long and include uppercase, lowercase, and a symbol (e.g. @, #, ., -)',\n    },\n  )\n  @MinLength(10)\n  newPassword: string;\n\n  @ApiProperty({\n    description: 'The confirmation of the new password',\n    example: 'Strong.Pass-1',\n  })\n  @IsString()\n  @IsNotEmpty()\n  @Matches(\n    /^(?=.*[a-z])(?=.*[A-Z])(?=.*[!@#$%^&*()_\\-+=\\[\\]{};':\"\\\\|,.<>\\/?])[A-Za-z\\d!@#$%^&*()_\\-+=\\[\\]{};':\"\\\\|,.<>\\/?]{10,}$/,\n    {\n      message:\n        'Password must be at least 10 characters long and include uppercase, lowercase, and a symbol (e.g. @, #, ., -)',\n    },\n  )\n  @MinLength(10)\n  confirmPassword: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CloudinaryService.html":{"url":"injectables/CloudinaryService.html","title":"injectable - CloudinaryService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CloudinaryService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/storage/cloudinary.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                upload\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, loggerService: LoggerService)\n                    \n                \n                        \n                            \n                                Defined in src/services/storage/cloudinary.service.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        loggerService\n                                                  \n                                                        \n                                                                    LoggerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        upload\n                        \n                    \n                \n            \n            \n                \n                        \n                    upload(file: MemoryStoredFile, fileCategory: UploadFileCategoryEnum)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/storage/cloudinary.service.ts:26\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                file\n                                            \n                                                        MemoryStoredFile\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                fileCategory\n                                            \n                                                            UploadFileCategoryEnum\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable, Logger, LoggerService } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport {\n  v2 as cloudinary,\n  UploadApiResponse,\n  UploadApiErrorResponse,\n} from 'cloudinary';\nimport toStream = require('buffer-to-stream');\nimport { IStrorageService } from './interfaces/storage.interface';\nimport { UploadFileCategoryEnum } from 'src/common/enums';\nimport { MemoryStoredFile } from 'nestjs-form-data';\n\n@Injectable()\nexport class CloudinaryService implements IStrorageService {\n  constructor(\n    private readonly configService: ConfigService,\n    @Inject(Logger) private readonly loggerService: LoggerService,\n  ) {\n    cloudinary.config({\n      cloud_name: this.configService.getOrThrow('cloudinary.cloudName'),\n      api_key: this.configService.getOrThrow('cloudinary.apiKey'),\n      api_secret: this.configService.getOrThrow('cloudinary.apiSecret'),\n    });\n  }\n\n  async upload(\n    file: MemoryStoredFile,\n    fileCategory: UploadFileCategoryEnum,\n  ): Promise {\n    this.loggerService.log(\n      `Starting upload: filename=\"${file.originalName}\", size=${file.size} bytes, category=${fileCategory}`,\n      CloudinaryService.name,\n    );\n\n    return new Promise((resolve, reject) => {\n      const upload = cloudinary.uploader.upload_stream(\n        {\n          folder: `${this.configService.getOrThrow('cloudinary.folder')}/${fileCategory}`,\n          resource_type: 'auto',\n        },\n        (error: UploadApiErrorResponse, result: UploadApiResponse) => {\n          if (error) {\n            this.loggerService.error(\n              `Upload failed: filename=\"${file.originalName}\", error=${error.message}`,\n              error.stack,\n              CloudinaryService.name,\n            );\n            return reject(error);\n          }\n\n          this.loggerService.log(\n            `Upload successful: filename=\"${file.originalName}\", public_id=${result.public_id}, url=${result.secure_url}`,\n            CloudinaryService.name,\n          );\n          return resolve(result);\n        },\n      );\n\n      toStream(file.buffer).pipe(upload);\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CreateUserCommand.html":{"url":"injectables/CreateUserCommand.html","title":"injectable - CreateUserCommand","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CreateUserCommand\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/commands/create-user.command.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        CommandRunner\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                nanoid\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                parseEmail\n                            \n                            \n                                    \n                                parseFirstName\n                            \n                            \n                                    \n                                parseLastName\n                            \n                            \n                                    \n                                parseRole\n                            \n                            \n                                    Async\n                                run\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(em: EntityManager, usersService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/commands/create-user.command.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        em\n                                                  \n                                                        \n                                                                    EntityManager\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        parseEmail\n                        \n                    \n                \n            \n            \n                \n                        \n                    parseEmail(val: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Option({flags: '-e, --email ', required: true})\n                \n            \n\n                    \n                        \n                            Defined in src/commands/create-user.command.ts:52\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                val\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        parseFirstName\n                        \n                    \n                \n            \n            \n                \n                        \n                    parseFirstName(val: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Option({flags: '-f, --first-name ', required: true})\n                \n            \n\n                    \n                        \n                            Defined in src/commands/create-user.command.ts:58\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                val\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        parseLastName\n                        \n                    \n                \n            \n            \n                \n                        \n                    parseLastName(val: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Option({flags: '-l, --last-name ', required: true})\n                \n            \n\n                    \n                        \n                            Defined in src/commands/create-user.command.ts:64\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                val\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        parseRole\n                        \n                    \n                \n            \n            \n                \n                        \n                    parseRole(val: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Option({flags: '-r, --role ', required: true})\n                \n            \n\n                    \n                        \n                            Defined in src/commands/create-user.command.ts:70\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                val\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         UserRoleEnum\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        run\n                        \n                    \n                \n            \n            \n                \n                        \n                    run(inputs: string[], options: Record)\n                \n            \n\n\n                    \n                        \n                            Defined in src/commands/create-user.command.ts:23\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                inputs\n                                            \n                                                        string[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                options\n                                            \n                                                        Record\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        nanoid\n                        \n                    \n                \n            \n                \n                    \n                        Default value : customAlphabet(PASSWORD_CHARACTER_SET, 10)\n                    \n                \n                    \n                        \n                                Defined in src/commands/create-user.command.ts:14\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { Command, CommandRunner } from 'nest-commander';\nimport { UsersService } from 'src/modules/users/users.service';\nimport { Option } from 'nest-commander';\nimport chalk from 'chalk';\nimport { UserRoleEnum } from 'src/common/enums';\nimport { customAlphabet } from 'nanoid';\nimport { PASSWORD_CHARACTER_SET } from 'src/common/constants';\nimport { EntityManager } from '@mikro-orm/core';\n\n@Command({ name: 'create:user', description: 'Create a new user' })\n@Injectable()\nexport class CreateUserCommand extends CommandRunner {\n  private readonly nanoid = customAlphabet(PASSWORD_CHARACTER_SET, 10);\n\n  constructor(\n    private readonly em: EntityManager,\n    private readonly usersService: UsersService,\n  ) {\n    super();\n  }\n\n  async run(inputs: string[], options: Record): Promise {\n    const { email, firstName, lastName, role } = options;\n\n    const forkedEm = this.em.fork();\n\n    try {\n      const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]{2,}$/i;\n\n      if (!emailRegex.test(email)) {\n        throw new Error('Invalid email format');\n      }\n\n      await forkedEm.transactional(async () => {\n        await this.usersService.create({\n          email,\n          firstName,\n          lastName,\n          password: this.nanoid(),\n          role,\n        });\n      });\n      console.log(chalk.green.bold(`✅ Created user with email: ${email}`));\n    } catch (error) {\n      console.error(\n        chalk.red.bold(`❌ Failed to create user: ${error.message}`),\n      );\n    }\n  }\n\n  @Option({ flags: '-e, --email ', required: true }) parseEmail(\n    val: string,\n  ) {\n    return val;\n  }\n\n  @Option({ flags: '-f, --first-name ', required: true }) parseFirstName(\n    val: string,\n  ) {\n    return val;\n  }\n\n  @Option({ flags: '-l, --last-name ', required: true }) parseLastName(\n    val: string,\n  ) {\n    return val;\n  }\n\n  @Option({ flags: '-r, --role ', required: true }) parseRole(\n    val: string,\n  ) {\n    return val as UserRoleEnum;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/dto/create-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                address\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                changePassword\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                city\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                country\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                countryCode\n                            \n                            \n                                    \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                firstName\n                            \n                            \n                                    \n                                    \n                                    \n                                lastName\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                password\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                phoneNumber\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                postalCode\n                            \n                            \n                                    \n                                    \n                                role\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                state\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The address of the user', example: '123 Main St, Springfield'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dto/create-user.dto.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        changePassword\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsBoolean()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dto/create-user.dto.ts:129\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        city\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The city of the user', example: 'Springfield'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dto/create-user.dto.ts:54\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        country\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The country of the user', example: 'USA'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dto/create-user.dto.ts:78\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        countryCode\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The country code of the user', example: '+1'})@IsString()@IsOptional()@Transform( => )\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dto/create-user.dto.ts:91\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The email of the user', example: 'user@example.com'})@IsEmail()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dto/create-user.dto.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The first name of the user', example: 'John'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dto/create-user.dto.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The last name of the user', example: 'Doe'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dto/create-user.dto.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The password of the user', example: 'Strong.Pass-1'})@IsString()@IsNotEmpty()@Matches(/^(?=.*[a-z])(?=.*[A-Z])(?=.*[!@#$%^&*()_\\-+=\\[\\]{};':\"\\\\|,.<>\\/?])[A-Za-z\\d!@#$%^&*()_\\-+=\\[\\]{};':\"\\\\|,.<>\\/?]{10,}$/, {message: 'Password must be at least 10 characters long and include uppercase, lowercase, and a symbol (e.g. @, #, ., -)'})@MinLength(10)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dto/create-user.dto.ts:115\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        phoneNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The phone number of the user', example: '234567890'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dto/create-user.dto.ts:99\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        postalCode\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The postal code of the user', example: '12345'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dto/create-user.dto.ts:62\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserRoleEnum\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Role of the user', example: undefined, enum: UserRoleEnum})@IsEnum(UserRoleEnum, {message: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dto/create-user.dto.ts:125\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        state\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The state of the user', example: 'Illinois'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dto/create-user.dto.ts:70\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsBoolean,\n  IsEmail,\n  IsEnum,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  Matches,\n  MinLength,\n} from 'class-validator';\nimport { ApiProperty } from '@nestjs/swagger';\nimport { UserRoleEnum } from 'src/common/enums';\nimport { Transform } from 'class-transformer';\n\nexport class CreateUserDto {\n  @ApiProperty({\n    description: 'The email of the user',\n    example: 'user@example.com',\n  })\n  @IsEmail()\n  @IsNotEmpty()\n  email: string;\n\n  @ApiProperty({\n    description: 'The first name of the user',\n    example: 'John',\n  })\n  @IsString()\n  @IsNotEmpty()\n  firstName: string;\n\n  @ApiProperty({\n    description: 'The last name of the user',\n    example: 'Doe',\n  })\n  @IsString()\n  @IsNotEmpty()\n  lastName: string;\n\n  @ApiProperty({\n    description: 'The address of the user',\n    example: '123 Main St, Springfield',\n  })\n  @IsString()\n  @IsOptional()\n  address?: string;\n\n  @ApiProperty({\n    description: 'The city of the user',\n    example: 'Springfield',\n  })\n  @IsString()\n  @IsOptional()\n  city?: string;\n\n  @ApiProperty({\n    description: 'The postal code of the user',\n    example: '12345',\n  })\n  @IsString()\n  @IsOptional()\n  postalCode?: string;\n\n  @ApiProperty({\n    description: 'The state of the user',\n    example: 'Illinois',\n  })\n  @IsString()\n  @IsOptional()\n  state?: string;\n\n  @ApiProperty({\n    description: 'The country of the user',\n    example: 'USA',\n  })\n  @IsString()\n  @IsOptional()\n  country?: string;\n\n  @ApiProperty({\n    description: 'The country code of the user',\n    example: '+1',\n  })\n  @IsString()\n  @IsOptional()\n  @Transform(({ value }) => {\n    if (typeof value !== 'string') return value;\n    const cleaned = value.replace(/\\+/g, '');\n    return cleaned ? `+${cleaned}` : '';\n  })\n  countryCode?: string;\n\n  @ApiProperty({\n    description: 'The phone number of the user',\n    example: '234567890',\n  })\n  @IsString()\n  @IsOptional()\n  phoneNumber?: string;\n\n  @ApiProperty({\n    description: 'The password of the user',\n    example: 'Strong.Pass-1',\n  })\n  @IsString()\n  @IsNotEmpty()\n  @Matches(\n    /^(?=.*[a-z])(?=.*[A-Z])(?=.*[!@#$%^&*()_\\-+=\\[\\]{};':\"\\\\|,.<>\\/?])[A-Za-z\\d!@#$%^&*()_\\-+=\\[\\]{};':\"\\\\|,.<>\\/?]{10,}$/,\n    {\n      message:\n        'Password must be at least 10 characters long and include uppercase, lowercase, and a symbol (e.g. @, #, ., -)',\n    },\n  )\n  @MinLength(10)\n  password: string;\n\n  @ApiProperty({\n    description: 'Role of the user',\n    example: UserRoleEnum.ADMIN,\n    enum: UserRoleEnum,\n  })\n  @IsEnum(UserRoleEnum, {\n    message: `role must be one of: ${Object.values(UserRoleEnum).join(', ')}`,\n  })\n  role: UserRoleEnum;\n\n  @IsBoolean()\n  @IsOptional()\n  changePassword?: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserResponseDto.html":{"url":"classes/CreateUserResponseDto.html","title":"class - CreateUserResponseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserResponseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/dto/responses.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                data\n                            \n                            \n                                    \n                                message\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        data\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The newly created user', type: User})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dto/responses.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        message\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Message indicating the success of the operation', example: 'User created successfully'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dto/responses.dto.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { User } from '../entities/user.entity';\n\nexport class CreateUserResponseDto {\n  @ApiProperty({\n    description: 'Message indicating the success of the operation',\n    example: 'User created successfully',\n  })\n  message: string;\n\n  @ApiProperty({\n    description: 'The newly created user',\n    type: User,\n  })\n  data: User;\n}\n\nexport class GetProfileResponseDto {\n  @ApiProperty({\n    description: 'Message indicating the success of the operation',\n    example: 'Profile fetched successfully',\n  })\n  message: string;\n\n  @ApiProperty({\n    description: 'The profile of the user',\n    type: User,\n  })\n  data: User;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/EmailModule.html":{"url":"modules/EmailModule.html","title":"module - EmailModule","body":"\n                   \n\n\n\n\n    Modules\n    EmailModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_EmailModule\n\n\n\ncluster_EmailModule_exports\n\n\n\n\nEmailService \n\nEmailService \n\n\n\nEmailModule\n\nEmailModule\n\nEmailService  -->\n\nEmailModule->EmailService \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/services/email/email.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Exports\n                    \n                        \n                            EmailService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Logger, Module } from '@nestjs/common';\nimport { EmailService } from './email.service';\nimport { MailerModule } from '@nestjs-modules/mailer';\nimport { ConfigService } from '@nestjs/config';\nimport { EMAIL_FROM_NAME } from 'src/common/constants';\nimport { PugAdapter } from '@nestjs-modules/mailer/dist/adapters/pug.adapter';\nimport { join } from 'path';\n\n@Module({\n  imports: [\n    MailerModule.forRootAsync({\n      useFactory: (configService: ConfigService) => ({\n        transport: {\n          host: configService.getOrThrow('smtp.host'),\n          port: configService.getOrThrow('smtp.port'),\n          secure: configService.getOrThrow('smtp.secure'),\n          auth: {\n            user: configService.getOrThrow('smtp.auth.user'),\n            pass: configService.getOrThrow('smtp.auth.pass'),\n          },\n        },\n        defaults: {\n          from: `\"${EMAIL_FROM_NAME}\" ('smtp.auth.user')}>`,\n        },\n        template: {\n          dir: join(process.cwd(), 'src/templates/email'),\n          adapter: new PugAdapter(),\n          options: {\n            strict: true,\n          },\n        },\n      }),\n      inject: [ConfigService],\n    }),\n  ],\n  providers: [EmailService, Logger],\n  controllers: [],\n  exports: [EmailService],\n})\nexport class EmailModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/EmailService.html":{"url":"classes/EmailService.html","title":"class - EmailService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  EmailService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/email/email.service.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                sendEmail\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(mailerService: MailerService, loggerService: LoggerService)\n                    \n                \n                        \n                            \n                                Defined in src/services/email/email.service.ts:4\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        mailerService\n                                                  \n                                                        \n                                                                    MailerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        loggerService\n                                                  \n                                                        \n                                                                    LoggerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        sendEmail\n                        \n                    \n                \n            \n            \n                \n                        \n                    sendEmail(to: string | string[], subject: string, template: string, context: Record)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/email/email.service.ts:11\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                to\n                                            \n                                                        string | string[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                subject\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                template\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                context\n                                            \n                                                        Record\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MailerService } from '@nestjs-modules/mailer';\nimport { Inject, Logger, LoggerService } from '@nestjs/common';\n\nexport class EmailService {\n  constructor(\n    @Inject(MailerService)\n    private readonly mailerService: MailerService,\n    @Inject(Logger) private readonly loggerService: LoggerService,\n  ) {}\n\n  async sendEmail(\n    to: string | string[],\n    subject: string,\n    template: string,\n    context: Record,\n  ): Promise {\n    this.loggerService.log(\n      `Sending email to: ${to} with subject: ${subject}`,\n      'EmailService',\n    );\n\n    await this.mailerService.sendMail({\n      to,\n      subject,\n      template,\n      context,\n    });\n\n    this.loggerService.log(`Email sent successfully to: ${to}`, 'EmailService');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ErrorResponse.html":{"url":"interfaces/ErrorResponse.html","title":"interface - ErrorResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ErrorResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/interfaces/error-response.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            errorCode\n                                        \n                                \n                                \n                                        \n                                            message\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                                \n                                        \n                                            path\n                                        \n                                \n                                \n                                        \n                                            statusCode\n                                        \n                                \n                                \n                                        \n                                            timestamp\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        errorCode\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        errorCode:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        message\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        message:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        path\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        path:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        statusCode\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        statusCode:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        timestamp\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        timestamp:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface ErrorResponse {\n  statusCode: number;\n  message: string;\n  errorCode?: string;\n  timestamp: string;\n  path: string;\n  name: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ForgotPasswordDto.html":{"url":"classes/ForgotPasswordDto.html","title":"class - ForgotPasswordDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ForgotPasswordDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/dto/forgot-password.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                email\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'user@example.com'})@IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/dto/forgot-password.dto.ts:7\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail } from 'class-validator';\nimport { ApiProperty } from '@nestjs/swagger';\n\nexport class ForgotPasswordDto {\n  @ApiProperty({ example: 'user@example.com' })\n  @IsEmail()\n  email: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetProfileResponseDto.html":{"url":"classes/GetProfileResponseDto.html","title":"class - GetProfileResponseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetProfileResponseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/dto/responses.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                data\n                            \n                            \n                                    \n                                message\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        data\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The profile of the user', type: User})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dto/responses.dto.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        message\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Message indicating the success of the operation', example: 'Profile fetched successfully'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dto/responses.dto.ts:23\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { User } from '../entities/user.entity';\n\nexport class CreateUserResponseDto {\n  @ApiProperty({\n    description: 'Message indicating the success of the operation',\n    example: 'User created successfully',\n  })\n  message: string;\n\n  @ApiProperty({\n    description: 'The newly created user',\n    type: User,\n  })\n  data: User;\n}\n\nexport class GetProfileResponseDto {\n  @ApiProperty({\n    description: 'Message indicating the success of the operation',\n    example: 'Profile fetched successfully',\n  })\n  message: string;\n\n  @ApiProperty({\n    description: 'The profile of the user',\n    type: User,\n  })\n  data: User;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/HttpClientModule.html":{"url":"modules/HttpClientModule.html","title":"module - HttpClientModule","body":"\n                   \n\n\n\n\n    Modules\n    HttpClientModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_HttpClientModule\n\n\n\ncluster_HttpClientModule_exports\n\n\n\ncluster_HttpClientModule_providers\n\n\n\n\nHttpClientService \n\nHttpClientService \n\n\n\nHttpClientModule\n\nHttpClientModule\n\nHttpClientService  -->\n\nHttpClientModule->HttpClientService \n\n\n\n\n\nHttpClientService\n\nHttpClientService\n\nHttpClientModule -->\n\nHttpClientService->HttpClientModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/services/http-client/http-client.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            HttpClientService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            HttpClientService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Logger, Module } from '@nestjs/common';\nimport { HttpModule } from '@nestjs/axios';\nimport { HttpClientService } from './http-client.service';\n\n@Module({\n  imports: [HttpModule],\n  providers: [HttpClientService, Logger],\n  exports: [HttpClientService],\n})\nexport class HttpClientModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/HttpClientService.html":{"url":"injectables/HttpClientService.html","title":"injectable - HttpClientService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  HttpClientService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/http-client/http-client.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                httpAgent\n                            \n                            \n                                    Private\n                                    Readonly\n                                httpsAgent\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                makeHttpRequest\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(httpService: HttpService, loggerService: LoggerService)\n                    \n                \n                        \n                            \n                                Defined in src/services/http-client/http-client.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        httpService\n                                                  \n                                                        \n                                                                    HttpService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        loggerService\n                                                  \n                                                        \n                                                                    LoggerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        makeHttpRequest\n                        \n                    \n                \n            \n            \n                \n                        \n                    makeHttpRequest(url: string, options: AxiosRequestConfig)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/http-client/http-client.service.ts:21\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                url\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                options\n                                            \n                                                        AxiosRequestConfig\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        httpAgent\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new http.Agent({ keepAlive: false })\n                    \n                \n                    \n                        \n                                Defined in src/services/http-client/http-client.service.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        httpsAgent\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new https.Agent({ keepAlive: false })\n                    \n                \n                    \n                        \n                                Defined in src/services/http-client/http-client.service.ts:11\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { HttpService } from '@nestjs/axios';\nimport { Inject, Injectable, Logger, LoggerService } from '@nestjs/common';\nimport { AxiosRequestConfig } from 'axios';\nimport http from 'http';\nimport https from 'https';\nimport { lastValueFrom } from 'rxjs';\n\n@Injectable()\nexport class HttpClientService {\n  private readonly httpAgent = new http.Agent({ keepAlive: false });\n  private readonly httpsAgent = new https.Agent({ keepAlive: false });\n\n  constructor(\n    private readonly httpService: HttpService,\n    @Inject(Logger) private readonly loggerService: LoggerService,\n  ) {\n    this.httpService.axiosRef.defaults.httpAgent = this.httpAgent;\n    this.httpService.axiosRef.defaults.httpsAgent = this.httpsAgent;\n  }\n\n  async makeHttpRequest(\n    url: string,\n    options: AxiosRequestConfig,\n  ): Promise {\n    this.loggerService.log(\n      `Making HTTP request to ${url}`,\n      HttpClientService.name,\n    );\n\n    const data =\n      (await lastValueFrom(this.httpService.request({ url, ...options }))) ||\n      {};\n\n    this.loggerService.log(\n      `HTTP request to ${url} successful`,\n      HttpClientService.name,\n    );\n\n    return data;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IPaymentService.html":{"url":"interfaces/IPaymentService.html","title":"interface - IPaymentService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IPaymentService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/payment/interfaces/payment.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        createCheckoutSession\n                                    \n                                \n                                \n                                    \n                                        createPaymentIntent\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        createCheckoutSession\n                        \n                    \n                \n            \n            \n                \ncreateCheckoutSession(params: Stripe.Checkout.SessionCreateParams, options?: Stripe.RequestOptions)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/payment/interfaces/payment.interface.ts:4\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                params\n                                            \n                                                            Stripe.Checkout.SessionCreateParams\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                options\n                                            \n                                                        Stripe.RequestOptions\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createPaymentIntent\n                        \n                    \n                \n            \n            \n                \ncreatePaymentIntent(params: Stripe.PaymentIntentCreateParams, options?: Stripe.RequestOptions)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/payment/interfaces/payment.interface.ts:9\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                params\n                                            \n                                                            Stripe.PaymentIntentCreateParams\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                options\n                                            \n                                                        Stripe.RequestOptions\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import Stripe from 'stripe';\n\nexport interface IPaymentService {\n  createCheckoutSession(\n    params: Stripe.Checkout.SessionCreateParams,\n    options?: Stripe.RequestOptions,\n  ): Promise>;\n\n  createPaymentIntent(\n    params: Stripe.PaymentIntentCreateParams,\n    options?: Stripe.RequestOptions,\n  ): Promise>;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IStrorageService.html":{"url":"interfaces/IStrorageService.html","title":"interface - IStrorageService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IStrorageService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/storage/interfaces/storage.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                        Optional\n                                    \n                                        createPresignedUrlWithoutClient\n                                    \n                                \n                                \n                                    \n                                        upload\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        createPresignedUrlWithoutClient\n                        \n                    \n                \n            \n            \n                \ncreatePresignedUrlWithoutClient(key: string, method?: HttpRequestMethodEnum, ttl?: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/storage/interfaces/storage.interface.ts:15\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                method\n                                            \n                                                            HttpRequestMethodEnum\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                        \n                                                ttl\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        upload\n                        \n                    \n                \n            \n            \n                \nupload(file: MemoryStoredFile, fileCategory: UploadFileCategoryEnum)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/storage/interfaces/storage.interface.ts:10\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                file\n                                            \n                                                        MemoryStoredFile\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                fileCategory\n                                            \n                                                            UploadFileCategoryEnum\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { UploadApiResponse } from 'cloudinary';\nimport { MemoryStoredFile } from 'nestjs-form-data';\nimport {\n  HttpRequestMethodEnum,\n  UploadFileCategoryEnum,\n} from 'src/common/enums';\nimport { S3PutObjectResponse } from '../types/s3-put-object-response';\n\nexport interface IStrorageService {\n  upload(\n    file: MemoryStoredFile,\n    fileCategory: UploadFileCategoryEnum,\n  ): Promise;\n\n  createPresignedUrlWithoutClient?(\n    key: string,\n    method?: HttpRequestMethodEnum,\n    ttl?: number,\n  ): Promise;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtAuthGuard.html":{"url":"injectables/JwtAuthGuard.html","title":"injectable - JwtAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/guards/jwt-auth.guard.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        AuthGuard('jwt')\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                            \n                                handleRequest\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/modules/auth/guards/jwt-auth.guard.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/auth/guards/jwt-auth.guard.ts:16\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        handleRequest\n                        \n                    \n                \n            \n            \n                \nhandleRequest(err: Error, user: any, info: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/auth/guards/jwt-auth.guard.ts:27\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                err\n                                            \n                                                        Error\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                info\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  ExecutionContext,\n  Injectable,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { AuthGuard } from '@nestjs/passport';\nimport { IS_PUBLIC_KEY } from '../decorators/public.decorator';\n\n@Injectable()\nexport class JwtAuthGuard extends AuthGuard('jwt') {\n  constructor(private reflector: Reflector) {\n    super();\n  }\n\n  canActivate(context: ExecutionContext) {\n    const isPublic = this.reflector.getAllAndOverride(IS_PUBLIC_KEY, [\n      context.getHandler(),\n      context.getClass(),\n    ]);\n    if (isPublic) {\n      return true;\n    }\n    return super.canActivate(context);\n  }\n\n  handleRequest(err: Error, user: any, info: any) {\n    if (err || !user) {\n      let errorObject: Error = {\n        name: info?.name || 'UnauthorizedException',\n        message: info?.message || 'Unauthorized',\n      };\n\n      throw new UnauthorizedException(errorObject);\n    }\n\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/strategies/jwt.strategy.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PassportStrategy(Strategy)\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, usersService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/auth/strategies/jwt.strategy.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                        \n                    validate(req: Request, payload: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/auth/strategies/jwt.strategy.ts:34\n                        \n                    \n\n\n            \n                \n                        NOTE: req is available here and can be used to extract the raw JWT.\nThis can support enforcing a single active session per user:\n\nCompare the JWT in the request with the token stored in the user document.\nReject the request if they don't match (i.e., user is logged in elsewhere).\n\nImplementation details:\n\nStore or update the token in the user document during login and token refresh.\nThis logic should be implemented in the\nlogin() (needs to be implemented as login currently stops at the controller level and no it's not wrong)\n and refresh() methods of the AuthService class.\n\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                payload\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ExtractJwt, Strategy } from 'passport-jwt';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Injectable, NotFoundException } from '@nestjs/common';\nimport { UsersService } from 'src/modules/users/users.service';\nimport { ConfigService } from '@nestjs/config';\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  constructor(\n    configService: ConfigService,\n    private usersService: UsersService,\n  ) {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      ignoreExpiration: false,\n      secretOrKey: configService.getOrThrow('auth.jwt.secret'),\n      passReqToCallback: true,\n    });\n  }\n\n  /**\n   * NOTE: `req` is available here and can be used to extract the raw JWT.\n   *\n   * This can support enforcing a single active session per user:\n   * - Compare the JWT in the request with the token stored in the user document.\n   * - Reject the request if they don't match (i.e., user is logged in elsewhere).\n   *\n   * Implementation details:\n   * - Store or update the token in the user document during login and token refresh.\n   * - This logic should be implemented in the\n   * `login()` (needs to be implemented as login currently stops at the controller level and no it's not wrong)\n   *  and `refresh()` methods of the `AuthService` class.\n   */\n  async validate(req: Request, payload: any) {\n    const user = await this.usersService.findOne(\n      {\n        id: payload.sub,\n      },\n      { failHandler: () => new NotFoundException('User not found') },\n    );\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalAuthGuard.html":{"url":"injectables/LocalAuthGuard.html","title":"injectable - LocalAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LocalAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/guards/local-auth.guard.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        AuthGuard('local')\n            \n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class LocalAuthGuard extends AuthGuard('local') {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalStrategy.html":{"url":"injectables/LocalStrategy.html","title":"injectable - LocalStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LocalStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/strategies/local.strategy.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PassportStrategy(Strategy)\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService, usersService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/auth/strategies/local.strategy.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                        \n                    validate(email: string, password: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/auth/strategies/local.strategy.ts:17\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                password\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Strategy } from 'passport-local';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { AuthService } from '../auth.service';\nimport { UsersService } from 'src/modules/users/users.service';\nimport moment from 'moment';\n\n@Injectable()\nexport class LocalStrategy extends PassportStrategy(Strategy) {\n  constructor(\n    private authService: AuthService,\n    private usersService: UsersService,\n  ) {\n    super({ usernameField: 'email' });\n  }\n\n  async validate(email: string, password: string): Promise {\n    const user = await this.authService.validateUser(email, password);\n    if (!user) {\n      throw new UnauthorizedException('Invalid credentials');\n    }\n    await this.usersService.update({\n      id: user.id,\n      lastLoggedIn: moment().utc().toDate(),\n    });\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginDto.html":{"url":"classes/LoginDto.html","title":"class - LoginDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/dto/login.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The email of the user', example: 'user@example.com'})@IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/dto/login.dto.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The password of the user', example: 'Strong.Pass-1'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/dto/login.dto.ts:16\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsEmail } from 'class-validator';\n\nexport class LoginDto {\n  @ApiProperty({\n    description: 'The email of the user',\n    example: 'user@example.com',\n  })\n  @IsEmail()\n  email: string;\n\n  @ApiProperty({\n    description: 'The password of the user',\n    example: 'Strong.Pass-1',\n  })\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MorganMiddleware.html":{"url":"injectables/MorganMiddleware.html","title":"injectable - MorganMiddleware","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  MorganMiddleware\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/middlewares/morgan.middleware.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                use\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(loggerService: LoggerService)\n                    \n                \n                        \n                            \n                                Defined in src/common/middlewares/morgan.middleware.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        loggerService\n                                                  \n                                                        \n                                                                    LoggerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        use\n                        \n                    \n                \n            \n            \n                \nuse(req: any, res: any, next: () => void)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/middlewares/morgan.middleware.ts:14\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                res\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                next\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  Inject,\n  Injectable,\n  Logger,\n  LoggerService,\n  NestMiddleware,\n} from '@nestjs/common';\nimport morgan from 'morgan';\n\n@Injectable()\nexport class MorganMiddleware implements NestMiddleware {\n  constructor(@Inject(Logger) private readonly loggerService: LoggerService) {}\n\n  use(req: any, res: any, next: () => void) {\n    if (req.url === '/' || req.url.match(/\\/v1\\/queues\\/.*$/)) {\n      return next();\n    }\n\n    morgan(\n      ':remote-addr :remote-user :method :url :http-version :status :res[content-length] :response-time ms :total-time ms :referrer :user-agent :req[header] :req[body]',\n      {\n        stream: {\n          write: (message: string) => {\n            const status = res.statusCode;\n            if (status === 404) {\n              this.loggerService.warn(message.trim(), MorganMiddleware.name);\n            } else {\n              this.loggerService.log(message.trim(), MorganMiddleware.name);\n            }\n          },\n        },\n      },\n    )(req, res, next);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PasswordResetEmailConsumer.html":{"url":"classes/PasswordResetEmailConsumer.html","title":"class - PasswordResetEmailConsumer","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PasswordResetEmailConsumer\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/consumers/auth.consumer.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                process\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(emailService: EmailService, loggerService: LoggerService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/auth/consumers/auth.consumer.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        emailService\n                                                  \n                                                        \n                                                                        EmailService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        loggerService\n                                                  \n                                                        \n                                                                    LoggerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        process\n                        \n                    \n                \n            \n            \n                \n                        \n                    process(job: Job)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/auth/consumers/auth.consumer.ts:20\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                job\n                                            \n                                                        Job\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { PASSWORD_RESET_EMAIL_QUEUE_NAME } from 'src/common/constants';\nimport os from 'os';\nimport { Processor, WorkerHost } from '@nestjs/bullmq';\nimport { Job } from 'bullmq';\nimport { EmailService } from 'src/services/email/email.service';\nimport { Inject, Logger, LoggerService } from '@nestjs/common';\nimport { EmailSubjectEnum, EmailTemplateEnum } from 'src/common/enums';\n\n@Processor(PASSWORD_RESET_EMAIL_QUEUE_NAME, {\n  concurrency: os.cpus().length,\n})\nexport class PasswordResetEmailConsumer extends WorkerHost {\n  constructor(\n    private readonly emailService: EmailService,\n    @Inject(Logger) private readonly loggerService: LoggerService,\n  ) {\n    super();\n  }\n\n  async process(job: Job) {\n    const { data } = job;\n\n    this.loggerService.log(\n      `Processing job: ${job.id} for email: ${data?.email}`,\n      'PasswordResetEmailConsumer',\n    );\n\n    await this.emailService.sendEmail(\n      data?.email,\n      EmailSubjectEnum.PASSWORD_RESET,\n      EmailTemplateEnum.PASSWORD_RESET,\n      { resetUrl: data?.resetUrl, firstName: data?.firstName },\n    );\n\n    this.loggerService.log(\n      `Job: ${job.id} processed successfully for email: ${data?.email}`,\n      'PasswordResetEmailConsumer',\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PaymentModule.html":{"url":"modules/PaymentModule.html","title":"module - PaymentModule","body":"\n                   \n\n\n\n\n    Modules\n    PaymentModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/services/payment/payment.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        register\n                        \n                    \n                \n            \n            \n                \n                        \n                    register()\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/payment/payment.module.ts:16\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     DynamicModule\n\n                        \n                \n            \n        \n    \n\n    \n\n\n    \n        import { STRIPE_CLIENT_TOKEN, StripeModule } from '@golevelup/nestjs-stripe';\nimport { DynamicModule, Logger, LoggerService, Module } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { TEMPLATE_QUEUE_NAME, PAYMENT_PROVIDER } from 'src/common/constants';\nimport { PaymentDriverEnum } from 'src/common/enums';\nimport Stripe from 'stripe';\nimport { Public } from 'src/modules/auth/decorators/public.decorator';\nimport { StripeService } from './stripe.service';\nimport { BullModule, getQueueToken } from '@nestjs/bullmq';\nimport { BullBoardModule } from '@bull-board/nestjs';\nimport { BullMQAdapter } from '@bull-board/api/bullMQAdapter';\nimport { Queue } from 'bullmq';\n\n@Module({})\nexport class PaymentModule {\n  static register(): DynamicModule {\n    return {\n      module: PaymentModule,\n      imports: [\n        StripeModule.forRootAsync({\n          useFactory: (configService: ConfigService) => ({\n            apiKey: configService.getOrThrow('stripe.secretKey'),\n            webhookConfig: {\n              stripeSecrets: {\n                account: configService.getOrThrow(\n                  'stripe.webhookSecret.account',\n                ),\n                accountTest: configService.getOrThrow(\n                  'stripe.webhookSecret.accountTest',\n                ),\n              },\n              loggingConfiguration: {\n                logMatchingEventHandlers: true,\n              },\n              decorators: [Public()],\n            },\n          }),\n          inject: [ConfigService],\n        }),\n        BullModule.registerQueue({\n          name: TEMPLATE_QUEUE_NAME,\n          defaultJobOptions: {\n            attempts: 5,\n            backoff: { type: 'exponential', delay: 2000 },\n          },\n        }),\n        BullBoardModule.forFeature({\n          name: TEMPLATE_QUEUE_NAME,\n          adapter: BullMQAdapter,\n        }),\n      ],\n      providers: [\n        {\n          provide: PAYMENT_PROVIDER,\n          useFactory: (\n            configService: ConfigService,\n            loggerService: LoggerService,\n            stripeClient: Stripe,\n            templateQueue: Queue,\n          ) => {\n            const driver = configService.getOrThrow('driver.payment');\n            if (driver === PaymentDriverEnum.STRIPE)\n              return new StripeService(\n                configService,\n                loggerService,\n                stripeClient,\n                templateQueue,\n              );\n          },\n          inject: [\n            ConfigService,\n            Logger,\n            STRIPE_CLIENT_TOKEN,\n            getQueueToken(TEMPLATE_QUEUE_NAME),\n          ],\n        },\n        Logger,\n      ],\n      exports: [PAYMENT_PROVIDER],\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RefreshTokenDto.html":{"url":"classes/RefreshTokenDto.html","title":"class - RefreshTokenDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RefreshTokenDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/dto/refresh-token-dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                refreshToken\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        refreshToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Refresh token provided during login', example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/dto/refresh-token-dto.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsNotEmpty, IsString } from 'class-validator';\n\nexport class RefreshTokenDto {\n  @ApiProperty({\n    description: 'Refresh token provided during login',\n    example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9',\n  })\n  @IsString()\n  @IsNotEmpty()\n  refreshToken: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RequestBodyAndResponseInterceptor.html":{"url":"injectables/RequestBodyAndResponseInterceptor.html","title":"injectable - RequestBodyAndResponseInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RequestBodyAndResponseInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/interceptors/response.interceptor.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(loggerService: LoggerService)\n                    \n                \n                        \n                            \n                                Defined in src/common/interceptors/response.interceptor.ts:53\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        loggerService\n                                                  \n                                                        \n                                                                    LoggerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/interceptors/response.interceptor.ts:56\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                next\n                                            \n                                                        CallHandler\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { STRIPE_WEBHOOK_CONTEXT_TYPE } from '@golevelup/nestjs-stripe';\nimport {\n  CallHandler,\n  ExecutionContext,\n  Inject,\n  Injectable,\n  Logger,\n  LoggerService,\n  NestInterceptor,\n} from '@nestjs/common';\nimport { Observable } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\n\n@Injectable()\nexport class SuccessResponseInterceptor implements NestInterceptor {\n  intercept(context: ExecutionContext, next: CallHandler): Observable {\n    const contextType = context.getType();\n    if (contextType === STRIPE_WEBHOOK_CONTEXT_TYPE) {\n      return next.handle();\n    }\n\n    return next.handle().pipe(\n      map((response) => {\n        const httpResponse = context.switchToHttp().getResponse();\n\n        const statusCode =\n          response?.statusCode && Number.isInteger(response.statusCode)\n            ? response.statusCode\n            : httpResponse.statusCode;\n\n        const message =\n          response?.message && typeof response.message === 'string'\n            ? response.message\n            : 'Operation successful';\n\n        const responseData =\n          response?.data !== undefined ? response?.data : response?.message;\n\n        return {\n          statusCode,\n          success: true,\n          message,\n          data: responseData,\n        };\n      }),\n    );\n  }\n}\n\n@Injectable()\nexport class RequestBodyAndResponseInterceptor implements NestInterceptor {\n  constructor(@Inject(Logger) private readonly loggerService: LoggerService) {}\n\n  intercept(context: ExecutionContext, next: CallHandler): Observable {\n    const request = context.switchToHttp().getRequest();\n    const method = request.method;\n    const url = request.url;\n\n    return next.handle().pipe(\n      tap((response) => {\n        this.loggerService.log(`[${method}] ${url} - Response:`, response);\n      }),\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RequestContextMiddleware.html":{"url":"injectables/RequestContextMiddleware.html","title":"injectable - RequestContextMiddleware","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RequestContextMiddleware\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/middlewares/request-context.middleware.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                use\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(orm: MikroORM)\n                    \n                \n                        \n                            \n                                Defined in src/common/middlewares/request-context.middleware.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        orm\n                                                  \n                                                        \n                                                                    MikroORM\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        use\n                        \n                    \n                \n            \n            \n                \nuse(req: Request, res: Response, next: NextFunction)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/middlewares/request-context.middleware.ts:9\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                res\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                next\n                                            \n                                                        NextFunction\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NestMiddleware } from '@nestjs/common';\nimport { Request, Response, NextFunction } from 'express';\nimport { MikroORM, RequestContext } from '@mikro-orm/core';\n\n@Injectable()\nexport class RequestContextMiddleware implements NestMiddleware {\n  constructor(private readonly orm: MikroORM) {}\n\n  use(req: Request, res: Response, next: NextFunction): void {\n    RequestContext.create(this.orm.em, next);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ResetPasswordDto.html":{"url":"classes/ResetPasswordDto.html","title":"class - ResetPasswordDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ResetPasswordDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/dto/reset-password.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                confirmPassword\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                newPassword\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                resetToken\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        confirmPassword\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The confirmation of the new password', example: 'Asecure-Word.'})@IsString()@IsNotEmpty()@Matches(/^(?=.*[a-z])(?=.*[A-Z])(?=.*[!@#$%^&*()_\\-+=\\[\\]{};':\"\\\\|,.<>\\/?])[A-Za-z\\d!@#$%^&*()_\\-+=\\[\\]{};':\"\\\\|,.<>\\/?]{10,}$/, {message: 'Password must be at least 10 characters long and include uppercase, lowercase, and a symbol (e.g. @, #, ., -)'})@MinLength(10)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/dto/reset-password.dto.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        newPassword\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The new password for the user', example: 'Asecure-Word.'})@IsString()@IsNotEmpty()@Matches(/^(?=.*[a-z])(?=.*[A-Z])(?=.*[!@#$%^&*()_\\-+=\\[\\]{};':\"\\\\|,.<>\\/?])[A-Za-z\\d!@#$%^&*()_\\-+=\\[\\]{};':\"\\\\|,.<>\\/?]{10,}$/, {message: 'Password must be at least 10 characters long and include uppercase, lowercase, and a symbol (e.g. @, #, ., -)'})@MinLength(10)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/dto/reset-password.dto.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        resetToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The reset token sent to the user', example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...'})@IsString()@IsJWT()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/dto/reset-password.dto.ts:50\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport {\n  IsJWT,\n  IsNotEmpty,\n  IsString,\n  Matches,\n  MinLength,\n} from 'class-validator';\n\nexport class ResetPasswordDto {\n  @ApiProperty({\n    description: 'The new password for the user',\n    example: 'Asecure-Word.',\n  })\n  @IsString()\n  @IsNotEmpty()\n  @Matches(\n    /^(?=.*[a-z])(?=.*[A-Z])(?=.*[!@#$%^&*()_\\-+=\\[\\]{};':\"\\\\|,.<>\\/?])[A-Za-z\\d!@#$%^&*()_\\-+=\\[\\]{};':\"\\\\|,.<>\\/?]{10,}$/,\n    {\n      message:\n        'Password must be at least 10 characters long and include uppercase, lowercase, and a symbol (e.g. @, #, ., -)',\n    },\n  )\n  @MinLength(10)\n  newPassword: string;\n\n  @ApiProperty({\n    description: 'The confirmation of the new password',\n    example: 'Asecure-Word.',\n  })\n  @IsString()\n  @IsNotEmpty()\n  @Matches(\n    /^(?=.*[a-z])(?=.*[A-Z])(?=.*[!@#$%^&*()_\\-+=\\[\\]{};':\"\\\\|,.<>\\/?])[A-Za-z\\d!@#$%^&*()_\\-+=\\[\\]{};':\"\\\\|,.<>\\/?]{10,}$/,\n    {\n      message:\n        'Password must be at least 10 characters long and include uppercase, lowercase, and a symbol (e.g. @, #, ., -)',\n    },\n  )\n  @MinLength(10)\n  confirmPassword: string;\n\n  @ApiProperty({\n    description: 'The reset token sent to the user',\n    example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...',\n  })\n  @IsString()\n  @IsJWT()\n  @IsNotEmpty()\n  resetToken: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/RoleGuard.html":{"url":"guards/RoleGuard.html","title":"guard - RoleGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    RoleGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/common/guards/role.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/common/guards/role.guard.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/guards/role.guard.ts:16\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     boolean | Promise | Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import {\n  Injectable,\n  CanActivate,\n  ExecutionContext,\n  ForbiddenException,\n} from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { Role } from '../decorators';\nimport { Observable } from 'rxjs';\nimport { STRIPE_WEBHOOK_CONTEXT_TYPE } from '@golevelup/nestjs-stripe';\n\n@Injectable()\nexport class RoleGuard implements CanActivate {\n  constructor(private readonly reflector: Reflector) {}\n\n  canActivate(\n    context: ExecutionContext,\n  ): boolean | Promise | Observable {\n    const contextType = context.getType();\n\n    if (contextType === STRIPE_WEBHOOK_CONTEXT_TYPE) {\n      return true;\n    }\n\n    const requiredRole = this.reflector.get(Role, context.getHandler());\n\n    if (!requiredRole) {\n      return true;\n    }\n\n    const request = context.switchToHttp().getRequest();\n    const userRole: string = request?.user?.role;\n\n    if (userRole !== requiredRole) {\n      throw new ForbiddenException(\n        'You do not have the necessary permission to access this route!',\n      );\n    }\n\n    return true;\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/S3Service.html":{"url":"injectables/S3Service.html","title":"injectable - S3Service","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  S3Service\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/storage/s3.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                nanoid\n                            \n                            \n                                    Private\n                                s3Bucket\n                            \n                            \n                                    Private\n                                s3Region\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createPresignedUrlWithoutClient\n                            \n                            \n                                    Async\n                                upload\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, loggerService: LoggerService, s3Client: S3)\n                    \n                \n                        \n                            \n                                Defined in src/services/storage/s3.service.ts:24\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        loggerService\n                                                  \n                                                        \n                                                                    LoggerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        s3Client\n                                                  \n                                                        \n                                                                    S3\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createPresignedUrlWithoutClient\n                        \n                    \n                \n            \n            \n                \n                        \n                    createPresignedUrlWithoutClient(key: string, method?: HttpRequestMethodEnum, ttl?: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/storage/s3.service.ts:65\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                method\n                                            \n                                                            HttpRequestMethodEnum\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                        \n                                                ttl\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        upload\n                        \n                    \n                \n            \n            \n                \n                        \n                    upload(file: MemoryStoredFile, fileCategory: UploadFileCategoryEnum)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/storage/s3.service.ts:35\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                file\n                                            \n                                                        MemoryStoredFile\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                fileCategory\n                                            \n                                                            UploadFileCategoryEnum\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        nanoid\n                        \n                    \n                \n            \n                \n                    \n                        Default value : customAlphabet(hexadecimalLowercase, 10)\n                    \n                \n                    \n                        \n                                Defined in src/services/storage/s3.service.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        s3Bucket\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/services/storage/s3.service.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        s3Region\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/services/storage/s3.service.ts:23\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable, Logger, LoggerService } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { IStrorageService } from './interfaces/storage.interface';\nimport {\n  HttpRequestMethodEnum,\n  UploadFileCategoryEnum,\n} from 'src/common/enums';\nimport { MemoryStoredFile } from 'nestjs-form-data';\nimport { InjectS3, S3 } from 'nestjs-s3';\nimport { customAlphabet } from 'nanoid';\nimport { hexadecimalLowercase } from 'nanoid-dictionary';\nimport { S3PutObjectResponse } from './types/s3-put-object-response';\nimport { parseUrl } from '@smithy/url-parser';\nimport { S3RequestPresigner } from '@aws-sdk/s3-request-presigner';\nimport { fromEnv } from '@aws-sdk/credential-providers';\nimport { Hash } from '@smithy/hash-node';\nimport { HttpRequest } from '@smithy/protocol-http';\nimport { formatUrl } from '@aws-sdk/util-format-url';\n\n@Injectable()\nexport class S3Service implements IStrorageService {\n  private s3Bucket: string;\n  private s3Region: string;\n  private readonly nanoid = customAlphabet(hexadecimalLowercase, 10);\n\n  constructor(\n    private readonly configService: ConfigService,\n    @Inject(Logger) private readonly loggerService: LoggerService,\n    @InjectS3() private readonly s3Client: S3,\n  ) {\n    this.s3Bucket = this.configService.getOrThrow('aws.s3.bucket');\n    this.s3Region = this.configService.getOrThrow('aws.s3.region');\n  }\n\n  async upload(\n    file: MemoryStoredFile,\n    fileCategory: UploadFileCategoryEnum,\n  ): Promise {\n    this.s3Bucket = this.configService.getOrThrow('aws.s3.bucket');\n\n    const key = `${fileCategory}/${this.nanoid()}_${file.originalName}`;\n\n    this.loggerService.log(\n      `Starting upload: filename=\"${file.originalName}\", size=${file.size} bytes, category=${fileCategory}`,\n      S3Service.name,\n    );\n\n    await this.s3Client.putObject({\n      Bucket: this.s3Bucket,\n      Key: key,\n      Body: file.buffer,\n      ContentType: file.mimetype,\n    });\n\n    const url = `https://${this.s3Bucket}.s3.${this.s3Region}.amazonaws.com/${key}`;\n\n    this.loggerService.log(\n      `Upload successful: filename=\"${file.originalName}\", key=${key}`,\n      S3Service.name,\n    );\n\n    return { key, url };\n  }\n\n  async createPresignedUrlWithoutClient(\n    key: string,\n    method?: HttpRequestMethodEnum,\n    ttl?: number,\n  ): Promise {\n    const httpMethod = method ?? HttpRequestMethodEnum.GET;\n    const expiresIn = ttl ?? 30 * 60 * 60;\n\n    const url = parseUrl(\n      `https://${this.s3Bucket}.s3.${this.s3Region}.amazonaws.com/${key}`,\n    );\n    const presigner = new S3RequestPresigner({\n      credentials: fromEnv(),\n      region: this.s3Region,\n      sha256: Hash.bind(null, 'sha256'),\n    });\n\n    const signedUrlObject = await presigner.presign(\n      new HttpRequest({ ...url, method: httpMethod }),\n      { expiresIn },\n    );\n    return formatUrl(signedUrlObject);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SchemaService.html":{"url":"injectables/SchemaService.html","title":"injectable - SchemaService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SchemaService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/schema.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                onModuleInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(orm: MikroORM, configService: ConfigService, loggerService: LoggerService)\n                    \n                \n                        \n                            \n                                Defined in src/schema.service.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        orm\n                                                  \n                                                        \n                                                                    MikroORM\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        loggerService\n                                                  \n                                                        \n                                                                    LoggerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \n                        \n                    onModuleInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/schema.service.ts:22\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(SchemaService.name)\n                    \n                \n                    \n                        \n                                Defined in src/schema.service.ts:14\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import {\n  Injectable,\n  OnModuleInit,\n  Logger,\n  LoggerService,\n  Inject,\n} from '@nestjs/common';\nimport { MikroORM } from '@mikro-orm/core';\nimport { ConfigService } from '@nestjs/config';\nimport { PRODUCTION } from './common/constants';\n\n@Injectable()\nexport class SchemaService implements OnModuleInit {\n  private readonly logger = new Logger(SchemaService.name);\n\n  constructor(\n    private readonly orm: MikroORM,\n    private readonly configService: ConfigService,\n    @Inject(Logger) private readonly loggerService: LoggerService,\n  ) {}\n\n  async onModuleInit() {\n    const nodeEnv = this.configService.getOrThrow('nodeEnv');\n\n    if (nodeEnv !== PRODUCTION) {\n      const generator = this.orm.getSchemaGenerator();\n      await generator.updateSchema();\n      this.loggerService.log(\n        '✅ Database schema synchronized',\n        SchemaService.name,\n      );\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/StorageModule.html":{"url":"modules/StorageModule.html","title":"module - StorageModule","body":"\n                   \n\n\n\n\n    Modules\n    StorageModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/services/storage/storage.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        register\n                        \n                    \n                \n            \n            \n                \n                        \n                    register()\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/storage/storage.module.ts:11\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     DynamicModule\n\n                        \n                \n            \n        \n    \n\n    \n\n\n    \n        import { Module, DynamicModule, Logger, LoggerService } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { CloudinaryService } from './cloudinary.service';\nimport { STORAGE_PROVIDER } from 'src/common/constants';\nimport { StorageDriverEnum } from 'src/common/enums';\nimport { S3Service } from './s3.service';\nimport { getS3ConnectionToken, S3, S3Module } from 'nestjs-s3';\n\n@Module({})\nexport class StorageModule {\n  static register(): DynamicModule {\n    return {\n      module: StorageModule,\n      imports: [\n        S3Module.forRootAsync({\n          inject: [ConfigService],\n          useFactory: (configService: ConfigService) => ({\n            config: {\n              credentials: {\n                accessKeyId: configService.get('aws.s3.accessKeyId'),\n                secretAccessKey: configService.get(\n                  'aws.s3.secretAccessKey',\n                ),\n              },\n              region: configService.get('aws.s3.region'),\n            },\n          }),\n        }),\n      ],\n      providers: [\n        {\n          provide: STORAGE_PROVIDER,\n          useFactory: (\n            configService: ConfigService,\n            loggerService: LoggerService,\n            s3Client: S3,\n          ) => {\n            const driver = configService.getOrThrow('driver.storage');\n            if (driver === StorageDriverEnum.CLOUDINARY) {\n              return new CloudinaryService(configService, loggerService);\n            } else if (driver === StorageDriverEnum.S3) {\n              return new S3Service(configService, loggerService, s3Client);\n            }\n\n            throw new Error(`Unsupported storage driver: ${driver}`);\n          },\n          inject: [ConfigService, Logger, getS3ConnectionToken('')],\n        },\n        Logger,\n      ],\n      exports: [STORAGE_PROVIDER],\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/StripeService.html":{"url":"injectables/StripeService.html","title":"injectable - StripeService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  StripeService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/payment/stripe.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createCheckoutSession\n                            \n                            \n                                    Async\n                                createPaymentIntent\n                            \n                            \n                                    \n                                    Async\n                                handlePaymentIntentSucceeded\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, loggerService: LoggerService, stripeClient: Stripe, templateQueue: Queue)\n                    \n                \n                        \n                            \n                                Defined in src/services/payment/stripe.service.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        loggerService\n                                                  \n                                                        \n                                                                    LoggerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        stripeClient\n                                                  \n                                                        \n                                                                    Stripe\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        templateQueue\n                                                  \n                                                        \n                                                                    Queue\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createCheckoutSession\n                        \n                    \n                \n            \n            \n                \n                        \n                    createCheckoutSession(params: Stripe.Checkout.SessionCreateParams, options?: Stripe.RequestOptions)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/payment/stripe.service.ts:23\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                params\n                                            \n                                                            Stripe.Checkout.SessionCreateParams\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                options\n                                            \n                                                        Stripe.RequestOptions\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createPaymentIntent\n                        \n                    \n                \n            \n            \n                \n                        \n                    createPaymentIntent(params: Stripe.PaymentIntentCreateParams, options?: Stripe.RequestOptions)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/payment/stripe.service.ts:45\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                params\n                                            \n                                                            Stripe.PaymentIntentCreateParams\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                options\n                                            \n                                                        Stripe.RequestOptions\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        handlePaymentIntentSucceeded\n                        \n                    \n                \n            \n            \n                \n                        \n                    handlePaymentIntentSucceeded(evt: Stripe.PaymentIntentSucceededEvent)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @StripeWebhookHandler('payment_intent.succeeded')\n                \n            \n\n                    \n                        \n                            Defined in src/services/payment/stripe.service.ts:60\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                evt\n                                            \n                                                            Stripe.PaymentIntentSucceededEvent\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  InjectStripeClient,\n  StripeWebhookHandler,\n} from '@golevelup/nestjs-stripe';\nimport { Inject, Injectable, Logger, LoggerService } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport Stripe from 'stripe';\nimport { TEMPLATE_QUEUE_NAME } from 'src/common/constants';\nimport { IPaymentService } from './interfaces/payment.interface';\nimport { InjectQueue } from '@nestjs/bullmq';\nimport { Queue } from 'bullmq';\n\n@Injectable()\nexport class StripeService implements IPaymentService {\n  constructor(\n    private readonly configService: ConfigService,\n    @Inject(Logger) private readonly loggerService: LoggerService,\n    @InjectStripeClient() private readonly stripeClient: Stripe,\n    @InjectQueue(TEMPLATE_QUEUE_NAME)\n    private readonly templateQueue: Queue,\n  ) {}\n\n  async createCheckoutSession(\n    params: Stripe.Checkout.SessionCreateParams,\n    options?: Stripe.RequestOptions,\n  ): Promise> {\n    this.loggerService.log(\n      `Creating Stripe checkout session`,\n      StripeService.name,\n    );\n\n    const session = await this.stripeClient.checkout.sessions.create(\n      params,\n      options,\n    );\n\n    this.loggerService.log(\n      `Checkout session created successfully with ID: ${session.id}`,\n      StripeService.name,\n    );\n\n    return session;\n  }\n\n  async createPaymentIntent(\n    params: Stripe.PaymentIntentCreateParams,\n    options?: Stripe.RequestOptions,\n  ): Promise> {\n    this.loggerService.log(`Creating Payment Intent`, StripeService.name);\n\n    const paymentIntent = await this.stripeClient.paymentIntents.create(\n      params,\n      options,\n    );\n\n    return paymentIntent;\n  }\n\n  @StripeWebhookHandler('payment_intent.succeeded')\n  async handlePaymentIntentSucceeded(evt: Stripe.PaymentIntentSucceededEvent) {\n    const { data }: { data: Stripe.PaymentIntentSucceededEvent.Data } = evt;\n    const intent = data.object as Stripe.PaymentIntent;\n\n    await this.templateQueue.add(TEMPLATE_QUEUE_NAME, {\n      intent,\n      eventId: evt?.id,\n    });\n\n    this.loggerService.log(\n      `Received Stripe payment_intent.succeeded event: intent id=\"${intent.id}\" and queued into: \"${TEMPLATE_QUEUE_NAME}\"`,\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SuccessResponseInterceptor.html":{"url":"injectables/SuccessResponseInterceptor.html","title":"injectable - SuccessResponseInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SuccessResponseInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/interceptors/response.interceptor.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/interceptors/response.interceptor.ts:16\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                next\n                                            \n                                                        CallHandler\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { STRIPE_WEBHOOK_CONTEXT_TYPE } from '@golevelup/nestjs-stripe';\nimport {\n  CallHandler,\n  ExecutionContext,\n  Inject,\n  Injectable,\n  Logger,\n  LoggerService,\n  NestInterceptor,\n} from '@nestjs/common';\nimport { Observable } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\n\n@Injectable()\nexport class SuccessResponseInterceptor implements NestInterceptor {\n  intercept(context: ExecutionContext, next: CallHandler): Observable {\n    const contextType = context.getType();\n    if (contextType === STRIPE_WEBHOOK_CONTEXT_TYPE) {\n      return next.handle();\n    }\n\n    return next.handle().pipe(\n      map((response) => {\n        const httpResponse = context.switchToHttp().getResponse();\n\n        const statusCode =\n          response?.statusCode && Number.isInteger(response.statusCode)\n            ? response.statusCode\n            : httpResponse.statusCode;\n\n        const message =\n          response?.message && typeof response.message === 'string'\n            ? response.message\n            : 'Operation successful';\n\n        const responseData =\n          response?.data !== undefined ? response?.data : response?.message;\n\n        return {\n          statusCode,\n          success: true,\n          message,\n          data: responseData,\n        };\n      }),\n    );\n  }\n}\n\n@Injectable()\nexport class RequestBodyAndResponseInterceptor implements NestInterceptor {\n  constructor(@Inject(Logger) private readonly loggerService: LoggerService) {}\n\n  intercept(context: ExecutionContext, next: CallHandler): Observable {\n    const request = context.switchToHttp().getRequest();\n    const method = request.method;\n    const url = request.url;\n\n    return next.handle().pipe(\n      tap((response) => {\n        this.loggerService.log(`[${method}] ${url} - Response:`, response);\n      }),\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateProfileDto.html":{"url":"classes/UpdateProfileDto.html","title":"class - UpdateProfileDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateProfileDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/dto/update-profile.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(\n  OmitType(CreateUserDto, [\n    'role',\n    'email',\n    'password',\n    'phoneNumber',\n    'countryCode',\n  ] as const),\n)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { OmitType, PartialType } from '@nestjs/swagger';\nimport { CreateUserDto } from './create-user.dto';\n\nexport class UpdateProfileDto extends PartialType(\n  OmitType(CreateUserDto, [\n    'role',\n    'email',\n    'password',\n    'phoneNumber',\n    'countryCode',\n  ] as const),\n) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/User.html":{"url":"entities/User.html","title":"entity - User","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/entities/user.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Optional\n                                address\n                            \n                            \n                                    \n                                    Optional\n                                avatar\n                            \n                            \n                                    \n                                changePassword\n                            \n                            \n                                    \n                                    Optional\n                                city\n                            \n                            \n                                    \n                                    Optional\n                                country\n                            \n                            \n                                    \n                                    Optional\n                                countryCode\n                            \n                            \n                                    \n                                email\n                            \n                            \n                                    \n                                firstName\n                            \n                            \n                                    \n                                    Optional\n                                lastLoggedIn\n                            \n                            \n                                    \n                                lastName\n                            \n                            \n                                    \n                                password\n                            \n                            \n                                    \n                                passwordResetRequested\n                            \n                            \n                                    \n                                    Optional\n                                phoneNumber\n                            \n                            \n                                    \n                                    Optional\n                                postalCode\n                            \n                            \n                                    \n                                role\n                            \n                            \n                                    \n                                    Optional\n                                state\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Property({type: 'text', nullable: true, comment: 'Street address'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/entities/user.entity.ts:51\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        avatar\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Property({type: 'varchar', length: 500, nullable: true, comment: 'Avatar URL or path'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/entities/user.entity.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        changePassword\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Property({type: 'boolean', default: false, comment: 'Whether user needs to change password'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/entities/user.entity.ts:122\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        city\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Property({type: 'varchar', length: 100, nullable: true, comment: 'City name'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/entities/user.entity.ts:59\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        country\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Property({type: 'varchar', length: 100, nullable: true, comment: 'Country name'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/entities/user.entity.ts:83\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        countryCode\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Property({type: 'varchar', length: 3, nullable: true, comment: 'ISO country code'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/entities/user.entity.ts:91\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Property({unique: true, type: 'varchar', length: 255, comment: 'User email address'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/entities/user.entity.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Property({type: 'varchar', length: 100, comment: 'User first name'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/entities/user.entity.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        lastLoggedIn\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Property({type: 'timestamptz', nullable: true, comment: 'Last login timestamp'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/entities/user.entity.ts:136\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Property({type: 'varchar', length: 100, comment: 'User last name'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/entities/user.entity.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Property({type: 'varchar', length: 255, comment: 'Hashed password'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/entities/user.entity.ts:106\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        passwordResetRequested\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Property({type: 'boolean', default: false, comment: 'Whether password reset was requested'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/entities/user.entity.ts:129\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        phoneNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Property({type: 'varchar', length: 20, nullable: true, comment: 'Phone number'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/entities/user.entity.ts:99\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        postalCode\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Property({type: 'varchar', length: 20, nullable: true, comment: 'Postal/ZIP code'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/entities/user.entity.ts:67\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserRoleEnum\n\n                    \n                \n                \n                    \n                        Default value : UserRoleEnum.USER\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Enum({items: () => UserRoleEnum, type: 'varchar', length: 20, default: undefined, comment: 'User role'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/entities/user.entity.ts:115\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        state\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Property({type: 'varchar', length: 100, nullable: true, comment: 'State/Province'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/entities/user.entity.ts:75\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  Property,\n  Enum,\n  BeforeCreate,\n  BeforeUpdate,\n  Index,\n} from '@mikro-orm/core';\nimport { BaseEntity } from 'src/common/entities/base.entitiy';\nimport { UserRoleEnum } from 'src/common/enums';\nimport { normalizeUserFields } from 'src/common/utils/user.util';\n\n@Entity({ tableName: 'users' })\n@Index({ properties: ['email'] })\nexport class User extends BaseEntity {\n  @Property({\n    unique: true,\n    type: 'varchar',\n    length: 255,\n    comment: 'User email address',\n  })\n  email!: string;\n\n  @Property({\n    type: 'varchar',\n    length: 500,\n    nullable: true,\n    comment: 'Avatar URL or path',\n  })\n  avatar?: string;\n\n  @Property({\n    type: 'varchar',\n    length: 100,\n    comment: 'User first name',\n  })\n  firstName!: string;\n\n  @Property({\n    type: 'varchar',\n    length: 100,\n    comment: 'User last name',\n  })\n  lastName!: string;\n\n  @Property({\n    type: 'text',\n    nullable: true,\n    comment: 'Street address',\n  })\n  address?: string;\n\n  @Property({\n    type: 'varchar',\n    length: 100,\n    nullable: true,\n    comment: 'City name',\n  })\n  city?: string;\n\n  @Property({\n    type: 'varchar',\n    length: 20,\n    nullable: true,\n    comment: 'Postal/ZIP code',\n  })\n  postalCode?: string;\n\n  @Property({\n    type: 'varchar',\n    length: 100,\n    nullable: true,\n    comment: 'State/Province',\n  })\n  state?: string;\n\n  @Property({\n    type: 'varchar',\n    length: 100,\n    nullable: true,\n    comment: 'Country name',\n  })\n  country?: string;\n\n  @Property({\n    type: 'varchar',\n    length: 3,\n    nullable: true,\n    comment: 'ISO country code',\n  })\n  countryCode?: string;\n\n  @Property({\n    type: 'varchar',\n    length: 20,\n    nullable: true,\n    comment: 'Phone number',\n  })\n  phoneNumber?: string;\n\n  @Property({\n    type: 'varchar',\n    length: 255,\n    comment: 'Hashed password',\n  })\n  password!: string;\n\n  @Enum({\n    items: () => UserRoleEnum,\n    type: 'varchar',\n    length: 20,\n    default: UserRoleEnum.USER,\n    comment: 'User role',\n  })\n  role: UserRoleEnum = UserRoleEnum.USER;\n\n  @Property({\n    type: 'boolean',\n    default: false,\n    comment: 'Whether user needs to change password',\n  })\n  changePassword: boolean = false;\n\n  @Property({\n    type: 'boolean',\n    default: false,\n    comment: 'Whether password reset was requested',\n  })\n  passwordResetRequested: boolean = false;\n\n  @Property({\n    type: 'timestamptz',\n    nullable: true,\n    comment: 'Last login timestamp',\n  })\n  lastLoggedIn?: Date;\n\n  @BeforeCreate()\n  @BeforeUpdate()\n  private normalizeFields() {\n    normalizeUserFields(this);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                changePassword\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                create\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                getProfile\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                updateProfile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        changePassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    changePassword(data: ChangePasswordDto, req: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('change-password')@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Change user password'})@ApiBody({type: ChangePasswordDto})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/users/users.controller.ts:72\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                            ChangePasswordDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                req\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(user: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Post('sign-up')@ApiOperation({summary: 'Sign up a new user'})@ApiBody({type: CreateUserDto})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/users/users.controller.ts:28\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        getProfile\n                        \n                    \n                \n            \n            \n                \n                        \n                    getProfile(req: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('profile')@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Get user profile'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/users/users.controller.ts:40\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        updateProfile\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateProfile(req: any, body: UpdateProfileDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch('update-profile')@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Update user profile'})@ApiBody({type: UpdateProfileDto})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/users/users.controller.ts:55\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                body\n                                            \n                                                            UpdateProfileDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Get,\n  HttpCode,\n  HttpStatus,\n  Patch,\n  Post,\n  Request,\n} from '@nestjs/common';\nimport { ApiTags, ApiOperation, ApiBody } from '@nestjs/swagger';\nimport { UsersService } from './users.service';\nimport { Public } from '../auth/decorators/public.decorator';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport { ApiResponse } from 'src/common/interfaces/api-response.interface';\nimport { ChangePasswordDto } from './dto/change-password.dto';\nimport { UpdateProfileDto } from './dto/update-profile.dto';\n\n@ApiTags('users')\n@Controller('users')\nexport class UsersController {\n  constructor(private readonly usersService: UsersService) {}\n\n  @Public()\n  @Post('sign-up')\n  @ApiOperation({ summary: 'Sign up a new user' })\n  @ApiBody({ type: CreateUserDto })\n  async create(@Body() user: CreateUserDto): Promise> {\n    const newUser = await this.usersService.create(user);\n    return {\n      statusCode: HttpStatus.CREATED,\n      message: 'User created successfully',\n      data: newUser,\n    };\n  }\n\n  @Get('profile')\n  @HttpCode(HttpStatus.OK)\n  @ApiOperation({ summary: 'Get user profile' })\n  async getProfile(@Request() req: any): Promise> {\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const { password, ...safeUser } = req.user;\n\n    return {\n      statusCode: HttpStatus.OK,\n      message: 'Profile fetched successfully',\n      data: { user: safeUser },\n    };\n  }\n\n  @Patch('update-profile')\n  @HttpCode(HttpStatus.OK)\n  @ApiOperation({ summary: 'Update user profile' })\n  @ApiBody({ type: UpdateProfileDto })\n  async updateProfile(\n    @Request() req: any,\n    @Body() body: UpdateProfileDto,\n  ): Promise> {\n    const userId = req?.user?.id;\n    const updatedUser = await this.usersService.update({ id: userId, ...body });\n    return {\n      statusCode: HttpStatus.OK,\n      message: 'Profile updated successfully',\n      data: updatedUser,\n    };\n  }\n\n  @Post('change-password')\n  @HttpCode(HttpStatus.OK)\n  @ApiOperation({ summary: 'Change user password' })\n  @ApiBody({ type: ChangePasswordDto })\n  async changePassword(\n    @Body() data: ChangePasswordDto,\n    @Request() req: any,\n  ): Promise> {\n    const userId = req.user.id;\n    await this.usersService.changePassword(userId, data);\n    return {\n      statusCode: HttpStatus.OK,\n      message: 'Password Changed Successfully',\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_imports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nAppRedisModule\n\nAppRedisModule\n\n\n\nUsersModule\n\nUsersModule\n\nUsersModule -->\n\nAppRedisModule->UsersModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\nUsersSubscriber\n\nUsersSubscriber\n\nUsersModule -->\n\nUsersSubscriber->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UsersService\n                        \n                        \n                            UsersSubscriber\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AppRedisModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UsersService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { UsersService } from './users.service';\nimport { UsersController } from './users.controller';\nimport { MikroOrmModule } from '@mikro-orm/nestjs';\nimport { User } from './entities/user.entity';\nimport { UsersSubscriber } from './subscribers/user.subscriber';\nimport { AppRedisModule } from 'src/services/redis/redis.module';\n\n@Module({\n  imports: [MikroOrmModule.forFeature([User]), AppRedisModule],\n  controllers: [UsersController],\n  providers: [UsersService, UsersSubscriber],\n  exports: [UsersService],\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/users.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                userEmailCacheKey\n                            \n                            \n                                    Private\n                                    Readonly\n                                userIdCacheKey\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                changePassword\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(appRedisService: AppRedisService, configService: ConfigService, userRepository: EntityRepository)\n                    \n                \n                        \n                            \n                                Defined in src/modules/users/users.service.ts:22\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        appRedisService\n                                                  \n                                                        \n                                                                        AppRedisService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        EntityRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        changePassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    changePassword(userId: string, data: ChangePasswordDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/users/users.service.ts:129\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                data\n                                            \n                                                            ChangePasswordDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(userData: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/users/users.service.ts:34\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userData\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(query: FilterQuery, options?: FindOneOrFailOptions)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/users/users.service.ts:51\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                query\n                                            \n                                                            FilterQuery\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                options\n                                            \n                                                            FindOneOrFailOptions\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(data: EntityData)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/users/users.service.ts:99\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                            EntityData\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        userEmailCacheKey\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/users/users.service.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        userIdCacheKey\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/users/users.service.ts:21\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  ConflictException,\n  Injectable,\n  NotFoundException,\n} from '@nestjs/common';\nimport { InjectRepository } from '@mikro-orm/nestjs';\nimport {\n  EntityData,\n  EntityRepository,\n  FilterQuery,\n  FindOneOrFailOptions,\n} from '@mikro-orm/core';\nimport { User } from './entities/user.entity';\nimport { ConfigService } from '@nestjs/config';\nimport { ChangePasswordDto } from './dto/change-password.dto';\nimport { AppRedisService } from 'src/services/redis/redis.service';\n\n@Injectable()\nexport class UsersService {\n  private readonly userIdCacheKey: string;\n  private readonly userEmailCacheKey: string;\n\n  constructor(\n    private readonly appRedisService: AppRedisService,\n    private readonly configService: ConfigService,\n    @InjectRepository(User)\n    private readonly userRepository: EntityRepository,\n  ) {\n    this.userIdCacheKey = `users:id`;\n    this.userEmailCacheKey = `users:email`;\n  }\n\n  async create(userData: any): Promise> {\n    const user = await this.userRepository.findOne({\n      email: userData.email,\n    });\n\n    if (user) {\n      throw new ConflictException('User already exists in the system.');\n    }\n\n    const newUser = this.userRepository.create(userData);\n    await this.userRepository.getEntityManager().persistAndFlush(newUser);\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const { password, ...result } = newUser;\n    return result;\n  }\n\n  async findOne(\n    query: FilterQuery,\n    options?: FindOneOrFailOptions,\n  ): Promise {\n    let cacheKey: string | undefined;\n\n    if (typeof query === 'string') {\n      cacheKey = `${this.userIdCacheKey}:${query}`;\n    } else if (typeof query === 'object' && query !== null) {\n      if ('id' in query && query?.id) {\n        cacheKey = `${this.userIdCacheKey}:${query?.id}`;\n      } else if ('email' in query && query?.email) {\n        cacheKey = `${this.userEmailCacheKey}:${query?.email}`;\n      }\n    }\n\n    if (cacheKey) {\n      const cached = await this.appRedisService.get(cacheKey);\n\n      if (cached) {\n        const parsed = JSON.parse(cached);\n        const user = this.userRepository.create(parsed);\n        return this.userRepository.getEntityManager().merge(user);\n      }\n    }\n\n    const user = await this.userRepository.findOneOrFail(query, options);\n\n    if (cacheKey) {\n      const serializable = { ...user };\n\n      await Promise.all([\n        this.appRedisService.set(\n          `${this.userIdCacheKey}:${user?.id}`,\n          JSON.stringify(serializable),\n          5 * 60,\n        ),\n        this.appRedisService.set(\n          `${this.userEmailCacheKey}:${user?.email}`,\n          JSON.stringify(serializable),\n          5 * 60,\n        ),\n      ]);\n    }\n\n    return user;\n  }\n\n  async update(data: EntityData): Promise> {\n    const user = await this.userRepository.findOneOrFail(\n      { id: data.id },\n      { failHandler: () => new NotFoundException('User not found') },\n    );\n\n    this.userRepository.assign(user, data);\n\n    await this.userRepository.getEntityManager().persistAndFlush(user);\n\n    if (user) {\n      await Promise.all([\n        this.appRedisService.set(\n          `${this.userIdCacheKey}:${user?.id}`,\n          JSON.stringify(user),\n          5 * 60,\n        ),\n        this.appRedisService.set(\n          `${this.userEmailCacheKey}:${user?.email}`,\n          JSON.stringify(user),\n          5 * 60,\n        ),\n      ]);\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const { password, ...result } = user;\n    return result;\n  }\n\n  async changePassword(\n    userId: string,\n    data: ChangePasswordDto,\n  ): Promise> {\n    const { newPassword, confirmPassword } = data;\n\n    if (newPassword !== confirmPassword) {\n      throw new BadRequestException('Passwords do not match');\n    }\n\n    const updatedUser = await this.update({\n      id: userId,\n      password: newPassword,\n      changePassword: false,\n    });\n\n    return updatedUser;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersSubscriber.html":{"url":"injectables/UsersSubscriber.html","title":"injectable - UsersSubscriber","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersSubscriber\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/subscribers/user.subscriber.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                beforeCreate\n                            \n                            \n                                    Async\n                                beforeUpdate\n                            \n                            \n                                getSubscribedEntities\n                            \n                            \n                                    Private\n                                    Async\n                                hashPassword\n                            \n                            \n                                    Private\n                                isPasswordModified\n                            \n                            \n                                    Private\n                                normalizeFields\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/users/subscribers/user.subscriber.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        beforeCreate\n                        \n                    \n                \n            \n            \n                \n                        \n                    beforeCreate(args: EventArgs)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/users/subscribers/user.subscriber.ts:16\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                args\n                                            \n                                                            EventArgs\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        beforeUpdate\n                        \n                    \n                \n            \n            \n                \n                        \n                    beforeUpdate(args: EventArgs)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/users/subscribers/user.subscriber.ts:24\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                args\n                                            \n                                                            EventArgs\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getSubscribedEntities\n                        \n                    \n                \n            \n            \n                \ngetSubscribedEntities()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/users/subscribers/user.subscriber.ts:12\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     EntityName[]\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        hashPassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    hashPassword(user: User)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/users/subscribers/user.subscriber.ts:46\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            User\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        isPasswordModified\n                        \n                    \n                \n            \n            \n                \n                        \n                    isPasswordModified(user: User)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/users/subscribers/user.subscriber.ts:38\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            User\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        normalizeFields\n                        \n                    \n                \n            \n            \n                \n                        \n                    normalizeFields(user: User)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/users/subscribers/user.subscriber.ts:34\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            User\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { EventSubscriber, EntityName, EventArgs } from '@mikro-orm/core';\nimport { Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { User } from '../entities/user.entity';\nimport * as bcrypt from 'bcrypt';\nimport { normalizeUserFields } from 'src/common/utils/user.util';\n\n@Injectable()\nexport class UsersSubscriber implements EventSubscriber {\n  constructor(private readonly configService: ConfigService) {}\n\n  getSubscribedEntities(): EntityName[] {\n    return [User];\n  }\n\n  async beforeCreate(args: EventArgs) {\n    const user = args.entity;\n\n    this.normalizeFields(user);\n\n    await this.hashPassword(user);\n  }\n\n  async beforeUpdate(args: EventArgs) {\n    const user = args.entity;\n\n    this.normalizeFields(user);\n\n    if (this.isPasswordModified(user)) {\n      await this.hashPassword(user);\n    }\n  }\n\n  private normalizeFields(user: User) {\n    normalizeUserFields(user);\n  }\n\n  private isPasswordModified(user: User): boolean {\n    const originalData = (user as any).__helper?.__originalEntityData;\n\n    if (!originalData) return true;\n\n    return user.password !== originalData.password;\n  }\n\n  private async hashPassword(user: User) {\n    const saltRounds = this.configService.get('auth.saltRounds');\n    user.password = await bcrypt.hash(user.password, saltRounds);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/commands/create-user.command.ts\n            \n            injectable\n            CreateUserCommand\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                        src/common/constants/index.ts\n            \n            variable\n            APP_NAME\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/common/constants/index.ts\n            \n            variable\n            EMAIL_FROM_NAME\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/common/constants/index.ts\n            \n            variable\n            PASSWORD_CHARACTER_SET\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/common/constants/index.ts\n            \n            variable\n            PASSWORD_RESET_EMAIL_QUEUE_NAME\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/common/constants/index.ts\n            \n            variable\n            PAYMENT_PROVIDER\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/common/constants/index.ts\n            \n            variable\n            PRODUCTION\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/common/constants/index.ts\n            \n            variable\n            STORAGE_PROVIDER\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/common/constants/index.ts\n            \n            variable\n            TEMPLATE_QUEUE_NAME\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/common/decorators/index.ts\n            \n            variable\n            Role\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/entities/base.entitiy.ts\n            \n            class\n            BaseEntity\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/common/filters/exception.filter.ts\n            \n            class\n            CatchEverythingFilter\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/common/guards/role.guard.ts\n            \n            guard\n            RoleGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/common/interceptors/response.interceptor.ts\n            \n            injectable\n            RequestBodyAndResponseInterceptor\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/common/interceptors/response.interceptor.ts\n            \n            injectable\n            SuccessResponseInterceptor\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/common/interfaces/api-response.interface.ts\n            \n            interface\n            ApiResponse\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/common/interfaces/error-response.interface.ts\n            \n            interface\n            ErrorResponse\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/common/middlewares/morgan.middleware.ts\n            \n            injectable\n            MorganMiddleware\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/common/middlewares/request-context.middleware.ts\n            \n            injectable\n            RequestContextMiddleware\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                        src/common/types/index.ts\n            \n            type alias\n            HandledException\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/common/utils/common.utils.ts\n            \n            function\n            generateSlug\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/common/utils/time.util.ts\n            \n            function\n            parseTimeString\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/common/utils/user.util.ts\n            \n            function\n            normalizeUserFields\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/config/swagger.config.ts\n            \n            function\n            setupSwagger\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/main.cli.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/modules/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/13)\n            \n        \n        \n            \n                \n                src/modules/auth/consumers/auth.consumer.ts\n            \n            class\n            PasswordResetEmailConsumer\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                        src/modules/auth/decorators/public.decorator.ts\n            \n            variable\n            IS_PUBLIC_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/modules/auth/decorators/public.decorator.ts\n            \n            variable\n            Public\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/auth/dto/auth-response.dto.ts\n            \n            class\n            AuthResponseDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/auth/dto/forgot-password.dto.ts\n            \n            class\n            ForgotPasswordDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/modules/auth/dto/login.dto.ts\n            \n            class\n            LoginDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/auth/dto/refresh-token-dto.ts\n            \n            class\n            RefreshTokenDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/modules/auth/dto/reset-password.dto.ts\n            \n            class\n            ResetPasswordDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/modules/auth/guards/jwt-auth.guard.ts\n            \n            injectable\n            JwtAuthGuard\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/modules/auth/guards/local-auth.guard.ts\n            \n            injectable\n            LocalAuthGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/auth/strategies/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                src/modules/auth/strategies/local.strategy.ts\n            \n            injectable\n            LocalStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                        src/modules/auth/types/auth-tokens.ts\n            \n            type alias\n            AuthTokens\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/users/dto/change-password.dto.ts\n            \n            class\n            ChangePasswordDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/users/dto/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/14)\n            \n        \n        \n            \n                \n                src/modules/users/dto/responses.dto.ts\n            \n            class\n            CreateUserResponseDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/users/dto/responses.dto.ts\n            \n            class\n            GetProfileResponseDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/users/dto/update-profile.dto.ts\n            \n            class\n            UpdateProfileDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/users/entities/user.entity.ts\n            \n            entity\n            User\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/users/entities/user.entity.ts\n            \n            class\n            User\n            \n                0 %\n                (0/18)\n            \n        \n        \n            \n                \n                src/modules/users/subscribers/user.subscriber.ts\n            \n            injectable\n            UsersSubscriber\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/modules/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/modules/users/users.service.ts\n            \n            injectable\n            UsersService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/schema.service.ts\n            \n            injectable\n            SchemaService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/services/email/email.service.ts\n            \n            class\n            EmailService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/services/http-client/http-client.service.ts\n            \n            injectable\n            HttpClientService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/services/payment/interfaces/payment.interface.ts\n            \n            interface\n            IPaymentService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/services/payment/stripe.service.ts\n            \n            injectable\n            StripeService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                        src/services/payment/types/checkout.ts\n            \n            type alias\n            Checkout\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/services/payment/types/payment-intent.ts\n            \n            type alias\n            PaymentIntent\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/services/redis/redis.service.ts\n            \n            injectable\n            AppRedisService\n            \n                30 %\n                (3/10)\n            \n        \n        \n            \n                \n                src/services/storage/cloudinary.service.ts\n            \n            injectable\n            CloudinaryService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/services/storage/interfaces/storage.interface.ts\n            \n            interface\n            IStrorageService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/services/storage/s3.service.ts\n            \n            injectable\n            S3Service\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                        src/services/storage/types/s3-put-object-response.ts\n            \n            type alias\n            S3PutObjectResponse\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/tracing.ts\n            \n            variable\n            otelSDK\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/tracing.ts\n            \n            variable\n            prometheusExporter\n            \n                0 %\n                (0/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @aws-sdk/credential-providers : ^3.848.0\n        \n            @aws-sdk/s3-request-presigner : ^3.850.0\n        \n            @aws-sdk/util-format-url : ^3.840.0\n        \n            @bull-board/api : ^6.12.0\n        \n            @bull-board/express : ^6.12.0\n        \n            @bull-board/nestjs : ^6.12.0\n        \n            @compodoc/compodoc : ^1.1.26\n        \n            @golevelup/nestjs-stripe : ^0.9.3\n        \n            @golevelup/nestjs-webhooks : ^0.2.21\n        \n            @liaoliaots/nestjs-redis : ^10.0.0\n        \n            @mikro-orm/core : ^6.4.16\n        \n            @mikro-orm/nestjs : ^6.1.1\n        \n            @mikro-orm/postgresql : ^6.4.16\n        \n            @nestjs-modules/mailer : ^2.0.2\n        \n            @nestjs/axios : ^4.0.0\n        \n            @nestjs/bullmq : ^11.0.3\n        \n            @nestjs/common : ^10.0.0\n        \n            @nestjs/config : ^3.2.2\n        \n            @nestjs/core : ^10.0.0\n        \n            @nestjs/jwt : ^10.2.0\n        \n            @nestjs/mapped-types : *\n        \n            @nestjs/passport : ^10.0.3\n        \n            @nestjs/platform-express : ^10.0.0\n        \n            @nestjs/swagger : ^7.3.1\n        \n            @opentelemetry/auto-instrumentations-node : ^0.62.0\n        \n            @opentelemetry/context-async-hooks : ^2.0.1\n        \n            @opentelemetry/core : ^2.0.1\n        \n            @opentelemetry/exporter-prometheus : ^0.203.0\n        \n            @opentelemetry/propagator-b3 : ^2.0.1\n        \n            @opentelemetry/propagator-jaeger : ^2.0.1\n        \n            @opentelemetry/sdk-node : ^0.203.0\n        \n            @smithy/hash-node : ^4.0.4\n        \n            @smithy/protocol-http : ^5.1.2\n        \n            @types/bcrypt : ^5.0.2\n        \n            @types/chalk : ^2.2.4\n        \n            @types/morgan : ^1.9.10\n        \n            @types/ms : ^2.1.0\n        \n            axios : ^1.10.0\n        \n            bcrypt : ^5.1.1\n        \n            buffer-to-stream : ^1.0.0\n        \n            bullmq : ^5.56.8\n        \n            chalk : ^4.1.2\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.1\n        \n            cloudinary : ^2.7.0\n        \n            express-basic-auth : ^1.2.1\n        \n            helmet : ^8.1.0\n        \n            moment-timezone : ^0.6.0\n        \n            morgan : ^1.10.0\n        \n            ms : ^2.1.3\n        \n            nanoid : ^3.0.0\n        \n            nanoid-dictionary : ^5.0.0\n        \n            nest-commander : ^3.18.0\n        \n            nest-winston : ^1.10.2\n        \n            nestjs-form-data : ^1.9.93\n        \n            nestjs-s3 : ^3.0.1\n        \n            nodemailer : ^7.0.5\n        \n            passport : ^0.7.0\n        \n            passport-jwt : ^4.0.1\n        \n            passport-local : ^1.0.0\n        \n            pug : ^3.0.3\n        \n            reflect-metadata : ^0.1.13\n        \n            rxjs : ^7.8.1\n        \n            stripe : ^18.3.0\n        \n            util : ^0.12.5\n        \n            uuid : ^11.1.0\n        \n            winston : ^3.17.0\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            EmailSubjectEnum   (src/.../index.ts)\n                        \n                        \n                            EmailTemplateEnum   (src/.../index.ts)\n                        \n                        \n                            HttpRequestMethodEnum   (src/.../index.ts)\n                        \n                        \n                            IANATimeZoneDatabaseEnum   (src/.../index.ts)\n                        \n                        \n                            PaymentDriverEnum   (src/.../index.ts)\n                        \n                        \n                            StorageDriverEnum   (src/.../index.ts)\n                        \n                        \n                            StripeCurrencyEnum   (src/.../index.ts)\n                        \n                        \n                            UploadFileCategoryEnum   (src/.../index.ts)\n                        \n                        \n                            UserRoleEnum   (src/.../index.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/common/enums/index.ts\n    \n        \n            \n                \n                    \n                        \n                        EmailSubjectEnum\n                    \n                \n                        \n                            \n                                 PASSWORD_RESET\n                            \n                        \n                        \n                            \n                                Value : 🔐 Reset Your Password Quickly & Securely\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        EmailTemplateEnum\n                    \n                \n                        \n                            \n                                 PASSWORD_RESET\n                            \n                        \n                        \n                            \n                                Value : password-reset\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        HttpRequestMethodEnum\n                    \n                \n                        \n                            \n                                 GET\n                            \n                        \n                        \n                            \n                                Value : GET\n                            \n                        \n                        \n                            \n                                 POST\n                            \n                        \n                        \n                            \n                                Value : POST\n                            \n                        \n                        \n                            \n                                 PUT\n                            \n                        \n                        \n                            \n                                Value : PUT\n                            \n                        \n                        \n                            \n                                 DELETE\n                            \n                        \n                        \n                            \n                                Value : DELETE\n                            \n                        \n                        \n                            \n                                 PATCH\n                            \n                        \n                        \n                            \n                                Value : PATCH\n                            \n                        \n                        \n                            \n                                 HEAD\n                            \n                        \n                        \n                            \n                                Value : HEAD\n                            \n                        \n                        \n                            \n                                 OPTIONS\n                            \n                        \n                        \n                            \n                                Value : OPTIONS\n                            \n                        \n                        \n                            \n                                 TRACE\n                            \n                        \n                        \n                            \n                                Value : TRACE\n                            \n                        \n                        \n                            \n                                 CONNECT\n                            \n                        \n                        \n                            \n                                Value : CONNECT\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        IANATimeZoneDatabaseEnum\n                    \n                \n                        \n                            \n                                 LAGOS\n                            \n                        \n                        \n                            \n                                Value : Africa/lagos\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        PaymentDriverEnum\n                    \n                \n                        \n                            \n                                 STRIPE\n                            \n                        \n                        \n                            \n                                Value : stripe\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        StorageDriverEnum\n                    \n                \n                        \n                            \n                                 CLOUDINARY\n                            \n                        \n                        \n                            \n                                Value : cloudinary\n                            \n                        \n                        \n                            \n                                 S3\n                            \n                        \n                        \n                            \n                                Value : s3\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        StripeCurrencyEnum\n                    \n                \n                        \n                            \n                                 USD\n                            \n                        \n                        \n                            \n                                Value : usd\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        UploadFileCategoryEnum\n                    \n                \n                        \n                            \n                                 AVATAR\n                            \n                        \n                        \n                            \n                                Value : avatars\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        UserRoleEnum\n                    \n                \n                        \n                            \n                                 ADMIN\n                            \n                        \n                        \n                            \n                                Value : admin\n                            \n                        \n                        \n                            \n                                 USER\n                            \n                        \n                        \n                            \n                                Value : user\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.cli.ts)\n                        \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            generateSlug   (src/.../common.utils.ts)\n                        \n                        \n                            normalizeUserFields   (src/.../user.util.ts)\n                        \n                        \n                            parseTimeString   (src/.../time.util.ts)\n                        \n                        \n                            setupSwagger   (src/.../swagger.config.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.cli.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n    src/common/utils/common.utils.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        generateSlug\n                        \n                    \n                \n            \n            \n                \ngenerateSlug(text: string, limit: number)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                text\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    src/common/utils/user.util.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        normalizeUserFields\n                        \n                    \n                \n            \n            \n                \nnormalizeUserFields(user: User)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            User\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    src/common/utils/time.util.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        parseTimeString\n                        \n                    \n                \n            \n            \n                \nparseTimeString(timeString: string)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                timeString\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     literal type\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    src/config/swagger.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        setupSwagger\n                        \n                    \n                \n            \n            \n                \nsetupSwagger(app: INestApplication)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                app\n                                            \n                                                        INestApplication\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nhttps://olaban-ji.github.io/nest-js-boilerplate/\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AppRedisModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        EmailModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        HttpClientModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PaymentModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        StorageModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AppRedisModule\n\n\n\ncluster_AppRedisModule_exports\n\n\n\ncluster_AppRedisModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_EmailModule\n\n\n\ncluster_EmailModule_exports\n\n\n\ncluster_HttpClientModule\n\n\n\ncluster_HttpClientModule_exports\n\n\n\ncluster_HttpClientModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAuthModule -->\n\nUsersModule->AuthModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nCreateUserCommand\n\nCreateUserCommand\n\nAppModule -->\n\nCreateUserCommand->AppModule\n\n\n\n\n\nSchemaService\n\nSchemaService\n\nAppModule -->\n\nSchemaService->AppModule\n\n\n\n\n\nAppRedisService \n\nAppRedisService \n\n\n\nAppRedisModule\n\nAppRedisModule\n\nAuthModule -->\n\nAppRedisModule->AuthModule\n\n\n\nUsersModule -->\n\nAppRedisModule->UsersModule\n\n\n\nAppRedisService  -->\n\nAppRedisModule->AppRedisService \n\n\n\n\n\nAppRedisService\n\nAppRedisService\n\nAppRedisModule -->\n\nAppRedisService->AppRedisModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthModule -->\n\nLocalStrategy->AuthModule\n\n\n\n\n\nEmailService \n\nEmailService \n\n\n\nEmailModule\n\nEmailModule\n\nEmailService  -->\n\nEmailModule->EmailService \n\n\n\n\n\nHttpClientService \n\nHttpClientService \n\n\n\nHttpClientModule\n\nHttpClientModule\n\nHttpClientService  -->\n\nHttpClientModule->HttpClientService \n\n\n\n\n\nHttpClientService\n\nHttpClientService\n\nHttpClientModule -->\n\nHttpClientService->HttpClientModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\nUsersSubscriber\n\nUsersSubscriber\n\nUsersModule -->\n\nUsersSubscriber->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        8 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    3 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    1 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    19 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    15 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Guard\n                \n            \n        \n        \n            \n                \n                    \n                    4 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            AuthTokens   (src/.../auth-tokens.ts)\n                        \n                        \n                            Checkout   (src/.../checkout.ts)\n                        \n                        \n                            HandledException   (src/.../index.ts)\n                        \n                        \n                            PaymentIntent   (src/.../payment-intent.ts)\n                        \n                        \n                            S3PutObjectResponse   (src/.../s3-put-object-response.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/modules/auth/types/auth-tokens.ts\n    \n    \n        \n            \n                \n                    \n                    AuthTokens\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    src/services/payment/types/checkout.ts\n    \n    \n        \n            \n                \n                    \n                    Checkout\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    src/common/types/index.ts\n    \n    \n        \n            \n                \n                    \n                    HandledException\n                \n            \n            \n                \n                        HttpException | AxiosError | ForbiddenException | Error\n\n                \n            \n        \n    \n    src/services/payment/types/payment-intent.ts\n    \n    \n        \n            \n                \n                    \n                    PaymentIntent\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    src/services/storage/types/s3-put-object-response.ts\n    \n    \n        \n            \n                \n                    \n                    S3PutObjectResponse\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            APP_NAME   (src/.../index.ts)\n                        \n                        \n                            EMAIL_FROM_NAME   (src/.../index.ts)\n                        \n                        \n                            IS_PUBLIC_KEY   (src/.../public.decorator.ts)\n                        \n                        \n                            otelSDK   (src/.../tracing.ts)\n                        \n                        \n                            PASSWORD_CHARACTER_SET   (src/.../index.ts)\n                        \n                        \n                            PASSWORD_RESET_EMAIL_QUEUE_NAME   (src/.../index.ts)\n                        \n                        \n                            PAYMENT_PROVIDER   (src/.../index.ts)\n                        \n                        \n                            PRODUCTION   (src/.../index.ts)\n                        \n                        \n                            prometheusExporter   (src/.../tracing.ts)\n                        \n                        \n                            Public   (src/.../public.decorator.ts)\n                        \n                        \n                            Role   (src/.../index.ts)\n                        \n                        \n                            STORAGE_PROVIDER   (src/.../index.ts)\n                        \n                        \n                            TEMPLATE_QUEUE_NAME   (src/.../index.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/common/constants/index.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        APP_NAME\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'nestjs-boilerplate'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        EMAIL_FROM_NAME\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'nestjs'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        PASSWORD_CHARACTER_SET\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!@#$%^&*()_+-=[]{}|;:,.<>?'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        PASSWORD_RESET_EMAIL_QUEUE_NAME\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'password-reset-email-queue'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        PAYMENT_PROVIDER\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'PAYMENT_PROVIDER'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        PRODUCTION\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'production'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        STORAGE_PROVIDER\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'STORAGE_PROVIDER'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        TEMPLATE_QUEUE_NAME\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'template-queue-name'\n                    \n                \n\n\n        \n    \n\n    src/modules/auth/decorators/public.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        IS_PUBLIC_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'isPublic'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => SetMetadata(IS_PUBLIC_KEY, true)\n                    \n                \n\n\n        \n    \n\n    src/tracing.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        otelSDK\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new NodeSDK({\n  metricReader: prometheusExporter,\n  contextManager: new AsyncLocalStorageContextManager(),\n  textMapPropagator: new CompositePropagator({\n    propagators: [\n      new JaegerPropagator(),\n      new W3CTraceContextPropagator(),\n      new W3CBaggagePropagator(),\n      new B3Propagator(),\n    ],\n  }),\n  instrumentations: [getNodeAutoInstrumentations()],\n})\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        prometheusExporter\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new PrometheusExporter(\n  { preventServerStart: true },\n  () => {\n    console.log('Prometheus exporter initialized');\n  },\n)\n                    \n                \n\n\n        \n    \n\n    src/common/decorators/index.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Role\n                        \n                    \n                \n            \n                \n                    \n                        Default value : Reflector.createDecorator()\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
