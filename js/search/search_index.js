var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/interfaces/ApiResponse.html",[0,1.95,1,2.508]],["body/interfaces/ApiResponse.html",[0,2.697,1,4.225,2,3.47,3,0.253,4,0.253,5,0.227,6,4.585,7,4.109,8,0.392,9,1.725,10,1.114,11,2.618,12,2.618,13,4.141,14,6.967,15,0.553,16,0.016,17,1.316,18,4.74,19,0.28,20,0.794,21,0.253,22,0.014,23,0.014]],["title/controllers/AppController.html",[24,2.063,25,2.713]],["body/controllers/AppController.html",[3,0.234,4,0.234,5,0.21,8,0.362,11,2.22,12,2.22,15,0.389,16,0.017,17,0.925,18,3.202,19,0.355,20,0.733,21,0.234,22,0.013,23,0.013,24,3.307,25,4.348,26,2.634,27,4.231,28,1.06,29,7.048,30,1.619,31,4.897,32,6.72,33,4.753,34,6.72,35,5.806,36,0.474,37,4.897,38,0.806,39,4.231,40,3.792,41,3.746,42,4.231,43,4.76,44,3.792,45,1.937,46,4.897,47,0.083,48,3.792,49,3.792,50,1.15]],["title/modules/AppModule.html",[51,1.325,52,2.713]],["body/modules/AppModule.html",[3,0.152,4,0.152,5,0.137,10,0.55,15,0.253,16,0.017,19,0.4,20,0.477,21,0.152,22,0.01,23,0.01,25,3.818,26,2.475,28,0.55,36,0.309,38,0.525,47,0.054,51,1.865,52,5.245,53,1.459,54,1.621,55,1.822,56,1.822,57,1.621,58,2.469,59,1.621,60,2.755,61,2.755,62,2.755,63,4.269,64,3.978,65,4.269,66,4.269,67,4.269,68,2.628,69,1.262,70,1.822,71,3.189,72,2.903,73,3.189,74,4.601,75,5.91,76,3.189,77,0.687,78,0.477,79,4.601,80,1.943,81,1.522,82,4.601,83,3.189,84,3.189,85,3.189,86,4.601,87,3.189,88,4.601,89,2.582,90,1.205,91,3.189,92,3.189,93,2.256,94,3.189,95,2.755,96,1.322,97,2.256,98,3.189,99,4.601,100,2.469,101,2.755,102,2.256,103,3.189,104,1.822,105,2.755,106,2.469,107,1.822,108,2.469,109,3.255,110,2.256,111,4.601,112,2.755,113,3.189,114,3.189,115,2.256,116,3.189,117,3.189,118,4.601,119,3.189,120,3.189,121,3.189,122,3.189,123,1.865,124,3.189,125,3.189,126,3.189,127,2.804,128,3.189,129,1.055,130,3.189,131,1.536,132,2.755,133,3.189,134,2.256,135,2.469,136,4.601,137,1.388,138,1.943,139,0.927,140,3.189,141,2.804,142,4.601,143,2.804,144,3.189,145,3.189,146,2.256,147,3.189,148,3.189,149,3.189,150,3.189,151,2.755,152,3.189,153,3.189,154,3.189]],["title/modules/AppRedisModule.html",[51,1.325,155,2.337]],["body/modules/AppRedisModule.html",[3,0.219,4,0.219,5,0.197,16,0.017,19,0.363,20,0.687,21,0.219,22,0.012,23,0.012,47,0.078,50,1.079,51,2.253,53,2.1,54,2.334,55,2.623,56,2.623,57,2.334,58,2.983,59,3.315,68,3.372,69,1.817,70,2.623,72,2.47,81,1.952,89,2.723,90,1.735,123,2.039,127,2.799,129,1.519,131,2.212,132,3.968,155,4.517,156,3.968,157,3.968,158,3.968,159,4.423,160,4.593,161,4.593,162,4.593,163,3.556,164,3.556,165,4.593,166,1.393,167,4.593,168,4.593,169,3.968,170,4.593,171,4.593]],["title/injectables/AppRedisService.html",[159,2.191,172,0.468]],["body/injectables/AppRedisService.html",[3,0.1,4,0.1,5,0.089,8,0.154,9,0.888,10,1.039,15,0.494,16,0.017,17,1.375,19,0.25,20,0.312,21,0.1,22,0.009,23,0.007,28,0.574,36,0.602,38,1.049,47,0.035,50,1.416,77,1.339,78,0.902,81,0.689,89,2.295,90,0.787,123,1.15,129,0.689,139,1.607,159,1.901,163,1.614,164,5.395,166,2.195,172,0.406,173,0.632,174,1.801,175,1.751,176,4.155,177,3.328,178,4.506,179,3.328,180,4.776,181,3.328,182,6.371,183,1.01,184,1.614,185,2.187,186,5.802,187,3.328,188,3.328,189,2.084,190,5.282,191,3.59,192,3.328,193,2.084,194,1.723,195,2.082,196,3.133,197,6.506,198,5.528,199,5.206,200,2.532,201,3.328,202,2.084,203,3.328,204,3.328,205,3.328,206,2.084,207,3.328,208,2.084,209,3.328,210,5.277,211,2.084,212,2.028,213,3.328,214,2.975,215,6.725,216,2.532,217,2.084,218,1.004,219,2.875,220,2.875,221,3.328,222,3.328,223,1.901,224,2.577,225,3.59,226,3.328,227,1.901,228,2.176,229,2.875,230,2.084,231,1.059,232,2.084,233,2.084,234,2.084,235,5.528,236,1.562,237,3.328,238,2.084,239,3.328,240,2.084,241,2.084,242,2.789,243,2.084,244,5.186,245,1.801,246,2.084,247,2.084,248,2.084,249,1.959,250,2.084,251,1.801,252,2.717,253,2.084,254,2.084,255,2.084,256,2.084,257,2.084,258,2.084,259,2.084,260,2.084,261,2.084,262,2.084,263,2.084,264,2.084,265,2.084,266,3.91,267,2.084,268,3.328,269,3.328,270,2.084]],["title/injectables/AppService.html",[65,2.508,172,0.468]],["body/injectables/AppService.html",[3,0.264,4,0.264,5,0.237,8,0.409,16,0.016,17,1.252,19,0.292,20,0.829,21,0.264,22,0.014,23,0.014,28,1.144,36,0.536,38,0.912,47,0.094,50,1.301,65,4.335,172,0.808,173,1.68,271,4.785,272,7.355,273,5.539,274,5.539,275,5.539]],["title/controllers/AuthController.html",[24,2.063,276,2.713]],["body/controllers/AuthController.html",[1,1.768,3,0.129,4,0.129,5,0.116,8,0.2,10,0.941,11,1.97,12,1.97,13,3.116,15,0.522,16,0.017,18,1.768,19,0.361,20,0.404,21,0.129,22,0.009,23,0.009,24,1.454,26,1.454,28,0.703,30,1.804,36,0.528,38,0.898,40,2.093,41,3.566,43,4.532,44,2.093,45,1.069,47,0.046,48,4.224,49,4.224,50,1.282,69,2.525,77,1.176,78,0.816,102,1.912,138,1.647,139,0.786,166,2.138,194,1.689,195,2.27,236,1.435,249,2.061,276,2.881,277,2.336,278,2.336,279,4.234,280,3.116,281,3.859,282,4.234,283,2.703,284,4.351,285,2.703,286,3.519,287,2.241,288,2.428,289,2.703,290,2.703,291,4.987,292,2.703,293,2.703,294,1.282,295,2.703,296,3.467,297,2.703,298,2.663,299,2.703,300,2.703,301,3.154,302,2.703,303,3.467,304,2.703,305,2.703,306,4.351,307,2.703,308,2.336,309,2.703,310,2.093,311,2.703,312,5.056,313,1.912,314,2.703,315,2.336,316,2.636,317,2.093,318,2.336,319,2.703,320,2.703,321,2.327,322,2.703,323,2.703,324,3.154,325,2.703,326,2.336,327,2.093,328,2.703,329,2.703,330,2.703,331,2.703,332,2.703,333,4.713,334,4.713,335,2.703,336,2.336,337,4.713,338,2.327,339,3.519,340,3.795,341,2.703,342,2.703,343,2.703,344,2.336,345,2.703,346,2.703,347,1.539,348,2.703,349,2.093,350,2.703,351,3.154,352,2.663,353,2.663,354,2.703]],["title/modules/AuthModule.html",[51,1.325,63,2.508]],["body/modules/AuthModule.html",[3,0.167,4,0.167,5,0.15,15,0.278,16,0.017,19,0.402,20,0.523,21,0.167,22,0.01,23,0.01,26,2.643,47,0.059,51,1.962,53,1.599,54,1.777,55,1.998,56,1.998,57,1.777,58,2.598,59,2.887,63,4.95,64,4.101,68,2.807,69,1.383,70,1.998,72,2.643,78,0.735,89,2.437,90,1.321,106,2.708,107,1.998,108,2.708,109,3.475,110,2.474,123,1.208,127,2.131,129,1.156,134,2.474,155,4.101,276,4.018,315,3.021,316,3.989,317,2.708,355,3.021,356,3.021,357,3.497,358,3.021,359,4.401,360,4.401,361,3.497,362,4.914,363,2.287,364,3.497,365,3.497,366,3.497,367,2.708,368,4.914,369,2.131,370,3.497,371,3.497,372,3.475,373,3.497,374,3.021,375,3.714,376,1.777,377,4.245,378,3.021,379,3.497,380,3.497,381,3.021,382,3.497,383,3.497,384,2.708,385,3.497,386,3.021,387,3.021,388,3.021,389,2.708,390,3.021,391,3.021,392,3.021,393,3.021,394,3.021,395,2.708,396,3.497]],["title/classes/AuthResponseDto.html",[47,0.065,397,2.97]],["body/classes/AuthResponseDto.html",[3,0.233,4,0.233,5,0.209,8,0.361,9,1.638,12,2.62,15,0.488,16,0.016,17,1.33,19,0.258,21,0.233,22,0.013,23,0.013,30,2.029,36,0.594,45,1.932,47,0.083,194,2.545,280,3.506,294,1.442,301,4.752,321,3.506,338,3.506,339,5.798,397,4.752,398,1.615,399,5.798,400,4.219,401,3.301,402,6.137,403,3.391,404,4.752,405,4.883,406,4.752,407,4.013,408,4.013,409,4.883,410,3.411]],["title/injectables/AuthService.html",[172,0.468,316,2.063]],["body/injectables/AuthService.html",[3,0.087,4,0.087,5,0.078,8,0.135,9,0.801,10,0.899,15,0.508,16,0.017,17,1.368,19,0.337,20,0.274,21,0.087,22,0.006,23,0.006,28,0.517,36,0.619,38,0.799,47,0.031,50,1.034,69,1.186,77,1.123,78,0.78,89,2.176,90,0.692,107,1.047,123,0.633,139,2.082,159,2.977,166,2.03,172,0.366,173,0.556,175,2.269,183,0.91,195,2.112,196,1.444,200,1.117,223,1.047,228,1.961,236,1.619,249,2.414,252,2.877,266,2.121,279,2.591,280,1.713,281,3.112,282,3.289,288,1.375,294,1.471,316,1.613,321,2.772,333,2.591,334,2.591,340,1.419,344,1.583,347,2.245,351,2.322,352,2.877,353,2.877,367,1.419,375,1.198,376,0.931,381,3.289,384,2.322,411,1.583,412,3.807,413,3.807,414,3.807,415,3.807,416,3.807,417,3.289,418,3.807,419,1.583,420,2.649,421,5.502,422,3.807,423,3.112,424,2.999,425,2.999,426,1.832,427,2.999,428,1.832,429,2.999,430,1.832,431,1.832,432,1.832,433,1.832,434,3.289,435,1.832,436,5.502,437,1.832,438,1.832,439,1.832,440,1.832,441,1.832,442,2.322,443,1.583,444,1.296,445,1.419,446,1.832,447,2.999,448,2.999,449,1.832,450,1.583,451,1.198,452,1.419,453,1.832,454,1.583,455,2.322,456,1.832,457,1.832,458,1.832,459,1.832,460,1.832,461,3.807,462,1.832,463,2.999,464,1.832,465,3.807,466,2.999,467,1.832,468,4.4,469,1.832,470,1.832,471,1.832,472,3.801,473,3.407,474,1.777,475,3.407,476,1.832,477,1.583,478,1.419,479,1.419,480,1.047,481,1.419,482,1.296,483,1.419,484,1.419,485,1.419,486,3.801,487,3.807,488,4.193,489,2.999,490,2.999,491,2.591,492,1.832,493,2.999,494,1.832,495,2.977,496,1.832,497,1.832,498,1.583,499,1.832,500,1.419,501,2.489,502,2.591,503,1.583,504,1.419,505,1.832,506,1.832,507,1.832,508,1.583,509,1.583,510,2.048,511,1.583,512,1.832,513,1.583,514,1.832,515,1.832,516,2.999,517,1.832,518,2.999,519,2.591,520,1.832,521,1.832,522,1.832,523,1.117,524,1.832,525,2.322,526,2.591,527,1.583,528,1.419,529,1.832,530,1.832,531,1.832,532,1.832,533,1.419,534,2.999,535,1.832,536,2.999,537,1.832]],["title/classes/BaseEntity.html",[47,0.065,538,2.713]],["body/classes/BaseEntity.html",[3,0.18,4,0.18,5,0.162,8,0.437,9,1.58,10,0.895,15,0.571,16,0.017,17,0.98,19,0.274,21,0.18,22,0.011,23,0.011,30,2.107,36,0.617,47,0.064,78,0.566,96,1.567,123,2.045,178,3.668,214,2.708,218,3.068,228,2.472,398,1.25,474,1.94,510,3.184,538,3.668,539,3.266,540,5.921,541,6.676,542,5.921,543,6.44,544,5.115,545,5.34,546,5.504,547,5.504,548,5.34,549,4.506,550,4.481,551,4.509,552,3.781,553,4.481,554,4.481,555,3.781,556,5.921,557,3.781,558,4.584,559,3.781,560,5.187,561,3.391,562,3.391,563,3.781,564,5.187,565,5.187,566,5.504,567,1.921,568,3.781,569,3.781,570,3.781,571,3.781]],["title/classes/CatchAllFilter.html",[47,0.065,572,2.97]],["body/classes/CatchAllFilter.html",[3,0.131,4,0.131,5,0.117,8,0.202,9,1.097,10,1.106,12,2.125,13,2.348,15,0.509,16,0.017,17,1.037,18,3.589,19,0.31,20,0.409,21,0.131,22,0.009,23,0.009,28,0.709,36,0.638,38,1.017,47,0.046,50,1.16,77,1.382,78,1.028,80,2.505,81,0.905,129,0.905,135,2.119,137,1.789,139,1.71,143,1.668,175,2.322,183,1.247,185,2.536,196,1.98,214,1.252,218,1.318,225,2.364,231,1.391,236,1.784,252,1.789,287,1.252,291,1.936,327,2.119,363,1.789,398,0.905,444,2.908,474,0.795,500,4.25,502,4.266,551,1.789,572,3.183,573,2.364,574,4.938,575,4.938,576,4.111,577,4.111,578,4.111,579,4.111,580,4.111,581,2.737,582,6.18,583,4.111,584,4.111,585,4.111,586,5.535,587,4.266,588,5.489,589,2.737,590,6.871,591,2.737,592,2.737,593,1.668,594,2.737,595,2.737,596,2.737,597,2.737,598,4.111,599,2.737,600,2.737,601,2.737,602,3.552,603,2.119,604,3.552,605,2.119,606,2.364,607,2.908,608,2.737,609,2.737,610,2.737,611,2.737,612,2.737,613,2.737,614,1.563,615,2.737,616,4.111,617,2.737,618,2.737,619,2.737,620,2.737,621,2.737,622,4.111,623,1.789,624,2.737,625,2.737,626,2.737,627,2.737,628,5.489,629,4.111,630,3.183,631,2.119,632,2.737,633,4.111,634,2.737,635,4.938,636,2.737,637,2.737,638,3.552,639,2.737,640,2.737,641,2.364,642,2.737,643,2.737,644,2.737,645,4.266,646,2.737,647,2.737,648,2.364]],["title/classes/ChangePasswordDto.html",[47,0.065,649,2.508]],["body/classes/ChangePasswordDto.html",[3,0.182,4,0.182,5,0.163,8,0.281,9,1.391,12,2.307,15,0.414,16,0.017,17,1.207,19,0.275,21,0.182,22,0.011,23,0.011,30,1.723,36,0.504,45,1.505,47,0.088,194,2.16,200,3.174,288,2.602,294,1.224,352,3.884,353,3.884,398,1.258,401,2.802,403,3.076,410,3.019,474,1.857,649,3.406,650,5.132,651,2.691,652,4.5,653,4.946,654,4.5,655,4.946,656,4.946,657,4.946,658,4.946,659,4.833,660,5.35,661,4.946,662,4.946,663,4.946,664,4.946,665,4.946,666,4.946,667,4.946,668,3.805,669,5.209,670,3.805,671,4.202,672,4.202,673,4.599,674,2.946,675,2.173]],["title/injectables/CloudinaryService.html",[172,0.468,676,2.713]],["body/injectables/CloudinaryService.html",[3,0.179,4,0.179,5,0.253,8,0.278,10,0.891,11,1.357,15,0.41,16,0.017,19,0.372,20,0.562,21,0.179,22,0.011,23,0.011,28,0.891,36,0.5,38,0.618,47,0.064,50,1.386,77,1.113,78,0.773,81,1.242,89,2.723,90,1.419,129,1.242,137,1.635,139,1.501,166,1.79,172,0.63,173,1.139,175,1.635,183,1.566,185,2.789,195,1.784,231,1.909,236,0.921,242,2.777,266,2.657,338,2.146,474,1.092,501,3.376,641,3.245,676,3.652,677,3.245,678,5.459,679,2.657,680,3.757,681,2.909,682,4.92,683,4.569,684,4.494,685,3.757,686,3.757,687,3.652,688,4.461,689,5.164,690,3.757,691,3.757,692,2.909,693,3.376,694,3.245,695,1.809,696,2.021,697,2.657,698,3.757,699,3.757,700,3.757,701,3.757,702,3.757,703,3.757,704,3.757,705,3.245,706,5.098,707,3.245,708,3.245,709,3.245,710,5.901,711,3.757,712,3.245,713,3.757,714,3.757,715,3.757,716,3.757,717,3.757,718,3.245,719,3.757,720,3.757,721,3.757,722,3.757,723,3.757,724,3.757,725,3.757]],["title/injectables/CreateUserCommand.html",[66,2.508,172,0.468]],["body/injectables/CreateUserCommand.html",[3,0.125,4,0.125,5,0.112,8,0.194,9,1.064,10,1.049,15,0.483,16,0.017,17,1.394,19,0.352,20,0.393,21,0.125,22,0.008,23,0.008,28,0.688,30,1.778,33,2.82,36,0.612,38,0.952,47,0.045,50,1.263,66,2.606,77,1.311,78,1.034,96,1.089,123,2.25,139,1.68,166,1.461,172,0.486,173,0.797,175,1.83,183,1.209,194,1.089,195,1.377,214,1.202,218,1.265,236,0.977,249,1.506,288,0.949,294,1.132,347,2.389,376,1.335,420,3.045,474,1.159,495,1.501,498,2.27,500,2.034,501,1.718,503,2.27,523,2.429,549,3.407,561,2.606,567,1.335,659,2.606,695,1.265,718,2.27,726,5.627,727,2.27,728,1.823,729,4.817,730,4.163,731,4.817,732,4.817,733,4.817,734,4.817,735,3.087,736,2.27,737,4.163,738,3.986,739,3.087,740,2.627,741,5.377,742,3.986,743,6.513,744,2.627,745,7.006,746,2.627,747,3.986,748,2.82,749,2.627,750,2.627,751,3.986,752,2.627,753,2.627,754,3.986,755,2.733,756,2.627,757,3.149,758,3.986,759,3.071,760,2.627,761,2.627,762,3.986,763,3.986,764,3.444,765,2.034,766,5.78,767,3.444,768,2.27,769,2.034,770,2.627,771,2.606,772,1.718,773,2.82,774,2.627,775,2.627,776,2.627,777,2.627,778,2.034,779,2.627,780,2.627,781,2.627,782,2.627,783,1.718,784,2.627,785,2.627,786,5.377]],["title/classes/CreateUserDto.html",[47,0.065,787,2.508]],["body/classes/CreateUserDto.html",[3,0.11,4,0.11,5,0.098,8,0.17,9,0.96,10,1.225,12,1.809,15,0.547,16,0.017,17,1.401,19,0.264,21,0.11,22,0.008,23,0.008,30,2.276,36,0.666,45,0.909,47,0.075,50,0.844,78,0.749,194,2.815,196,1.731,200,2.19,214,2.025,216,2.19,236,0.563,288,2.176,294,1.751,347,2.054,398,0.76,401,3.594,403,3.589,410,3.451,523,2.698,561,2.35,593,1.4,623,1.502,653,2.783,654,1.985,655,2.783,656,2.783,657,2.783,658,2.783,659,3.275,660,2.783,661,2.783,662,2.783,663,2.783,664,2.783,665,2.783,666,2.783,667,2.783,671,3.845,672,4.726,673,2.783,674,1.779,675,1.312,695,1.106,748,2.543,755,2.93,757,3.275,773,3.132,787,2.35,788,6.018,789,1.985,790,3.845,791,3.132,792,3.845,793,4.261,794,3.132,795,3.132,796,3.429,797,3.845,798,3.595,799,3.595,800,3.595,801,3.595,802,2.297,803,2.297,804,2.297,805,2.297,806,2.297,807,2.297,808,3.878,809,2.297,810,2.297,811,2.297,812,2.297,813,2.297,814,2.297,815,2.297,816,2.297,817,2.297,818,2.783,819,2.297,820,2.297,821,3.595,822,2.297,823,2.297,824,2.297,825,3.105,826,2.297,827,2.297,828,2.297,829,2.297,830,2.297,831,3.595,832,2.783,833,2.297,834,6.557,835,3.595,836,3.595,837,1.985,838,1.779,839,2.297,840,2.297,841,3.595,842,2.297,843,2.297,844,2.297,845,4.428,846,2.297,847,2.297,848,1.985,849,2.297,850,2.297,851,2.297]],["title/classes/CreateUserResponseDto.html",[47,0.065,852,2.713]],["body/classes/CreateUserResponseDto.html",[3,0.216,4,0.216,5,0.194,8,0.334,9,1.56,11,2.472,12,2.667,15,0.563,16,0.016,17,1.223,19,0.308,21,0.279,22,0.012,23,0.012,30,1.932,36,0.566,45,1.789,47,0.099,194,2.838,227,3.699,294,1.815,398,1.495,401,3.143,403,3.118,406,5.013,407,4.234,408,4.234,410,3.602,783,4.475,852,4.134,853,3.502,854,5.049,855,4.523,856,4.523,857,2.756,858,3.199,859,4.525,860,3.502]],["title/classes/DatabaseSeeder.html",[47,0.065,861,2.97]],["body/classes/DatabaseSeeder.html",[3,0.244,4,0.244,5,0.219,8,0.377,10,0.881,15,0.501,16,0.017,19,0.361,21,0.244,22,0.013,23,0.013,28,1.089,36,0.495,38,0.841,47,0.087,77,1.101,78,0.764,96,2.617,166,2.078,195,2.181,398,1.689,474,1.485,567,2.596,728,2.887,735,4.887,737,5.54,739,3.955,861,4.887,862,4.413,863,6.85,864,6.312,865,5.108,866,4.413,867,3.613,868,5.108,869,5.108]],["title/modules/EmailModule.html",[51,1.325,870,2.713]],["body/modules/EmailModule.html",[3,0.205,4,0.205,5,0.184,16,0.017,19,0.385,20,0.642,21,0.205,22,0.012,23,0.012,26,2.309,47,0.073,51,2.181,53,1.963,54,2.182,55,2.452,56,2.452,57,2.182,58,2.583,59,3.209,68,3.227,69,1.698,70,2.452,72,2.309,81,1.868,89,2.654,90,1.622,102,3.036,123,1.483,127,2.616,129,1.419,134,3.036,143,2.616,294,1.008,376,2.182,434,3.709,474,1.248,587,3.709,696,3.038,759,2.452,870,4.93,871,3.709,872,3.709,873,4.511,874,4.293,875,4.293,876,4.293,877,3.324,878,4.374,879,5.649,880,4.293,881,4.293,882,4.293,883,4.293,884,4.293,885,4.293,886,4.293,887,4.293,888,4.293,889,4.293,890,4.293,891,4.293,892,4.293,893,3.324,894,4.293,895,4.293,896,4.293,897,4.293]],["title/classes/EmailService.html",[47,0.065,873,2.337]],["body/classes/EmailService.html",[3,0.208,4,0.208,5,0.187,8,0.323,10,0.985,15,0.454,16,0.017,17,1.452,19,0.301,20,0.653,21,0.208,22,0.012,23,0.012,28,0.985,36,0.553,38,0.719,47,0.074,77,1.231,78,0.855,81,1.444,129,1.444,139,1.66,166,1.931,175,1.809,183,1.733,185,2.898,195,1.973,227,2.494,231,2.219,242,2.349,249,1.65,347,1.65,349,3.381,398,1.444,549,4.503,696,2.349,873,4.115,877,3.381,893,5.229,898,3.772,899,6.367,900,4.367,901,7.19,902,4.367,903,4.367,904,7.19,905,4.416,906,4.367,907,4.367,908,4.367,909,4.367,910,4.367]],["title/interfaces/ErrorResponse.html",[0,1.95,607,2.713]],["body/interfaces/ErrorResponse.html",[0,2.531,2,3.256,3,0.238,4,0.238,5,0.213,7,3.855,8,0.368,9,1.658,10,1.071,12,2.561,13,4.05,15,0.591,16,0.016,17,1.494,21,0.238,22,0.013,23,0.013,78,1.061,143,4.32,196,3.261,551,4.636,607,4.394,638,6.126,911,4.302]],["title/classes/ForgotPasswordDto.html",[47,0.065,284,2.713]],["body/classes/ForgotPasswordDto.html",[3,0.256,4,0.256,5,0.23,8,0.397,9,1.737,15,0.427,16,0.016,17,1.229,19,0.343,21,0.256,22,0.014,23,0.014,30,1.776,36,0.52,45,2.125,47,0.11,284,4.604,347,2.646,398,1.776,403,2.587,410,3.308,651,3.799,675,3.068,832,5.04,838,4.159,912,5.623,913,5.371,914,4.64,915,5.371]],["title/classes/GetProfileResponseDto.html",[47,0.065,858,2.713]],["body/classes/GetProfileResponseDto.html",[3,0.216,4,0.216,5,0.194,8,0.335,9,1.563,11,2.474,12,2.669,15,0.563,16,0.017,17,1.224,19,0.309,21,0.279,22,0.012,23,0.012,30,1.936,36,0.567,45,1.794,47,0.099,194,2.84,227,3.703,294,1.805,398,1.499,401,3.149,403,3.122,406,5.019,407,4.239,408,4.239,410,3.605,783,3.828,852,3.207,853,3.511,854,3.917,857,2.763,858,4.14,859,5.304,860,4.532,916,4.534,917,4.534]],["title/modules/HttpClientModule.html",[51,1.325,918,2.713]],["body/modules/HttpClientModule.html",[3,0.238,4,0.238,5,0.214,16,0.016,19,0.358,20,0.747,21,0.238,22,0.013,23,0.013,47,0.085,51,2.342,53,2.284,54,2.538,55,2.852,56,2.852,57,2.538,58,3.101,59,3.446,68,3.555,69,1.975,70,2.852,72,2.686,81,2.058,918,5.342,919,4.314,920,4.314,921,4.314,922,5.12,923,3.866,924,3.866,925,4.993,926,6.223,927,3.866,928,3.265,929,4.993]],["title/injectables/HttpClientService.html",[172,0.468,922,2.508]],["body/injectables/HttpClientService.html",[3,0.175,4,0.175,5,0.157,8,0.271,9,1.355,10,0.875,11,1.833,15,0.403,16,0.017,17,1.1,19,0.36,20,0.548,21,0.175,22,0.011,23,0.011,28,0.875,36,0.609,38,0.603,47,0.062,50,0.861,77,1.094,78,0.759,81,1.211,129,1.211,131,3.179,139,2.075,166,1.766,172,0.619,173,1.111,175,2.26,183,1.539,185,2.77,195,1.753,214,2.321,218,2.444,223,3.591,231,1.862,236,0.898,242,2.73,249,1.384,287,2.321,338,2.093,474,1.827,605,2.837,759,3.591,922,3.318,923,5.112,924,5.112,927,2.837,928,4.11,930,3.165,931,5.823,932,5.823,933,5.823,934,3.664,935,6.83,936,5.075,937,3.664,938,6.287,939,3.664,940,5.075,941,6.287,942,3.664,943,5.075,944,5.075,945,3.664,946,2.395,947,3.664,948,3.664,949,3.664,950,3.664,951,3.664,952,5.075,953,3.664]],["title/interfaces/IPaymentService.html",[0,1.95,954,2.713]],["body/interfaces/IPaymentService.html",[0,2.517,2,3.238,3,0.236,4,0.236,5,0.212,8,0.366,10,1.068,15,0.492,16,0.016,19,0.261,21,0.236,22,0.013,23,0.013,28,1.068,36,0.599,38,1.019,77,1.334,78,0.926,195,2.445,212,3.772,759,4.244,954,4.379,955,4.278,956,5.835,957,5.835,958,4.278,959,5.835,960,6.419,961,4.952,962,6.113,963,4.278,964,5.835,965,4.952,966,3.33]],["title/interfaces/IStrorageService.html",[0,1.95,693,2.508]],["body/interfaces/IStrorageService.html",[0,2.316,2,2.98,3,0.218,4,0.218,5,0.278,8,0.337,10,1.184,11,1.646,15,0.467,16,0.017,17,1.227,19,0.362,21,0.218,22,0.012,23,0.012,28,1.013,36,0.569,38,0.967,77,1.266,78,0.879,141,3.96,190,4.154,195,2.371,196,3.13,210,5.032,212,3.579,614,2.603,678,5.032,681,3.529,682,5.315,683,5.032,684,4.855,687,3.223,688,3.937,693,3.84,695,2.195,696,2.451,697,3.223,967,3.937,968,5.614,969,3.937,970,5.315,971,4.557,972,4.557,973,3.223,974,3.937,975,2.98,976,2.98]],["title/injectables/JwtAuthGuard.html",[172,0.468,372,2.713]],["body/injectables/JwtAuthGuard.html",[3,0.315,4,0.197,5,0.177,8,0.305,10,1.067,12,1.489,15,0.492,16,0.017,19,0.348,20,0.617,21,0.197,22,0.011,23,0.011,28,0.949,36,0.599,38,0.905,47,0.07,50,1.454,77,1.334,78,0.988,123,1.424,138,2.512,151,3.562,172,0.671,173,1.251,183,1.251,236,1.011,294,1.616,318,3.562,363,2.696,369,2.512,372,3.89,445,4.258,474,1.198,495,2.355,501,4.317,728,2.515,772,2.696,905,2.696,977,5.704,978,3.192,979,5.5,980,4.752,981,5.5,982,3.562,983,6.112,984,4.123,985,4.752,986,4.67,987,4.123,988,5.5,989,4.123,990,5.5,991,3.562,992,3.192,993,4.752,994,4.123,995,3.562,996,4.123,997,4.123,998,4.123,999,4.123,1000,4.123,1001,4.123]],["title/injectables/JwtStrategy.html",[172,0.468,359,2.508]],["body/injectables/JwtStrategy.html",[3,0.157,4,0.157,5,0.141,8,0.243,10,0.81,15,0.373,16,0.017,19,0.334,20,0.491,21,0.157,22,0.01,23,0.01,24,2.527,28,1.033,36,0.455,38,0.541,47,0.093,50,0.771,77,1.013,78,0.703,89,2.608,90,1.241,123,1.134,166,1.664,172,0.573,173,0.996,175,1.04,183,1.425,191,2.837,219,4.059,223,1.876,229,4.059,236,0.805,249,1.241,252,2.147,280,3.766,281,4.236,287,3.105,294,1.685,298,3.588,316,2.527,321,3.766,359,3.072,369,2.001,420,3.269,444,2.323,472,2.837,473,2.543,474,0.954,475,2.543,486,4.74,504,4.907,508,4.059,510,1.766,511,2.837,528,3.638,562,3.072,679,2.323,712,4.059,728,2.149,765,2.543,772,2.147,1002,2.837,1003,4.059,1004,4.059,1005,3.284,1006,4.699,1007,3.284,1008,4.699,1009,4.059,1010,4.699,1011,4.699,1012,4.699,1013,4.059,1014,4.699,1015,4.699,1016,4.059,1017,4.699,1018,4.699,1019,4.699,1020,5.99,1021,4.699,1022,4.699,1023,4.699,1024,4.699,1025,4.699,1026,4.699,1027,4.059,1028,4.699,1029,5.99,1030,3.638,1031,4.699,1032,4.699,1033,4.699,1034,4.699,1035,4.699,1036,3.284,1037,2.837,1038,2.543,1039,2.837,1040,3.284,1041,3.284,1042,3.284,1043,3.284,1044,3.284,1045,3.284]],["title/injectables/LocalAuthGuard.html",[172,0.468,313,2.713]],["body/injectables/LocalAuthGuard.html",[3,0.272,4,0.272,5,0.244,16,0.016,19,0.356,20,0.853,21,0.272,22,0.014,23,0.014,47,0.097,172,0.822,173,1.729,313,4.77,369,3.473,728,3.084,978,4.413,991,4.923,1046,4.923,1047,6.744]],["title/injectables/LocalStrategy.html",[172,0.468,360,2.508]],["body/injectables/LocalStrategy.html",[3,0.202,4,0.202,5,0.181,8,0.312,10,0.964,15,0.444,16,0.017,17,1.345,19,0.383,20,0.632,21,0.202,22,0.012,23,0.012,28,0.964,36,0.541,38,0.695,47,0.072,50,0.992,77,1.204,78,0.836,166,1.899,172,0.681,173,1.28,175,1.769,183,1.694,195,1.93,236,1.035,249,2.111,288,2.407,294,1.471,316,3.831,317,3.268,347,2.111,360,3.653,369,2.572,420,3.499,445,3.268,474,1.227,488,3.647,495,2.411,509,3.647,510,2.27,525,3.268,728,2.555,765,3.268,772,2.76,1003,4.826,1004,4.826,1037,3.647,1038,3.268,1039,3.647,1048,3.647,1049,4.221,1050,4.221,1051,5.587,1052,4.221,1053,3.647,1054,4.826,1055,4.221,1056,4.221,1057,4.221,1058,4.221,1059,4.221,1060,3.268,1061,3.647,1062,4.221]],["title/classes/LoginDto.html",[47,0.065,296,2.713]],["body/classes/LoginDto.html",[3,0.236,4,0.236,5,0.211,8,0.365,9,1.65,15,0.491,16,0.016,17,1.335,19,0.326,21,0.236,22,0.013,23,0.013,30,2.044,36,0.598,45,1.953,47,0.105,194,2.562,200,3.766,288,2.629,294,1.661,296,4.371,347,2.75,398,1.633,401,3.324,403,3.404,410,3.428,653,4.785,675,2.821,832,4.785,838,3.823,914,4.266,1063,4.266,1064,4.938,1065,4.938]],["title/classes/Migration20250730220636.html",[47,0.065,1066,2.97]],["body/classes/Migration20250730220636.html",[3,0.152,4,0.152,5,0.137,8,0.399,16,0.016,19,0.168,21,0.152,22,0.01,23,0.01,28,0.794,36,0.309,38,0.525,47,0.054,69,1.262,78,0.884,96,1.322,131,1.536,143,1.943,146,4.18,166,1.637,178,2.256,190,2.256,195,1.59,196,1.536,216,2.804,218,3.018,223,2.628,228,5.002,280,1.822,288,2.134,294,1.581,347,2.233,398,1.055,510,2.475,533,2.469,545,4.576,547,3.975,548,5.334,549,3.255,550,2.755,551,3.864,554,2.755,558,2.469,561,3.53,562,2.085,728,2.104,748,2.256,755,2.744,771,3.009,790,3.818,792,3.255,793,3.818,797,2.256,808,3.563,818,2.469,1030,2.469,1066,3.563,1067,2.755,1068,5.398,1069,5.105,1070,3.189,1071,2.755,1072,3.189,1073,7.215,1074,3.975,1075,4.601,1076,3.189,1077,3.189,1078,4.601,1079,3.255,1080,3.189,1081,3.189,1082,6.266,1083,3.189,1084,3.563,1085,3.189,1086,4.601,1087,3.189,1088,3.189,1089,3.189,1090,3.189,1091,2.755,1092,3.189,1093,3.189,1094,3.189,1095,4.601,1096,3.189,1097,3.189,1098,7.62,1099,3.189,1100,3.189,1101,3.189,1102,7.215,1103,3.189,1104,3.189,1105,3.189,1106,3.189,1107,3.189,1108,2.755,1109,3.189,1110,3.189,1111,2.755,1112,3.189,1113,2.755,1114,3.189,1115,3.189,1116,2.755,1117,3.189,1118,3.189,1119,2.755,1120,3.189,1121,3.189,1122,3.975,1123,2.469,1124,3.189,1125,3.189,1126,3.189,1127,3.189,1128,3.189,1129,2.755,1130,3.189,1131,3.189,1132,3.189]],["title/injectables/MorganMiddleware.html",[93,2.713,172,0.468]],["body/injectables/MorganMiddleware.html",[3,0.2,4,0.2,5,0.179,8,0.31,10,0.959,12,1.514,15,0.442,16,0.017,17,0.792,19,0.293,20,0.627,21,0.2,22,0.012,23,0.012,28,0.959,36,0.538,38,0.69,47,0.071,50,0.985,77,1.198,78,0.832,80,3.802,81,1.386,93,3.933,129,1.386,131,2.018,137,1.824,139,1.218,141,2.554,172,0.678,173,1.271,175,1.327,183,1.271,184,3.245,185,2.812,220,4.804,224,4.305,236,1.028,294,1.306,298,3.636,455,4.305,480,3.95,614,2.394,645,5.391,692,3.245,928,2.74,1133,3.621,1134,4.191,1135,4.804,1136,5.741,1137,4.191,1138,3.621,1139,4.804,1140,5.391,1141,3.245,1142,4.191,1143,4.191,1144,5.56,1145,4.191,1146,3.621,1147,4.191,1148,3.621,1149,4.191,1150,4.191,1151,4.191,1152,4.191,1153,4.191,1154,4.191,1155,4.191,1156,4.191,1157,4.191,1158,5.56,1159,4.191]],["title/classes/PasswordResetEmailConsumer.html",[47,0.065,1160,2.97]],["body/classes/PasswordResetEmailConsumer.html",[3,0.197,4,0.197,5,0.177,8,0.305,10,0.949,11,1.489,15,0.437,16,0.017,19,0.381,20,0.617,21,0.197,22,0.011,23,0.011,28,0.949,36,0.532,38,0.679,47,0.07,77,1.185,78,0.823,81,1.363,107,2.355,129,1.363,139,1.598,166,1.877,175,1.742,183,1.668,185,2.857,227,2.355,231,2.096,236,1.011,242,2.958,249,1.558,347,2.078,375,2.696,376,2.096,398,1.363,451,2.696,519,3.562,523,2.512,695,1.986,728,1.886,772,2.696,873,4.311,1160,5.112,1161,3.562,1162,5.5,1163,4.123,1164,4.123,1165,5.5,1166,7.338,1167,4.123,1168,5.5,1169,4.123,1170,5.5,1171,4.123,1172,3.562,1173,3.562,1174,4.123,1175,4.123,1176,4.123,1177,4.123,1178,5.5,1179,6.189,1180,4.123,1181,4.123,1182,4.123,1183,4.123,1184,4.123,1185,4.123]],["title/modules/PaymentModule.html",[51,1.325,1186,2.97]],["body/modules/PaymentModule.html",[3,0.174,4,0.174,5,0.156,15,0.289,16,0.017,19,0.394,20,0.545,21,0.174,22,0.011,23,0.011,28,0.628,30,1.204,36,0.353,38,0.599,41,3.079,42,3.145,47,0.062,50,1.187,51,2.005,53,1.665,58,1.665,59,1.85,72,1.958,78,0.756,81,1.919,89,2.82,90,1.376,104,2.08,106,2.819,107,2.08,108,2.819,109,3.574,110,2.575,123,1.258,127,3.079,129,1.671,134,2.575,185,2.48,236,0.893,376,1.85,377,4.366,378,3.145,386,3.145,387,3.145,388,3.145,389,2.819,390,3.145,391,3.145,392,3.145,393,3.145,394,3.145,395,2.819,423,3.574,451,2.381,474,1.058,695,1.753,966,3.372,1186,4.494,1187,3.641,1188,4.366,1189,5.014,1190,3.641,1191,5.014,1192,5.054,1193,3.641,1194,4.105,1195,4.494,1196,3.145,1197,3.574,1198,3.641,1199,3.641,1200,3.641,1201,3.641,1202,3.641,1203,3.641,1204,3.641,1205,3.641,1206,5.054,1207,3.641,1208,3.641,1209,3.641,1210,3.641,1211,3.641,1212,4.366,1213,4.366,1214,4.366,1215,3.641,1216,3.641,1217,3.641]],["title/classes/RefreshTokenDto.html",[47,0.065,303,2.713]],["body/classes/RefreshTokenDto.html",[3,0.245,4,0.245,5,0.219,8,0.379,9,1.688,15,0.407,16,0.016,17,1.194,19,0.334,21,0.245,22,0.013,23,0.013,30,1.694,36,0.496,45,2.027,47,0.107,194,2.124,280,3.612,281,4.472,303,4.472,321,4.091,340,5.31,398,1.694,401,2.756,403,3.045,404,3.967,410,3.214,671,4.472,672,4.472,675,2.926,1027,5.463,1218,5.463,1219,4.426,1220,6.323,1221,5.123,1222,5.123]],["title/injectables/RequestBodyAndResponseInterceptor.html",[172,0.468,1223,2.713]],["body/injectables/RequestBodyAndResponseInterceptor.html",[3,0.177,4,0.177,5,0.159,8,0.274,10,0.883,11,1.34,12,1.849,13,2.924,15,0.407,16,0.017,17,0.701,19,0.334,20,0.555,21,0.244,22,0.011,23,0.011,28,0.883,36,0.496,38,0.611,47,0.087,50,1.485,77,1.103,78,0.766,81,1.227,104,2.119,123,1.281,129,1.227,131,2.465,137,2.227,139,1.078,141,2.26,172,0.715,173,1.125,175,1.175,183,1.125,184,2.872,185,2.712,236,1.755,287,1.696,338,2.119,407,2.425,408,2.425,480,3.61,593,2.26,614,2.924,623,2.425,630,2.872,631,2.872,905,2.425,946,2.425,966,1.995,986,4.69,1141,2.872,1223,3.621,1224,2.872,1225,4.423,1226,3.709,1227,5.064,1228,5.729,1229,3.709,1230,4.894,1231,3.964,1232,5.064,1233,3.205,1234,3.205,1235,3.205,1236,2.624,1237,3.964,1238,2.872,1239,3.205,1240,4.423,1241,3.205,1242,3.205,1243,3.205,1244,3.205,1245,3.205,1246,3.205,1247,3.205,1248,4.423,1249,4.423,1250,4.423,1251,4.423,1252,2.872,1253,3.205,1254,3.205]],["title/injectables/RequestContextMiddleware.html",[115,2.713,172,0.468]],["body/injectables/RequestContextMiddleware.html",[3,0.225,4,0.225,5,0.201,8,0.347,10,1.033,15,0.476,16,0.016,19,0.348,20,0.704,21,0.225,22,0.013,23,0.013,28,1.033,36,0.58,38,0.774,47,0.08,77,1.292,78,0.897,80,3.651,96,1.95,100,3.641,115,4.238,137,2.046,138,2.865,139,1.367,172,0.731,173,1.426,183,1.426,224,4.64,287,3.176,298,3.075,480,3.967,567,2.39,614,3.967,1135,5.177,1136,5.698,1139,5.177,1255,5.698,1256,4.062,1257,4.062,1258,6,1259,4.702,1260,5.177,1261,6.945,1262,4.702,1263,4.702,1264,4.702]],["title/classes/ResetPasswordDto.html",[47,0.065,306,2.713]],["body/classes/ResetPasswordDto.html",[3,0.172,4,0.172,5,0.154,8,0.266,9,1.339,12,2.254,15,0.459,16,0.017,17,1.283,19,0.265,21,0.172,22,0.01,23,0.01,30,1.909,36,0.559,45,1.426,47,0.085,69,1.985,194,2.393,288,2.568,294,1.466,306,3.549,321,2.866,349,3.885,351,4.47,352,3.775,353,3.775,398,1.192,401,3.105,403,3.272,404,2.79,410,3.173,474,1.814,651,2.549,652,4.335,655,4.833,656,4.833,657,4.833,658,4.833,659,4.649,660,4.833,661,4.833,662,4.833,663,4.833,664,4.833,665,4.833,666,4.833,667,4.833,671,4.415,672,4.415,673,4.47,674,2.79,675,2.059,1265,5.393,1266,6.242,1267,5.018,1268,3.604,1269,3.604,1270,3.604,1271,3.604,1272,5.018,1273,5.018]],["title/guards/RoleGuard.html",[1274,2.97,1275,2.97]],["body/guards/RoleGuard.html",[3,0.2,4,0.2,5,0.179,8,0.309,10,0.957,15,0.441,16,0.017,17,0.79,19,0.365,20,0.626,21,0.2,22,0.012,23,0.012,28,0.957,30,1.383,36,0.537,38,0.688,47,0.071,50,1.464,77,1.197,78,0.831,104,2.388,123,2.153,135,3.238,137,1.819,138,2.548,139,1.215,172,0.677,183,1.268,195,1.918,216,3.383,236,1.628,287,1.912,301,3.238,363,2.734,474,1.215,495,2.388,603,4.298,755,2.125,905,3.63,946,2.734,966,2.249,980,5.97,982,3.612,983,6.137,985,3.612,986,4.696,995,3.612,1230,4.826,1231,4.298,1237,4.298,1238,3.238,1252,3.238,1275,4.298,1276,4.181,1277,3.612,1278,4.181,1279,4.181,1280,6.232,1281,4.181,1282,5.552,1283,4.181,1284,4.181,1285,4.181]],["title/injectables/S3Service.html",[172,0.468,1286,2.713]],["body/injectables/S3Service.html",[3,0.129,4,0.129,5,0.21,8,0.2,9,1.087,10,0.845,11,0.976,15,0.465,16,0.017,17,1.206,19,0.383,20,0.404,21,0.129,22,0.009,23,0.009,28,0.703,36,0.596,38,0.671,47,0.046,50,0.957,58,1.236,77,1.056,78,0.733,81,0.894,89,2.433,90,1.021,129,0.894,131,2.818,137,1.176,139,1.788,141,3.566,166,1.866,172,0.497,173,0.82,175,2.232,183,1.235,185,2.525,190,4.351,195,1.885,196,2.36,210,4.224,212,2.482,214,1.236,218,1.302,231,1.374,236,1.565,242,2.191,249,1.539,287,1.236,291,1.912,338,1.544,384,3.154,474,1.184,614,1.544,659,2.663,678,4.532,679,1.912,681,2.093,682,4.224,683,3.795,684,3.859,693,2.663,694,2.336,695,1.302,696,2.191,697,1.912,705,2.336,706,3.519,707,2.336,708,2.336,709,2.336,730,4.532,768,2.336,778,2.093,928,1.768,968,4.234,969,2.336,970,4.224,973,1.912,974,2.336,975,1.768,976,1.768,1060,2.093,1286,2.881,1287,2.336,1288,4.901,1289,4.901,1290,4.234,1291,4.14,1292,4.073,1293,2.703,1294,2.703,1295,4.073,1296,2.703,1297,2.703,1298,4.073,1299,2.703,1300,2.336,1301,4.073,1302,2.703,1303,2.703,1304,4.073,1305,4.234,1306,2.336,1307,3.519,1308,4.073,1309,2.336,1310,2.703,1311,2.336,1312,2.336,1313,4.073,1314,2.336,1315,2.703,1316,2.336,1317,4.901,1318,4.073,1319,4.073,1320,2.703,1321,2.703,1322,4.073,1323,2.703,1324,2.703,1325,2.703,1326,2.703,1327,2.703,1328,4.073,1329,2.703,1330,4.073,1331,2.703,1332,2.336,1333,3.519,1334,2.336,1335,4.073,1336,2.703,1337,2.703,1338,2.703,1339,2.703]],["title/injectables/SchemaService.html",[67,2.508,172,0.468]],["body/injectables/SchemaService.html",[3,0.213,4,0.213,5,0.191,8,0.329,10,0.768,15,0.354,16,0.017,19,0.359,20,0.666,21,0.213,22,0.012,23,0.012,28,0.998,36,0.56,38,0.733,47,0.076,67,3.784,77,0.96,78,0.666,81,1.473,89,2.911,90,1.683,96,1.847,129,1.473,137,1.938,139,1.868,166,1.95,172,0.706,173,1.351,175,2.035,183,1.755,185,2.911,231,2.264,236,1.419,242,2.396,249,1.683,376,2.264,567,2.264,1257,3.848,1258,5.879,1260,4.999,1340,3.848,1341,7.229,1342,4.454,1343,4.454,1344,4.093,1345,5.787,1346,4.454,1347,4.454,1348,4.454,1349,4.454,1350,4.454,1351,4.454,1352,4.454,1353,4.454]],["title/modules/StorageModule.html",[51,1.325,1354,2.97]],["body/modules/StorageModule.html",[3,0.193,4,0.193,5,0.173,16,0.017,19,0.379,20,0.604,21,0.193,22,0.011,23,0.011,28,0.697,36,0.391,38,0.665,47,0.068,50,1.439,51,2.116,53,1.847,58,1.847,59,2.053,72,2.172,81,2.025,89,2.842,90,1.526,127,3.305,129,1.794,169,3.489,185,2.702,236,0.99,376,2.053,395,3.127,474,1.78,495,2.307,676,2.857,695,1.945,696,2.172,1060,3.127,1188,4.686,1189,5.291,1191,5.291,1214,5.901,1286,2.857,1290,4.686,1291,4.332,1334,3.489,1354,4.742,1355,4.039,1356,4.039,1357,4.039,1358,4.742,1359,3.489,1360,4.039,1361,5.424,1362,4.039,1363,4.039,1364,4.039,1365,4.039,1366,4.039,1367,4.039,1368,4.039,1369,4.039,1370,4.039,1371,4.039,1372,4.039,1373,4.039,1374,4.039,1375,4.039,1376,4.039]],["title/injectables/StripeService.html",[172,0.468,1197,2.713]],["body/injectables/StripeService.html",[3,0.153,4,0.153,5,0.137,8,0.236,10,1.02,11,1.664,15,0.47,16,0.017,19,0.364,20,0.478,21,0.153,22,0.01,23,0.01,28,0.795,30,1.057,36,0.573,38,0.89,47,0.054,50,1.082,77,1.275,78,0.885,81,1.057,89,2.584,90,1.207,104,1.825,107,1.825,129,1.057,137,1.39,139,1.719,166,2.13,172,0.562,173,0.969,175,1.873,183,1.398,185,2.664,195,2.043,212,2.807,227,1.825,231,1.624,236,1.45,242,2.906,249,2.042,376,1.624,423,4.183,450,2.76,451,2.089,510,1.719,679,2.26,759,3.937,783,2.089,954,3.259,956,4.668,957,4.668,958,2.76,959,4.668,960,5.643,962,5.643,963,2.76,964,4.668,966,3.707,1016,5.11,1194,3.259,1197,3.259,1212,4.668,1213,4.668,1377,2.76,1378,4.607,1379,3.195,1380,3.195,1381,3.195,1382,4.607,1383,5.404,1384,4.607,1385,3.195,1386,4.607,1387,4.607,1388,3.195,1389,3.195,1390,3.195,1391,3.195,1392,3.567,1393,5.404,1394,3.195,1395,3.195,1396,3.195,1397,3.195,1398,5.915,1399,3.567,1400,3.195,1401,3.195,1402,3.195,1403,3.195,1404,3.195,1405,3.195,1406,3.195,1407,3.195,1408,3.195,1409,3.195,1410,3.195,1411,3.195]],["title/injectables/SuccessResponseInterceptor.html",[172,0.468,1236,2.713]],["body/injectables/SuccessResponseInterceptor.html",[3,0.182,4,0.182,5,0.163,8,0.281,10,0.656,11,1.374,12,1.881,13,2.976,15,0.302,16,0.017,17,0.719,19,0.337,20,0.569,21,0.249,22,0.011,23,0.011,28,0.898,36,0.368,38,0.626,47,0.088,50,1.501,77,0.82,78,0.569,81,1.258,104,2.173,123,1.314,129,1.258,131,2.509,137,2.267,139,1.106,141,2.318,172,0.724,173,1.154,175,1.205,185,2.35,236,1.766,287,1.74,338,2.173,407,2.488,408,2.488,480,3.649,593,2.318,614,2.976,623,2.488,630,2.946,631,2.946,905,2.488,946,2.488,966,2.047,986,4.733,1141,2.946,1223,2.691,1224,2.946,1225,4.5,1227,5.132,1228,5.781,1230,4.946,1231,4.033,1232,5.132,1233,3.287,1234,3.287,1235,3.287,1236,3.685,1237,4.033,1238,2.946,1239,3.287,1240,4.5,1241,3.287,1242,3.287,1243,3.287,1244,3.287,1245,3.287,1246,3.287,1247,3.287,1248,4.5,1249,4.5,1250,4.5,1251,4.5,1252,2.946,1253,3.287,1254,3.287,1412,3.805]],["title/classes/UpdateProfileDto.html",[47,0.065,1413,2.713]],["body/classes/UpdateProfileDto.html",[3,0.255,4,0.255,5,0.229,16,0.017,19,0.342,21,0.255,22,0.014,23,0.014,45,2.112,47,0.091,236,1.59,288,2.342,347,2.45,398,1.765,728,2.966,755,3.296,771,3.491,787,3.491,794,4.587,795,4.587,1413,4.587,1414,4.612,1415,4.612,1416,6.985,1417,6.485,1418,5.339,1419,4.612]],["title/entities/User.html",[294,0.901,1420,2.97]],["body/entities/User.html",[3,0.097,4,0.097,5,0.087,8,0.302,9,1.09,10,1.217,15,0.602,16,0.017,17,1.383,19,0.247,21,0.097,22,0.007,23,0.007,30,2.291,36,0.671,47,0.034,69,1.289,78,0.893,96,0.841,123,2.473,131,1.569,143,1.985,146,1.435,175,0.643,196,1.569,214,1.867,216,3.637,218,2.765,223,3.409,280,1.861,288,2.224,294,1.545,347,2.064,523,2.487,526,3.526,533,2.523,538,2.304,543,2.815,544,5.851,545,2.523,546,2.815,548,5.834,551,2.13,553,6.095,561,3.055,566,5.986,567,1.031,593,1.237,648,2.815,695,0.977,728,0.928,748,2.304,755,2.601,757,3.346,773,2.887,790,4.06,791,2.887,792,3.619,793,4.06,794,2.887,795,2.887,796,3.16,797,2.887,808,3.618,818,2.523,825,2.815,848,3.526,1030,2.523,1061,3.526,1079,3.619,1084,2.523,1108,2.815,1111,2.815,1113,2.815,1116,2.815,1119,2.815,1122,4.037,1123,2.523,1129,1.753,1148,6.325,1420,2.523,1421,1.753,1422,1.753,1423,2.029,1424,7.321,1425,2.029,1426,2.029,1427,6.318,1428,2.029,1429,2.029,1430,2.815,1431,2.029,1432,2.029,1433,4.673,1434,2.029,1435,2.029,1436,2.029,1437,2.029,1438,2.029,1439,2.029,1440,5.463,1441,2.029,1442,2.029,1443,2.029,1444,2.029,1445,2.029,1446,2.815,1447,2.815,1448,2.029,1449,1.435,1450,1.753,1451,2.029,1452,2.029,1453,1.753,1454,2.029]],["title/classes/UserFactory.html",[47,0.065,867,2.713]],["body/classes/UserFactory.html",[3,0.223,4,0.223,5,0.2,8,0.346,9,1.594,16,0.017,19,0.366,21,0.223,22,0.012,23,0.012,28,1.03,36,0.578,38,0.77,47,0.079,50,1.099,96,1.939,214,2.139,218,2.253,288,1.689,294,1.546,347,1.767,398,1.547,523,2.85,695,2.253,728,2.731,755,2.377,757,3.058,773,3.308,790,3.308,792,3.308,793,3.308,794,3.308,795,3.308,796,3.622,797,3.308,857,2.85,866,4.041,867,4.224,1079,3.308,1455,4.041,1456,6.579,1457,6.579,1458,6.931,1459,4.678,1460,4.678,1461,5.972,1462,5.972,1463,4.678,1464,4.678,1465,4.678,1466,4.678,1467,4.678,1468,4.678,1469,4.678,1470,4.678,1471,4.678,1472,4.678,1473,4.678,1474,4.678,1475,4.678,1476,4.678]],["title/controllers/UsersController.html",[24,2.063,1477,2.713]],["body/controllers/UsersController.html",[1,1.835,3,0.134,4,0.134,5,0.12,8,0.207,10,0.959,11,2.253,12,2.007,13,3.175,15,0.513,16,0.017,18,1.835,19,0.351,20,0.42,21,0.134,22,0.009,23,0.009,24,1.509,26,1.509,28,0.722,30,1.838,36,0.538,38,0.915,40,2.173,41,2.552,43,4.604,44,2.173,45,1.11,47,0.048,48,3.881,49,4.303,50,1.306,77,1.198,78,0.832,138,1.71,139,0.816,146,1.985,166,2.156,195,2.295,227,3.175,236,1.458,249,1.894,278,2.424,286,2.424,287,2.292,288,2.007,291,4.572,294,1.649,298,4.226,308,2.424,310,2.173,312,4.802,324,2.173,326,2.424,327,2.173,336,2.424,337,4.33,420,2.414,474,1.217,478,2.173,479,2.173,480,1.603,481,2.173,482,1.985,483,2.173,484,2.173,485,2.173,510,1.509,525,2.173,562,2.739,649,4.079,771,2.739,783,1.835,787,4.079,791,3.545,859,4.83,860,2.173,1069,4.33,1123,3.243,1413,4.412,1419,2.424,1477,2.963,1478,2.424,1479,4.189,1480,5.012,1481,2.806,1482,4.189,1483,2.806,1484,2.806,1485,2.806,1486,2.806,1487,4.189,1488,2.806,1489,2.806,1490,2.806,1491,2.806,1492,2.806,1493,2.806,1494,4.189,1495,2.806,1496,2.806,1497,2.806,1498,2.424,1499,2.424,1500,2.806,1501,2.806,1502,2.424,1503,2.806,1504,2.806,1505,2.806,1506,2.806,1507,2.806,1508,2.806,1509,3.619,1510,2.806,1511,2.806,1512,2.806,1513,2.806,1514,4.189,1515,4.33,1516,2.806,1517,3.619,1518,2.806,1519,2.806,1520,2.806,1521,2.806]],["title/modules/UsersModule.html",[51,1.325,64,2.337]],["body/modules/UsersModule.html",[3,0.215,4,0.215,5,0.193,16,0.017,19,0.39,20,0.675,21,0.215,22,0.012,23,0.012,26,3.138,47,0.076,51,2.234,53,2.063,54,2.293,55,2.577,56,2.577,57,2.293,58,2.958,59,3.287,64,4.678,68,3.333,69,1.784,70,2.577,72,3.138,95,3.897,96,1.87,97,3.191,155,4.42,294,1.06,374,3.897,420,3.719,857,2.749,1477,4.574,1499,3.897,1522,3.897,1523,4.511,1524,3.897,1525,3.897,1526,4.743,1527,4.511,1528,4.511,1529,4.511,1530,4.511]],["title/injectables/UsersService.html",[172,0.468,420,1.847]],["body/injectables/UsersService.html",[3,0.114,4,0.114,5,0.102,8,0.176,9,0.989,10,0.955,11,2.115,15,0.485,16,0.017,17,1.225,19,0.309,20,0.357,21,0.114,22,0.008,23,0.008,28,0.639,36,0.592,38,0.842,47,0.04,50,1.3,77,1.193,78,0.828,96,1.536,97,1.688,139,1.836,159,3.345,166,2.079,172,0.451,173,0.724,175,2,180,2.062,183,1.123,195,2.182,212,1.455,223,1.364,228,1.561,236,1.68,249,2.45,252,1.561,266,3.617,288,1.639,294,1.557,324,1.848,347,1.399,352,2.967,353,2.422,389,3.959,419,2.062,420,1.783,443,2.062,444,1.688,454,2.062,473,1.848,474,1.319,475,1.848,478,2.867,479,2.867,480,2.115,481,2.867,482,2.62,483,2.867,484,2.867,485,2.867,491,5.06,495,2.115,510,2.441,513,4.418,527,2.062,528,1.848,562,2.422,567,1.213,593,1.455,623,2.422,649,3.343,759,2.921,771,2.422,791,3.617,857,1.455,976,1.561,1333,4.418,1502,2.062,1509,3.199,1515,3.92,1517,3.199,1531,2.062,1532,4.538,1533,4.538,1534,4.538,1535,4.538,1536,5.114,1537,3.704,1538,2.387,1539,2.387,1540,3.704,1541,2.387,1542,2.387,1543,2.387,1544,5.114,1545,5.114,1546,2.387,1547,6.111,1548,3.704,1549,5.114,1550,2.387,1551,2.387,1552,2.387,1553,2.387,1554,2.387,1555,2.387,1556,2.387,1557,2.387,1558,2.387,1559,2.387,1560,2.387,1561,2.387,1562,2.387,1563,2.387,1564,2.387,1565,2.387,1566,2.387,1567,2.387,1568,2.387,1569,2.387,1570,2.387,1571,3.704,1572,2.387,1573,2.387,1574,2.387,1575,2.387,1576,2.387,1577,2.387,1578,2.387,1579,3.704,1580,3.704,1581,3.704,1582,3.704,1583,2.387,1584,2.387,1585,2.387,1586,2.387,1587,3.704,1588,2.387]],["title/injectables/UsersSubscriber.html",[172,0.468,1526,2.508]],["body/injectables/UsersSubscriber.html",[3,0.159,4,0.159,5,0.143,8,0.247,10,1.143,15,0.527,16,0.017,19,0.35,20,0.5,21,0.159,22,0.01,23,0.01,28,0.82,36,0.661,38,1.092,47,0.057,50,1.301,77,1.429,78,0.992,80,2.035,89,2.699,90,1.262,96,1.385,123,1.154,137,1.453,139,0.971,166,2.152,172,0.58,173,1.013,175,2.279,183,1.442,216,2.898,236,1.48,245,4.108,249,2.092,294,1.785,417,4.108,442,3.682,477,4.108,567,1.697,736,2.885,737,4.673,739,3.682,857,2.035,1446,4.108,1447,4.108,1449,2.362,1450,2.885,1453,4.108,1526,3.109,1589,2.885,1590,6.035,1591,4.756,1592,4.756,1593,3.339,1594,4.756,1595,6.822,1596,3.339,1597,4.756,1598,3.339,1599,3.339,1600,5.539,1601,4.756,1602,3.339,1603,4.756,1604,3.339,1605,4.756,1606,3.339,1607,4.756,1608,3.339,1609,4.756,1610,4.756,1611,4.756,1612,3.339,1613,2.885,1614,4.756,1615,3.339,1616,3.339,1617,3.339,1618,3.339]],["title/coverage.html",[1619,4.056]],["body/coverage.html",[0,2.578,1,1.538,5,0.101,6,2.032,7,2.835,15,0.462,16,0.017,22,0.008,23,0.008,24,2.418,25,1.664,27,2.032,41,1.433,47,0.123,57,1.861,65,1.538,66,1.538,67,1.538,93,1.664,115,1.664,159,1.344,172,0.889,174,2.032,199,6.887,271,2.032,276,1.664,277,2.032,284,1.664,294,0.86,296,1.664,303,1.664,306,1.664,313,1.664,316,1.265,321,1.344,359,1.538,360,1.538,372,1.664,375,1.538,397,1.821,399,2.032,400,2.032,411,2.032,420,1.133,452,1.821,474,0.684,538,1.664,539,2.032,572,1.821,573,2.032,586,1.821,607,1.664,649,1.538,650,2.032,651,3.18,676,1.664,677,2.032,693,1.538,726,2.032,727,2.032,755,1.195,769,1.821,787,1.538,788,2.032,789,2.032,852,1.664,853,2.835,858,1.664,861,1.821,862,2.032,867,1.664,873,1.433,878,1.821,898,2.032,911,2.032,912,2.032,922,1.538,923,1.821,924,1.821,930,2.032,954,1.664,955,2.032,967,2.032,973,1.664,975,1.538,976,1.538,977,2.032,978,2.835,992,1.821,1002,2.032,1046,2.032,1048,2.032,1063,2.032,1066,1.821,1067,2.032,1074,2.032,1133,2.032,1138,5.029,1160,1.821,1161,2.032,1194,1.664,1195,1.821,1197,1.664,1218,2.032,1219,2.032,1223,1.664,1224,2.835,1236,1.664,1255,2.032,1256,2.032,1265,2.032,1274,1.821,1275,1.821,1277,2.032,1286,1.664,1287,2.032,1332,2.032,1340,2.032,1344,2.59,1358,1.821,1377,2.032,1392,1.821,1399,1.821,1413,1.664,1414,2.032,1415,2.032,1420,1.821,1422,3.163,1449,1.664,1455,2.032,1477,1.664,1478,2.032,1526,1.538,1531,2.032,1589,2.032,1619,1.821,1620,2.032,1621,2.352,1622,2.352,1623,6.078,1624,4.496,1625,5.43,1626,7.074,1627,2.032,1628,7.6,1629,2.032,1630,5.497,1631,2.352,1632,7.195,1633,4.496,1634,3.661,1635,2.032,1636,5.497,1637,2.032,1638,2.032,1639,2.032,1640,3.163,1641,3.163,1642,2.032,1643,2.032,1644,2.032,1645,2.032,1646,2.032,1647,2.032,1648,2.032,1649,2.352,1650,3.163,1651,2.352,1652,2.352,1653,2.032,1654,2.032,1655,2.352,1656,2.352,1657,2.032,1658,2.032,1659,2.032,1660,2.352,1661,2.032,1662,2.032,1663,3.163,1664,2.032,1665,2.032,1666,2.352]],["title/dependencies.html",[54,2.345,1667,2.766]],["body/dependencies.html",[11,1.213,16,0.017,20,0.502,22,0.01,23,0.01,33,3.377,45,1.328,47,0.081,54,1.707,58,1.536,90,1.269,96,2.65,97,2.375,100,3.697,101,2.901,102,2.375,104,2.727,105,2.901,107,1.918,109,3.93,110,2.375,112,2.901,131,1.617,163,2.6,164,2.6,166,1.019,287,1.536,363,2.196,367,2.6,369,2.046,442,2.6,451,2.196,455,2.6,504,2.6,558,2.6,567,1.707,605,2.6,606,2.901,675,1.918,687,2.375,692,2.6,696,2.988,697,2.375,730,3.697,764,2.901,767,2.901,778,2.6,837,2.901,877,2.6,927,2.6,928,2.196,946,2.196,966,2.568,1038,4.302,1053,2.901,1054,2.901,1071,2.901,1140,2.901,1291,2.375,1300,2.901,1305,4.8,1306,2.901,1307,2.901,1309,2.901,1311,2.901,1312,4.8,1314,2.901,1316,2.901,1668,3.358,1669,3.358,1670,3.358,1671,3.358,1672,5.556,1673,3.358,1674,3.358,1675,6.051,1676,3.358,1677,6.051,1678,3.358,1679,3.358,1680,3.358,1681,3.358,1682,3.358,1683,3.358,1684,3.358,1685,3.358,1686,3.358,1687,3.358,1688,3.358,1689,3.358,1690,2.901,1691,3.358,1692,3.358,1693,3.358,1694,6.051,1695,3.358,1696,3.358,1697,3.358,1698,4.775,1699,4.775,1700,3.358,1701,3.358,1702,3.358,1703,3.358,1704,3.358,1705,4.775,1706,3.358,1707,3.358,1708,4.775,1709,3.358,1710,3.358,1711,3.358,1712,3.358,1713,3.358,1714,3.358,1715,3.358,1716,3.358,1717,3.358,1718,3.358,1719,3.358,1720,3.358,1721,3.358,1722,3.358,1723,3.358,1724,3.358,1725,4.775,1726,3.358,1727,3.358,1728,3.358,1729,3.358,1730,3.358,1731,3.358,1732,3.358,1733,3.358,1734,3.358,1735,3.358,1736,3.358,1737,3.358,1738,3.358,1739,3.358,1740,3.358,1741,3.358,1742,3.358,1743,3.358]],["title/miscellaneous/enumerations.html",[1744,1.722,1745,3.986]],["body/miscellaneous/enumerations.html",[8,0.331,16,0.017,22,0.012,23,0.012,69,2.297,178,4.107,214,3.616,288,2.097,294,1.364,310,4.495,684,4.107,687,4.107,757,3.796,759,3.316,966,3.123,970,4.495,975,3.796,1079,3.167,1091,5.016,1172,5.016,1173,5.016,1196,5.016,1291,4.107,1359,5.016,1498,5.016,1744,2.408,1745,3.868,1746,5.845,1747,5.806,1748,5.806,1749,4.477,1750,5.806,1751,4.477,1752,4.477,1753,5.806,1754,5.806,1755,5.806,1756,4.477,1757,4.477,1758,5.806,1759,4.477]],["title/miscellaneous/functions.html",[1744,1.722,1760,3.986]],["body/miscellaneous/functions.html",[8,0.366,10,1.165,15,0.537,16,0.016,17,1.276,22,0.013,23,0.013,38,1.165,57,3.776,77,1.456,78,1.011,80,3.772,196,2.981,294,1.587,1084,3.834,1449,4.379,1613,4.278,1637,4.278,1638,5.348,1639,4.278,1643,4.278,1644,5.348,1645,4.278,1646,5.835,1647,4.278,1648,4.278,1744,2.663,1760,4.278,1761,4.952,1762,4.952,1763,4.952,1764,4.952,1765,4.952,1766,4.952,1767,4.952,1768,4.952,1769,6.191,1770,4.952,1771,6.191,1772,4.952]],["title/index.html",[8,0.237,251,2.766,1773,3.202]],["body/index.html",[16,0.017,22,0.013,23,0.013,33,3.645,194,2.136,403,3.311,482,3.645,735,5.887,1344,3.645,1619,3.99,1620,4.452,1774,5.153,1775,5.153,1776,5.153,1777,6.346,1778,5.153,1779,7.603,1780,5.153,1781,5.153,1782,5.153,1783,5.153,1784,6.346,1785,5.153,1786,5.153,1787,6.877,1788,5.153,1789,6.346,1790,5.153,1791,5.153,1792,5.153]],["title/modules.html",[53,2.396]],["body/modules.html",[16,0.014,22,0.014,23,0.014,52,3.869,53,2.502,63,3.577,64,3.333,155,3.333,870,3.869,918,3.869,1009,5.686,1013,6.575,1186,4.236,1354,4.236,1793,7.611,1794,7.611,1795,7.763,1796,6.581]],["title/overview.html",[1797,4.526]],["body/overview.html",[2,2.576,16,0.016,22,0.011,23,0.011,26,2.119,51,1.361,52,5.352,53,1.802,54,2.002,55,2.251,56,2.251,57,2.002,58,1.802,59,2.002,60,3.404,61,3.404,62,3.404,63,5.007,64,4.576,65,3.955,66,3.955,67,3.955,68,3.047,69,1.559,70,2.251,155,4.351,156,3.404,157,3.404,158,3.404,159,4.078,173,1.195,200,3.251,316,3.84,355,3.404,356,3.404,358,3.404,359,3.955,360,3.955,398,1.303,420,3.438,870,4.278,871,3.404,872,3.404,873,3.95,918,4.791,919,3.404,920,3.404,921,3.404,922,4.668,1274,3.051,1421,3.404,1430,3.404,1522,3.404,1524,3.404,1525,3.404,1526,3.955,1797,3.404,1798,3.94,1799,3.94,1800,3.94,1801,3.94]],["title/properties.html",[9,1.232,1667,2.766]],["body/properties.html",[9,1.598,16,0.016,22,0.015,23,0.015,194,2.482,1146,5.173,1802,5.988,1803,5.988,1804,5.988,1805,5.988]],["title/miscellaneous/typealiases.html",[1744,1.722,1806,4.614]],["body/miscellaneous/typealiases.html",[8,0.392,15,0.59,16,0.016,22,0.014,23,0.014,39,6.263,452,5.003,501,3.47,586,5.003,602,4.585,603,4.109,604,4.585,973,4.57,975,4.225,976,4.225,1392,5.003,1399,5.003,1635,4.585,1653,4.585,1654,5.582,1657,4.585,1658,4.585,1659,5.582,1661,4.585,1662,5.582,1744,2.854,1746,4.109,1807,5.307,1808,5.307,1809,5.307,1810,5.307,1811,5.307]],["title/miscellaneous/variables.html",[1744,1.722,1812,3.986]],["body/miscellaneous/variables.html",[8,0.273,15,0.584,16,0.017,17,1.388,22,0.011,23,0.011,35,3.191,41,3.11,69,1.461,78,0.553,123,2.021,214,3.489,218,3.674,288,1.334,347,1.396,375,3.338,423,3.61,474,2.079,696,2.746,755,2.594,769,3.952,878,3.952,893,2.86,992,3.952,993,3.191,1194,3.61,1195,4.529,1344,4.843,1358,4.529,1625,3.191,1627,4.41,1629,3.191,1640,3.191,1641,5.053,1642,4.41,1650,3.191,1663,3.191,1664,4.41,1665,5.45,1690,3.191,1744,1.987,1746,5.622,1812,3.191,1813,5.105,1814,5.105,1815,5.105,1816,3.694,1817,3.694,1818,3.694,1819,3.694,1820,3.694,1821,3.694,1822,3.694,1823,3.694,1824,3.694,1825,3.694,1826,3.694,1827,3.694,1828,3.694,1829,3.694,1830,3.694,1831,3.694,1832,3.694,1833,3.694,1834,3.694,1835,3.694]]],"invertedIndex":[["",{"_index":16,"title":{},"body":{"interfaces/ApiResponse.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AppRedisModule.html":{},"injectables/AppRedisService.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/AuthResponseDto.html":{},"injectables/AuthService.html":{},"classes/BaseEntity.html":{},"classes/CatchAllFilter.html":{},"classes/ChangePasswordDto.html":{},"injectables/CloudinaryService.html":{},"injectables/CreateUserCommand.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserResponseDto.html":{},"classes/DatabaseSeeder.html":{},"modules/EmailModule.html":{},"classes/EmailService.html":{},"interfaces/ErrorResponse.html":{},"classes/ForgotPasswordDto.html":{},"classes/GetProfileResponseDto.html":{},"modules/HttpClientModule.html":{},"injectables/HttpClientService.html":{},"interfaces/IPaymentService.html":{},"interfaces/IStrorageService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"classes/Migration20250730220636.html":{},"injectables/MorganMiddleware.html":{},"classes/PasswordResetEmailConsumer.html":{},"modules/PaymentModule.html":{},"classes/RefreshTokenDto.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/RequestContextMiddleware.html":{},"classes/ResetPasswordDto.html":{},"guards/RoleGuard.html":{},"injectables/S3Service.html":{},"injectables/SchemaService.html":{},"modules/StorageModule.html":{},"injectables/StripeService.html":{},"injectables/SuccessResponseInterceptor.html":{},"classes/UpdateProfileDto.html":{},"entities/User.html":{},"classes/UserFactory.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/UsersSubscriber.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":199,"title":{},"body":{"injectables/AppRedisService.html":{},"coverage.html":{}}}],["0.0.1",{"_index":1802,"title":{},"body":{"properties.html":{}}}],["0.1.13",{"_index":1737,"title":{},"body":{"dependencies.html":{}}}],["0.12.5",{"_index":1741,"title":{},"body":{"dependencies.html":{}}}],["0.14.1",{"_index":1712,"title":{},"body":{"dependencies.html":{}}}],["0.2.21",{"_index":1674,"title":{},"body":{"dependencies.html":{}}}],["0.203.0",{"_index":1698,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":1711,"title":{},"body":{"dependencies.html":{}}}],["0.6.0",{"_index":1720,"title":{},"body":{"dependencies.html":{}}}],["0.62.0",{"_index":1691,"title":{},"body":{"dependencies.html":{}}}],["0.7.0",{"_index":1731,"title":{},"body":{"dependencies.html":{}}}],["0.9.3",{"_index":1673,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":1628,"title":{},"body":{"coverage.html":{}}}],["0/13",{"_index":1649,"title":{},"body":{"coverage.html":{}}}],["0/14",{"_index":1655,"title":{},"body":{"coverage.html":{}}}],["0/18",{"_index":1656,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":1623,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":1632,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":1633,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":1630,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":1634,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":1624,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":1631,"title":{},"body":{"coverage.html":{}}}],["0123456789abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz!@#$%^&*()_",{"_index":1816,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1",{"_index":200,"title":{},"body":{"injectables/AppRedisService.html":{},"injectables/AuthService.html":{},"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginDto.html":{},"overview.html":{}}}],["1'})@isstring()@isnotempty()@matches(/^(?=.*[a",{"_index":654,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{}}}],["1'})@isstring()@isoptional()@transform",{"_index":809,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["1.0.0",{"_index":1708,"title":{},"body":{"dependencies.html":{}}}],["1.10.0",{"_index":1705,"title":{},"body":{"dependencies.html":{}}}],["1.10.2",{"_index":1726,"title":{},"body":{"dependencies.html":{}}}],["1.11.13",{"_index":1714,"title":{},"body":{"dependencies.html":{}}}],["1.2.1",{"_index":1715,"title":{},"body":{"dependencies.html":{}}}],["1.9.93",{"_index":1727,"title":{},"body":{"dependencies.html":{}}}],["1/3",{"_index":1652,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":659,"title":{},"body":{"classes/ChangePasswordDto.html":{},"injectables/CreateUserCommand.html":{},"classes/CreateUserDto.html":{},"classes/ResetPasswordDto.html":{},"injectables/S3Service.html":{}}}],["10.0.0",{"_index":1675,"title":{},"body":{"dependencies.html":{}}}],["10.0.3",{"_index":1686,"title":{},"body":{"dependencies.html":{}}}],["10.2.0",{"_index":1684,"title":{},"body":{"dependencies.html":{}}}],["100",{"_index":1427,"title":{},"body":{"entities/User.html":{}}}],["11.0.3",{"_index":1682,"title":{},"body":{"dependencies.html":{}}}],["11.1.0",{"_index":1742,"title":{},"body":{"dependencies.html":{}}}],["123",{"_index":798,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["12345",{"_index":842,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["12345'})@isstring()@isoptional",{"_index":822,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["18",{"_index":1800,"title":{},"body":{"overview.html":{}}}],["18.3.0",{"_index":1739,"title":{},"body":{"dependencies.html":{}}}],["19",{"_index":1799,"title":{},"body":{"overview.html":{}}}],["2.0.1",{"_index":1694,"title":{},"body":{"dependencies.html":{}}}],["2.0.2",{"_index":1680,"title":{},"body":{"dependencies.html":{}}}],["2.1.3",{"_index":1721,"title":{},"body":{"dependencies.html":{}}}],["2.7.0",{"_index":1713,"title":{},"body":{"dependencies.html":{}}}],["20",{"_index":1440,"title":{},"body":{"entities/User.html":{}}}],["2000",{"_index":393,"title":{},"body":{"modules/AuthModule.html":{},"modules/PaymentModule.html":{}}}],["234567890",{"_index":847,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["234567890'})@isstring()@isoptional",{"_index":819,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["255",{"_index":1433,"title":{},"body":{"entities/User.html":{}}}],["3",{"_index":1430,"title":{},"body":{"entities/User.html":{},"overview.html":{}}}],["3.0.0",{"_index":1722,"title":{},"body":{"dependencies.html":{}}}],["3.0.1",{"_index":1728,"title":{},"body":{"dependencies.html":{}}}],["3.0.3",{"_index":1734,"title":{},"body":{"dependencies.html":{}}}],["3.17.0",{"_index":1743,"title":{},"body":{"dependencies.html":{}}}],["3.18.0",{"_index":1724,"title":{},"body":{"dependencies.html":{}}}],["3.2.2",{"_index":1683,"title":{},"body":{"dependencies.html":{}}}],["3.840.0",{"_index":1670,"title":{},"body":{"dependencies.html":{}}}],["3.848.0",{"_index":1668,"title":{},"body":{"dependencies.html":{}}}],["3.850.0",{"_index":1669,"title":{},"body":{"dependencies.html":{}}}],["3/10",{"_index":1660,"title":{},"body":{"coverage.html":{}}}],["30",{"_index":1332,"title":{},"body":{"injectables/S3Service.html":{},"coverage.html":{}}}],["33",{"_index":1651,"title":{},"body":{"coverage.html":{}}}],["4",{"_index":1801,"title":{},"body":{"overview.html":{}}}],["4.0.0",{"_index":1681,"title":{},"body":{"dependencies.html":{}}}],["4.0.1",{"_index":1732,"title":{},"body":{"dependencies.html":{}}}],["4.0.4",{"_index":1703,"title":{},"body":{"dependencies.html":{}}}],["4.1.2",{"_index":1710,"title":{},"body":{"dependencies.html":{}}}],["404",{"_index":1156,"title":{},"body":{"injectables/MorganMiddleware.html":{}}}],["5",{"_index":389,"title":{},"body":{"modules/AuthModule.html":{},"modules/PaymentModule.html":{},"injectables/UsersService.html":{}}}],["5.0.0",{"_index":1723,"title":{},"body":{"dependencies.html":{}}}],["5.1.1",{"_index":1706,"title":{},"body":{"dependencies.html":{}}}],["5.1.2",{"_index":1704,"title":{},"body":{"dependencies.html":{}}}],["5.56.8",{"_index":1709,"title":{},"body":{"dependencies.html":{}}}],["500",{"_index":648,"title":{},"body":{"classes/CatchAllFilter.html":{},"entities/User.html":{}}}],["6.1.1",{"_index":1678,"title":{},"body":{"dependencies.html":{}}}],["6.12.0",{"_index":1672,"title":{},"body":{"dependencies.html":{}}}],["6.4.16",{"_index":1677,"title":{},"body":{"dependencies.html":{}}}],["60",{"_index":1333,"title":{},"body":{"injectables/S3Service.html":{},"injectables/UsersService.html":{}}}],["7.0.5",{"_index":1730,"title":{},"body":{"dependencies.html":{}}}],["7.3.1",{"_index":1688,"title":{},"body":{"dependencies.html":{}}}],["7.8.1",{"_index":1738,"title":{},"body":{"dependencies.html":{}}}],["8",{"_index":1798,"title":{},"body":{"overview.html":{}}}],["8.1.0",{"_index":1717,"title":{},"body":{"dependencies.html":{}}}],["_(ツ)_",{"_index":632,"title":{},"body":{"classes/CatchAllFilter.html":{}}}],["abstract",{"_index":571,"title":{},"body":{"classes/BaseEntity.html":{}}}],["access",{"_index":301,"title":{},"body":{"controllers/AuthController.html":{},"classes/AuthResponseDto.html":{},"guards/RoleGuard.html":{}}}],["access_token",{"_index":333,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["accesskeyid",{"_index":1364,"title":{},"body":{"modules/StorageModule.html":{}}}],["accesstoken",{"_index":339,"title":{},"body":{"controllers/AuthController.html":{},"classes/AuthResponseDto.html":{}}}],["account",{"_index":1205,"title":{},"body":{"modules/PaymentModule.html":{}}}],["accounttest",{"_index":1208,"title":{},"body":{"modules/PaymentModule.html":{}}}],["active",{"_index":508,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["adapter",{"_index":134,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/EmailModule.html":{},"modules/PaymentModule.html":{}}}],["add",{"_index":1127,"title":{},"body":{"classes/Migration20250730220636.html":{}}}],["addr",{"_index":1145,"title":{},"body":{"injectables/MorganMiddleware.html":{}}}],["address",{"_index":790,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/Migration20250730220636.html":{},"entities/User.html":{},"classes/UserFactory.html":{}}}],["admin",{"_index":1091,"title":{},"body":{"classes/Migration20250730220636.html":{},"miscellaneous/enumerations.html":{}}}],["africa/lagos",{"_index":1757,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["agent",{"_index":1151,"title":{},"body":{"injectables/MorganMiddleware.html":{}}}],["alias",{"_index":1636,"title":{},"body":{"coverage.html":{}}}],["aliases",{"_index":1807,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["already",{"_index":1562,"title":{},"body":{"injectables/UsersService.html":{}}}],["alter",{"_index":1126,"title":{},"body":{"classes/Migration20250730220636.html":{}}}],["any).__helper?.__originalentitydata",{"_index":1615,"title":{},"body":{"injectables/UsersSubscriber.html":{}}}],["api_key",{"_index":701,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["api_secret",{"_index":703,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["apibody",{"_index":312,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["apikey",{"_index":1201,"title":{},"body":{"modules/PaymentModule.html":{}}}],["apioperation",{"_index":43,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["apiproperty",{"_index":410,"title":{},"body":{"classes/AuthResponseDto.html":{},"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserResponseDto.html":{},"classes/ForgotPasswordDto.html":{},"classes/GetProfileResponseDto.html":{},"classes/LoginDto.html":{},"classes/RefreshTokenDto.html":{},"classes/ResetPasswordDto.html":{}}}],["apiproperty({description",{"_index":401,"title":{},"body":{"classes/AuthResponseDto.html":{},"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserResponseDto.html":{},"classes/GetProfileResponseDto.html":{},"classes/LoginDto.html":{},"classes/RefreshTokenDto.html":{},"classes/ResetPasswordDto.html":{}}}],["apiproperty({example",{"_index":913,"title":{},"body":{"classes/ForgotPasswordDto.html":{}}}],["apipropertyoptional",{"_index":835,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["apipropertyoptional({description",{"_index":824,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["apiresponse",{"_index":1,"title":{"interfaces/ApiResponse.html":{}},"body":{"interfaces/ApiResponse.html":{},"controllers/AuthController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["apitags",{"_index":44,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["apitags('app",{"_index":46,"title":{},"body":{"controllers/AppController.html":{}}}],["apitags('auth",{"_index":328,"title":{},"body":{"controllers/AuthController.html":{}}}],["apitags('users",{"_index":1505,"title":{},"body":{"controllers/UsersController.html":{}}}],["app",{"_index":1772,"title":{},"body":{"miscellaneous/functions.html":{}}}],["app.controller",{"_index":84,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":85,"title":{},"body":{"modules/AppModule.html":{}}}],["app_guard",{"_index":362,"title":{},"body":{"modules/AuthModule.html":{}}}],["app_name",{"_index":1627,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["appcontroller",{"_index":25,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["apply",{"_index":145,"title":{},"body":{"modules/AppModule.html":{}}}],["applyrawbodyonlyto",{"_index":103,"title":{},"body":{"modules/AppModule.html":{}}}],["applyrawbodyonlyto(consumer",{"_index":140,"title":{},"body":{"modules/AppModule.html":{}}}],["appmodule",{"_index":52,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appredis",{"_index":176,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["appredismodule",{"_index":155,"title":{"modules/AppRedisModule.html":{}},"body":{"modules/AppRedisModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["appredisservice",{"_index":159,"title":{"injectables/AppRedisService.html":{}},"body":{"modules/AppRedisModule.html":{},"injectables/AppRedisService.html":{},"injectables/AuthService.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["appredisservice.name",{"_index":244,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["appservice",{"_index":65,"title":{"injectables/AppService.html":{}},"body":{"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["args",{"_index":245,"title":{},"body":{"injectables/AppRedisService.html":{},"injectables/UsersSubscriber.html":{}}}],["args.entity",{"_index":1609,"title":{},"body":{"injectables/UsersSubscriber.html":{}}}],["args.push('ex",{"_index":247,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["args.push('nx",{"_index":246,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["argumentshost",{"_index":588,"title":{},"body":{"classes/CatchAllFilter.html":{}}}],["array",{"_index":204,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["asecure",{"_index":1266,"title":{},"body":{"classes/ResetPasswordDto.html":{}}}],["async",{"_index":166,"title":{},"body":{"modules/AppRedisModule.html":{},"injectables/AppRedisService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CloudinaryService.html":{},"injectables/CreateUserCommand.html":{},"classes/DatabaseSeeder.html":{},"classes/EmailService.html":{},"injectables/HttpClientService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/Migration20250730220636.html":{},"classes/PasswordResetEmailConsumer.html":{},"injectables/S3Service.html":{},"injectables/SchemaService.html":{},"injectables/StripeService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/UsersSubscriber.html":{},"dependencies.html":{}}}],["asynclocalstoragecontextmanager",{"_index":1821,"title":{},"body":{"miscellaneous/variables.html":{}}}],["attempts",{"_index":388,"title":{},"body":{"modules/AuthModule.html":{},"modules/PaymentModule.html":{}}}],["auth",{"_index":102,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/EmailModule.html":{},"dependencies.html":{}}}],["auth.controller",{"_index":364,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.guard",{"_index":315,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["auth.guard.ts",{"_index":978,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/LocalAuthGuard.html":{},"coverage.html":{}}}],["auth.guard.ts:11",{"_index":984,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["auth.guard.ts:16",{"_index":987,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["auth.guard.ts:27",{"_index":989,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["auth.jwt.refreshexpiresin",{"_index":467,"title":{},"body":{"injectables/AuthService.html":{}}}],["auth.jwt.refreshsecret",{"_index":469,"title":{},"body":{"injectables/AuthService.html":{}}}],["auth.service",{"_index":317,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/LocalStrategy.html":{}}}],["auth/decorators/public.decorator",{"_index":1500,"title":{},"body":{"controllers/UsersController.html":{}}}],["authcontroller",{"_index":276,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authenticated",{"_index":402,"title":{},"body":{"classes/AuthResponseDto.html":{}}}],["authguard",{"_index":991,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/LocalAuthGuard.html":{}}}],["authguard('jwt",{"_index":979,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authguard('local",{"_index":1047,"title":{},"body":{"injectables/LocalAuthGuard.html":{}}}],["authmodule",{"_index":63,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":1805,"title":{},"body":{"properties.html":{}}}],["authresponsedto",{"_index":397,"title":{"classes/AuthResponseDto.html":{}},"body":{"classes/AuthResponseDto.html":{},"coverage.html":{}}}],["authservice",{"_index":316,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["authtokens",{"_index":452,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["auto",{"_index":717,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["available",{"_index":1009,"title":{},"body":{"injectables/JwtStrategy.html":{},"modules.html":{}}}],["avatar",{"_index":1079,"title":{},"body":{"classes/Migration20250730220636.html":{},"entities/User.html":{},"classes/UserFactory.html":{},"miscellaneous/enumerations.html":{}}}],["avatars",{"_index":1759,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["await",{"_index":249,"title":{},"body":{"injectables/AppRedisService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CreateUserCommand.html":{},"classes/EmailService.html":{},"injectables/HttpClientService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/PasswordResetEmailConsumer.html":{},"injectables/S3Service.html":{},"injectables/SchemaService.html":{},"injectables/StripeService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/UsersSubscriber.html":{}}}],["aws",{"_index":1305,"title":{},"body":{"injectables/S3Service.html":{},"dependencies.html":{}}}],["aws.s3.secretaccesskey",{"_index":1368,"title":{},"body":{"modules/StorageModule.html":{}}}],["axios",{"_index":605,"title":{},"body":{"classes/CatchAllFilter.html":{},"injectables/HttpClientService.html":{},"dependencies.html":{}}}],["axioserror",{"_index":604,"title":{},"body":{"classes/CatchAllFilter.html":{},"miscellaneous/typealiases.html":{}}}],["axiosrequestconfig",{"_index":938,"title":{},"body":{"injectables/HttpClientService.html":{}}}],["b3",{"_index":1700,"title":{},"body":{"dependencies.html":{}}}],["b3propagator",{"_index":1828,"title":{},"body":{"miscellaneous/variables.html":{}}}],["backoff",{"_index":390,"title":{},"body":{"modules/AuthModule.html":{},"modules/PaymentModule.html":{}}}],["badrequestexception",{"_index":443,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["badrequestexception('malformed",{"_index":506,"title":{},"body":{"injectables/AuthService.html":{}}}],["badrequestexception('passwords",{"_index":527,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["badrequestexception('refresh",{"_index":496,"title":{},"body":{"injectables/AuthService.html":{}}}],["baseentity",{"_index":538,"title":{"classes/BaseEntity.html":{}},"body":{"classes/BaseEntity.html":{},"entities/User.html":{},"coverage.html":{}}}],["basic",{"_index":101,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["basicauth",{"_index":99,"title":{},"body":{"modules/AppModule.html":{}}}],["bcrypt",{"_index":442,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersSubscriber.html":{},"dependencies.html":{}}}],["bcrypt.compare(pass",{"_index":476,"title":{},"body":{"injectables/AuthService.html":{}}}],["bcrypt.gensalt(this.saltrounds",{"_index":535,"title":{},"body":{"injectables/AuthService.html":{}}}],["bcrypt.hash(newpassword",{"_index":537,"title":{},"body":{"injectables/AuthService.html":{}}}],["bcrypt.hash(user.password",{"_index":1618,"title":{},"body":{"injectables/UsersSubscriber.html":{}}}],["beforecreate",{"_index":1446,"title":{},"body":{"entities/User.html":{},"injectables/UsersSubscriber.html":{}}}],["beforecreate(args",{"_index":1594,"title":{},"body":{"injectables/UsersSubscriber.html":{}}}],["beforeupdate",{"_index":1447,"title":{},"body":{"entities/User.html":{},"injectables/UsersSubscriber.html":{}}}],["beforeupdate(args",{"_index":1597,"title":{},"body":{"injectables/UsersSubscriber.html":{}}}],["blacklisted",{"_index":497,"title":{},"body":{"injectables/AuthService.html":{}}}],["board/api",{"_index":1671,"title":{},"body":{"dependencies.html":{}}}],["board/api/bullmqadapter",{"_index":378,"title":{},"body":{"modules/AuthModule.html":{},"modules/PaymentModule.html":{}}}],["board/express",{"_index":112,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["board/nestjs",{"_index":110,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PaymentModule.html":{},"dependencies.html":{}}}],["body",{"_index":291,"title":{},"body":{"controllers/AuthController.html":{},"classes/CatchAllFilter.html":{},"injectables/S3Service.html":{},"controllers/UsersController.html":{}}}],["boilerplate",{"_index":35,"title":{},"body":{"controllers/AppController.html":{},"miscellaneous/variables.html":{}}}],["boolean",{"_index":216,"title":{},"body":{"injectables/AppRedisService.html":{},"classes/CreateUserDto.html":{},"classes/Migration20250730220636.html":{},"guards/RoleGuard.html":{},"entities/User.html":{},"injectables/UsersSubscriber.html":{}}}],["bootstrap",{"_index":57,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRedisModule.html":{},"modules/AuthModule.html":{},"modules/EmailModule.html":{},"modules/HttpClientModule.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["browse",{"_index":1795,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1793,"title":{},"body":{"modules.html":{}}}],["bucket",{"_index":1324,"title":{},"body":{"injectables/S3Service.html":{}}}],["buffer",{"_index":1707,"title":{},"body":{"dependencies.html":{}}}],["bull",{"_index":109,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PaymentModule.html":{},"dependencies.html":{}}}],["bullboardmodule",{"_index":108,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PaymentModule.html":{}}}],["bullboardmodule.forfeature",{"_index":394,"title":{},"body":{"modules/AuthModule.html":{},"modules/PaymentModule.html":{}}}],["bullboardmodule.forroot",{"_index":133,"title":{},"body":{"modules/AppModule.html":{}}}],["bullmodule",{"_index":106,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PaymentModule.html":{}}}],["bullmodule.forrootasync",{"_index":128,"title":{},"body":{"modules/AppModule.html":{}}}],["bullmodule.registerqueue",{"_index":386,"title":{},"body":{"modules/AuthModule.html":{},"modules/PaymentModule.html":{}}}],["bullmq",{"_index":451,"title":{},"body":{"injectables/AuthService.html":{},"classes/PasswordResetEmailConsumer.html":{},"modules/PaymentModule.html":{},"injectables/StripeService.html":{},"dependencies.html":{}}}],["bullmqadapter",{"_index":377,"title":{},"body":{"modules/AuthModule.html":{},"modules/PaymentModule.html":{}}}],["bytes",{"_index":708,"title":{},"body":{"injectables/CloudinaryService.html":{},"injectables/S3Service.html":{}}}],["cache",{"_index":125,"title":{},"body":{"modules/AppModule.html":{}}}],["cached",{"_index":1571,"title":{},"body":{"injectables/UsersService.html":{}}}],["cachekey",{"_index":491,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["callhandler",{"_index":1228,"title":{},"body":{"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/SuccessResponseInterceptor.html":{}}}],["canactivate",{"_index":980,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/RoleGuard.html":{}}}],["canactivate(context",{"_index":985,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/RoleGuard.html":{}}}],["catch",{"_index":500,"title":{},"body":{"injectables/AuthService.html":{},"classes/CatchAllFilter.html":{},"injectables/CreateUserCommand.html":{}}}],["catch(exception",{"_index":585,"title":{},"body":{"classes/CatchAllFilter.html":{}}}],["catchallfilter",{"_index":572,"title":{"classes/CatchAllFilter.html":{}},"body":{"classes/CatchAllFilter.html":{},"coverage.html":{}}}],["catchallfilter.name",{"_index":584,"title":{},"body":{"classes/CatchAllFilter.html":{}}}],["category=${filecategory",{"_index":709,"title":{},"body":{"injectables/CloudinaryService.html":{},"injectables/S3Service.html":{}}}],["caught",{"_index":642,"title":{},"body":{"classes/CatchAllFilter.html":{}}}],["chalk",{"_index":767,"title":{},"body":{"injectables/CreateUserCommand.html":{},"dependencies.html":{}}}],["chalk.red.bold",{"_index":785,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["challenge",{"_index":149,"title":{},"body":{"modules/AppModule.html":{}}}],["change",{"_index":1123,"title":{},"body":{"classes/Migration20250730220636.html":{},"entities/User.html":{},"controllers/UsersController.html":{}}}],["change_password",{"_index":1092,"title":{},"body":{"classes/Migration20250730220636.html":{}}}],["changed",{"_index":1521,"title":{},"body":{"controllers/UsersController.html":{}}}],["changepassword",{"_index":791,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["changepassword(data",{"_index":1481,"title":{},"body":{"controllers/UsersController.html":{}}}],["changepassword(userid",{"_index":1538,"title":{},"body":{"injectables/UsersService.html":{}}}],["changepassworddto",{"_index":649,"title":{"classes/ChangePasswordDto.html":{}},"body":{"classes/ChangePasswordDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["characters",{"_index":660,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/ResetPasswordDto.html":{}}}],["check",{"_index":1090,"title":{},"body":{"classes/Migration20250730220636.html":{}}}],["checking",{"_index":264,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["checkout",{"_index":1392,"title":{},"body":{"injectables/StripeService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["city",{"_index":792,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/Migration20250730220636.html":{},"entities/User.html":{},"classes/UserFactory.html":{}}}],["class",{"_index":47,"title":{"classes/AuthResponseDto.html":{},"classes/BaseEntity.html":{},"classes/CatchAllFilter.html":{},"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserResponseDto.html":{},"classes/DatabaseSeeder.html":{},"classes/EmailService.html":{},"classes/ForgotPasswordDto.html":{},"classes/GetProfileResponseDto.html":{},"classes/LoginDto.html":{},"classes/Migration20250730220636.html":{},"classes/PasswordResetEmailConsumer.html":{},"classes/RefreshTokenDto.html":{},"classes/ResetPasswordDto.html":{},"classes/UpdateProfileDto.html":{},"classes/UserFactory.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AppRedisModule.html":{},"injectables/AppRedisService.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/AuthResponseDto.html":{},"injectables/AuthService.html":{},"classes/BaseEntity.html":{},"classes/CatchAllFilter.html":{},"classes/ChangePasswordDto.html":{},"injectables/CloudinaryService.html":{},"injectables/CreateUserCommand.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserResponseDto.html":{},"classes/DatabaseSeeder.html":{},"modules/EmailModule.html":{},"classes/EmailService.html":{},"classes/ForgotPasswordDto.html":{},"classes/GetProfileResponseDto.html":{},"modules/HttpClientModule.html":{},"injectables/HttpClientService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"classes/Migration20250730220636.html":{},"injectables/MorganMiddleware.html":{},"classes/PasswordResetEmailConsumer.html":{},"modules/PaymentModule.html":{},"classes/RefreshTokenDto.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/RequestContextMiddleware.html":{},"classes/ResetPasswordDto.html":{},"guards/RoleGuard.html":{},"injectables/S3Service.html":{},"injectables/SchemaService.html":{},"modules/StorageModule.html":{},"injectables/StripeService.html":{},"injectables/SuccessResponseInterceptor.html":{},"classes/UpdateProfileDto.html":{},"entities/User.html":{},"classes/UserFactory.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/UsersSubscriber.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":398,"title":{},"body":{"classes/AuthResponseDto.html":{},"classes/BaseEntity.html":{},"classes/CatchAllFilter.html":{},"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserResponseDto.html":{},"classes/DatabaseSeeder.html":{},"classes/EmailService.html":{},"classes/ForgotPasswordDto.html":{},"classes/GetProfileResponseDto.html":{},"classes/LoginDto.html":{},"classes/Migration20250730220636.html":{},"classes/PasswordResetEmailConsumer.html":{},"classes/RefreshTokenDto.html":{},"classes/ResetPasswordDto.html":{},"classes/UpdateProfileDto.html":{},"classes/UserFactory.html":{},"overview.html":{}}}],["cleaned",{"_index":845,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["client.module.ts",{"_index":925,"title":{},"body":{"modules/HttpClientModule.html":{}}}],["client.service",{"_index":929,"title":{},"body":{"modules/HttpClientModule.html":{}}}],["client.service.ts",{"_index":930,"title":{},"body":{"injectables/HttpClientService.html":{},"coverage.html":{}}}],["client.service.ts:10",{"_index":942,"title":{},"body":{"injectables/HttpClientService.html":{}}}],["client.service.ts:11",{"_index":936,"title":{},"body":{"injectables/HttpClientService.html":{}}}],["client.service.ts:21",{"_index":939,"title":{},"body":{"injectables/HttpClientService.html":{}}}],["client/http",{"_index":924,"title":{},"body":{"modules/HttpClientModule.html":{},"injectables/HttpClientService.html":{},"coverage.html":{}}}],["cloud_name",{"_index":699,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["cloudinary",{"_index":687,"title":{},"body":{"injectables/CloudinaryService.html":{},"interfaces/IStrorageService.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{}}}],["cloudinary.config",{"_index":698,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["cloudinary.service",{"_index":1357,"title":{},"body":{"modules/StorageModule.html":{}}}],["cloudinary.uploader.upload_stream",{"_index":713,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["cloudinaryservice",{"_index":676,"title":{"injectables/CloudinaryService.html":{}},"body":{"injectables/CloudinaryService.html":{},"modules/StorageModule.html":{},"coverage.html":{}}}],["cloudinaryservice(configservice",{"_index":1372,"title":{},"body":{"modules/StorageModule.html":{}}}],["cloudinaryservice.name",{"_index":710,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["cluster_appmodule",{"_index":60,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":62,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":61,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appredismodule",{"_index":156,"title":{},"body":{"modules/AppRedisModule.html":{},"overview.html":{}}}],["cluster_appredismodule_exports",{"_index":157,"title":{},"body":{"modules/AppRedisModule.html":{},"overview.html":{}}}],["cluster_appredismodule_providers",{"_index":158,"title":{},"body":{"modules/AppRedisModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":355,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":356,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":357,"title":{},"body":{"modules/AuthModule.html":{}}}],["cluster_authmodule_providers",{"_index":358,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_emailmodule",{"_index":871,"title":{},"body":{"modules/EmailModule.html":{},"overview.html":{}}}],["cluster_emailmodule_exports",{"_index":872,"title":{},"body":{"modules/EmailModule.html":{},"overview.html":{}}}],["cluster_httpclientmodule",{"_index":919,"title":{},"body":{"modules/HttpClientModule.html":{},"overview.html":{}}}],["cluster_httpclientmodule_exports",{"_index":920,"title":{},"body":{"modules/HttpClientModule.html":{},"overview.html":{}}}],["cluster_httpclientmodule_providers",{"_index":921,"title":{},"body":{"modules/HttpClientModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":1522,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_exports",{"_index":1524,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_imports",{"_index":1523,"title":{},"body":{"modules/UsersModule.html":{}}}],["cluster_usersmodule_providers",{"_index":1525,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["code",{"_index":808,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/Migration20250730220636.html":{},"entities/User.html":{}}}],["column",{"_index":1098,"title":{},"body":{"classes/Migration20250730220636.html":{}}}],["command",{"_index":763,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["commander",{"_index":764,"title":{},"body":{"injectables/CreateUserCommand.html":{},"dependencies.html":{}}}],["commandrunner",{"_index":729,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["commands/create",{"_index":113,"title":{},"body":{"modules/AppModule.html":{}}}],["comment",{"_index":548,"title":{},"body":{"classes/BaseEntity.html":{},"classes/Migration20250730220636.html":{},"entities/User.html":{}}}],["common/constants",{"_index":376,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CreateUserCommand.html":{},"modules/EmailModule.html":{},"classes/PasswordResetEmailConsumer.html":{},"modules/PaymentModule.html":{},"injectables/SchemaService.html":{},"modules/StorageModule.html":{},"injectables/StripeService.html":{}}}],["common/entities/base.entity",{"_index":1448,"title":{},"body":{"entities/User.html":{}}}],["common/enums",{"_index":695,"title":{},"body":{"injectables/CloudinaryService.html":{},"injectables/CreateUserCommand.html":{},"classes/CreateUserDto.html":{},"interfaces/IStrorageService.html":{},"classes/PasswordResetEmailConsumer.html":{},"modules/PaymentModule.html":{},"injectables/S3Service.html":{},"modules/StorageModule.html":{},"entities/User.html":{},"classes/UserFactory.html":{}}}],["common/interfaces/api",{"_index":326,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["common/middlewares/morgan.middleware",{"_index":94,"title":{},"body":{"modules/AppModule.html":{}}}],["common/middlewares/request",{"_index":116,"title":{},"body":{"modules/AppModule.html":{}}}],["common/utils/user.util",{"_index":1450,"title":{},"body":{"entities/User.html":{},"injectables/UsersSubscriber.html":{}}}],["compare",{"_index":1018,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["compositepropagator",{"_index":1823,"title":{},"body":{"miscellaneous/variables.html":{}}}],["concurrency",{"_index":1175,"title":{},"body":{"classes/PasswordResetEmailConsumer.html":{}}}],["cond",{"_index":570,"title":{},"body":{"classes/BaseEntity.html":{}}}],["config",{"_index":169,"title":{},"body":{"modules/AppRedisModule.html":{},"modules/StorageModule.html":{}}}],["config/index",{"_index":87,"title":{},"body":{"modules/AppModule.html":{}}}],["config/mikro",{"_index":119,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule",{"_index":88,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule.forroot",{"_index":121,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":89,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRedisModule.html":{},"injectables/AppRedisService.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CloudinaryService.html":{},"modules/EmailModule.html":{},"injectables/JwtStrategy.html":{},"modules/PaymentModule.html":{},"injectables/S3Service.html":{},"injectables/SchemaService.html":{},"modules/StorageModule.html":{},"injectables/StripeService.html":{},"injectables/UsersSubscriber.html":{}}}],["configservice.get",{"_index":1367,"title":{},"body":{"modules/StorageModule.html":{}}}],["configservice.get('auth.jwt.expiresin",{"_index":385,"title":{},"body":{"modules/AuthModule.html":{}}}],["configservice.get('auth.jwt.secret",{"_index":382,"title":{},"body":{"modules/AuthModule.html":{}}}],["configservice.get('aws.s3.accesskeyid",{"_index":1365,"title":{},"body":{"modules/StorageModule.html":{}}}],["configservice.get('aws.s3.region",{"_index":1369,"title":{},"body":{"modules/StorageModule.html":{}}}],["configservice.getorthrow",{"_index":1206,"title":{},"body":{"modules/PaymentModule.html":{}}}],["configservice.getorthrow('auth.jwt.secret",{"_index":1044,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["configservice.getorthrow('driver.payment",{"_index":1215,"title":{},"body":{"modules/PaymentModule.html":{}}}],["configservice.getorthrow('driver.storage",{"_index":1370,"title":{},"body":{"modules/StorageModule.html":{}}}],["configservice.getorthrow('redis.namespace",{"_index":171,"title":{},"body":{"modules/AppRedisModule.html":{}}}],["configservice.getorthrow('redis.url",{"_index":132,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRedisModule.html":{}}}],["configservice.getorthrow('smtp.auth.pass",{"_index":890,"title":{},"body":{"modules/EmailModule.html":{}}}],["configservice.getorthrow('smtp.auth.user",{"_index":889,"title":{},"body":{"modules/EmailModule.html":{}}}],["configservice.getorthrow('smtp.host",{"_index":884,"title":{},"body":{"modules/EmailModule.html":{}}}],["configservice.getorthrow('smtp.port",{"_index":886,"title":{},"body":{"modules/EmailModule.html":{}}}],["configservice.getorthrow('smtp.secure",{"_index":888,"title":{},"body":{"modules/EmailModule.html":{}}}],["configservice.getorthrow('stripe.secretkey",{"_index":1202,"title":{},"body":{"modules/PaymentModule.html":{}}}],["configuration",{"_index":86,"title":{},"body":{"modules/AppModule.html":{}}}],["configure",{"_index":73,"title":{},"body":{"modules/AppModule.html":{}}}],["configure(consumer",{"_index":74,"title":{},"body":{"modules/AppModule.html":{}}}],["confirmation",{"_index":652,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/ResetPasswordDto.html":{}}}],["confirmpassword",{"_index":353,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ChangePasswordDto.html":{},"classes/ResetPasswordDto.html":{},"injectables/UsersService.html":{}}}],["conflictexception",{"_index":1552,"title":{},"body":{"injectables/UsersService.html":{}}}],["conflictexception('user",{"_index":1561,"title":{},"body":{"injectables/UsersService.html":{}}}],["connect",{"_index":1755,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["connection",{"_index":130,"title":{},"body":{"modules/AppModule.html":{}}}],["console.error",{"_index":784,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["console.log('prometheus",{"_index":1831,"title":{},"body":{"miscellaneous/variables.html":{}}}],["console.log(chalk.green.bold",{"_index":782,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["const",{"_index":236,"title":{},"body":{"injectables/AppRedisService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CatchAllFilter.html":{},"injectables/CloudinaryService.html":{},"injectables/CreateUserCommand.html":{},"classes/CreateUserDto.html":{},"injectables/HttpClientService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/MorganMiddleware.html":{},"classes/PasswordResetEmailConsumer.html":{},"modules/PaymentModule.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"guards/RoleGuard.html":{},"injectables/S3Service.html":{},"injectables/SchemaService.html":{},"modules/StorageModule.html":{},"injectables/StripeService.html":{},"injectables/SuccessResponseInterceptor.html":{},"classes/UpdateProfileDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/UsersSubscriber.html":{}}}],["constraint",{"_index":1095,"title":{},"body":{"classes/Migration20250730220636.html":{}}}],["constructor",{"_index":183,"title":{},"body":{"injectables/AppRedisService.html":{},"injectables/AuthService.html":{},"classes/CatchAllFilter.html":{},"injectables/CloudinaryService.html":{},"injectables/CreateUserCommand.html":{},"classes/EmailService.html":{},"injectables/HttpClientService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/MorganMiddleware.html":{},"classes/PasswordResetEmailConsumer.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/RequestContextMiddleware.html":{},"guards/RoleGuard.html":{},"injectables/S3Service.html":{},"injectables/SchemaService.html":{},"injectables/StripeService.html":{},"injectables/UsersService.html":{},"injectables/UsersSubscriber.html":{}}}],["constructor(@inject(logger",{"_index":1141,"title":{},"body":{"injectables/MorganMiddleware.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/SuccessResponseInterceptor.html":{}}}],["constructor(appredisservice",{"_index":419,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["constructor(authservice",{"_index":1049,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["constructor(configservice",{"_index":679,"title":{},"body":{"injectables/CloudinaryService.html":{},"injectables/JwtStrategy.html":{},"injectables/S3Service.html":{},"injectables/StripeService.html":{}}}],["constructor(em",{"_index":736,"title":{},"body":{"injectables/CreateUserCommand.html":{},"injectables/UsersSubscriber.html":{}}}],["constructor(emailservice",{"_index":1163,"title":{},"body":{"classes/PasswordResetEmailConsumer.html":{}}}],["constructor(httpadapterhost",{"_index":581,"title":{},"body":{"classes/CatchAllFilter.html":{}}}],["constructor(httpservice",{"_index":934,"title":{},"body":{"injectables/HttpClientService.html":{}}}],["constructor(loggerservice",{"_index":184,"title":{},"body":{"injectables/AppRedisService.html":{},"injectables/MorganMiddleware.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{}}}],["constructor(mailerservice",{"_index":900,"title":{},"body":{"classes/EmailService.html":{}}}],["constructor(orm",{"_index":1257,"title":{},"body":{"injectables/RequestContextMiddleware.html":{},"injectables/SchemaService.html":{}}}],["constructor(private",{"_index":138,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/JwtAuthGuard.html":{},"injectables/RequestContextMiddleware.html":{},"guards/RoleGuard.html":{},"controllers/UsersController.html":{}}}],["constructor(reflector",{"_index":982,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/RoleGuard.html":{}}}],["consumer",{"_index":79,"title":{},"body":{"modules/AppModule.html":{}}}],["consumer.apply(morganmiddleware).forroutes",{"_index":153,"title":{},"body":{"modules/AppModule.html":{}}}],["consumer.apply(requestcontextmiddleware).forroutes",{"_index":154,"title":{},"body":{"modules/AppModule.html":{}}}],["contenttype",{"_index":1326,"title":{},"body":{"injectables/S3Service.html":{}}}],["context",{"_index":905,"title":{},"body":{"classes/EmailService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"guards/RoleGuard.html":{},"injectables/SuccessResponseInterceptor.html":{}}}],["context.getclass",{"_index":996,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["context.gethandler",{"_index":995,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/RoleGuard.html":{}}}],["context.gettype",{"_index":1238,"title":{},"body":{"injectables/RequestBodyAndResponseInterceptor.html":{},"guards/RoleGuard.html":{},"injectables/SuccessResponseInterceptor.html":{}}}],["context.middleware",{"_index":117,"title":{},"body":{"modules/AppModule.html":{}}}],["context.middleware.ts",{"_index":1256,"title":{},"body":{"injectables/RequestContextMiddleware.html":{},"coverage.html":{}}}],["context.middleware.ts:6",{"_index":1259,"title":{},"body":{"injectables/RequestContextMiddleware.html":{}}}],["context.middleware.ts:9",{"_index":1262,"title":{},"body":{"injectables/RequestContextMiddleware.html":{}}}],["context.switchtohttp().getrequest",{"_index":1252,"title":{},"body":{"injectables/RequestBodyAndResponseInterceptor.html":{},"guards/RoleGuard.html":{},"injectables/SuccessResponseInterceptor.html":{}}}],["context.switchtohttp().getresponse",{"_index":1243,"title":{},"body":{"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/SuccessResponseInterceptor.html":{}}}],["contextmanager",{"_index":1820,"title":{},"body":{"miscellaneous/variables.html":{}}}],["contexttype",{"_index":1237,"title":{},"body":{"injectables/RequestBodyAndResponseInterceptor.html":{},"guards/RoleGuard.html":{},"injectables/SuccessResponseInterceptor.html":{}}}],["controller",{"_index":24,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/JwtStrategy.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":329,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('users",{"_index":1506,"title":{},"body":{"controllers/UsersController.html":{}}}],["controllers",{"_index":26,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"modules/EmailModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["country",{"_index":793,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/Migration20250730220636.html":{},"entities/User.html":{},"classes/UserFactory.html":{}}}],["country_code",{"_index":1087,"title":{},"body":{"classes/Migration20250730220636.html":{}}}],["countrycode",{"_index":794,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateProfileDto.html":{},"entities/User.html":{},"classes/UserFactory.html":{}}}],["coverage",{"_index":1619,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":771,"title":{},"body":{"injectables/CreateUserCommand.html":{},"classes/Migration20250730220636.html":{},"classes/UpdateProfileDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["create(@body",{"_index":1508,"title":{},"body":{"controllers/UsersController.html":{}}}],["create(user",{"_index":1484,"title":{},"body":{"controllers/UsersController.html":{}}}],["create(userdata",{"_index":1540,"title":{},"body":{"injectables/UsersService.html":{}}}],["create:user",{"_index":770,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["createcheckoutsession",{"_index":956,"title":{},"body":{"interfaces/IPaymentService.html":{},"injectables/StripeService.html":{}}}],["createcheckoutsession(params",{"_index":958,"title":{},"body":{"interfaces/IPaymentService.html":{},"injectables/StripeService.html":{}}}],["created",{"_index":783,"title":{},"body":{"injectables/CreateUserCommand.html":{},"classes/CreateUserResponseDto.html":{},"classes/GetProfileResponseDto.html":{},"injectables/StripeService.html":{},"controllers/UsersController.html":{}}}],["created_at",{"_index":1076,"title":{},"body":{"classes/Migration20250730220636.html":{}}}],["createdat",{"_index":540,"title":{},"body":{"classes/BaseEntity.html":{}}}],["createpaymentintent",{"_index":957,"title":{},"body":{"interfaces/IPaymentService.html":{},"injectables/StripeService.html":{}}}],["createpaymentintent(params",{"_index":963,"title":{},"body":{"interfaces/IPaymentService.html":{},"injectables/StripeService.html":{}}}],["createpresignedurlwithoutclient",{"_index":968,"title":{},"body":{"interfaces/IStrorageService.html":{},"injectables/S3Service.html":{}}}],["createpresignedurlwithoutclient(key",{"_index":969,"title":{},"body":{"interfaces/IStrorageService.html":{},"injectables/S3Service.html":{}}}],["createusercommand",{"_index":66,"title":{"injectables/CreateUserCommand.html":{}},"body":{"modules/AppModule.html":{},"injectables/CreateUserCommand.html":{},"coverage.html":{},"overview.html":{}}}],["createuserdto",{"_index":787,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/CreateUserDto.html":{},"classes/UpdateProfileDto.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["createuserresponsedto",{"_index":852,"title":{"classes/CreateUserResponseDto.html":{}},"body":{"classes/CreateUserResponseDto.html":{},"classes/GetProfileResponseDto.html":{},"coverage.html":{}}}],["createwinstonlogger",{"_index":1646,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["creating",{"_index":1391,"title":{},"body":{"injectables/StripeService.html":{}}}],["creation",{"_index":550,"title":{},"body":{"classes/BaseEntity.html":{},"classes/Migration20250730220636.html":{}}}],["credentials",{"_index":1060,"title":{},"body":{"injectables/LocalStrategy.html":{},"injectables/S3Service.html":{},"modules/StorageModule.html":{}}}],["ctx",{"_index":611,"title":{},"body":{"classes/CatchAllFilter.html":{}}}],["ctx.getrequest",{"_index":613,"title":{},"body":{"classes/CatchAllFilter.html":{}}}],["ctx.getresponse",{"_index":615,"title":{},"body":{"classes/CatchAllFilter.html":{}}}],["current_timestamp",{"_index":547,"title":{},"body":{"classes/BaseEntity.html":{},"classes/Migration20250730220636.html":{}}}],["currently",{"_index":1031,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["customalphabet",{"_index":768,"title":{},"body":{"injectables/CreateUserCommand.html":{},"injectables/S3Service.html":{}}}],["customalphabet(hexadecimallowercase",{"_index":1295,"title":{},"body":{"injectables/S3Service.html":{}}}],["customalphabet(password_character_set",{"_index":762,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["data",{"_index":11,"title":{},"body":{"interfaces/ApiResponse.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/CloudinaryService.html":{},"classes/CreateUserResponseDto.html":{},"classes/GetProfileResponseDto.html":{},"injectables/HttpClientService.html":{},"interfaces/IStrorageService.html":{},"classes/PasswordResetEmailConsumer.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/S3Service.html":{},"injectables/StripeService.html":{},"injectables/SuccessResponseInterceptor.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["data.id",{"_index":1584,"title":{},"body":{"injectables/UsersService.html":{}}}],["data.object",{"_index":1402,"title":{},"body":{"injectables/StripeService.html":{}}}],["data?.email",{"_index":1179,"title":{},"body":{"classes/PasswordResetEmailConsumer.html":{}}}],["data?.firstname",{"_index":1184,"title":{},"body":{"classes/PasswordResetEmailConsumer.html":{}}}],["data?.reseturl",{"_index":1183,"title":{},"body":{"classes/PasswordResetEmailConsumer.html":{}}}],["database",{"_index":1350,"title":{},"body":{"injectables/SchemaService.html":{}}}],["databaseseeder",{"_index":861,"title":{"classes/DatabaseSeeder.html":{}},"body":{"classes/DatabaseSeeder.html":{},"coverage.html":{}}}],["date",{"_index":543,"title":{},"body":{"classes/BaseEntity.html":{},"entities/User.html":{}}}],["date().toisostring",{"_index":640,"title":{},"body":{"classes/CatchAllFilter.html":{}}}],["dayjs",{"_index":1054,"title":{},"body":{"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["dayjs().utc().todate",{"_index":1062,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["dayjs.extend(utc",{"_index":1057,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["dayjs/plugin/utc",{"_index":1056,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["declarations",{"_index":56,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRedisModule.html":{},"modules/AuthModule.html":{},"modules/EmailModule.html":{},"modules/HttpClientModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["decorators",{"_index":30,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/AuthResponseDto.html":{},"classes/BaseEntity.html":{},"classes/ChangePasswordDto.html":{},"injectables/CreateUserCommand.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserResponseDto.html":{},"classes/ForgotPasswordDto.html":{},"classes/GetProfileResponseDto.html":{},"classes/LoginDto.html":{},"modules/PaymentModule.html":{},"classes/RefreshTokenDto.html":{},"classes/ResetPasswordDto.html":{},"guards/RoleGuard.html":{},"injectables/StripeService.html":{},"entities/User.html":{},"controllers/UsersController.html":{}}}],["decorators/public.decorator",{"_index":318,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtAuthGuard.html":{}}}],["decrement",{"_index":177,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["decrement(key",{"_index":188,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["default",{"_index":218,"title":{},"body":{"injectables/AppRedisService.html":{},"classes/BaseEntity.html":{},"classes/CatchAllFilter.html":{},"injectables/CreateUserCommand.html":{},"injectables/HttpClientService.html":{},"classes/Migration20250730220636.html":{},"injectables/S3Service.html":{},"entities/User.html":{},"classes/UserFactory.html":{},"miscellaneous/variables.html":{}}}],["defaultjoboptions",{"_index":387,"title":{},"body":{"modules/AuthModule.html":{},"modules/PaymentModule.html":{}}}],["defaultraw",{"_index":546,"title":{},"body":{"classes/BaseEntity.html":{},"entities/User.html":{}}}],["defaults",{"_index":891,"title":{},"body":{"modules/EmailModule.html":{}}}],["defined",{"_index":36,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppRedisService.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthResponseDto.html":{},"injectables/AuthService.html":{},"classes/BaseEntity.html":{},"classes/CatchAllFilter.html":{},"classes/ChangePasswordDto.html":{},"injectables/CloudinaryService.html":{},"injectables/CreateUserCommand.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserResponseDto.html":{},"classes/DatabaseSeeder.html":{},"classes/EmailService.html":{},"classes/ForgotPasswordDto.html":{},"classes/GetProfileResponseDto.html":{},"injectables/HttpClientService.html":{},"interfaces/IPaymentService.html":{},"interfaces/IStrorageService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"classes/Migration20250730220636.html":{},"injectables/MorganMiddleware.html":{},"classes/PasswordResetEmailConsumer.html":{},"modules/PaymentModule.html":{},"classes/RefreshTokenDto.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/RequestContextMiddleware.html":{},"classes/ResetPasswordDto.html":{},"guards/RoleGuard.html":{},"injectables/S3Service.html":{},"injectables/SchemaService.html":{},"modules/StorageModule.html":{},"injectables/StripeService.html":{},"injectables/SuccessResponseInterceptor.html":{},"entities/User.html":{},"classes/UserFactory.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/UsersSubscriber.html":{}}}],["definition",{"_index":1458,"title":{},"body":{"classes/UserFactory.html":{}}}],["delay",{"_index":392,"title":{},"body":{"modules/AuthModule.html":{},"modules/PaymentModule.html":{}}}],["delete",{"_index":178,"title":{},"body":{"injectables/AppRedisService.html":{},"classes/BaseEntity.html":{},"classes/Migration20250730220636.html":{},"miscellaneous/enumerations.html":{}}}],["delete(key",{"_index":192,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["deleted",{"_index":198,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["deleted_at",{"_index":1075,"title":{},"body":{"classes/Migration20250730220636.html":{}}}],["deletedat",{"_index":541,"title":{},"body":{"classes/BaseEntity.html":{}}}],["deletemany",{"_index":179,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["deletemany(keys",{"_index":201,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["deleting",{"_index":268,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["dependencies",{"_index":54,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AppRedisModule.html":{},"modules/AuthModule.html":{},"modules/EmailModule.html":{},"modules/HttpClientModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":194,"title":{},"body":{"injectables/AppRedisService.html":{},"controllers/AuthController.html":{},"classes/AuthResponseDto.html":{},"classes/ChangePasswordDto.html":{},"injectables/CreateUserCommand.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserResponseDto.html":{},"classes/GetProfileResponseDto.html":{},"classes/LoginDto.html":{},"classes/RefreshTokenDto.html":{},"classes/ResetPasswordDto.html":{},"index.html":{},"properties.html":{}}}],["details",{"_index":1026,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["development",{"_index":1781,"title":{},"body":{"index.html":{}}}],["dictionary",{"_index":1300,"title":{},"body":{"injectables/S3Service.html":{},"dependencies.html":{}}}],["dir",{"_index":894,"title":{},"body":{"modules/EmailModule.html":{}}}],["disable",{"_index":479,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["document",{"_index":1020,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["documentation",{"_index":1620,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["doe",{"_index":840,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["doe'})@isstring()@isnotempty",{"_index":815,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["don't",{"_index":1021,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["driver",{"_index":1214,"title":{},"body":{"modules/PaymentModule.html":{},"modules/StorageModule.html":{}}}],["dto",{"_index":322,"title":{},"body":{"controllers/AuthController.html":{}}}],["dto.ts",{"_index":1219,"title":{},"body":{"classes/RefreshTokenDto.html":{},"coverage.html":{}}}],["dto.ts:11",{"_index":1222,"title":{},"body":{"classes/RefreshTokenDto.html":{}}}],["dto/change",{"_index":1502,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dto/create",{"_index":1501,"title":{},"body":{"controllers/UsersController.html":{}}}],["dto/forgot",{"_index":323,"title":{},"body":{"controllers/AuthController.html":{}}}],["dto/login.dto",{"_index":319,"title":{},"body":{"controllers/AuthController.html":{}}}],["dto/refresh",{"_index":320,"title":{},"body":{"controllers/AuthController.html":{}}}],["dto/reset",{"_index":325,"title":{},"body":{"controllers/AuthController.html":{}}}],["dto/update",{"_index":1503,"title":{},"body":{"controllers/UsersController.html":{}}}],["during",{"_index":1027,"title":{},"body":{"injectables/JwtStrategy.html":{},"classes/RefreshTokenDto.html":{}}}],["dynamicmodule",{"_index":1191,"title":{},"body":{"modules/PaymentModule.html":{},"modules/StorageModule.html":{}}}],["e",{"_index":742,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["e.g",{"_index":666,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/ResetPasswordDto.html":{}}}],["e2e",{"_index":1790,"title":{},"body":{"index.html":{}}}],["elsewhere",{"_index":1024,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["em",{"_index":739,"title":{},"body":{"injectables/CreateUserCommand.html":{},"classes/DatabaseSeeder.html":{},"injectables/UsersSubscriber.html":{}}}],["em.geteventmanager().registersubscriber(this",{"_index":1608,"title":{},"body":{"injectables/UsersSubscriber.html":{}}}],["email",{"_index":347,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CreateUserCommand.html":{},"classes/CreateUserDto.html":{},"classes/EmailService.html":{},"classes/ForgotPasswordDto.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"classes/Migration20250730220636.html":{},"classes/PasswordResetEmailConsumer.html":{},"classes/UpdateProfileDto.html":{},"entities/User.html":{},"classes/UserFactory.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["email.service",{"_index":875,"title":{},"body":{"modules/EmailModule.html":{}}}],["email_from_name",{"_index":878,"title":{},"body":{"modules/EmailModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["emailmodule",{"_index":870,"title":{"modules/EmailModule.html":{}},"body":{"modules/EmailModule.html":{},"modules.html":{},"overview.html":{}}}],["emailregex",{"_index":774,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["emailregex.test(email",{"_index":776,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["emailservice",{"_index":873,"title":{"classes/EmailService.html":{}},"body":{"modules/EmailModule.html":{},"classes/EmailService.html":{},"classes/PasswordResetEmailConsumer.html":{},"coverage.html":{},"overview.html":{}}}],["emailsubjectenum",{"_index":1172,"title":{},"body":{"classes/PasswordResetEmailConsumer.html":{},"miscellaneous/enumerations.html":{}}}],["emailsubjectenum.password_reset",{"_index":1181,"title":{},"body":{"classes/PasswordResetEmailConsumer.html":{}}}],["emailtemplateenum",{"_index":1173,"title":{},"body":{"classes/PasswordResetEmailConsumer.html":{},"miscellaneous/enumerations.html":{}}}],["emailtemplateenum.password_reset",{"_index":1182,"title":{},"body":{"classes/PasswordResetEmailConsumer.html":{}}}],["enforcing",{"_index":1014,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["entities",{"_index":1421,"title":{},"body":{"entities/User.html":{},"overview.html":{}}}],["entities/user.entity",{"_index":857,"title":{},"body":{"classes/CreateUserResponseDto.html":{},"classes/GetProfileResponseDto.html":{},"classes/UserFactory.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/UsersSubscriber.html":{}}}],["entity",{"_index":1420,"title":{"entities/User.html":{}},"body":{"entities/User.html":{},"coverage.html":{}}}],["entitydata",{"_index":1549,"title":{},"body":{"injectables/UsersService.html":{}}}],["entitymanager",{"_index":737,"title":{},"body":{"injectables/CreateUserCommand.html":{},"classes/DatabaseSeeder.html":{},"injectables/UsersSubscriber.html":{}}}],["entityname",{"_index":1600,"title":{},"body":{"injectables/UsersSubscriber.html":{}}}],["entityrepository",{"_index":1536,"title":{},"body":{"injectables/UsersService.html":{}}}],["enum",{"_index":825,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/User.html":{}}}],["enum({items",{"_index":1443,"title":{},"body":{"entities/User.html":{}}}],["enumerations",{"_index":1745,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["err",{"_index":990,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["error",{"_index":501,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CloudinaryService.html":{},"injectables/CreateUserCommand.html":{},"injectables/JwtAuthGuard.html":{},"miscellaneous/typealiases.html":{}}}],["error('invalid",{"_index":777,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["error(`unsupported",{"_index":1375,"title":{},"body":{"modules/StorageModule.html":{}}}],["error.message",{"_index":503,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CreateUserCommand.html":{}}}],["error.stack",{"_index":720,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["error=${error.message",{"_index":719,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["errorcode",{"_index":638,"title":{},"body":{"classes/CatchAllFilter.html":{},"interfaces/ErrorResponse.html":{}}}],["errorlog",{"_index":168,"title":{},"body":{"modules/AppRedisModule.html":{}}}],["errormessage",{"_index":635,"title":{},"body":{"classes/CatchAllFilter.html":{}}}],["errorobject",{"_index":998,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["errorresponse",{"_index":607,"title":{"interfaces/ErrorResponse.html":{}},"body":{"classes/CatchAllFilter.html":{},"interfaces/ErrorResponse.html":{},"coverage.html":{}}}],["eslint",{"_index":478,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["eslint/no",{"_index":483,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["event",{"_index":1409,"title":{},"body":{"injectables/StripeService.html":{}}}],["eventargs",{"_index":1595,"title":{},"body":{"injectables/UsersSubscriber.html":{}}}],["eventid",{"_index":1405,"title":{},"body":{"injectables/StripeService.html":{}}}],["eventsubscriber",{"_index":1607,"title":{},"body":{"injectables/UsersSubscriber.html":{}}}],["evt",{"_index":1386,"title":{},"body":{"injectables/StripeService.html":{}}}],["evt?.id",{"_index":1406,"title":{},"body":{"injectables/StripeService.html":{}}}],["ex",{"_index":256,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["example",{"_index":403,"title":{},"body":{"classes/AuthResponseDto.html":{},"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserResponseDto.html":{},"classes/ForgotPasswordDto.html":{},"classes/GetProfileResponseDto.html":{},"classes/LoginDto.html":{},"classes/RefreshTokenDto.html":{},"classes/ResetPasswordDto.html":{},"index.html":{}}}],["exception",{"_index":590,"title":{},"body":{"classes/CatchAllFilter.html":{}}}],["exception.getresponse",{"_index":619,"title":{},"body":{"classes/CatchAllFilter.html":{}}}],["exception.getstatus",{"_index":644,"title":{},"body":{"classes/CatchAllFilter.html":{}}}],["exception.message",{"_index":621,"title":{},"body":{"classes/CatchAllFilter.html":{}}}],["exception.response?.status",{"_index":646,"title":{},"body":{"classes/CatchAllFilter.html":{}}}],["exceptionfilter",{"_index":574,"title":{},"body":{"classes/CatchAllFilter.html":{}}}],["exceptionresponse",{"_index":618,"title":{},"body":{"classes/CatchAllFilter.html":{}}}],["exceptionresponse?.error",{"_index":627,"title":{},"body":{"classes/CatchAllFilter.html":{}}}],["exceptionresponse?.message",{"_index":620,"title":{},"body":{"classes/CatchAllFilter.html":{}}}],["executioncontext",{"_index":986,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"guards/RoleGuard.html":{},"injectables/SuccessResponseInterceptor.html":{}}}],["exist",{"_index":225,"title":{},"body":{"injectables/AppRedisService.html":{},"classes/CatchAllFilter.html":{}}}],["existence",{"_index":265,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["exists",{"_index":180,"title":{},"body":{"injectables/AppRedisService.html":{},"injectables/UsersService.html":{}}}],["exists(key",{"_index":205,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["expiresin",{"_index":384,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/S3Service.html":{}}}],["exponential",{"_index":391,"title":{},"body":{"modules/AuthModule.html":{},"modules/PaymentModule.html":{}}}],["export",{"_index":21,"title":{},"body":{"interfaces/ApiResponse.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AppRedisModule.html":{},"injectables/AppRedisService.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/AuthResponseDto.html":{},"injectables/AuthService.html":{},"classes/BaseEntity.html":{},"classes/CatchAllFilter.html":{},"classes/ChangePasswordDto.html":{},"injectables/CloudinaryService.html":{},"injectables/CreateUserCommand.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserResponseDto.html":{},"classes/DatabaseSeeder.html":{},"modules/EmailModule.html":{},"classes/EmailService.html":{},"interfaces/ErrorResponse.html":{},"classes/ForgotPasswordDto.html":{},"classes/GetProfileResponseDto.html":{},"modules/HttpClientModule.html":{},"injectables/HttpClientService.html":{},"interfaces/IPaymentService.html":{},"interfaces/IStrorageService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"classes/Migration20250730220636.html":{},"injectables/MorganMiddleware.html":{},"classes/PasswordResetEmailConsumer.html":{},"modules/PaymentModule.html":{},"classes/RefreshTokenDto.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/RequestContextMiddleware.html":{},"classes/ResetPasswordDto.html":{},"guards/RoleGuard.html":{},"injectables/S3Service.html":{},"injectables/SchemaService.html":{},"modules/StorageModule.html":{},"injectables/StripeService.html":{},"injectables/SuccessResponseInterceptor.html":{},"classes/UpdateProfileDto.html":{},"entities/User.html":{},"classes/UserFactory.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/UsersSubscriber.html":{}}}],["exporter",{"_index":1832,"title":{},"body":{"miscellaneous/variables.html":{}}}],["exports",{"_index":59,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRedisModule.html":{},"modules/AuthModule.html":{},"modules/EmailModule.html":{},"modules/HttpClientModule.html":{},"modules/PaymentModule.html":{},"modules/StorageModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["express",{"_index":100,"title":{},"body":{"modules/AppModule.html":{},"injectables/RequestContextMiddleware.html":{},"dependencies.html":{}}}],["expressadapter",{"_index":111,"title":{},"body":{"modules/AppModule.html":{}}}],["extends",{"_index":728,"title":{},"body":{"injectables/CreateUserCommand.html":{},"classes/DatabaseSeeder.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/Migration20250730220636.html":{},"classes/PasswordResetEmailConsumer.html":{},"classes/UpdateProfileDto.html":{},"entities/User.html":{},"classes/UserFactory.html":{}}}],["extract",{"_index":1011,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt",{"_index":1036,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":1041,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["eyjhbgcioijiuzi1niisinr5cci6ikpxvcj9",{"_index":404,"title":{},"body":{"classes/AuthResponseDto.html":{},"classes/RefreshTokenDto.html":{},"classes/ResetPasswordDto.html":{}}}],["eyjhbgcioijiuzi1niisinr5cci6ikpxvcj9'})@isstring()@isnotempty",{"_index":1221,"title":{},"body":{"classes/RefreshTokenDto.html":{}}}],["eyjhbgcioijiuzi1niisinr5cci6ikpxvcj9...'})@isstring()@isjwt()@isnotempty",{"_index":1270,"title":{},"body":{"classes/ResetPasswordDto.html":{}}}],["f",{"_index":747,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["factory",{"_index":1456,"title":{},"body":{"classes/UserFactory.html":{}}}],["failed",{"_index":718,"title":{},"body":{"injectables/CloudinaryService.html":{},"injectables/CreateUserCommand.html":{}}}],["failhandler",{"_index":473,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/UsersService.html":{}}}],["faker",{"_index":1462,"title":{},"body":{"classes/UserFactory.html":{}}}],["faker.helpers.enumvalue(userroleenum",{"_index":1476,"title":{},"body":{"classes/UserFactory.html":{}}}],["faker.image.avatar",{"_index":1468,"title":{},"body":{"classes/UserFactory.html":{}}}],["faker.internet.email",{"_index":1464,"title":{},"body":{"classes/UserFactory.html":{}}}],["faker.internet.password",{"_index":1467,"title":{},"body":{"classes/UserFactory.html":{}}}],["faker.location.city",{"_index":1470,"title":{},"body":{"classes/UserFactory.html":{}}}],["faker.location.country",{"_index":1473,"title":{},"body":{"classes/UserFactory.html":{}}}],["faker.location.countrycode",{"_index":1474,"title":{},"body":{"classes/UserFactory.html":{}}}],["faker.location.state",{"_index":1472,"title":{},"body":{"classes/UserFactory.html":{}}}],["faker.location.streetaddress",{"_index":1469,"title":{},"body":{"classes/UserFactory.html":{}}}],["faker.location.zipcode",{"_index":1471,"title":{},"body":{"classes/UserFactory.html":{}}}],["faker.person.firstname",{"_index":1465,"title":{},"body":{"classes/UserFactory.html":{}}}],["faker.person.lastname",{"_index":1466,"title":{},"body":{"classes/UserFactory.html":{}}}],["faker.phone.number",{"_index":1475,"title":{},"body":{"classes/UserFactory.html":{}}}],["false",{"_index":223,"title":{},"body":{"injectables/AppRedisService.html":{},"injectables/AuthService.html":{},"injectables/HttpClientService.html":{},"injectables/JwtStrategy.html":{},"classes/Migration20250730220636.html":{},"entities/User.html":{},"injectables/UsersService.html":{}}}],["fetched",{"_index":860,"title":{},"body":{"classes/CreateUserResponseDto.html":{},"classes/GetProfileResponseDto.html":{},"controllers/UsersController.html":{}}}],["file",{"_index":5,"title":{},"body":{"interfaces/ApiResponse.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AppRedisModule.html":{},"injectables/AppRedisService.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/AuthResponseDto.html":{},"injectables/AuthService.html":{},"classes/BaseEntity.html":{},"classes/CatchAllFilter.html":{},"classes/ChangePasswordDto.html":{},"injectables/CloudinaryService.html":{},"injectables/CreateUserCommand.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserResponseDto.html":{},"classes/DatabaseSeeder.html":{},"modules/EmailModule.html":{},"classes/EmailService.html":{},"interfaces/ErrorResponse.html":{},"classes/ForgotPasswordDto.html":{},"classes/GetProfileResponseDto.html":{},"modules/HttpClientModule.html":{},"injectables/HttpClientService.html":{},"interfaces/IPaymentService.html":{},"interfaces/IStrorageService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"classes/Migration20250730220636.html":{},"injectables/MorganMiddleware.html":{},"classes/PasswordResetEmailConsumer.html":{},"modules/PaymentModule.html":{},"classes/RefreshTokenDto.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/RequestContextMiddleware.html":{},"classes/ResetPasswordDto.html":{},"guards/RoleGuard.html":{},"injectables/S3Service.html":{},"injectables/SchemaService.html":{},"modules/StorageModule.html":{},"injectables/StripeService.html":{},"injectables/SuccessResponseInterceptor.html":{},"classes/UpdateProfileDto.html":{},"entities/User.html":{},"classes/UserFactory.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/UsersSubscriber.html":{},"coverage.html":{}}}],["file.buffer",{"_index":1325,"title":{},"body":{"injectables/S3Service.html":{}}}],["file.mimetype",{"_index":1327,"title":{},"body":{"injectables/S3Service.html":{}}}],["filecategory",{"_index":683,"title":{},"body":{"injectables/CloudinaryService.html":{},"interfaces/IStrorageService.html":{},"injectables/S3Service.html":{}}}],["filecategory}/${this.nanoid()}_${file.originalname",{"_index":1321,"title":{},"body":{"injectables/S3Service.html":{}}}],["filename=\"${file.originalname",{"_index":706,"title":{},"body":{"injectables/CloudinaryService.html":{},"injectables/S3Service.html":{}}}],["filter",{"_index":564,"title":{},"body":{"classes/BaseEntity.html":{}}}],["filterquery",{"_index":1544,"title":{},"body":{"injectables/UsersService.html":{}}}],["find",{"_index":626,"title":{},"body":{"classes/CatchAllFilter.html":{}}}],["findone",{"_index":1534,"title":{},"body":{"injectables/UsersService.html":{}}}],["findone(query",{"_index":1543,"title":{},"body":{"injectables/UsersService.html":{}}}],["findoneorfailoptions",{"_index":1545,"title":{},"body":{"injectables/UsersService.html":{}}}],["first",{"_index":748,"title":{},"body":{"injectables/CreateUserCommand.html":{},"classes/CreateUserDto.html":{},"classes/Migration20250730220636.html":{},"entities/User.html":{}}}],["first_name",{"_index":1081,"title":{},"body":{"classes/Migration20250730220636.html":{}}}],["firstname",{"_index":523,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CreateUserCommand.html":{},"classes/CreateUserDto.html":{},"classes/PasswordResetEmailConsumer.html":{},"entities/User.html":{},"classes/UserFactory.html":{}}}],["flags",{"_index":786,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["folder",{"_index":714,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["forbiddenexception",{"_index":603,"title":{},"body":{"classes/CatchAllFilter.html":{},"guards/RoleGuard.html":{},"miscellaneous/typealiases.html":{}}}],["forgotpassword",{"_index":279,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["forgotpassword(body",{"_index":283,"title":{},"body":{"controllers/AuthController.html":{}}}],["forgotpassword(email",{"_index":425,"title":{},"body":{"injectables/AuthService.html":{}}}],["forgotpassworddto",{"_index":284,"title":{"classes/ForgotPasswordDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/ForgotPasswordDto.html":{},"coverage.html":{}}}],["form",{"_index":697,"title":{},"body":{"injectables/CloudinaryService.html":{},"interfaces/IStrorageService.html":{},"injectables/S3Service.html":{},"dependencies.html":{}}}],["format",{"_index":778,"title":{},"body":{"injectables/CreateUserCommand.html":{},"injectables/S3Service.html":{},"dependencies.html":{}}}],["formaturl",{"_index":1315,"title":{},"body":{"injectables/S3Service.html":{}}}],["formaturl(signedurlobject",{"_index":1339,"title":{},"body":{"injectables/S3Service.html":{}}}],["forroutes",{"_index":152,"title":{},"body":{"modules/AppModule.html":{}}}],["found",{"_index":252,"title":{},"body":{"injectables/AppRedisService.html":{},"injectables/AuthService.html":{},"classes/CatchAllFilter.html":{},"injectables/JwtStrategy.html":{},"injectables/UsersService.html":{}}}],["framework",{"_index":1774,"title":{},"body":{"index.html":{}}}],["fromenv",{"_index":1308,"title":{},"body":{"injectables/S3Service.html":{}}}],["function",{"_index":1138,"title":{},"body":{"injectables/MorganMiddleware.html":{},"coverage.html":{}}}],["functions",{"_index":1760,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["generateslug",{"_index":1638,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["generateslug(text",{"_index":1768,"title":{},"body":{"miscellaneous/functions.html":{}}}],["generator",{"_index":1347,"title":{},"body":{"injectables/SchemaService.html":{}}}],["generator.updateschema",{"_index":1349,"title":{},"body":{"injectables/SchemaService.html":{}}}],["get('profile",{"_index":1512,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('profile')@httpcode(httpstatus.ok)@apioperation({summary",{"_index":1491,"title":{},"body":{"controllers/UsersController.html":{}}}],["get()@httpcode(httpstatus.ok)@public()@apioperation({summary",{"_index":31,"title":{},"body":{"controllers/AppController.html":{}}}],["get(key",{"_index":207,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["geterrorcode",{"_index":576,"title":{},"body":{"classes/CatchAllFilter.html":{}}}],["geterrorcode(exception",{"_index":591,"title":{},"body":{"classes/CatchAllFilter.html":{}}}],["geterrormessage",{"_index":577,"title":{},"body":{"classes/CatchAllFilter.html":{}}}],["geterrormessage(exception",{"_index":594,"title":{},"body":{"classes/CatchAllFilter.html":{}}}],["geterrorname",{"_index":578,"title":{},"body":{"classes/CatchAllFilter.html":{}}}],["geterrorname(exception",{"_index":596,"title":{},"body":{"classes/CatchAllFilter.html":{}}}],["gethello",{"_index":272,"title":{},"body":{"injectables/AppService.html":{}}}],["gethttpstatus",{"_index":579,"title":{},"body":{"classes/CatchAllFilter.html":{}}}],["gethttpstatus(exception",{"_index":598,"title":{},"body":{"classes/CatchAllFilter.html":{}}}],["getnodeautoinstrumentations",{"_index":1829,"title":{},"body":{"miscellaneous/variables.html":{}}}],["getprofile",{"_index":1479,"title":{},"body":{"controllers/UsersController.html":{}}}],["getprofile(@request",{"_index":1513,"title":{},"body":{"controllers/UsersController.html":{}}}],["getprofile(req",{"_index":1490,"title":{},"body":{"controllers/UsersController.html":{}}}],["getprofileresponsedto",{"_index":858,"title":{"classes/GetProfileResponseDto.html":{}},"body":{"classes/CreateUserResponseDto.html":{},"classes/GetProfileResponseDto.html":{},"coverage.html":{}}}],["getqueuetoken",{"_index":1199,"title":{},"body":{"modules/PaymentModule.html":{}}}],["getqueuetoken(template_queue_name",{"_index":1217,"title":{},"body":{"modules/PaymentModule.html":{}}}],["gets3connectiontoken",{"_index":1361,"title":{},"body":{"modules/StorageModule.html":{}}}],["getsubscribedentities",{"_index":1590,"title":{},"body":{"injectables/UsersSubscriber.html":{}}}],["getting",{"_index":251,"title":{"index.html":{}},"body":{"injectables/AppRedisService.html":{}}}],["global",{"_index":380,"title":{},"body":{"modules/AuthModule.html":{}}}],["golevelup/nestjs",{"_index":104,"title":{},"body":{"modules/AppModule.html":{},"modules/PaymentModule.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"guards/RoleGuard.html":{},"injectables/StripeService.html":{},"injectables/SuccessResponseInterceptor.html":{},"dependencies.html":{}}}],["graph",{"_index":1796,"title":{},"body":{"modules.html":{}}}],["guard",{"_index":1274,"title":{"guards/RoleGuard.html":{}},"body":{"coverage.html":{},"overview.html":{}}}],["guards",{"_index":1276,"title":{},"body":{"guards/RoleGuard.html":{}}}],["guards/jwt",{"_index":373,"title":{},"body":{"modules/AuthModule.html":{}}}],["guards/local",{"_index":314,"title":{},"body":{"controllers/AuthController.html":{}}}],["handledexception",{"_index":586,"title":{},"body":{"classes/CatchAllFilter.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["handlepaymentintentsucceeded",{"_index":1378,"title":{},"body":{"injectables/StripeService.html":{}}}],["handlepaymentintentsucceeded(evt",{"_index":1382,"title":{},"body":{"injectables/StripeService.html":{}}}],["handlerequest",{"_index":981,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["handlerequest(err",{"_index":988,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["hash",{"_index":1310,"title":{},"body":{"injectables/S3Service.html":{}}}],["hash.bind(null",{"_index":1336,"title":{},"body":{"injectables/S3Service.html":{}}}],["hashed",{"_index":1119,"title":{},"body":{"classes/Migration20250730220636.html":{},"entities/User.html":{}}}],["hashedpassword",{"_index":536,"title":{},"body":{"injectables/AuthService.html":{}}}],["hashpassword",{"_index":1591,"title":{},"body":{"injectables/UsersSubscriber.html":{}}}],["hashpassword(user",{"_index":1601,"title":{},"body":{"injectables/UsersSubscriber.html":{}}}],["head",{"_index":1753,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["hello",{"_index":274,"title":{},"body":{"injectables/AppService.html":{}}}],["helmet",{"_index":1716,"title":{},"body":{"dependencies.html":{}}}],["here",{"_index":1010,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["hexadecimallowercase",{"_index":1299,"title":{},"body":{"injectables/S3Service.html":{}}}],["hooks",{"_index":1693,"title":{},"body":{"dependencies.html":{}}}],["host",{"_index":587,"title":{},"body":{"classes/CatchAllFilter.html":{},"modules/EmailModule.html":{}}}],["host.switchtohttp",{"_index":612,"title":{},"body":{"classes/CatchAllFilter.html":{}}}],["http",{"_index":928,"title":{},"body":{"modules/HttpClientModule.html":{},"injectables/HttpClientService.html":{},"injectables/MorganMiddleware.html":{},"injectables/S3Service.html":{},"dependencies.html":{}}}],["http.agent",{"_index":940,"title":{},"body":{"injectables/HttpClientService.html":{}}}],["httpadapter",{"_index":609,"title":{},"body":{"classes/CatchAllFilter.html":{}}}],["httpadapter.getrequesturl(request",{"_index":617,"title":{},"body":{"classes/CatchAllFilter.html":{}}}],["httpadapter.reply(response",{"_index":633,"title":{},"body":{"classes/CatchAllFilter.html":{}}}],["httpadapterhost",{"_index":582,"title":{},"body":{"classes/CatchAllFilter.html":{}}}],["httpagent",{"_index":931,"title":{},"body":{"injectables/HttpClientService.html":{}}}],["httpclientmodule",{"_index":918,"title":{"modules/HttpClientModule.html":{}},"body":{"modules/HttpClientModule.html":{},"modules.html":{},"overview.html":{}}}],["httpclientservice",{"_index":922,"title":{"injectables/HttpClientService.html":{}},"body":{"modules/HttpClientModule.html":{},"injectables/HttpClientService.html":{},"coverage.html":{},"overview.html":{}}}],["httpclientservice.name",{"_index":952,"title":{},"body":{"injectables/HttpClientService.html":{}}}],["httpcode",{"_index":40,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["httpcode(httpstatus.ok",{"_index":48,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["httpexception",{"_index":602,"title":{},"body":{"classes/CatchAllFilter.html":{},"miscellaneous/typealiases.html":{}}}],["httpmethod",{"_index":1330,"title":{},"body":{"injectables/S3Service.html":{}}}],["httpmodule",{"_index":926,"title":{},"body":{"modules/HttpClientModule.html":{}}}],["httprequest",{"_index":1313,"title":{},"body":{"injectables/S3Service.html":{}}}],["httprequestmethodenum",{"_index":970,"title":{},"body":{"interfaces/IStrorageService.html":{},"injectables/S3Service.html":{},"miscellaneous/enumerations.html":{}}}],["httprequestmethodenum.get",{"_index":1331,"title":{},"body":{"injectables/S3Service.html":{}}}],["httpresponse",{"_index":1242,"title":{},"body":{"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/SuccessResponseInterceptor.html":{}}}],["httpresponse.statuscode",{"_index":1247,"title":{},"body":{"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/SuccessResponseInterceptor.html":{}}}],["https",{"_index":944,"title":{},"body":{"injectables/HttpClientService.html":{}}}],["https.agent",{"_index":943,"title":{},"body":{"injectables/HttpClientService.html":{}}}],["https://${this.s3bucket}.s3.${this.s3region}.amazonaws.com/${key",{"_index":1328,"title":{},"body":{"injectables/S3Service.html":{}}}],["httpsagent",{"_index":932,"title":{},"body":{"injectables/HttpClientService.html":{}}}],["httpservice",{"_index":935,"title":{},"body":{"injectables/HttpClientService.html":{}}}],["httpstatus",{"_index":18,"title":{},"body":{"interfaces/ApiResponse.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/CatchAllFilter.html":{},"controllers/UsersController.html":{}}}],["httpstatus.bad_gateway",{"_index":647,"title":{},"body":{"classes/CatchAllFilter.html":{}}}],["httpstatus.created",{"_index":1511,"title":{},"body":{"controllers/UsersController.html":{}}}],["httpstatus.not_found",{"_index":629,"title":{},"body":{"classes/CatchAllFilter.html":{}}}],["httpstatus.ok",{"_index":337,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["i.e",{"_index":1022,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["ianatimezonedatabaseenum",{"_index":1747,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["id",{"_index":510,"title":{},"body":{"injectables/AuthService.html":{},"classes/BaseEntity.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/Migration20250730220636.html":{},"injectables/StripeService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["id=\"${intent.id",{"_index":1410,"title":{},"body":{"injectables/StripeService.html":{}}}],["identifier",{"_index":1621,"title":{},"body":{"coverage.html":{}}}],["ignoreexpiration",{"_index":1042,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["illinois",{"_index":843,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["illinois'})@isstring()@isoptional",{"_index":829,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["implementation",{"_index":1025,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["implemented",{"_index":1029,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["implements",{"_index":137,"title":{},"body":{"modules/AppModule.html":{},"classes/CatchAllFilter.html":{},"injectables/CloudinaryService.html":{},"injectables/MorganMiddleware.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/RequestContextMiddleware.html":{},"guards/RoleGuard.html":{},"injectables/S3Service.html":{},"injectables/SchemaService.html":{},"injectables/StripeService.html":{},"injectables/SuccessResponseInterceptor.html":{},"injectables/UsersSubscriber.html":{}}}],["import",{"_index":19,"title":{},"body":{"interfaces/ApiResponse.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AppRedisModule.html":{},"injectables/AppRedisService.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/AuthResponseDto.html":{},"injectables/AuthService.html":{},"classes/BaseEntity.html":{},"classes/CatchAllFilter.html":{},"classes/ChangePasswordDto.html":{},"injectables/CloudinaryService.html":{},"injectables/CreateUserCommand.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserResponseDto.html":{},"classes/DatabaseSeeder.html":{},"modules/EmailModule.html":{},"classes/EmailService.html":{},"classes/ForgotPasswordDto.html":{},"classes/GetProfileResponseDto.html":{},"modules/HttpClientModule.html":{},"injectables/HttpClientService.html":{},"interfaces/IPaymentService.html":{},"interfaces/IStrorageService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"classes/Migration20250730220636.html":{},"injectables/MorganMiddleware.html":{},"classes/PasswordResetEmailConsumer.html":{},"modules/PaymentModule.html":{},"classes/RefreshTokenDto.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/RequestContextMiddleware.html":{},"classes/ResetPasswordDto.html":{},"guards/RoleGuard.html":{},"injectables/S3Service.html":{},"injectables/SchemaService.html":{},"modules/StorageModule.html":{},"injectables/StripeService.html":{},"injectables/SuccessResponseInterceptor.html":{},"classes/UpdateProfileDto.html":{},"entities/User.html":{},"classes/UserFactory.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/UsersSubscriber.html":{}}}],["imports",{"_index":72,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRedisModule.html":{},"modules/AuthModule.html":{},"modules/EmailModule.html":{},"modules/HttpClientModule.html":{},"modules/PaymentModule.html":{},"modules/StorageModule.html":{},"modules/UsersModule.html":{}}}],["include",{"_index":662,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/ResetPasswordDto.html":{}}}],["increment",{"_index":181,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["increment(key",{"_index":209,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["incrresult",{"_index":259,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["incrresult[1",{"_index":261,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["index",{"_index":8,"title":{"index.html":{}},"body":{"interfaces/ApiResponse.html":{},"controllers/AppController.html":{},"injectables/AppRedisService.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthResponseDto.html":{},"injectables/AuthService.html":{},"classes/BaseEntity.html":{},"classes/CatchAllFilter.html":{},"classes/ChangePasswordDto.html":{},"injectables/CloudinaryService.html":{},"injectables/CreateUserCommand.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserResponseDto.html":{},"classes/DatabaseSeeder.html":{},"classes/EmailService.html":{},"interfaces/ErrorResponse.html":{},"classes/ForgotPasswordDto.html":{},"classes/GetProfileResponseDto.html":{},"injectables/HttpClientService.html":{},"interfaces/IPaymentService.html":{},"interfaces/IStrorageService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"classes/Migration20250730220636.html":{},"injectables/MorganMiddleware.html":{},"classes/PasswordResetEmailConsumer.html":{},"classes/RefreshTokenDto.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/RequestContextMiddleware.html":{},"classes/ResetPasswordDto.html":{},"guards/RoleGuard.html":{},"injectables/S3Service.html":{},"injectables/SchemaService.html":{},"injectables/StripeService.html":{},"injectables/SuccessResponseInterceptor.html":{},"entities/User.html":{},"classes/UserFactory.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/UsersSubscriber.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["indicating",{"_index":406,"title":{},"body":{"classes/AuthResponseDto.html":{},"classes/CreateUserResponseDto.html":{},"classes/GetProfileResponseDto.html":{}}}],["inestapplication",{"_index":1771,"title":{},"body":{"miscellaneous/functions.html":{}}}],["info",{"_index":3,"title":{},"body":{"interfaces/ApiResponse.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AppRedisModule.html":{},"injectables/AppRedisService.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/AuthResponseDto.html":{},"injectables/AuthService.html":{},"classes/BaseEntity.html":{},"classes/CatchAllFilter.html":{},"classes/ChangePasswordDto.html":{},"injectables/CloudinaryService.html":{},"injectables/CreateUserCommand.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserResponseDto.html":{},"classes/DatabaseSeeder.html":{},"modules/EmailModule.html":{},"classes/EmailService.html":{},"interfaces/ErrorResponse.html":{},"classes/ForgotPasswordDto.html":{},"classes/GetProfileResponseDto.html":{},"modules/HttpClientModule.html":{},"injectables/HttpClientService.html":{},"interfaces/IPaymentService.html":{},"interfaces/IStrorageService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"classes/Migration20250730220636.html":{},"injectables/MorganMiddleware.html":{},"classes/PasswordResetEmailConsumer.html":{},"modules/PaymentModule.html":{},"classes/RefreshTokenDto.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/RequestContextMiddleware.html":{},"classes/ResetPasswordDto.html":{},"guards/RoleGuard.html":{},"injectables/S3Service.html":{},"injectables/SchemaService.html":{},"modules/StorageModule.html":{},"injectables/StripeService.html":{},"injectables/SuccessResponseInterceptor.html":{},"classes/UpdateProfileDto.html":{},"entities/User.html":{},"classes/UserFactory.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/UsersSubscriber.html":{}}}],["info?.message",{"_index":1000,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["info?.name",{"_index":999,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["initialized",{"_index":1833,"title":{},"body":{"miscellaneous/variables.html":{}}}],["inject",{"_index":129,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRedisModule.html":{},"injectables/AppRedisService.html":{},"modules/AuthModule.html":{},"classes/CatchAllFilter.html":{},"injectables/CloudinaryService.html":{},"modules/EmailModule.html":{},"classes/EmailService.html":{},"injectables/HttpClientService.html":{},"injectables/MorganMiddleware.html":{},"classes/PasswordResetEmailConsumer.html":{},"modules/PaymentModule.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/S3Service.html":{},"injectables/SchemaService.html":{},"modules/StorageModule.html":{},"injectables/StripeService.html":{},"injectables/SuccessResponseInterceptor.html":{}}}],["inject(logger",{"_index":231,"title":{},"body":{"injectables/AppRedisService.html":{},"classes/CatchAllFilter.html":{},"injectables/CloudinaryService.html":{},"classes/EmailService.html":{},"injectables/HttpClientService.html":{},"classes/PasswordResetEmailConsumer.html":{},"injectables/S3Service.html":{},"injectables/SchemaService.html":{},"injectables/StripeService.html":{}}}],["inject(mailerservice",{"_index":907,"title":{},"body":{"classes/EmailService.html":{}}}],["injectable",{"_index":172,"title":{"injectables/AppRedisService.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/CloudinaryService.html":{},"injectables/CreateUserCommand.html":{},"injectables/HttpClientService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/MorganMiddleware.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/RequestContextMiddleware.html":{},"injectables/S3Service.html":{},"injectables/SchemaService.html":{},"injectables/StripeService.html":{},"injectables/SuccessResponseInterceptor.html":{},"injectables/UsersService.html":{},"injectables/UsersSubscriber.html":{}},"body":{"injectables/AppRedisService.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/CloudinaryService.html":{},"injectables/CreateUserCommand.html":{},"injectables/HttpClientService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/MorganMiddleware.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/RequestContextMiddleware.html":{},"guards/RoleGuard.html":{},"injectables/S3Service.html":{},"injectables/SchemaService.html":{},"injectables/StripeService.html":{},"injectables/SuccessResponseInterceptor.html":{},"injectables/UsersService.html":{},"injectables/UsersSubscriber.html":{},"coverage.html":{}}}],["injectables",{"_index":173,"title":{},"body":{"injectables/AppRedisService.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/CloudinaryService.html":{},"injectables/CreateUserCommand.html":{},"injectables/HttpClientService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/MorganMiddleware.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/RequestContextMiddleware.html":{},"injectables/S3Service.html":{},"injectables/SchemaService.html":{},"injectables/StripeService.html":{},"injectables/SuccessResponseInterceptor.html":{},"injectables/UsersService.html":{},"injectables/UsersSubscriber.html":{},"overview.html":{}}}],["injectqueue",{"_index":450,"title":{},"body":{"injectables/AuthService.html":{},"injectables/StripeService.html":{}}}],["injectqueue(password_reset_email_queue_name",{"_index":456,"title":{},"body":{"injectables/AuthService.html":{}}}],["injectqueue(template_queue_name",{"_index":1390,"title":{},"body":{"injectables/StripeService.html":{}}}],["injectrepository",{"_index":1553,"title":{},"body":{"injectables/UsersService.html":{}}}],["injectrepository(user",{"_index":1554,"title":{},"body":{"injectables/UsersService.html":{}}}],["injects3",{"_index":1298,"title":{},"body":{"injectables/S3Service.html":{}}}],["injectstripeclient",{"_index":1387,"title":{},"body":{"injectables/StripeService.html":{}}}],["inputs",{"_index":761,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["installcompile",{"_index":1780,"title":{},"body":{"index.html":{}}}],["instanceof",{"_index":502,"title":{},"body":{"injectables/AuthService.html":{},"classes/CatchAllFilter.html":{}}}],["instrumentations",{"_index":1690,"title":{},"body":{"dependencies.html":{},"miscellaneous/variables.html":{}}}],["intent",{"_index":1398,"title":{},"body":{"injectables/StripeService.html":{}}}],["intent.ts",{"_index":1659,"title":{},"body":{"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["intercept",{"_index":1225,"title":{},"body":{"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/SuccessResponseInterceptor.html":{}}}],["intercept(context",{"_index":1227,"title":{},"body":{"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/SuccessResponseInterceptor.html":{}}}],["interface",{"_index":0,"title":{"interfaces/ApiResponse.html":{},"interfaces/ErrorResponse.html":{},"interfaces/IPaymentService.html":{},"interfaces/IStrorageService.html":{}},"body":{"interfaces/ApiResponse.html":{},"interfaces/ErrorResponse.html":{},"interfaces/IPaymentService.html":{},"interfaces/IStrorageService.html":{},"coverage.html":{}}}],["interfaces",{"_index":2,"title":{},"body":{"interfaces/ApiResponse.html":{},"interfaces/ErrorResponse.html":{},"interfaces/IPaymentService.html":{},"interfaces/IStrorageService.html":{},"overview.html":{}}}],["interfaces/error",{"_index":608,"title":{},"body":{"classes/CatchAllFilter.html":{}}}],["interfaces/payment.interface",{"_index":1389,"title":{},"body":{"injectables/StripeService.html":{}}}],["interfaces/storage.interface",{"_index":694,"title":{},"body":{"injectables/CloudinaryService.html":{},"injectables/S3Service.html":{}}}],["ioredis",{"_index":230,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["ipaymentservice",{"_index":954,"title":{"interfaces/IPaymentService.html":{}},"body":{"interfaces/IPaymentService.html":{},"injectables/StripeService.html":{},"coverage.html":{}}}],["is_public_key",{"_index":992,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["isblacklisted",{"_index":493,"title":{},"body":{"injectables/AuthService.html":{}}}],["isboolean",{"_index":831,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isboolean()@isoptional",{"_index":803,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isemail",{"_index":832,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/ForgotPasswordDto.html":{},"classes/LoginDto.html":{}}}],["isenum",{"_index":833,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isenum(userroleenum",{"_index":849,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isglobal",{"_index":122,"title":{},"body":{"modules/AppModule.html":{}}}],["isjwt",{"_index":1272,"title":{},"body":{"classes/ResetPasswordDto.html":{}}}],["isnotempty",{"_index":671,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/RefreshTokenDto.html":{},"classes/ResetPasswordDto.html":{}}}],["iso",{"_index":1116,"title":{},"body":{"classes/Migration20250730220636.html":{},"entities/User.html":{}}}],["isoptional",{"_index":834,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["ispasswordmodified",{"_index":1592,"title":{},"body":{"injectables/UsersSubscriber.html":{}}}],["ispasswordmodified(user",{"_index":1603,"title":{},"body":{"injectables/UsersSubscriber.html":{}}}],["ispublic",{"_index":993,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"miscellaneous/variables.html":{}}}],["isroutingerror",{"_index":622,"title":{},"body":{"classes/CatchAllFilter.html":{}}}],["isstring",{"_index":672,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/RefreshTokenDto.html":{},"classes/ResetPasswordDto.html":{}}}],["istrorageservice",{"_index":693,"title":{"interfaces/IStrorageService.html":{}},"body":{"injectables/CloudinaryService.html":{},"interfaces/IStrorageService.html":{},"injectables/S3Service.html":{},"coverage.html":{}}}],["it's",{"_index":1034,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["items",{"_index":1452,"title":{},"body":{"entities/User.html":{}}}],["jaeger",{"_index":1701,"title":{},"body":{"dependencies.html":{}}}],["jaegerpropagator",{"_index":1825,"title":{},"body":{"miscellaneous/variables.html":{}}}],["job",{"_index":1166,"title":{},"body":{"classes/PasswordResetEmailConsumer.html":{}}}],["job.id",{"_index":1178,"title":{},"body":{"classes/PasswordResetEmailConsumer.html":{}}}],["john",{"_index":839,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["john'})@isstring()@isnotempty",{"_index":813,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["join",{"_index":881,"title":{},"body":{"modules/EmailModule.html":{}}}],["join(process.cwd",{"_index":895,"title":{},"body":{"modules/EmailModule.html":{}}}],["js",{"_index":34,"title":{},"body":{"controllers/AppController.html":{}}}],["js/faker",{"_index":1463,"title":{},"body":{"classes/UserFactory.html":{}}}],["json.parse(cached",{"_index":1574,"title":{},"body":{"injectables/UsersService.html":{}}}],["json.stringify(serializable",{"_index":1581,"title":{},"body":{"injectables/UsersService.html":{}}}],["json.stringify(user",{"_index":1587,"title":{},"body":{"injectables/UsersService.html":{}}}],["jsonwebtokenerror",{"_index":447,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwt",{"_index":504,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["jwtauthguard",{"_index":372,"title":{"injectables/JwtAuthGuard.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["jwtexpiresin",{"_index":412,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtfromrequest",{"_index":1040,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtmodule",{"_index":366,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.registerasync",{"_index":379,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtnotbefore",{"_index":413,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtrefreshexpriresin",{"_index":414,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtrefreshsecret",{"_index":415,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtservice",{"_index":421,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtstrategy",{"_index":359,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["keepalive",{"_index":941,"title":{},"body":{"injectables/HttpClientService.html":{}}}],["key",{"_index":190,"title":{},"body":{"injectables/AppRedisService.html":{},"interfaces/IStrorageService.html":{},"classes/Migration20250730220636.html":{},"injectables/S3Service.html":{}}}],["key=${key",{"_index":1329,"title":{},"body":{"injectables/S3Service.html":{}}}],["keys",{"_index":197,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["keys.length",{"_index":269,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["l",{"_index":751,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["lagos",{"_index":1756,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["last",{"_index":561,"title":{},"body":{"classes/BaseEntity.html":{},"injectables/CreateUserCommand.html":{},"classes/CreateUserDto.html":{},"classes/Migration20250730220636.html":{},"entities/User.html":{}}}],["last_logged_in",{"_index":1094,"title":{},"body":{"classes/Migration20250730220636.html":{}}}],["last_name",{"_index":1083,"title":{},"body":{"classes/Migration20250730220636.html":{}}}],["lastloggedin",{"_index":1061,"title":{},"body":{"injectables/LocalStrategy.html":{},"entities/User.html":{}}}],["lastname",{"_index":773,"title":{},"body":{"injectables/CreateUserCommand.html":{},"classes/CreateUserDto.html":{},"entities/User.html":{},"classes/UserFactory.html":{}}}],["lastvaluefrom",{"_index":945,"title":{},"body":{"injectables/HttpClientService.html":{}}}],["lastvaluefrom(this.httpservice.request",{"_index":953,"title":{},"body":{"injectables/HttpClientService.html":{}}}],["legend",{"_index":55,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRedisModule.html":{},"modules/AuthModule.html":{},"modules/EmailModule.html":{},"modules/HttpClientModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["length",{"_index":1148,"title":{},"body":{"injectables/MorganMiddleware.html":{},"entities/User.html":{}}}],["level",{"_index":1033,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["liaoliaots/nestjs",{"_index":163,"title":{},"body":{"modules/AppRedisModule.html":{},"injectables/AppRedisService.html":{},"dependencies.html":{}}}],["license",{"_index":1803,"title":{},"body":{"properties.html":{}}}],["limit",{"_index":1769,"title":{},"body":{"miscellaneous/functions.html":{}}}],["line",{"_index":481,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["literal",{"_index":39,"title":{},"body":{"controllers/AppController.html":{},"miscellaneous/typealiases.html":{}}}],["live",{"_index":221,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["load",{"_index":124,"title":{},"body":{"modules/AppModule.html":{}}}],["local",{"_index":1053,"title":{},"body":{"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["localauthguard",{"_index":313,"title":{"injectables/LocalAuthGuard.html":{}},"body":{"controllers/AuthController.html":{},"injectables/LocalAuthGuard.html":{},"coverage.html":{}}}],["localstrategy",{"_index":360,"title":{"injectables/LocalStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/LocalStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["logged",{"_index":1023,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["logger",{"_index":81,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRedisModule.html":{},"injectables/AppRedisService.html":{},"classes/CatchAllFilter.html":{},"injectables/CloudinaryService.html":{},"modules/EmailModule.html":{},"classes/EmailService.html":{},"modules/HttpClientModule.html":{},"injectables/HttpClientService.html":{},"injectables/MorganMiddleware.html":{},"classes/PasswordResetEmailConsumer.html":{},"modules/PaymentModule.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/S3Service.html":{},"injectables/SchemaService.html":{},"modules/StorageModule.html":{},"injectables/StripeService.html":{},"injectables/SuccessResponseInterceptor.html":{}}}],["loggercontext",{"_index":575,"title":{},"body":{"classes/CatchAllFilter.html":{}}}],["loggerservice",{"_index":185,"title":{},"body":{"injectables/AppRedisService.html":{},"classes/CatchAllFilter.html":{},"injectables/CloudinaryService.html":{},"classes/EmailService.html":{},"injectables/HttpClientService.html":{},"injectables/MorganMiddleware.html":{},"classes/PasswordResetEmailConsumer.html":{},"modules/PaymentModule.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/S3Service.html":{},"injectables/SchemaService.html":{},"modules/StorageModule.html":{},"injectables/StripeService.html":{},"injectables/SuccessResponseInterceptor.html":{}}}],["loggingconfiguration",{"_index":1210,"title":{},"body":{"modules/PaymentModule.html":{}}}],["logic",{"_index":1028,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["login",{"_index":280,"title":{},"body":{"controllers/AuthController.html":{},"classes/AuthResponseDto.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/Migration20250730220636.html":{},"classes/RefreshTokenDto.html":{},"entities/User.html":{}}}],["login'})@apibody({type",{"_index":295,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(@request",{"_index":332,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(req",{"_index":292,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(user",{"_index":427,"title":{},"body":{"injectables/AuthService.html":{}}}],["logindto",{"_index":296,"title":{"classes/LoginDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/LoginDto.html":{},"coverage.html":{}}}],["logmatchingeventhandlers",{"_index":1211,"title":{},"body":{"modules/PaymentModule.html":{}}}],["long",{"_index":661,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/ResetPasswordDto.html":{}}}],["lowercase",{"_index":664,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/ResetPasswordDto.html":{}}}],["mailermodule",{"_index":876,"title":{},"body":{"modules/EmailModule.html":{}}}],["mailermodule.forrootasync",{"_index":882,"title":{},"body":{"modules/EmailModule.html":{}}}],["mailerservice",{"_index":901,"title":{},"body":{"classes/EmailService.html":{}}}],["main",{"_index":799,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["makehttprequest",{"_index":933,"title":{},"body":{"injectables/HttpClientService.html":{}}}],["makehttprequest(url",{"_index":937,"title":{},"body":{"injectables/HttpClientService.html":{}}}],["making",{"_index":951,"title":{},"body":{"injectables/HttpClientService.html":{}}}],["malformed",{"_index":505,"title":{},"body":{"injectables/AuthService.html":{}}}],["map",{"_index":1233,"title":{},"body":{"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/SuccessResponseInterceptor.html":{}}}],["map((response",{"_index":1241,"title":{},"body":{"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/SuccessResponseInterceptor.html":{}}}],["match",{"_index":528,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/UsersService.html":{}}}],["matches",{"_index":673,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/ResetPasswordDto.html":{}}}],["matching",{"_index":23,"title":{},"body":{"interfaces/ApiResponse.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AppRedisModule.html":{},"injectables/AppRedisService.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/AuthResponseDto.html":{},"injectables/AuthService.html":{},"classes/BaseEntity.html":{},"classes/CatchAllFilter.html":{},"classes/ChangePasswordDto.html":{},"injectables/CloudinaryService.html":{},"injectables/CreateUserCommand.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserResponseDto.html":{},"classes/DatabaseSeeder.html":{},"modules/EmailModule.html":{},"classes/EmailService.html":{},"interfaces/ErrorResponse.html":{},"classes/ForgotPasswordDto.html":{},"classes/GetProfileResponseDto.html":{},"modules/HttpClientModule.html":{},"injectables/HttpClientService.html":{},"interfaces/IPaymentService.html":{},"interfaces/IStrorageService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"classes/Migration20250730220636.html":{},"injectables/MorganMiddleware.html":{},"classes/PasswordResetEmailConsumer.html":{},"modules/PaymentModule.html":{},"classes/RefreshTokenDto.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/RequestContextMiddleware.html":{},"classes/ResetPasswordDto.html":{},"guards/RoleGuard.html":{},"injectables/S3Service.html":{},"injectables/SchemaService.html":{},"modules/StorageModule.html":{},"injectables/StripeService.html":{},"injectables/SuccessResponseInterceptor.html":{},"classes/UpdateProfileDto.html":{},"entities/User.html":{},"classes/UserFactory.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/UsersSubscriber.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["memorystoredfile",{"_index":682,"title":{},"body":{"injectables/CloudinaryService.html":{},"interfaces/IStrorageService.html":{},"injectables/S3Service.html":{}}}],["message",{"_index":12,"title":{},"body":{"interfaces/ApiResponse.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/AuthResponseDto.html":{},"classes/CatchAllFilter.html":{},"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserResponseDto.html":{},"interfaces/ErrorResponse.html":{},"classes/GetProfileResponseDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/MorganMiddleware.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"classes/ResetPasswordDto.html":{},"injectables/SuccessResponseInterceptor.html":{},"controllers/UsersController.html":{}}}],["message.includes('cannot",{"_index":625,"title":{},"body":{"classes/CatchAllFilter.html":{}}}],["message.startswith('cannot",{"_index":624,"title":{},"body":{"classes/CatchAllFilter.html":{}}}],["metadata",{"_index":1736,"title":{},"body":{"dependencies.html":{}}}],["method",{"_index":141,"title":{},"body":{"modules/AppModule.html":{},"interfaces/IStrorageService.html":{},"injectables/MorganMiddleware.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/S3Service.html":{},"injectables/SuccessResponseInterceptor.html":{}}}],["methods",{"_index":28,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppRedisService.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CatchAllFilter.html":{},"injectables/CloudinaryService.html":{},"injectables/CreateUserCommand.html":{},"classes/DatabaseSeeder.html":{},"classes/EmailService.html":{},"injectables/HttpClientService.html":{},"interfaces/IPaymentService.html":{},"interfaces/IStrorageService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/Migration20250730220636.html":{},"injectables/MorganMiddleware.html":{},"classes/PasswordResetEmailConsumer.html":{},"modules/PaymentModule.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/RequestContextMiddleware.html":{},"guards/RoleGuard.html":{},"injectables/S3Service.html":{},"injectables/SchemaService.html":{},"modules/StorageModule.html":{},"injectables/StripeService.html":{},"injectables/SuccessResponseInterceptor.html":{},"classes/UserFactory.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/UsersSubscriber.html":{}}}],["metricreader",{"_index":1819,"title":{},"body":{"miscellaneous/variables.html":{}}}],["middlewareconsumer",{"_index":75,"title":{},"body":{"modules/AppModule.html":{}}}],["migration",{"_index":1068,"title":{},"body":{"classes/Migration20250730220636.html":{}}}],["migration20250730220636",{"_index":1066,"title":{"classes/Migration20250730220636.html":{}},"body":{"classes/Migration20250730220636.html":{},"coverage.html":{}}}],["mikro",{"_index":96,"title":{},"body":{"modules/AppModule.html":{},"classes/BaseEntity.html":{},"injectables/CreateUserCommand.html":{},"classes/DatabaseSeeder.html":{},"classes/Migration20250730220636.html":{},"injectables/RequestContextMiddleware.html":{},"injectables/SchemaService.html":{},"entities/User.html":{},"classes/UserFactory.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/UsersSubscriber.html":{},"dependencies.html":{}}}],["mikroorm",{"_index":1258,"title":{},"body":{"injectables/RequestContextMiddleware.html":{},"injectables/SchemaService.html":{}}}],["mikroormconfig",{"_index":118,"title":{},"body":{"modules/AppModule.html":{}}}],["mikroormmodule",{"_index":95,"title":{},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{}}}],["mikroormmodule.forfeature([user",{"_index":1530,"title":{},"body":{"modules/UsersModule.html":{}}}],["mikroormmodule.forrootasync",{"_index":126,"title":{},"body":{"modules/AppModule.html":{}}}],["minimum",{"_index":669,"title":{},"body":{"classes/ChangePasswordDto.html":{}}}],["minlength",{"_index":674,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/ResetPasswordDto.html":{}}}],["minlength(10",{"_index":667,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/ResetPasswordDto.html":{}}}],["miscellaneous",{"_index":1744,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mode",{"_index":1784,"title":{},"body":{"index.html":{}}}],["model",{"_index":1457,"title":{},"body":{"classes/UserFactory.html":{}}}],["module",{"_index":51,"title":{"modules/AppModule.html":{},"modules/AppRedisModule.html":{},"modules/AuthModule.html":{},"modules/EmailModule.html":{},"modules/HttpClientModule.html":{},"modules/PaymentModule.html":{},"modules/StorageModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AppRedisModule.html":{},"modules/AuthModule.html":{},"modules/EmailModule.html":{},"modules/HttpClientModule.html":{},"modules/PaymentModule.html":{},"modules/StorageModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["modules",{"_index":53,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AppRedisModule.html":{},"modules/AuthModule.html":{},"modules/EmailModule.html":{},"modules/HttpClientModule.html":{},"modules/PaymentModule.html":{},"modules/StorageModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["modules/auth/auth.module",{"_index":92,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/auth/decorators/public.decorator",{"_index":42,"title":{},"body":{"controllers/AppController.html":{},"modules/PaymentModule.html":{}}}],["modules/mailer",{"_index":877,"title":{},"body":{"modules/EmailModule.html":{},"classes/EmailService.html":{},"dependencies.html":{}}}],["modules/mailer/dist/adapters/pug.adapter",{"_index":880,"title":{},"body":{"modules/EmailModule.html":{}}}],["modules/users/factories/user.factory",{"_index":868,"title":{},"body":{"classes/DatabaseSeeder.html":{}}}],["modules/users/users.module",{"_index":91,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/users/users.service",{"_index":765,"title":{},"body":{"injectables/CreateUserCommand.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["moment",{"_index":1718,"title":{},"body":{"dependencies.html":{}}}],["morgan",{"_index":1140,"title":{},"body":{"injectables/MorganMiddleware.html":{},"dependencies.html":{}}}],["morganmiddleware",{"_index":93,"title":{"injectables/MorganMiddleware.html":{}},"body":{"modules/AppModule.html":{},"injectables/MorganMiddleware.html":{},"coverage.html":{}}}],["morganmiddleware.name",{"_index":1158,"title":{},"body":{"injectables/MorganMiddleware.html":{}}}],["ms",{"_index":455,"title":{},"body":{"injectables/AuthService.html":{},"injectables/MorganMiddleware.html":{},"dependencies.html":{}}}],["ms('1m",{"_index":463,"title":{},"body":{"injectables/AuthService.html":{}}}],["ms('1m')}m",{"_index":464,"title":{},"body":{"injectables/AuthService.html":{}}}],["ms('1s",{"_index":515,"title":{},"body":{"injectables/AuthService.html":{}}}],["ms(this.jwtexpiresin",{"_index":462,"title":{},"body":{"injectables/AuthService.html":{}}}],["ms(this.jwtrefreshexpriresin",{"_index":514,"title":{},"body":{"injectables/AuthService.html":{}}}],["multiple",{"_index":203,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["name",{"_index":78,"title":{},"body":{"modules/AppModule.html":{},"injectables/AppRedisService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BaseEntity.html":{},"classes/CatchAllFilter.html":{},"injectables/CloudinaryService.html":{},"injectables/CreateUserCommand.html":{},"classes/CreateUserDto.html":{},"classes/DatabaseSeeder.html":{},"classes/EmailService.html":{},"interfaces/ErrorResponse.html":{},"injectables/HttpClientService.html":{},"interfaces/IPaymentService.html":{},"interfaces/IStrorageService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/Migration20250730220636.html":{},"injectables/MorganMiddleware.html":{},"classes/PasswordResetEmailConsumer.html":{},"modules/PaymentModule.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/RequestContextMiddleware.html":{},"guards/RoleGuard.html":{},"injectables/S3Service.html":{},"injectables/SchemaService.html":{},"injectables/StripeService.html":{},"injectables/SuccessResponseInterceptor.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/UsersSubscriber.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["namespace",{"_index":170,"title":{},"body":{"modules/AppRedisModule.html":{}}}],["nanoid",{"_index":730,"title":{},"body":{"injectables/CreateUserCommand.html":{},"injectables/S3Service.html":{},"dependencies.html":{}}}],["necessary",{"_index":1284,"title":{},"body":{"guards/RoleGuard.html":{}}}],["needs",{"_index":1030,"title":{},"body":{"injectables/JwtStrategy.html":{},"classes/Migration20250730220636.html":{},"entities/User.html":{}}}],["nest",{"_index":33,"title":{},"body":{"controllers/AppController.html":{},"injectables/CreateUserCommand.html":{},"dependencies.html":{},"index.html":{}}}],["nestinterceptor",{"_index":1232,"title":{},"body":{"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/SuccessResponseInterceptor.html":{}}}],["nestjs",{"_index":696,"title":{},"body":{"injectables/CloudinaryService.html":{},"modules/EmailModule.html":{},"classes/EmailService.html":{},"interfaces/IStrorageService.html":{},"injectables/S3Service.html":{},"modules/StorageModule.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["nestjs/axios",{"_index":927,"title":{},"body":{"modules/HttpClientModule.html":{},"injectables/HttpClientService.html":{},"dependencies.html":{}}}],["nestjs/bullmq",{"_index":107,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/PasswordResetEmailConsumer.html":{},"modules/PaymentModule.html":{},"injectables/StripeService.html":{},"dependencies.html":{}}}],["nestjs/common",{"_index":20,"title":{},"body":{"interfaces/ApiResponse.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AppRedisModule.html":{},"injectables/AppRedisService.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CatchAllFilter.html":{},"injectables/CloudinaryService.html":{},"injectables/CreateUserCommand.html":{},"modules/EmailModule.html":{},"classes/EmailService.html":{},"modules/HttpClientModule.html":{},"injectables/HttpClientService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/MorganMiddleware.html":{},"classes/PasswordResetEmailConsumer.html":{},"modules/PaymentModule.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/RequestContextMiddleware.html":{},"guards/RoleGuard.html":{},"injectables/S3Service.html":{},"injectables/SchemaService.html":{},"modules/StorageModule.html":{},"injectables/StripeService.html":{},"injectables/SuccessResponseInterceptor.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/UsersSubscriber.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":90,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRedisModule.html":{},"injectables/AppRedisService.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CloudinaryService.html":{},"modules/EmailModule.html":{},"injectables/JwtStrategy.html":{},"modules/PaymentModule.html":{},"injectables/S3Service.html":{},"injectables/SchemaService.html":{},"modules/StorageModule.html":{},"injectables/StripeService.html":{},"injectables/UsersSubscriber.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":363,"title":{},"body":{"modules/AuthModule.html":{},"classes/CatchAllFilter.html":{},"injectables/JwtAuthGuard.html":{},"guards/RoleGuard.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":367,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["nestjs/mapped",{"_index":1685,"title":{},"body":{"dependencies.html":{}}}],["nestjs/passport",{"_index":369,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":1687,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":45,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/AuthResponseDto.html":{},"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserResponseDto.html":{},"classes/ForgotPasswordDto.html":{},"classes/GetProfileResponseDto.html":{},"classes/LoginDto.html":{},"classes/RefreshTokenDto.html":{},"classes/ResetPasswordDto.html":{},"classes/UpdateProfileDto.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["nestmiddleware",{"_index":1139,"title":{},"body":{"injectables/MorganMiddleware.html":{},"injectables/RequestContextMiddleware.html":{}}}],["nestmodule",{"_index":82,"title":{},"body":{"modules/AppModule.html":{}}}],["new",{"_index":474,"title":{},"body":{"injectables/AuthService.html":{},"classes/BaseEntity.html":{},"classes/CatchAllFilter.html":{},"classes/ChangePasswordDto.html":{},"injectables/CloudinaryService.html":{},"injectables/CreateUserCommand.html":{},"classes/DatabaseSeeder.html":{},"modules/EmailModule.html":{},"injectables/HttpClientService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"modules/PaymentModule.html":{},"classes/ResetPasswordDto.html":{},"guards/RoleGuard.html":{},"injectables/S3Service.html":{},"modules/StorageModule.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["newly",{"_index":854,"title":{},"body":{"classes/CreateUserResponseDto.html":{},"classes/GetProfileResponseDto.html":{}}}],["newpassword",{"_index":352,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ChangePasswordDto.html":{},"classes/ResetPasswordDto.html":{},"injectables/UsersService.html":{}}}],["newpayload",{"_index":512,"title":{},"body":{"injectables/AuthService.html":{}}}],["newuser",{"_index":1509,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["next",{"_index":480,"title":{},"body":{"injectables/AuthService.html":{},"injectables/MorganMiddleware.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/RequestContextMiddleware.html":{},"injectables/SuccessResponseInterceptor.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["next.handle",{"_index":1239,"title":{},"body":{"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/SuccessResponseInterceptor.html":{}}}],["next.handle().pipe",{"_index":1240,"title":{},"body":{"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/SuccessResponseInterceptor.html":{}}}],["nextfunction",{"_index":1261,"title":{},"body":{"injectables/RequestContextMiddleware.html":{}}}],["node",{"_index":1312,"title":{},"body":{"injectables/S3Service.html":{},"dependencies.html":{}}}],["nodeenv",{"_index":1345,"title":{},"body":{"injectables/SchemaService.html":{}}}],["nodemailer",{"_index":1729,"title":{},"body":{"dependencies.html":{}}}],["nodesdk",{"_index":1818,"title":{},"body":{"miscellaneous/variables.html":{}}}],["normalizefields",{"_index":1453,"title":{},"body":{"entities/User.html":{},"injectables/UsersSubscriber.html":{}}}],["normalizefields(user",{"_index":1605,"title":{},"body":{"injectables/UsersSubscriber.html":{}}}],["normalizeuserfields",{"_index":1449,"title":{},"body":{"entities/User.html":{},"injectables/UsersSubscriber.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["normalizeuserfields(this",{"_index":1454,"title":{},"body":{"entities/User.html":{}}}],["normalizeuserfields(user",{"_index":1613,"title":{},"body":{"injectables/UsersSubscriber.html":{},"miscellaneous/functions.html":{}}}],["notbefore",{"_index":490,"title":{},"body":{"injectables/AuthService.html":{}}}],["notbeforeerror",{"_index":448,"title":{},"body":{"injectables/AuthService.html":{}}}],["note",{"_index":1008,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["notfoundexception",{"_index":444,"title":{},"body":{"injectables/AuthService.html":{},"classes/CatchAllFilter.html":{},"injectables/JwtStrategy.html":{},"injectables/UsersService.html":{}}}],["notfoundexception('password",{"_index":532,"title":{},"body":{"injectables/AuthService.html":{}}}],["notfoundexception('user",{"_index":475,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/UsersService.html":{}}}],["null",{"_index":228,"title":{},"body":{"injectables/AppRedisService.html":{},"injectables/AuthService.html":{},"classes/BaseEntity.html":{},"classes/Migration20250730220636.html":{},"injectables/UsersService.html":{}}}],["nullable",{"_index":553,"title":{},"body":{"classes/BaseEntity.html":{},"entities/User.html":{}}}],["number",{"_index":196,"title":{},"body":{"injectables/AppRedisService.html":{},"injectables/AuthService.html":{},"classes/CatchAllFilter.html":{},"classes/CreateUserDto.html":{},"interfaces/ErrorResponse.html":{},"interfaces/IStrorageService.html":{},"classes/Migration20250730220636.html":{},"injectables/S3Service.html":{},"entities/User.html":{},"miscellaneous/functions.html":{}}}],["number.isinteger(response.statuscode",{"_index":1245,"title":{},"body":{"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/SuccessResponseInterceptor.html":{}}}],["nx",{"_index":215,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["nxinfo",{"_index":239,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["object",{"_index":976,"title":{},"body":{"interfaces/IStrorageService.html":{},"injectables/S3Service.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["object.values(userroleenum).join",{"_index":851,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["observable",{"_index":1230,"title":{},"body":{"injectables/RequestBodyAndResponseInterceptor.html":{},"guards/RoleGuard.html":{},"injectables/SuccessResponseInterceptor.html":{}}}],["ok",{"_index":226,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["omittype",{"_index":1418,"title":{},"body":{"classes/UpdateProfileDto.html":{}}}],["omittype(createuserdto",{"_index":1417,"title":{},"body":{"classes/UpdateProfileDto.html":{}}}],["one",{"_index":850,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["onmoduleinit",{"_index":1341,"title":{},"body":{"injectables/SchemaService.html":{}}}],["onupdate",{"_index":560,"title":{},"body":{"classes/BaseEntity.html":{}}}],["opentelemetry/auto",{"_index":1689,"title":{},"body":{"dependencies.html":{}}}],["opentelemetry/context",{"_index":1692,"title":{},"body":{"dependencies.html":{}}}],["opentelemetry/core",{"_index":1695,"title":{},"body":{"dependencies.html":{}}}],["opentelemetry/exporter",{"_index":1696,"title":{},"body":{"dependencies.html":{}}}],["opentelemetry/propagator",{"_index":1699,"title":{},"body":{"dependencies.html":{}}}],["opentelemetry/sdk",{"_index":1702,"title":{},"body":{"dependencies.html":{}}}],["operation",{"_index":408,"title":{},"body":{"classes/AuthResponseDto.html":{},"classes/CreateUserResponseDto.html":{},"classes/GetProfileResponseDto.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/SuccessResponseInterceptor.html":{}}}],["option",{"_index":766,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["option({flags",{"_index":741,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["optional",{"_index":10,"title":{},"body":{"interfaces/ApiResponse.html":{},"modules/AppModule.html":{},"injectables/AppRedisService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/BaseEntity.html":{},"classes/CatchAllFilter.html":{},"injectables/CloudinaryService.html":{},"injectables/CreateUserCommand.html":{},"classes/CreateUserDto.html":{},"classes/DatabaseSeeder.html":{},"classes/EmailService.html":{},"interfaces/ErrorResponse.html":{},"injectables/HttpClientService.html":{},"interfaces/IPaymentService.html":{},"interfaces/IStrorageService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/MorganMiddleware.html":{},"classes/PasswordResetEmailConsumer.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/RequestContextMiddleware.html":{},"guards/RoleGuard.html":{},"injectables/S3Service.html":{},"injectables/SchemaService.html":{},"injectables/StripeService.html":{},"injectables/SuccessResponseInterceptor.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/UsersSubscriber.html":{},"miscellaneous/functions.html":{}}}],["options",{"_index":759,"title":{},"body":{"injectables/CreateUserCommand.html":{},"modules/EmailModule.html":{},"injectables/HttpClientService.html":{},"interfaces/IPaymentService.html":{},"injectables/StripeService.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{}}}],["originaldata",{"_index":1614,"title":{},"body":{"injectables/UsersSubscriber.html":{}}}],["originaldata.password",{"_index":1616,"title":{},"body":{"injectables/UsersSubscriber.html":{}}}],["orm",{"_index":1260,"title":{},"body":{"injectables/RequestContextMiddleware.html":{},"injectables/SchemaService.html":{}}}],["orm.config",{"_index":120,"title":{},"body":{"modules/AppModule.html":{}}}],["orm.config.ts",{"_index":1641,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["orm/cli",{"_index":1676,"title":{},"body":{"dependencies.html":{}}}],["orm/core",{"_index":567,"title":{},"body":{"classes/BaseEntity.html":{},"injectables/CreateUserCommand.html":{},"classes/DatabaseSeeder.html":{},"injectables/RequestContextMiddleware.html":{},"injectables/SchemaService.html":{},"entities/User.html":{},"injectables/UsersService.html":{},"injectables/UsersSubscriber.html":{},"dependencies.html":{}}}],["orm/migrations",{"_index":1071,"title":{},"body":{"classes/Migration20250730220636.html":{},"dependencies.html":{}}}],["orm/nestjs",{"_index":97,"title":{},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["orm/postgresql",{"_index":1679,"title":{},"body":{"dependencies.html":{}}}],["orm/seeder",{"_index":866,"title":{},"body":{"classes/DatabaseSeeder.html":{},"classes/UserFactory.html":{}}}],["os",{"_index":1168,"title":{},"body":{"classes/PasswordResetEmailConsumer.html":{}}}],["os.cpus().length",{"_index":1176,"title":{},"body":{"classes/PasswordResetEmailConsumer.html":{}}}],["otelsdk",{"_index":1664,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["out",{"_index":70,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRedisModule.html":{},"modules/AuthModule.html":{},"modules/EmailModule.html":{},"modules/HttpClientModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["override",{"_index":1072,"title":{},"body":{"classes/Migration20250730220636.html":{}}}],["overview",{"_index":1797,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":1667,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["param",{"_index":235,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["parameters",{"_index":77,"title":{},"body":{"modules/AppModule.html":{},"injectables/AppRedisService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CatchAllFilter.html":{},"injectables/CloudinaryService.html":{},"injectables/CreateUserCommand.html":{},"classes/DatabaseSeeder.html":{},"classes/EmailService.html":{},"injectables/HttpClientService.html":{},"interfaces/IPaymentService.html":{},"interfaces/IStrorageService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/MorganMiddleware.html":{},"classes/PasswordResetEmailConsumer.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/RequestContextMiddleware.html":{},"guards/RoleGuard.html":{},"injectables/S3Service.html":{},"injectables/SchemaService.html":{},"injectables/StripeService.html":{},"injectables/SuccessResponseInterceptor.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/UsersSubscriber.html":{},"miscellaneous/functions.html":{}}}],["params",{"_index":962,"title":{},"body":{"interfaces/IPaymentService.html":{},"injectables/StripeService.html":{}}}],["parsed",{"_index":1573,"title":{},"body":{"injectables/UsersService.html":{}}}],["parseemail",{"_index":731,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["parseemail(val",{"_index":740,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["parsefirstname",{"_index":732,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["parsefirstname(val",{"_index":746,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["parselastname",{"_index":733,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["parselastname(val",{"_index":750,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["parser",{"_index":1303,"title":{},"body":{"injectables/S3Service.html":{}}}],["parserole",{"_index":734,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["parserole(val",{"_index":753,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["parseurl",{"_index":1301,"title":{},"body":{"injectables/S3Service.html":{}}}],["partial",{"_index":1461,"title":{},"body":{"classes/UserFactory.html":{}}}],["partialtype",{"_index":1416,"title":{},"body":{"classes/UpdateProfileDto.html":{}}}],["pass",{"_index":434,"title":{},"body":{"injectables/AuthService.html":{},"modules/EmailModule.html":{}}}],["passport",{"_index":1038,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["passportmodule",{"_index":368,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":1039,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["passportstrategy(strategy",{"_index":1003,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["passreqtocallback",{"_index":1045,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["password",{"_index":288,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ChangePasswordDto.html":{},"injectables/CreateUserCommand.html":{},"classes/CreateUserDto.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"classes/Migration20250730220636.html":{},"classes/ResetPasswordDto.html":{},"classes/UpdateProfileDto.html":{},"entities/User.html":{},"classes/UserFactory.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["password')@httpcode(httpstatus.ok)@apioperation({summary",{"_index":286,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["password'})@apibody({type",{"_index":308,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["password.dto",{"_index":324,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["password.dto.ts",{"_index":651,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/ForgotPasswordDto.html":{},"classes/ResetPasswordDto.html":{},"coverage.html":{}}}],["password.dto.ts:19",{"_index":670,"title":{},"body":{"classes/ChangePasswordDto.html":{}}}],["password.dto.ts:25",{"_index":1269,"title":{},"body":{"classes/ResetPasswordDto.html":{}}}],["password.dto.ts:35",{"_index":668,"title":{},"body":{"classes/ChangePasswordDto.html":{}}}],["password.dto.ts:41",{"_index":1268,"title":{},"body":{"classes/ResetPasswordDto.html":{}}}],["password.dto.ts:50",{"_index":1271,"title":{},"body":{"classes/ResetPasswordDto.html":{}}}],["password.dto.ts:7",{"_index":915,"title":{},"body":{"classes/ForgotPasswordDto.html":{}}}],["password_character_set",{"_index":769,"title":{},"body":{"injectables/CreateUserCommand.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["password_reset",{"_index":1750,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["password_reset_email_queue_name",{"_index":375,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/PasswordResetEmailConsumer.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["password_reset_requested",{"_index":1093,"title":{},"body":{"classes/Migration20250730220636.html":{}}}],["passwordresetemailconsumer",{"_index":1160,"title":{"classes/PasswordResetEmailConsumer.html":{}},"body":{"classes/PasswordResetEmailConsumer.html":{},"coverage.html":{}}}],["passwordresetemailqueue",{"_index":422,"title":{},"body":{"injectables/AuthService.html":{}}}],["passwordresetrequested",{"_index":526,"title":{},"body":{"injectables/AuthService.html":{},"entities/User.html":{}}}],["passwordreseturl",{"_index":416,"title":{},"body":{"injectables/AuthService.html":{}}}],["patch",{"_index":1498,"title":{},"body":{"controllers/UsersController.html":{},"miscellaneous/enumerations.html":{}}}],["patch('update",{"_index":1494,"title":{},"body":{"controllers/UsersController.html":{}}}],["path",{"_index":143,"title":{},"body":{"modules/AppModule.html":{},"classes/CatchAllFilter.html":{},"modules/EmailModule.html":{},"interfaces/ErrorResponse.html":{},"classes/Migration20250730220636.html":{},"entities/User.html":{}}}],["path/webhook",{"_index":144,"title":{},"body":{"modules/AppModule.html":{}}}],["payload",{"_index":486,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["payload.email",{"_index":530,"title":{},"body":{"injectables/AuthService.html":{}}}],["payload.sub",{"_index":511,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["payment",{"_index":1397,"title":{},"body":{"injectables/StripeService.html":{}}}],["payment_intent.succeeded",{"_index":1408,"title":{},"body":{"injectables/StripeService.html":{}}}],["payment_provider",{"_index":1195,"title":{},"body":{"modules/PaymentModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["paymentdriverenum",{"_index":1196,"title":{},"body":{"modules/PaymentModule.html":{},"miscellaneous/enumerations.html":{}}}],["paymentdriverenum.stripe",{"_index":1216,"title":{},"body":{"modules/PaymentModule.html":{}}}],["paymentintent",{"_index":1399,"title":{},"body":{"injectables/StripeService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["paymentmodule",{"_index":1186,"title":{"modules/PaymentModule.html":{}},"body":{"modules/PaymentModule.html":{},"modules.html":{}}}],["per",{"_index":1017,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["permission",{"_index":1285,"title":{},"body":{"guards/RoleGuard.html":{}}}],["phone",{"_index":818,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/Migration20250730220636.html":{},"entities/User.html":{}}}],["phone_number",{"_index":1089,"title":{},"body":{"classes/Migration20250730220636.html":{}}}],["phonenumber",{"_index":795,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateProfileDto.html":{},"entities/User.html":{},"classes/UserFactory.html":{}}}],["pipeline",{"_index":253,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["pipeline.exec",{"_index":258,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["pipeline.incr(key",{"_index":257,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["pipeline.set(key",{"_index":255,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["port",{"_index":885,"title":{},"body":{"modules/EmailModule.html":{}}}],["post",{"_index":310,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{},"miscellaneous/enumerations.html":{}}}],["post('change",{"_index":1482,"title":{},"body":{"controllers/UsersController.html":{}}}],["post('forgot",{"_index":346,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('login",{"_index":331,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('refresh",{"_index":341,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('reset",{"_index":350,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('sign",{"_index":1507,"title":{},"body":{"controllers/UsersController.html":{}}}],["postal",{"_index":821,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["postal/zip",{"_index":1111,"title":{},"body":{"classes/Migration20250730220636.html":{},"entities/User.html":{}}}],["postal_code",{"_index":1085,"title":{},"body":{"classes/Migration20250730220636.html":{}}}],["postalcode",{"_index":796,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/User.html":{},"classes/UserFactory.html":{}}}],["prefix",{"_index":278,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["presigner",{"_index":1307,"title":{},"body":{"injectables/S3Service.html":{},"dependencies.html":{}}}],["presigner.presign",{"_index":1338,"title":{},"body":{"injectables/S3Service.html":{}}}],["preventserverstart",{"_index":1830,"title":{},"body":{"miscellaneous/variables.html":{}}}],["primary",{"_index":1097,"title":{},"body":{"classes/Migration20250730220636.html":{}}}],["primarykey",{"_index":565,"title":{},"body":{"classes/BaseEntity.html":{}}}],["primarykey({type",{"_index":557,"title":{},"body":{"classes/BaseEntity.html":{}}}],["private",{"_index":175,"title":{},"body":{"injectables/AppRedisService.html":{},"injectables/AuthService.html":{},"classes/CatchAllFilter.html":{},"injectables/CloudinaryService.html":{},"injectables/CreateUserCommand.html":{},"classes/EmailService.html":{},"injectables/HttpClientService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/MorganMiddleware.html":{},"classes/PasswordResetEmailConsumer.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/S3Service.html":{},"injectables/SchemaService.html":{},"injectables/StripeService.html":{},"injectables/SuccessResponseInterceptor.html":{},"entities/User.html":{},"injectables/UsersService.html":{},"injectables/UsersSubscriber.html":{}}}],["process",{"_index":1162,"title":{},"body":{"classes/PasswordResetEmailConsumer.html":{}}}],["process(job",{"_index":1165,"title":{},"body":{"classes/PasswordResetEmailConsumer.html":{}}}],["process.env.db_ssl",{"_index":1834,"title":{},"body":{"miscellaneous/variables.html":{}}}],["processed",{"_index":1185,"title":{},"body":{"classes/PasswordResetEmailConsumer.html":{}}}],["processing",{"_index":1177,"title":{},"body":{"classes/PasswordResetEmailConsumer.html":{}}}],["processor",{"_index":1169,"title":{},"body":{"classes/PasswordResetEmailConsumer.html":{}}}],["processor(password_reset_email_queue_name",{"_index":1174,"title":{},"body":{"classes/PasswordResetEmailConsumer.html":{}}}],["production",{"_index":1344,"title":{},"body":{"injectables/SchemaService.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["profile",{"_index":859,"title":{},"body":{"classes/CreateUserResponseDto.html":{},"classes/GetProfileResponseDto.html":{},"controllers/UsersController.html":{}}}],["profile')@httpcode(httpstatus.ok)@apioperation({summary",{"_index":1495,"title":{},"body":{"controllers/UsersController.html":{}}}],["profile'})@apibody({type",{"_index":1496,"title":{},"body":{"controllers/UsersController.html":{}}}],["profile.dto",{"_index":1504,"title":{},"body":{"controllers/UsersController.html":{}}}],["profile.dto.ts",{"_index":1415,"title":{},"body":{"classes/UpdateProfileDto.html":{},"coverage.html":{}}}],["project",{"_index":1777,"title":{},"body":{"index.html":{}}}],["prometheus",{"_index":1697,"title":{},"body":{"dependencies.html":{}}}],["prometheusexporter",{"_index":1665,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["promise",{"_index":195,"title":{},"body":{"injectables/AppRedisService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CloudinaryService.html":{},"injectables/CreateUserCommand.html":{},"classes/DatabaseSeeder.html":{},"classes/EmailService.html":{},"injectables/HttpClientService.html":{},"interfaces/IPaymentService.html":{},"interfaces/IStrorageService.html":{},"injectables/LocalStrategy.html":{},"classes/Migration20250730220636.html":{},"guards/RoleGuard.html":{},"injectables/S3Service.html":{},"injectables/StripeService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["promise((resolve",{"_index":711,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["promise.all",{"_index":1579,"title":{},"body":{"injectables/UsersService.html":{}}}],["propagators",{"_index":1824,"title":{},"body":{"miscellaneous/variables.html":{}}}],["properties",{"_index":9,"title":{"properties.html":{}},"body":{"interfaces/ApiResponse.html":{},"injectables/AppRedisService.html":{},"classes/AuthResponseDto.html":{},"injectables/AuthService.html":{},"classes/BaseEntity.html":{},"classes/CatchAllFilter.html":{},"classes/ChangePasswordDto.html":{},"injectables/CreateUserCommand.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserResponseDto.html":{},"interfaces/ErrorResponse.html":{},"classes/ForgotPasswordDto.html":{},"classes/GetProfileResponseDto.html":{},"injectables/HttpClientService.html":{},"classes/LoginDto.html":{},"classes/RefreshTokenDto.html":{},"classes/ResetPasswordDto.html":{},"injectables/S3Service.html":{},"entities/User.html":{},"classes/UserFactory.html":{},"injectables/UsersService.html":{},"properties.html":{}}}],["property",{"_index":566,"title":{},"body":{"classes/BaseEntity.html":{},"entities/User.html":{}}}],["property({type",{"_index":544,"title":{},"body":{"classes/BaseEntity.html":{},"entities/User.html":{}}}],["property({unique",{"_index":1432,"title":{},"body":{"entities/User.html":{}}}],["provide",{"_index":395,"title":{},"body":{"modules/AuthModule.html":{},"modules/PaymentModule.html":{},"modules/StorageModule.html":{}}}],["provided",{"_index":1220,"title":{},"body":{"classes/RefreshTokenDto.html":{}}}],["providers",{"_index":58,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRedisModule.html":{},"modules/AuthModule.html":{},"modules/EmailModule.html":{},"modules/HttpClientModule.html":{},"modules/PaymentModule.html":{},"injectables/S3Service.html":{},"modules/StorageModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"overview.html":{}}}],["public",{"_index":41,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"modules/PaymentModule.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["public()@post('forgot",{"_index":285,"title":{},"body":{"controllers/AuthController.html":{}}}],["public()@post('refresh')@httpcode(httpstatus.ok)@apioperation({summary",{"_index":300,"title":{},"body":{"controllers/AuthController.html":{}}}],["public()@post('reset",{"_index":307,"title":{},"body":{"controllers/AuthController.html":{}}}],["public()@post('sign",{"_index":1485,"title":{},"body":{"controllers/UsersController.html":{}}}],["public_id=${result.public_id",{"_index":722,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["pug",{"_index":1733,"title":{},"body":{"dependencies.html":{}}}],["pugadapter",{"_index":879,"title":{},"body":{"modules/EmailModule.html":{}}}],["put",{"_index":975,"title":{},"body":{"interfaces/IStrorageService.html":{},"injectables/S3Service.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["query",{"_index":1547,"title":{},"body":{"injectables/UsersService.html":{}}}],["query?.email",{"_index":1569,"title":{},"body":{"injectables/UsersService.html":{}}}],["query?.id",{"_index":1567,"title":{},"body":{"injectables/UsersService.html":{}}}],["queue",{"_index":423,"title":{},"body":{"injectables/AuthService.html":{},"modules/PaymentModule.html":{},"injectables/StripeService.html":{},"miscellaneous/variables.html":{}}}],["queued",{"_index":1411,"title":{},"body":{"injectables/StripeService.html":{}}}],["queues",{"_index":136,"title":{},"body":{"modules/AppModule.html":{}}}],["quickly",{"_index":1751,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["r",{"_index":754,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["raw",{"_index":1012,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["readonly",{"_index":139,"title":{},"body":{"modules/AppModule.html":{},"injectables/AppRedisService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CatchAllFilter.html":{},"injectables/CloudinaryService.html":{},"injectables/CreateUserCommand.html":{},"classes/EmailService.html":{},"injectables/HttpClientService.html":{},"injectables/MorganMiddleware.html":{},"classes/PasswordResetEmailConsumer.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/RequestContextMiddleware.html":{},"guards/RoleGuard.html":{},"injectables/S3Service.html":{},"injectables/SchemaService.html":{},"injectables/StripeService.html":{},"injectables/SuccessResponseInterceptor.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/UsersSubscriber.html":{}}}],["readylog",{"_index":167,"title":{},"body":{"modules/AppRedisModule.html":{}}}],["received",{"_index":1407,"title":{},"body":{"injectables/StripeService.html":{}}}],["record",{"_index":549,"title":{},"body":{"classes/BaseEntity.html":{},"injectables/CreateUserCommand.html":{},"classes/EmailService.html":{},"classes/Migration20250730220636.html":{}}}],["redis",{"_index":164,"title":{},"body":{"modules/AppRedisModule.html":{},"injectables/AppRedisService.html":{},"dependencies.html":{}}}],["redis.service",{"_index":161,"title":{},"body":{"modules/AppRedisModule.html":{}}}],["redismodule",{"_index":162,"title":{},"body":{"modules/AppRedisModule.html":{}}}],["redismodule.forrootasync",{"_index":165,"title":{},"body":{"modules/AppRedisModule.html":{}}}],["redisservice",{"_index":186,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["referrer",{"_index":1150,"title":{},"body":{"injectables/MorganMiddleware.html":{}}}],["reflect",{"_index":1735,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":983,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/RoleGuard.html":{}}}],["reflector.createdecorator",{"_index":1835,"title":{},"body":{"miscellaneous/variables.html":{}}}],["refresh",{"_index":281,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/RefreshTokenDto.html":{}}}],["refresh(@body",{"_index":342,"title":{},"body":{"controllers/AuthController.html":{}}}],["refresh(body",{"_index":299,"title":{},"body":{"controllers/AuthController.html":{}}}],["refresh(refreshtoken",{"_index":429,"title":{},"body":{"injectables/AuthService.html":{}}}],["refresh_token",{"_index":334,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["refreshed",{"_index":345,"title":{},"body":{"controllers/AuthController.html":{}}}],["refreshtoken",{"_index":340,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/RefreshTokenDto.html":{}}}],["refreshtokendto",{"_index":303,"title":{"classes/RefreshTokenDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/RefreshTokenDto.html":{},"coverage.html":{}}}],["region",{"_index":1334,"title":{},"body":{"injectables/S3Service.html":{},"modules/StorageModule.html":{}}}],["register",{"_index":1189,"title":{},"body":{"modules/PaymentModule.html":{},"modules/StorageModule.html":{}}}],["reject",{"_index":712,"title":{},"body":{"injectables/CloudinaryService.html":{},"injectables/JwtStrategy.html":{}}}],["reject(error",{"_index":721,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["remote",{"_index":1144,"title":{},"body":{"injectables/MorganMiddleware.html":{}}}],["repository",{"_index":1776,"title":{},"body":{"index.html":{}}}],["req",{"_index":298,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtStrategy.html":{},"injectables/MorganMiddleware.html":{},"injectables/RequestContextMiddleware.html":{},"controllers/UsersController.html":{}}}],["req.url",{"_index":1142,"title":{},"body":{"injectables/MorganMiddleware.html":{}}}],["req.url.match(/\\/v1\\/queues",{"_index":1143,"title":{},"body":{"injectables/MorganMiddleware.html":{}}}],["req.user",{"_index":336,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["req.user.id",{"_index":1519,"title":{},"body":{"controllers/UsersController.html":{}}}],["req?.user?.id",{"_index":1516,"title":{},"body":{"controllers/UsersController.html":{}}}],["req[body",{"_index":1153,"title":{},"body":{"injectables/MorganMiddleware.html":{}}}],["req[header",{"_index":1152,"title":{},"body":{"injectables/MorganMiddleware.html":{}}}],["request",{"_index":287,"title":{},"body":{"controllers/AuthController.html":{},"classes/CatchAllFilter.html":{},"injectables/HttpClientService.html":{},"injectables/JwtStrategy.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/RequestContextMiddleware.html":{},"guards/RoleGuard.html":{},"injectables/S3Service.html":{},"injectables/SuccessResponseInterceptor.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["request.method",{"_index":630,"title":{},"body":{"classes/CatchAllFilter.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/SuccessResponseInterceptor.html":{}}}],["request.url",{"_index":631,"title":{},"body":{"classes/CatchAllFilter.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/SuccessResponseInterceptor.html":{}}}],["request?.user?.role",{"_index":1283,"title":{},"body":{"guards/RoleGuard.html":{}}}],["requestbodyandresponseinterceptor",{"_index":1223,"title":{"injectables/RequestBodyAndResponseInterceptor.html":{}},"body":{"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/SuccessResponseInterceptor.html":{},"coverage.html":{}}}],["requestcontext",{"_index":1263,"title":{},"body":{"injectables/RequestContextMiddleware.html":{}}}],["requestcontext.create(this.orm.em",{"_index":1264,"title":{},"body":{"injectables/RequestContextMiddleware.html":{}}}],["requestcontextmiddleware",{"_index":115,"title":{"injectables/RequestContextMiddleware.html":{}},"body":{"modules/AppModule.html":{},"injectables/RequestContextMiddleware.html":{},"coverage.html":{}}}],["requested",{"_index":533,"title":{},"body":{"injectables/AuthService.html":{},"classes/Migration20250730220636.html":{},"entities/User.html":{}}}],["requestmethod",{"_index":83,"title":{},"body":{"modules/AppModule.html":{}}}],["requestmethod.all",{"_index":142,"title":{},"body":{"modules/AppModule.html":{}}}],["requesturl",{"_index":616,"title":{},"body":{"classes/CatchAllFilter.html":{}}}],["require('buffer",{"_index":691,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["required",{"_index":743,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["requiredrole",{"_index":1280,"title":{},"body":{"guards/RoleGuard.html":{}}}],["res",{"_index":1136,"title":{},"body":{"injectables/MorganMiddleware.html":{},"injectables/RequestContextMiddleware.html":{}}}],["res.statuscode",{"_index":1155,"title":{},"body":{"injectables/MorganMiddleware.html":{}}}],["res[content",{"_index":1147,"title":{},"body":{"injectables/MorganMiddleware.html":{}}}],["reset",{"_index":69,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRedisModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/EmailModule.html":{},"modules/HttpClientModule.html":{},"classes/Migration20250730220636.html":{},"classes/ResetPasswordDto.html":{},"entities/User.html":{},"modules/UsersModule.html":{},"miscellaneous/enumerations.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["reset'})@apibody({type",{"_index":289,"title":{},"body":{"controllers/AuthController.html":{}}}],["resetpassword",{"_index":282,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["resetpassword(body",{"_index":305,"title":{},"body":{"controllers/AuthController.html":{}}}],["resetpassword(resettoken",{"_index":431,"title":{},"body":{"injectables/AuthService.html":{}}}],["resetpassworddto",{"_index":306,"title":{"classes/ResetPasswordDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/ResetPasswordDto.html":{},"coverage.html":{}}}],["resettoken",{"_index":351,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ResetPasswordDto.html":{}}}],["reseturl",{"_index":519,"title":{},"body":{"injectables/AuthService.html":{},"classes/PasswordResetEmailConsumer.html":{}}}],["resolve(result",{"_index":724,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["resource_type",{"_index":716,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["response",{"_index":614,"title":{},"body":{"classes/CatchAllFilter.html":{},"interfaces/IStrorageService.html":{},"injectables/MorganMiddleware.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/RequestContextMiddleware.html":{},"injectables/S3Service.html":{},"injectables/SuccessResponseInterceptor.html":{}}}],["response.dto.ts",{"_index":400,"title":{},"body":{"classes/AuthResponseDto.html":{},"coverage.html":{}}}],["response.dto.ts:14",{"_index":409,"title":{},"body":{"classes/AuthResponseDto.html":{}}}],["response.dto.ts:8",{"_index":405,"title":{},"body":{"classes/AuthResponseDto.html":{}}}],["response.interface",{"_index":327,"title":{},"body":{"controllers/AuthController.html":{},"classes/CatchAllFilter.html":{},"controllers/UsersController.html":{}}}],["response.interface.ts",{"_index":7,"title":{},"body":{"interfaces/ApiResponse.html":{},"interfaces/ErrorResponse.html":{},"coverage.html":{}}}],["response.message",{"_index":1249,"title":{},"body":{"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/SuccessResponseInterceptor.html":{}}}],["response.statuscode",{"_index":1246,"title":{},"body":{"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/SuccessResponseInterceptor.html":{}}}],["response.ts",{"_index":1662,"title":{},"body":{"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["response?.data",{"_index":1251,"title":{},"body":{"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/SuccessResponseInterceptor.html":{}}}],["response?.message",{"_index":1248,"title":{},"body":{"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/SuccessResponseInterceptor.html":{}}}],["response?.statuscode",{"_index":1244,"title":{},"body":{"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/SuccessResponseInterceptor.html":{}}}],["responsebody",{"_index":628,"title":{},"body":{"classes/CatchAllFilter.html":{}}}],["responsedata",{"_index":1250,"title":{},"body":{"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/SuccessResponseInterceptor.html":{}}}],["result",{"_index":266,"title":{},"body":{"injectables/AppRedisService.html":{},"injectables/AuthService.html":{},"injectables/CloudinaryService.html":{},"injectables/UsersService.html":{}}}],["results",{"_index":22,"title":{},"body":{"interfaces/ApiResponse.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AppRedisModule.html":{},"injectables/AppRedisService.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/AuthResponseDto.html":{},"injectables/AuthService.html":{},"classes/BaseEntity.html":{},"classes/CatchAllFilter.html":{},"classes/ChangePasswordDto.html":{},"injectables/CloudinaryService.html":{},"injectables/CreateUserCommand.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserResponseDto.html":{},"classes/DatabaseSeeder.html":{},"modules/EmailModule.html":{},"classes/EmailService.html":{},"interfaces/ErrorResponse.html":{},"classes/ForgotPasswordDto.html":{},"classes/GetProfileResponseDto.html":{},"modules/HttpClientModule.html":{},"injectables/HttpClientService.html":{},"interfaces/IPaymentService.html":{},"interfaces/IStrorageService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"classes/Migration20250730220636.html":{},"injectables/MorganMiddleware.html":{},"classes/PasswordResetEmailConsumer.html":{},"modules/PaymentModule.html":{},"classes/RefreshTokenDto.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/RequestContextMiddleware.html":{},"classes/ResetPasswordDto.html":{},"guards/RoleGuard.html":{},"injectables/S3Service.html":{},"injectables/SchemaService.html":{},"modules/StorageModule.html":{},"injectables/StripeService.html":{},"injectables/SuccessResponseInterceptor.html":{},"classes/UpdateProfileDto.html":{},"entities/User.html":{},"classes/UserFactory.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/UsersSubscriber.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["results[ttl",{"_index":260,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["return",{"_index":50,"title":{},"body":{"controllers/AppController.html":{},"modules/AppRedisModule.html":{},"injectables/AppRedisService.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CatchAllFilter.html":{},"injectables/CloudinaryService.html":{},"injectables/CreateUserCommand.html":{},"classes/CreateUserDto.html":{},"injectables/HttpClientService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/MorganMiddleware.html":{},"modules/PaymentModule.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"guards/RoleGuard.html":{},"injectables/S3Service.html":{},"modules/StorageModule.html":{},"injectables/StripeService.html":{},"injectables/SuccessResponseInterceptor.html":{},"classes/UserFactory.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/UsersSubscriber.html":{}}}],["returns",{"_index":38,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppRedisService.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CatchAllFilter.html":{},"injectables/CloudinaryService.html":{},"injectables/CreateUserCommand.html":{},"classes/DatabaseSeeder.html":{},"classes/EmailService.html":{},"injectables/HttpClientService.html":{},"interfaces/IPaymentService.html":{},"interfaces/IStrorageService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/Migration20250730220636.html":{},"injectables/MorganMiddleware.html":{},"classes/PasswordResetEmailConsumer.html":{},"modules/PaymentModule.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/RequestContextMiddleware.html":{},"guards/RoleGuard.html":{},"injectables/S3Service.html":{},"injectables/SchemaService.html":{},"modules/StorageModule.html":{},"injectables/StripeService.html":{},"injectables/SuccessResponseInterceptor.html":{},"classes/UserFactory.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/UsersSubscriber.html":{},"miscellaneous/functions.html":{}}}],["role",{"_index":755,"title":{},"body":{"injectables/CreateUserCommand.html":{},"classes/CreateUserDto.html":{},"classes/Migration20250730220636.html":{},"guards/RoleGuard.html":{},"classes/UpdateProfileDto.html":{},"entities/User.html":{},"classes/UserFactory.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["roleguard",{"_index":1275,"title":{"guards/RoleGuard.html":{}},"body":{"guards/RoleGuard.html":{},"coverage.html":{}}}],["route",{"_index":135,"title":{},"body":{"modules/AppModule.html":{},"classes/CatchAllFilter.html":{},"guards/RoleGuard.html":{}}}],["run",{"_index":735,"title":{},"body":{"injectables/CreateUserCommand.html":{},"classes/DatabaseSeeder.html":{},"index.html":{}}}],["run(em",{"_index":864,"title":{},"body":{"classes/DatabaseSeeder.html":{}}}],["run(inputs",{"_index":758,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["rxjs",{"_index":946,"title":{},"body":{"injectables/HttpClientService.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"guards/RoleGuard.html":{},"injectables/SuccessResponseInterceptor.html":{},"dependencies.html":{}}}],["rxjs/operators",{"_index":1235,"title":{},"body":{"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/SuccessResponseInterceptor.html":{}}}],["s3",{"_index":1291,"title":{},"body":{"injectables/S3Service.html":{},"modules/StorageModule.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{}}}],["s3.service",{"_index":1360,"title":{},"body":{"modules/StorageModule.html":{}}}],["s3bucket",{"_index":1288,"title":{},"body":{"injectables/S3Service.html":{}}}],["s3client",{"_index":1290,"title":{},"body":{"injectables/S3Service.html":{},"modules/StorageModule.html":{}}}],["s3module",{"_index":1362,"title":{},"body":{"modules/StorageModule.html":{}}}],["s3module.forrootasync",{"_index":1363,"title":{},"body":{"modules/StorageModule.html":{}}}],["s3putobjectresponse",{"_index":973,"title":{},"body":{"interfaces/IStrorageService.html":{},"injectables/S3Service.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["s3region",{"_index":1289,"title":{},"body":{"injectables/S3Service.html":{}}}],["s3requestpresigner",{"_index":1304,"title":{},"body":{"injectables/S3Service.html":{}}}],["s3service",{"_index":1286,"title":{"injectables/S3Service.html":{}},"body":{"injectables/S3Service.html":{},"modules/StorageModule.html":{},"coverage.html":{}}}],["s3service(configservice",{"_index":1374,"title":{},"body":{"modules/StorageModule.html":{}}}],["s3service.name",{"_index":1322,"title":{},"body":{"injectables/S3Service.html":{}}}],["s@]+@[^\\s@]+\\.[^\\s@]{2,}$/i",{"_index":775,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["safeuser",{"_index":1514,"title":{},"body":{"controllers/UsersController.html":{}}}],["salt",{"_index":534,"title":{},"body":{"injectables/AuthService.html":{}}}],["saltrounds",{"_index":417,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersSubscriber.html":{}}}],["sanitizebody",{"_index":580,"title":{},"body":{"classes/CatchAllFilter.html":{}}}],["sanitizebody(body",{"_index":600,"title":{},"body":{"classes/CatchAllFilter.html":{}}}],["schema",{"_index":1351,"title":{},"body":{"injectables/SchemaService.html":{}}}],["schema.service",{"_index":98,"title":{},"body":{"modules/AppModule.html":{}}}],["schemaservice",{"_index":67,"title":{"injectables/SchemaService.html":{}},"body":{"modules/AppModule.html":{},"injectables/SchemaService.html":{},"coverage.html":{},"overview.html":{}}}],["schemaservice.name",{"_index":1353,"title":{},"body":{"injectables/SchemaService.html":{}}}],["sdk/credential",{"_index":1309,"title":{},"body":{"injectables/S3Service.html":{},"dependencies.html":{}}}],["sdk/s3",{"_index":1306,"title":{},"body":{"injectables/S3Service.html":{},"dependencies.html":{}}}],["sdk/util",{"_index":1316,"title":{},"body":{"injectables/S3Service.html":{},"dependencies.html":{}}}],["seconds",{"_index":222,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["secret",{"_index":381,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{}}}],["secretaccesskey",{"_index":1366,"title":{},"body":{"modules/StorageModule.html":{}}}],["secretorkey",{"_index":1043,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["secure",{"_index":887,"title":{},"body":{"modules/EmailModule.html":{}}}],["securely",{"_index":1752,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["seeder",{"_index":863,"title":{},"body":{"classes/DatabaseSeeder.html":{}}}],["sendemail",{"_index":899,"title":{},"body":{"classes/EmailService.html":{}}}],["sendemail(to",{"_index":903,"title":{},"body":{"classes/EmailService.html":{}}}],["sending",{"_index":908,"title":{},"body":{"classes/EmailService.html":{}}}],["sent",{"_index":349,"title":{},"body":{"controllers/AuthController.html":{},"classes/EmailService.html":{},"classes/ResetPasswordDto.html":{}}}],["serializable",{"_index":1578,"title":{},"body":{"injectables/UsersService.html":{}}}],["services/email/email.service",{"_index":1171,"title":{},"body":{"classes/PasswordResetEmailConsumer.html":{}}}],["services/redis/redis.module",{"_index":374,"title":{},"body":{"modules/AuthModule.html":{},"modules/UsersModule.html":{}}}],["services/redis/redis.service",{"_index":454,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["session",{"_index":1016,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/StripeService.html":{}}}],["session.id",{"_index":1395,"title":{},"body":{"injectables/StripeService.html":{}}}],["set",{"_index":182,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["set(key",{"_index":213,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["setmetadata(is_public_key",{"_index":1817,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setting",{"_index":243,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["setup",{"_index":1778,"title":{},"body":{"index.html":{}}}],["setupswagger",{"_index":1644,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["setupswagger(app",{"_index":1770,"title":{},"body":{"miscellaneous/functions.html":{}}}],["sha256",{"_index":1335,"title":{},"body":{"injectables/S3Service.html":{}}}],["sign",{"_index":1487,"title":{},"body":{"controllers/UsersController.html":{}}}],["signedurlobject",{"_index":1337,"title":{},"body":{"injectables/S3Service.html":{}}}],["signoptions",{"_index":383,"title":{},"body":{"modules/AuthModule.html":{}}}],["single",{"_index":1015,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["size=${file.size",{"_index":707,"title":{},"body":{"injectables/CloudinaryService.html":{},"injectables/S3Service.html":{}}}],["smithy/hash",{"_index":1311,"title":{},"body":{"injectables/S3Service.html":{},"dependencies.html":{}}}],["smithy/protocol",{"_index":1314,"title":{},"body":{"injectables/S3Service.html":{},"dependencies.html":{}}}],["smithy/url",{"_index":1302,"title":{},"body":{"injectables/S3Service.html":{}}}],["smtp.auth.user",{"_index":892,"title":{},"body":{"modules/EmailModule.html":{}}}],["soft",{"_index":554,"title":{},"body":{"classes/BaseEntity.html":{},"classes/Migration20250730220636.html":{}}}],["softdelete",{"_index":569,"title":{},"body":{"classes/BaseEntity.html":{}}}],["source",{"_index":4,"title":{},"body":{"interfaces/ApiResponse.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AppRedisModule.html":{},"injectables/AppRedisService.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/AuthResponseDto.html":{},"injectables/AuthService.html":{},"classes/BaseEntity.html":{},"classes/CatchAllFilter.html":{},"classes/ChangePasswordDto.html":{},"injectables/CloudinaryService.html":{},"injectables/CreateUserCommand.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserResponseDto.html":{},"classes/DatabaseSeeder.html":{},"modules/EmailModule.html":{},"classes/EmailService.html":{},"interfaces/ErrorResponse.html":{},"classes/ForgotPasswordDto.html":{},"classes/GetProfileResponseDto.html":{},"modules/HttpClientModule.html":{},"injectables/HttpClientService.html":{},"interfaces/IPaymentService.html":{},"interfaces/IStrorageService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"classes/Migration20250730220636.html":{},"injectables/MorganMiddleware.html":{},"classes/PasswordResetEmailConsumer.html":{},"modules/PaymentModule.html":{},"classes/RefreshTokenDto.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/RequestContextMiddleware.html":{},"classes/ResetPasswordDto.html":{},"guards/RoleGuard.html":{},"injectables/S3Service.html":{},"injectables/SchemaService.html":{},"modules/StorageModule.html":{},"injectables/StripeService.html":{},"injectables/SuccessResponseInterceptor.html":{},"classes/UpdateProfileDto.html":{},"entities/User.html":{},"classes/UserFactory.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/UsersSubscriber.html":{}}}],["springfield",{"_index":841,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["springfield'})@isstring()@isoptional",{"_index":801,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["src/.../auth",{"_index":1808,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../checkout.ts",{"_index":1809,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../common.utils.ts",{"_index":1764,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../index.ts",{"_index":1746,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../main.cli.ts",{"_index":1761,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../main.ts",{"_index":1762,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../mikro",{"_index":1815,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../payment",{"_index":1810,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../public.decorator.ts",{"_index":1813,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../s3",{"_index":1811,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../swagger.config.ts",{"_index":1766,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../tracing.ts",{"_index":1814,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../user.util.ts",{"_index":1765,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../winston.config.ts",{"_index":1763,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/app.controller.ts",{"_index":27,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:12",{"_index":37,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":71,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.module.ts:58",{"_index":76,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":271,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":273,"title":{},"body":{"injectables/AppService.html":{}}}],["src/commands/create",{"_index":726,"title":{},"body":{"injectables/CreateUserCommand.html":{},"coverage.html":{}}}],["src/common/constants/index.ts",{"_index":1625,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/common/decorators/index.ts",{"_index":1629,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/common/entities/base.entity.ts",{"_index":539,"title":{},"body":{"classes/BaseEntity.html":{},"coverage.html":{}}}],["src/common/entities/base.entity.ts:15",{"_index":555,"title":{},"body":{"classes/BaseEntity.html":{}}}],["src/common/entities/base.entity.ts:22",{"_index":552,"title":{},"body":{"classes/BaseEntity.html":{}}}],["src/common/entities/base.entity.ts:30",{"_index":563,"title":{},"body":{"classes/BaseEntity.html":{}}}],["src/common/entities/base.entity.ts:8",{"_index":559,"title":{},"body":{"classes/BaseEntity.html":{}}}],["src/common/enums/index.ts",{"_index":1749,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/common/filters/exception.filter.ts",{"_index":573,"title":{},"body":{"classes/CatchAllFilter.html":{},"coverage.html":{}}}],["src/common/filters/exception.filter.ts:108",{"_index":597,"title":{},"body":{"classes/CatchAllFilter.html":{}}}],["src/common/filters/exception.filter.ts:119",{"_index":592,"title":{},"body":{"classes/CatchAllFilter.html":{}}}],["src/common/filters/exception.filter.ts:123",{"_index":601,"title":{},"body":{"classes/CatchAllFilter.html":{}}}],["src/common/filters/exception.filter.ts:20",{"_index":583,"title":{},"body":{"classes/CatchAllFilter.html":{}}}],["src/common/filters/exception.filter.ts:27",{"_index":589,"title":{},"body":{"classes/CatchAllFilter.html":{}}}],["src/common/filters/exception.filter.ts:78",{"_index":599,"title":{},"body":{"classes/CatchAllFilter.html":{}}}],["src/common/filters/exception.filter.ts:92",{"_index":595,"title":{},"body":{"classes/CatchAllFilter.html":{}}}],["src/common/guards/role.guard.ts",{"_index":1277,"title":{},"body":{"guards/RoleGuard.html":{},"coverage.html":{}}}],["src/common/guards/role.guard.ts:13",{"_index":1278,"title":{},"body":{"guards/RoleGuard.html":{}}}],["src/common/guards/role.guard.ts:16",{"_index":1279,"title":{},"body":{"guards/RoleGuard.html":{}}}],["src/common/interceptors/response.interceptor.ts",{"_index":1224,"title":{},"body":{"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/SuccessResponseInterceptor.html":{},"coverage.html":{}}}],["src/common/interceptors/response.interceptor.ts:16",{"_index":1412,"title":{},"body":{"injectables/SuccessResponseInterceptor.html":{}}}],["src/common/interceptors/response.interceptor.ts:53",{"_index":1226,"title":{},"body":{"injectables/RequestBodyAndResponseInterceptor.html":{}}}],["src/common/interceptors/response.interceptor.ts:56",{"_index":1229,"title":{},"body":{"injectables/RequestBodyAndResponseInterceptor.html":{}}}],["src/common/interfaces/api",{"_index":6,"title":{},"body":{"interfaces/ApiResponse.html":{},"coverage.html":{}}}],["src/common/interfaces/error",{"_index":911,"title":{},"body":{"interfaces/ErrorResponse.html":{},"coverage.html":{}}}],["src/common/middlewares/morgan.middleware.ts",{"_index":1133,"title":{},"body":{"injectables/MorganMiddleware.html":{},"coverage.html":{}}}],["src/common/middlewares/morgan.middleware.ts:11",{"_index":1134,"title":{},"body":{"injectables/MorganMiddleware.html":{}}}],["src/common/middlewares/morgan.middleware.ts:14",{"_index":1137,"title":{},"body":{"injectables/MorganMiddleware.html":{}}}],["src/common/middlewares/request",{"_index":1255,"title":{},"body":{"injectables/RequestContextMiddleware.html":{},"coverage.html":{}}}],["src/common/types/index.ts",{"_index":1635,"title":{},"body":{"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/common/utils/common.utils.ts",{"_index":1637,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/common/utils/user.util.ts",{"_index":1639,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/config/mikro",{"_index":1640,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/config/swagger.config.ts",{"_index":1643,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/config/winston.config.ts",{"_index":1645,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/main.cli.ts",{"_index":1647,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/main.ts",{"_index":1648,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/migrations/migration20250730220636.ts",{"_index":1067,"title":{},"body":{"classes/Migration20250730220636.html":{},"coverage.html":{}}}],["src/migrations/migration20250730220636.ts:4",{"_index":1070,"title":{},"body":{"classes/Migration20250730220636.html":{}}}],["src/modules/auth/auth.controller.ts",{"_index":277,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/modules/auth/auth.controller.ts:31",{"_index":297,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/modules/auth/auth.controller.ts:47",{"_index":304,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/modules/auth/auth.controller.ts:63",{"_index":290,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/modules/auth/auth.controller.ts:79",{"_index":309,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/modules/auth/auth.module.ts",{"_index":361,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/modules/auth/auth.service.ts",{"_index":411,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/modules/auth/auth.service.ts:135",{"_index":426,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:160",{"_index":432,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:21",{"_index":441,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:22",{"_index":437,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:23",{"_index":438,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:24",{"_index":440,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:25",{"_index":439,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:26",{"_index":424,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:50",{"_index":435,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:68",{"_index":428,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:83",{"_index":430,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/consumers/auth.consumer.ts",{"_index":1161,"title":{},"body":{"classes/PasswordResetEmailConsumer.html":{},"coverage.html":{}}}],["src/modules/auth/consumers/auth.consumer.ts:12",{"_index":1164,"title":{},"body":{"classes/PasswordResetEmailConsumer.html":{}}}],["src/modules/auth/consumers/auth.consumer.ts:20",{"_index":1167,"title":{},"body":{"classes/PasswordResetEmailConsumer.html":{}}}],["src/modules/auth/decorators/public.decorator.ts",{"_index":1650,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/modules/auth/dto/auth",{"_index":399,"title":{},"body":{"classes/AuthResponseDto.html":{},"coverage.html":{}}}],["src/modules/auth/dto/forgot",{"_index":912,"title":{},"body":{"classes/ForgotPasswordDto.html":{},"coverage.html":{}}}],["src/modules/auth/dto/login.dto.ts",{"_index":1063,"title":{},"body":{"classes/LoginDto.html":{},"coverage.html":{}}}],["src/modules/auth/dto/login.dto.ts:10",{"_index":1064,"title":{},"body":{"classes/LoginDto.html":{}}}],["src/modules/auth/dto/login.dto.ts:16",{"_index":1065,"title":{},"body":{"classes/LoginDto.html":{}}}],["src/modules/auth/dto/refresh",{"_index":1218,"title":{},"body":{"classes/RefreshTokenDto.html":{},"coverage.html":{}}}],["src/modules/auth/dto/reset",{"_index":1265,"title":{},"body":{"classes/ResetPasswordDto.html":{},"coverage.html":{}}}],["src/modules/auth/guards/jwt",{"_index":977,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["src/modules/auth/guards/local",{"_index":1046,"title":{},"body":{"injectables/LocalAuthGuard.html":{},"coverage.html":{}}}],["src/modules/auth/strategies/jwt.strategy.ts",{"_index":1002,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/modules/auth/strategies/jwt.strategy.ts:34",{"_index":1007,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/modules/auth/strategies/jwt.strategy.ts:8",{"_index":1005,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/modules/auth/strategies/local.strategy.ts",{"_index":1048,"title":{},"body":{"injectables/LocalStrategy.html":{},"coverage.html":{}}}],["src/modules/auth/strategies/local.strategy.ts:12",{"_index":1050,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/modules/auth/strategies/local.strategy.ts:20",{"_index":1052,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/modules/auth/types/auth",{"_index":1653,"title":{},"body":{"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/modules/users/dto/change",{"_index":650,"title":{},"body":{"classes/ChangePasswordDto.html":{},"coverage.html":{}}}],["src/modules/users/dto/create",{"_index":788,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/modules/users/dto/responses.dto.ts",{"_index":853,"title":{},"body":{"classes/CreateUserResponseDto.html":{},"classes/GetProfileResponseDto.html":{},"coverage.html":{}}}],["src/modules/users/dto/responses.dto.ts:15",{"_index":855,"title":{},"body":{"classes/CreateUserResponseDto.html":{}}}],["src/modules/users/dto/responses.dto.ts:23",{"_index":917,"title":{},"body":{"classes/GetProfileResponseDto.html":{}}}],["src/modules/users/dto/responses.dto.ts:29",{"_index":916,"title":{},"body":{"classes/GetProfileResponseDto.html":{}}}],["src/modules/users/dto/responses.dto.ts:9",{"_index":856,"title":{},"body":{"classes/CreateUserResponseDto.html":{}}}],["src/modules/users/dto/update",{"_index":1414,"title":{},"body":{"classes/UpdateProfileDto.html":{},"coverage.html":{}}}],["src/modules/users/entities/user.entity.ts",{"_index":1422,"title":{},"body":{"entities/User.html":{},"coverage.html":{}}}],["src/modules/users/entities/user.entity.ts:106",{"_index":1438,"title":{},"body":{"entities/User.html":{}}}],["src/modules/users/entities/user.entity.ts:115",{"_index":1444,"title":{},"body":{"entities/User.html":{}}}],["src/modules/users/entities/user.entity.ts:122",{"_index":1426,"title":{},"body":{"entities/User.html":{}}}],["src/modules/users/entities/user.entity.ts:129",{"_index":1439,"title":{},"body":{"entities/User.html":{}}}],["src/modules/users/entities/user.entity.ts:136",{"_index":1436,"title":{},"body":{"entities/User.html":{}}}],["src/modules/users/entities/user.entity.ts:22",{"_index":1434,"title":{},"body":{"entities/User.html":{}}}],["src/modules/users/entities/user.entity.ts:30",{"_index":1425,"title":{},"body":{"entities/User.html":{}}}],["src/modules/users/entities/user.entity.ts:37",{"_index":1435,"title":{},"body":{"entities/User.html":{}}}],["src/modules/users/entities/user.entity.ts:44",{"_index":1437,"title":{},"body":{"entities/User.html":{}}}],["src/modules/users/entities/user.entity.ts:51",{"_index":1423,"title":{},"body":{"entities/User.html":{}}}],["src/modules/users/entities/user.entity.ts:59",{"_index":1428,"title":{},"body":{"entities/User.html":{}}}],["src/modules/users/entities/user.entity.ts:67",{"_index":1442,"title":{},"body":{"entities/User.html":{}}}],["src/modules/users/entities/user.entity.ts:75",{"_index":1445,"title":{},"body":{"entities/User.html":{}}}],["src/modules/users/entities/user.entity.ts:83",{"_index":1429,"title":{},"body":{"entities/User.html":{}}}],["src/modules/users/entities/user.entity.ts:91",{"_index":1431,"title":{},"body":{"entities/User.html":{}}}],["src/modules/users/entities/user.entity.ts:99",{"_index":1441,"title":{},"body":{"entities/User.html":{}}}],["src/modules/users/factories/user.factory.ts",{"_index":1455,"title":{},"body":{"classes/UserFactory.html":{},"coverage.html":{}}}],["src/modules/users/factories/user.factory.ts:7",{"_index":1459,"title":{},"body":{"classes/UserFactory.html":{}}}],["src/modules/users/factories/user.factory.ts:9",{"_index":1460,"title":{},"body":{"classes/UserFactory.html":{}}}],["src/modules/users/subscribers/user.subscriber.ts",{"_index":1589,"title":{},"body":{"injectables/UsersSubscriber.html":{},"coverage.html":{}}}],["src/modules/users/subscribers/user.subscriber.ts:14",{"_index":1593,"title":{},"body":{"injectables/UsersSubscriber.html":{}}}],["src/modules/users/subscribers/user.subscriber.ts:22",{"_index":1599,"title":{},"body":{"injectables/UsersSubscriber.html":{}}}],["src/modules/users/subscribers/user.subscriber.ts:26",{"_index":1596,"title":{},"body":{"injectables/UsersSubscriber.html":{}}}],["src/modules/users/subscribers/user.subscriber.ts:34",{"_index":1598,"title":{},"body":{"injectables/UsersSubscriber.html":{}}}],["src/modules/users/subscribers/user.subscriber.ts:44",{"_index":1606,"title":{},"body":{"injectables/UsersSubscriber.html":{}}}],["src/modules/users/subscribers/user.subscriber.ts:48",{"_index":1604,"title":{},"body":{"injectables/UsersSubscriber.html":{}}}],["src/modules/users/subscribers/user.subscriber.ts:56",{"_index":1602,"title":{},"body":{"injectables/UsersSubscriber.html":{}}}],["src/modules/users/users.controller.ts",{"_index":1478,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/modules/users/users.controller.ts:28",{"_index":1489,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/modules/users/users.controller.ts:40",{"_index":1492,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/modules/users/users.controller.ts:55",{"_index":1497,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/modules/users/users.controller.ts:72",{"_index":1483,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/modules/users/users.module.ts",{"_index":1527,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/modules/users/users.service.ts",{"_index":1531,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["src/modules/users/users.service.ts:127",{"_index":1539,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/modules/users/users.service.ts:20",{"_index":1551,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/modules/users/users.service.ts:21",{"_index":1537,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/modules/users/users.service.ts:32",{"_index":1541,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/modules/users/users.service.ts:49",{"_index":1546,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/modules/users/users.service.ts:97",{"_index":1550,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/schema.service.ts",{"_index":1340,"title":{},"body":{"injectables/SchemaService.html":{},"coverage.html":{}}}],["src/schema.service.ts:13",{"_index":1342,"title":{},"body":{"injectables/SchemaService.html":{}}}],["src/schema.service.ts:20",{"_index":1343,"title":{},"body":{"injectables/SchemaService.html":{}}}],["src/seeders/databaseseeder.ts",{"_index":862,"title":{},"body":{"classes/DatabaseSeeder.html":{},"coverage.html":{}}}],["src/seeders/databaseseeder.ts:6",{"_index":865,"title":{},"body":{"classes/DatabaseSeeder.html":{}}}],["src/services/email/email.module.ts",{"_index":874,"title":{},"body":{"modules/EmailModule.html":{}}}],["src/services/email/email.service.ts",{"_index":898,"title":{},"body":{"classes/EmailService.html":{},"coverage.html":{}}}],["src/services/email/email.service.ts:11",{"_index":906,"title":{},"body":{"classes/EmailService.html":{}}}],["src/services/email/email.service.ts:4",{"_index":902,"title":{},"body":{"classes/EmailService.html":{}}}],["src/services/http",{"_index":923,"title":{},"body":{"modules/HttpClientModule.html":{},"injectables/HttpClientService.html":{},"coverage.html":{}}}],["src/services/payment/interfaces/payment.interface.ts",{"_index":955,"title":{},"body":{"interfaces/IPaymentService.html":{},"coverage.html":{}}}],["src/services/payment/interfaces/payment.interface.ts:4",{"_index":961,"title":{},"body":{"interfaces/IPaymentService.html":{}}}],["src/services/payment/interfaces/payment.interface.ts:9",{"_index":965,"title":{},"body":{"interfaces/IPaymentService.html":{}}}],["src/services/payment/payment.module.ts",{"_index":1187,"title":{},"body":{"modules/PaymentModule.html":{}}}],["src/services/payment/payment.module.ts:16",{"_index":1190,"title":{},"body":{"modules/PaymentModule.html":{}}}],["src/services/payment/stripe.service.ts",{"_index":1377,"title":{},"body":{"injectables/StripeService.html":{},"coverage.html":{}}}],["src/services/payment/stripe.service.ts:14",{"_index":1379,"title":{},"body":{"injectables/StripeService.html":{}}}],["src/services/payment/stripe.service.ts:23",{"_index":1380,"title":{},"body":{"injectables/StripeService.html":{}}}],["src/services/payment/stripe.service.ts:45",{"_index":1381,"title":{},"body":{"injectables/StripeService.html":{}}}],["src/services/payment/stripe.service.ts:60",{"_index":1385,"title":{},"body":{"injectables/StripeService.html":{}}}],["src/services/payment/types/checkout.ts",{"_index":1657,"title":{},"body":{"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/services/payment/types/payment",{"_index":1658,"title":{},"body":{"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/services/redis/redis.module.ts",{"_index":160,"title":{},"body":{"modules/AppRedisModule.html":{}}}],["src/services/redis/redis.service.ts",{"_index":174,"title":{},"body":{"injectables/AppRedisService.html":{},"coverage.html":{}}}],["src/services/redis/redis.service.ts:106",{"_index":202,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["src/services/redis/redis.service.ts:29",{"_index":217,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["src/services/redis/redis.service.ts:46",{"_index":208,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["src/services/redis/redis.service.ts:57",{"_index":211,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["src/services/redis/redis.service.ts:72",{"_index":189,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["src/services/redis/redis.service.ts:76",{"_index":206,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["src/services/redis/redis.service.ts:8",{"_index":187,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["src/services/redis/redis.service.ts:90",{"_index":193,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["src/services/storage/cloudinary.service.ts",{"_index":677,"title":{},"body":{"injectables/CloudinaryService.html":{},"coverage.html":{}}}],["src/services/storage/cloudinary.service.ts:14",{"_index":680,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["src/services/storage/cloudinary.service.ts:26",{"_index":685,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["src/services/storage/interfaces/storage.interface.ts",{"_index":967,"title":{},"body":{"interfaces/IStrorageService.html":{},"coverage.html":{}}}],["src/services/storage/interfaces/storage.interface.ts:12",{"_index":971,"title":{},"body":{"interfaces/IStrorageService.html":{}}}],["src/services/storage/interfaces/storage.interface.ts:7",{"_index":972,"title":{},"body":{"interfaces/IStrorageService.html":{}}}],["src/services/storage/s3.service.ts",{"_index":1287,"title":{},"body":{"injectables/S3Service.html":{},"coverage.html":{}}}],["src/services/storage/s3.service.ts:19",{"_index":1296,"title":{},"body":{"injectables/S3Service.html":{}}}],["src/services/storage/s3.service.ts:20",{"_index":1297,"title":{},"body":{"injectables/S3Service.html":{}}}],["src/services/storage/s3.service.ts:21",{"_index":1292,"title":{},"body":{"injectables/S3Service.html":{}}}],["src/services/storage/s3.service.ts:32",{"_index":1294,"title":{},"body":{"injectables/S3Service.html":{}}}],["src/services/storage/s3.service.ts:62",{"_index":1293,"title":{},"body":{"injectables/S3Service.html":{}}}],["src/services/storage/storage.module.ts",{"_index":1355,"title":{},"body":{"modules/StorageModule.html":{}}}],["src/services/storage/storage.module.ts:11",{"_index":1356,"title":{},"body":{"modules/StorageModule.html":{}}}],["src/services/storage/types/s3",{"_index":1661,"title":{},"body":{"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/templates/email",{"_index":896,"title":{},"body":{"modules/EmailModule.html":{}}}],["src/tracing.ts",{"_index":1663,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["sslenabled",{"_index":1642,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["st",{"_index":800,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["start",{"_index":1782,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":1785,"title":{},"body":{"index.html":{}}}],["start:prodrun",{"_index":1786,"title":{},"body":{"index.html":{}}}],["started",{"_index":1773,"title":{"index.html":{}},"body":{}}],["starter",{"_index":1775,"title":{},"body":{"index.html":{}}}],["starting",{"_index":705,"title":{},"body":{"injectables/CloudinaryService.html":{},"injectables/S3Service.html":{}}}],["state",{"_index":797,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/Migration20250730220636.html":{},"entities/User.html":{},"classes/UserFactory.html":{}}}],["state/province",{"_index":1113,"title":{},"body":{"classes/Migration20250730220636.html":{},"entities/User.html":{}}}],["statements",{"_index":1622,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":1188,"title":{},"body":{"modules/PaymentModule.html":{},"modules/StorageModule.html":{}}}],["status",{"_index":645,"title":{},"body":{"classes/CatchAllFilter.html":{},"injectables/MorganMiddleware.html":{}}}],["statuscode",{"_index":13,"title":{},"body":{"interfaces/ApiResponse.html":{},"controllers/AuthController.html":{},"classes/CatchAllFilter.html":{},"interfaces/ErrorResponse.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/SuccessResponseInterceptor.html":{},"controllers/UsersController.html":{}}}],["stops",{"_index":1032,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["storage",{"_index":1376,"title":{},"body":{"modules/StorageModule.html":{}}}],["storage_provider",{"_index":1358,"title":{},"body":{"modules/StorageModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["storagedriverenum",{"_index":1359,"title":{},"body":{"modules/StorageModule.html":{},"miscellaneous/enumerations.html":{}}}],["storagedriverenum.cloudinary",{"_index":1371,"title":{},"body":{"modules/StorageModule.html":{}}}],["storagedriverenum.s3",{"_index":1373,"title":{},"body":{"modules/StorageModule.html":{}}}],["storagemodule",{"_index":1354,"title":{"modules/StorageModule.html":{}},"body":{"modules/StorageModule.html":{},"modules.html":{}}}],["store",{"_index":219,"title":{},"body":{"injectables/AppRedisService.html":{},"injectables/JwtStrategy.html":{}}}],["stored",{"_index":1019,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["strategies/jwt.strategy",{"_index":371,"title":{},"body":{"modules/AuthModule.html":{}}}],["strategies/local.strategy",{"_index":370,"title":{},"body":{"modules/AuthModule.html":{}}}],["strategy",{"_index":1037,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["stream",{"_index":692,"title":{},"body":{"injectables/CloudinaryService.html":{},"injectables/MorganMiddleware.html":{},"dependencies.html":{}}}],["street",{"_index":1108,"title":{},"body":{"classes/Migration20250730220636.html":{},"entities/User.html":{}}}],["strict",{"_index":897,"title":{},"body":{"modules/EmailModule.html":{}}}],["string",{"_index":17,"title":{},"body":{"interfaces/ApiResponse.html":{},"controllers/AppController.html":{},"injectables/AppRedisService.html":{},"injectables/AppService.html":{},"classes/AuthResponseDto.html":{},"injectables/AuthService.html":{},"classes/BaseEntity.html":{},"classes/CatchAllFilter.html":{},"classes/ChangePasswordDto.html":{},"injectables/CreateUserCommand.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserResponseDto.html":{},"classes/EmailService.html":{},"interfaces/ErrorResponse.html":{},"classes/ForgotPasswordDto.html":{},"classes/GetProfileResponseDto.html":{},"injectables/HttpClientService.html":{},"interfaces/IStrorageService.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"injectables/MorganMiddleware.html":{},"classes/RefreshTokenDto.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"classes/ResetPasswordDto.html":{},"guards/RoleGuard.html":{},"injectables/S3Service.html":{},"injectables/SuccessResponseInterceptor.html":{},"entities/User.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["stringvalue",{"_index":436,"title":{},"body":{"injectables/AuthService.html":{}}}],["stripe",{"_index":966,"title":{},"body":{"interfaces/IPaymentService.html":{},"modules/PaymentModule.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"guards/RoleGuard.html":{},"injectables/StripeService.html":{},"injectables/SuccessResponseInterceptor.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{}}}],["stripe.checkout.sessioncreateparams",{"_index":959,"title":{},"body":{"interfaces/IPaymentService.html":{},"injectables/StripeService.html":{}}}],["stripe.paymentintent",{"_index":1403,"title":{},"body":{"injectables/StripeService.html":{}}}],["stripe.paymentintentcreateparams",{"_index":964,"title":{},"body":{"interfaces/IPaymentService.html":{},"injectables/StripeService.html":{}}}],["stripe.paymentintentsucceededevent",{"_index":1383,"title":{},"body":{"injectables/StripeService.html":{}}}],["stripe.paymentintentsucceededevent.data",{"_index":1401,"title":{},"body":{"injectables/StripeService.html":{}}}],["stripe.requestoptions",{"_index":960,"title":{},"body":{"interfaces/IPaymentService.html":{},"injectables/StripeService.html":{}}}],["stripe.service",{"_index":1198,"title":{},"body":{"modules/PaymentModule.html":{}}}],["stripe.webhooksecret.account",{"_index":1207,"title":{},"body":{"modules/PaymentModule.html":{}}}],["stripe.webhooksecret.accounttest",{"_index":1209,"title":{},"body":{"modules/PaymentModule.html":{}}}],["stripe_client_token",{"_index":1192,"title":{},"body":{"modules/PaymentModule.html":{}}}],["stripe_webhook_context_type",{"_index":1231,"title":{},"body":{"injectables/RequestBodyAndResponseInterceptor.html":{},"guards/RoleGuard.html":{},"injectables/SuccessResponseInterceptor.html":{}}}],["stripeclient",{"_index":1212,"title":{},"body":{"modules/PaymentModule.html":{},"injectables/StripeService.html":{}}}],["stripecurrencyenum",{"_index":1748,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["stripemodule",{"_index":1193,"title":{},"body":{"modules/PaymentModule.html":{}}}],["stripemodule.forrootasync",{"_index":1200,"title":{},"body":{"modules/PaymentModule.html":{}}}],["stripesecrets",{"_index":1204,"title":{},"body":{"modules/PaymentModule.html":{}}}],["stripeservice",{"_index":1197,"title":{"injectables/StripeService.html":{}},"body":{"modules/PaymentModule.html":{},"injectables/StripeService.html":{},"coverage.html":{}}}],["stripeservice.name",{"_index":1393,"title":{},"body":{"injectables/StripeService.html":{}}}],["stripewebhookhandler",{"_index":1388,"title":{},"body":{"injectables/StripeService.html":{}}}],["stripewebhookhandler('payment_intent.succeeded",{"_index":1384,"title":{},"body":{"injectables/StripeService.html":{}}}],["strong.pass",{"_index":653,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginDto.html":{}}}],["sub",{"_index":487,"title":{},"body":{"injectables/AuthService.html":{}}}],["subject",{"_index":904,"title":{},"body":{"classes/EmailService.html":{}}}],["subscribers/user.subscriber",{"_index":1529,"title":{},"body":{"modules/UsersModule.html":{}}}],["success",{"_index":407,"title":{},"body":{"classes/AuthResponseDto.html":{},"classes/CreateUserResponseDto.html":{},"classes/GetProfileResponseDto.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/SuccessResponseInterceptor.html":{}}}],["successful",{"_index":338,"title":{},"body":{"controllers/AuthController.html":{},"classes/AuthResponseDto.html":{},"injectables/CloudinaryService.html":{},"injectables/HttpClientService.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/S3Service.html":{},"injectables/SuccessResponseInterceptor.html":{}}}],["successfully",{"_index":227,"title":{},"body":{"injectables/AppRedisService.html":{},"classes/CreateUserResponseDto.html":{},"classes/EmailService.html":{},"classes/GetProfileResponseDto.html":{},"classes/PasswordResetEmailConsumer.html":{},"injectables/StripeService.html":{},"controllers/UsersController.html":{}}}],["successresponseinterceptor",{"_index":1236,"title":{"injectables/SuccessResponseInterceptor.html":{}},"body":{"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/SuccessResponseInterceptor.html":{},"coverage.html":{}}}],["summary",{"_index":49,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["super",{"_index":772,"title":{},"body":{"injectables/CreateUserCommand.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/PasswordResetEmailConsumer.html":{}}}],["super.canactivate(context",{"_index":997,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["support",{"_index":1013,"title":{},"body":{"injectables/JwtStrategy.html":{},"modules.html":{}}}],["svg",{"_index":1794,"title":{},"body":{"modules.html":{}}}],["symbol",{"_index":665,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/ResetPasswordDto.html":{}}}],["synchronized",{"_index":1352,"title":{},"body":{"injectables/SchemaService.html":{}}}],["system",{"_index":1563,"title":{},"body":{"injectables/UsersService.html":{}}}],["t",{"_index":14,"title":{},"body":{"interfaces/ApiResponse.html":{}}}],["table",{"_index":1074,"title":{},"body":{"classes/Migration20250730220636.html":{},"coverage.html":{}}}],["tablename",{"_index":1451,"title":{},"body":{"entities/User.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":1666,"title":{},"body":{"coverage.html":{}}}],["tap",{"_index":1234,"title":{},"body":{"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/SuccessResponseInterceptor.html":{}}}],["tap((response",{"_index":1253,"title":{},"body":{"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/SuccessResponseInterceptor.html":{}}}],["template",{"_index":893,"title":{},"body":{"modules/EmailModule.html":{},"classes/EmailService.html":{},"miscellaneous/variables.html":{}}}],["template_queue_name",{"_index":1194,"title":{},"body":{"modules/PaymentModule.html":{},"injectables/StripeService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["templatequeue",{"_index":1213,"title":{},"body":{"modules/PaymentModule.html":{},"injectables/StripeService.html":{}}}],["test",{"_index":1789,"title":{},"body":{"index.html":{}}}],["test:cov",{"_index":1792,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":1791,"title":{},"body":{"index.html":{}}}],["tests",{"_index":1787,"title":{},"body":{"index.html":{}}}],["text",{"_index":1084,"title":{},"body":{"classes/Migration20250730220636.html":{},"entities/User.html":{},"miscellaneous/functions.html":{}}}],["textmappropagator",{"_index":1822,"title":{},"body":{"miscellaneous/variables.html":{}}}],["this.addsql",{"_index":1073,"title":{},"body":{"classes/Migration20250730220636.html":{}}}],["this.addsql(`comment",{"_index":1102,"title":{},"body":{"classes/Migration20250730220636.html":{}}}],["this.addsql(`create",{"_index":1131,"title":{},"body":{"classes/Migration20250730220636.html":{}}}],["this.appredis",{"_index":232,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["this.appredis.decr(key",{"_index":262,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["this.appredis.del(...keys",{"_index":270,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["this.appredis.del(key",{"_index":267,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["this.appredis.exists(key",{"_index":263,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["this.appredis.get(key",{"_index":250,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["this.appredis.pipeline",{"_index":254,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["this.appredis.set(...(args",{"_index":248,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["this.appredisservice.exists(cachekey",{"_index":494,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.appredisservice.get(cachekey",{"_index":1572,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.appredisservice.set",{"_index":513,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["this.authservice.forgotpassword(email",{"_index":348,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.login",{"_index":335,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.refresh(refreshtoken",{"_index":343,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.resetpassword",{"_index":354,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.validateuser(email",{"_index":1059,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["this.configservice.get('auth.saltrounds",{"_index":1617,"title":{},"body":{"injectables/UsersSubscriber.html":{}}}],["this.configservice.getorthrow",{"_index":466,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.configservice.getorthrow('auth.jwt.expiresin",{"_index":460,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.configservice.getorthrow('auth.saltrounds",{"_index":471,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.configservice.getorthrow('aws.s3.bucket",{"_index":1318,"title":{},"body":{"injectables/S3Service.html":{}}}],["this.configservice.getorthrow('aws.s3.region",{"_index":1320,"title":{},"body":{"injectables/S3Service.html":{}}}],["this.configservice.getorthrow('cloudinary.apikey",{"_index":702,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["this.configservice.getorthrow('cloudinary.apisecret",{"_index":704,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["this.configservice.getorthrow('cloudinary.cloudname",{"_index":700,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["this.configservice.getorthrow('cloudinary.folder')}/${filecategory",{"_index":715,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["this.configservice.getorthrow('nodeenv",{"_index":1346,"title":{},"body":{"injectables/SchemaService.html":{}}}],["this.configservice.getorthrow('redis.bullboard.password",{"_index":148,"title":{},"body":{"modules/AppModule.html":{}}}],["this.configservice.getorthrow('redis.bullboard.username",{"_index":147,"title":{},"body":{"modules/AppModule.html":{}}}],["this.configservice.getorthrow('redis.namespace",{"_index":234,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["this.configservice.getorthrow('url.passwordreset",{"_index":458,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.em.transactional(async",{"_index":779,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["this.emailservice.sendemail",{"_index":1180,"title":{},"body":{"classes/PasswordResetEmailConsumer.html":{}}}],["this.geterrorcode(exception",{"_index":639,"title":{},"body":{"classes/CatchAllFilter.html":{}}}],["this.geterrormessage(exception",{"_index":636,"title":{},"body":{"classes/CatchAllFilter.html":{}}}],["this.geterrorname(exception",{"_index":637,"title":{},"body":{"classes/CatchAllFilter.html":{}}}],["this.gethttpstatus(exception",{"_index":634,"title":{},"body":{"classes/CatchAllFilter.html":{}}}],["this.hashpassword(user",{"_index":1611,"title":{},"body":{"injectables/UsersSubscriber.html":{}}}],["this.httpadapterhost",{"_index":610,"title":{},"body":{"classes/CatchAllFilter.html":{}}}],["this.httpagent",{"_index":948,"title":{},"body":{"injectables/HttpClientService.html":{}}}],["this.httpsagent",{"_index":950,"title":{},"body":{"injectables/HttpClientService.html":{}}}],["this.httpservice.axiosref.defaults.httpagent",{"_index":947,"title":{},"body":{"injectables/HttpClientService.html":{}}}],["this.httpservice.axiosref.defaults.httpsagent",{"_index":949,"title":{},"body":{"injectables/HttpClientService.html":{}}}],["this.ispasswordmodified(user",{"_index":1612,"title":{},"body":{"injectables/UsersSubscriber.html":{}}}],["this.jwtexpiresin",{"_index":459,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.jwtnotbefore",{"_index":461,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.jwtrefreshexpriresin",{"_index":465,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.jwtrefreshsecret",{"_index":468,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.jwtservice.sign",{"_index":517,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.jwtservice.sign(newpayload",{"_index":516,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.jwtservice.sign(payload",{"_index":489,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.jwtservice.verify(refreshtoken",{"_index":499,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.jwtservice.verify(resettoken",{"_index":529,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.loggercontext",{"_index":643,"title":{},"body":{"classes/CatchAllFilter.html":{}}}],["this.loggerservice.error",{"_index":641,"title":{},"body":{"classes/CatchAllFilter.html":{},"injectables/CloudinaryService.html":{}}}],["this.loggerservice.log",{"_index":242,"title":{},"body":{"injectables/AppRedisService.html":{},"injectables/CloudinaryService.html":{},"classes/EmailService.html":{},"injectables/HttpClientService.html":{},"classes/PasswordResetEmailConsumer.html":{},"injectables/S3Service.html":{},"injectables/SchemaService.html":{},"injectables/StripeService.html":{}}}],["this.loggerservice.log(`[${method",{"_index":1254,"title":{},"body":{"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/SuccessResponseInterceptor.html":{}}}],["this.loggerservice.log(`creating",{"_index":1396,"title":{},"body":{"injectables/StripeService.html":{}}}],["this.loggerservice.log(`email",{"_index":910,"title":{},"body":{"classes/EmailService.html":{}}}],["this.loggerservice.log(message.trim",{"_index":1159,"title":{},"body":{"injectables/MorganMiddleware.html":{}}}],["this.loggerservice.warn(message.trim",{"_index":1157,"title":{},"body":{"injectables/MorganMiddleware.html":{}}}],["this.mailerservice.sendmail",{"_index":909,"title":{},"body":{"classes/EmailService.html":{}}}],["this.nanoid",{"_index":781,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["this.normalizefields(user",{"_index":1610,"title":{},"body":{"injectables/UsersSubscriber.html":{}}}],["this.orm.getschemagenerator",{"_index":1348,"title":{},"body":{"injectables/SchemaService.html":{}}}],["this.passwordresetemailqueue.add('send",{"_index":522,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.passwordreseturl",{"_index":457,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.passwordreseturl}?reset",{"_index":520,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.redisservice.getorthrow",{"_index":233,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["this.reflector.get(role",{"_index":1281,"title":{},"body":{"guards/RoleGuard.html":{}}}],["this.reflector.getallandoverride(is_public_key",{"_index":994,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["this.s3bucket",{"_index":1317,"title":{},"body":{"injectables/S3Service.html":{}}}],["this.s3client.putobject",{"_index":1323,"title":{},"body":{"injectables/S3Service.html":{}}}],["this.s3region",{"_index":1319,"title":{},"body":{"injectables/S3Service.html":{}}}],["this.saltrounds",{"_index":470,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.stripeclient.checkout.sessions.create",{"_index":1394,"title":{},"body":{"injectables/StripeService.html":{}}}],["this.stripeclient.paymentintents.create",{"_index":1400,"title":{},"body":{"injectables/StripeService.html":{}}}],["this.templatequeue.add(template_queue_name",{"_index":1404,"title":{},"body":{"injectables/StripeService.html":{}}}],["this.update",{"_index":1588,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.useremailcachekey",{"_index":1557,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.useremailcachekey}:${query?.email",{"_index":1570,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.useremailcachekey}:${user?.email",{"_index":1582,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.useridcachekey",{"_index":1555,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.useridcachekey}:${query",{"_index":1566,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.useridcachekey}:${query?.id",{"_index":1568,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.useridcachekey}:${user?.id",{"_index":1580,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.assign(user",{"_index":1585,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.create(parsed",{"_index":1575,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.create(userdata",{"_index":1564,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.findone",{"_index":1559,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.findoneorfail",{"_index":1583,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.findoneorfail(query",{"_index":1577,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.getentitymanager().merge(user",{"_index":1576,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.getentitymanager().persistandflush(newuser",{"_index":1565,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.getentitymanager().persistandflush(user",{"_index":1586,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersservice.changepassword(userid",{"_index":1520,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.create",{"_index":780,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["this.usersservice.create(user",{"_index":1510,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findone",{"_index":472,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["this.usersservice.update",{"_index":525,"title":{},"body":{"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"controllers/UsersController.html":{}}}],["throw",{"_index":495,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CreateUserCommand.html":{},"injectables/JwtAuthGuard.html":{},"injectables/LocalStrategy.html":{},"guards/RoleGuard.html":{},"modules/StorageModule.html":{},"injectables/UsersService.html":{}}}],["time",{"_index":220,"title":{},"body":{"injectables/AppRedisService.html":{},"injectables/MorganMiddleware.html":{}}}],["timestamp",{"_index":551,"title":{},"body":{"classes/BaseEntity.html":{},"classes/CatchAllFilter.html":{},"interfaces/ErrorResponse.html":{},"classes/Migration20250730220636.html":{},"entities/User.html":{}}}],["timestamptz",{"_index":545,"title":{},"body":{"classes/BaseEntity.html":{},"classes/Migration20250730220636.html":{},"entities/User.html":{}}}],["timezone",{"_index":1719,"title":{},"body":{"dependencies.html":{}}}],["token",{"_index":321,"title":{},"body":{"controllers/AuthController.html":{},"classes/AuthResponseDto.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/RefreshTokenDto.html":{},"classes/ResetPasswordDto.html":{},"coverage.html":{}}}],["token'})@apibody({type",{"_index":302,"title":{},"body":{"controllers/AuthController.html":{}}}],["token=${token",{"_index":521,"title":{},"body":{"injectables/AuthService.html":{}}}],["tokens",{"_index":344,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["tokens.ts",{"_index":1654,"title":{},"body":{"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["tokens:refresh:blacklisted:${refreshtoken",{"_index":492,"title":{},"body":{"injectables/AuthService.html":{}}}],["tostream",{"_index":690,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["tostream(file.buffer).pipe(upload",{"_index":725,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["total",{"_index":1149,"title":{},"body":{"injectables/MorganMiddleware.html":{}}}],["trace",{"_index":1754,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["transform",{"_index":836,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["transformer",{"_index":837,"title":{},"body":{"classes/CreateUserDto.html":{},"dependencies.html":{}}}],["transport",{"_index":883,"title":{},"body":{"modules/EmailModule.html":{}}}],["true",{"_index":123,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRedisModule.html":{},"injectables/AppRedisService.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BaseEntity.html":{},"injectables/CreateUserCommand.html":{},"modules/EmailModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"modules/PaymentModule.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"guards/RoleGuard.html":{},"injectables/SuccessResponseInterceptor.html":{},"entities/User.html":{},"injectables/UsersSubscriber.html":{},"miscellaneous/variables.html":{}}}],["try",{"_index":498,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CreateUserCommand.html":{}}}],["ttl",{"_index":210,"title":{},"body":{"injectables/AppRedisService.html":{},"interfaces/IStrorageService.html":{},"injectables/S3Service.html":{}}}],["ttlinfo",{"_index":237,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["ttl}s",{"_index":238,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["type",{"_index":15,"title":{},"body":{"interfaces/ApiResponse.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppRedisService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/AuthResponseDto.html":{},"injectables/AuthService.html":{},"classes/BaseEntity.html":{},"classes/CatchAllFilter.html":{},"classes/ChangePasswordDto.html":{},"injectables/CloudinaryService.html":{},"injectables/CreateUserCommand.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserResponseDto.html":{},"classes/DatabaseSeeder.html":{},"classes/EmailService.html":{},"interfaces/ErrorResponse.html":{},"classes/ForgotPasswordDto.html":{},"classes/GetProfileResponseDto.html":{},"injectables/HttpClientService.html":{},"interfaces/IPaymentService.html":{},"interfaces/IStrorageService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"injectables/MorganMiddleware.html":{},"classes/PasswordResetEmailConsumer.html":{},"modules/PaymentModule.html":{},"classes/RefreshTokenDto.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/RequestContextMiddleware.html":{},"classes/ResetPasswordDto.html":{},"guards/RoleGuard.html":{},"injectables/S3Service.html":{},"injectables/SchemaService.html":{},"injectables/StripeService.html":{},"injectables/SuccessResponseInterceptor.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/UsersSubscriber.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":1806,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typeof",{"_index":623,"title":{},"body":{"classes/CatchAllFilter.html":{},"classes/CreateUserDto.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/SuccessResponseInterceptor.html":{},"injectables/UsersService.html":{}}}],["types",{"_index":606,"title":{},"body":{"classes/CatchAllFilter.html":{},"dependencies.html":{}}}],["types/auth",{"_index":453,"title":{},"body":{"injectables/AuthService.html":{}}}],["types/s3",{"_index":974,"title":{},"body":{"interfaces/IStrorageService.html":{},"injectables/S3Service.html":{}}}],["typescript",{"_index":482,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["unauthorized",{"_index":151,"title":{},"body":{"modules/AppModule.html":{},"injectables/JwtAuthGuard.html":{}}}],["unauthorizedexception",{"_index":445,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/LocalStrategy.html":{}}}],["unauthorizedexception('invalid",{"_index":509,"title":{},"body":{"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{}}}],["unauthorizedexception('refresh",{"_index":507,"title":{},"body":{"injectables/AuthService.html":{}}}],["unauthorizedexception(errorobject",{"_index":1001,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["unauthorizedresponse",{"_index":150,"title":{},"body":{"modules/AppModule.html":{}}}],["undefined",{"_index":593,"title":{},"body":{"classes/CatchAllFilter.html":{},"classes/CreateUserDto.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/SuccessResponseInterceptor.html":{},"entities/User.html":{},"injectables/UsersService.html":{}}}],["undefined})@isoptional",{"_index":827,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["unique",{"_index":1129,"title":{},"body":{"classes/Migration20250730220636.html":{},"entities/User.html":{}}}],["unit",{"_index":1788,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":191,"title":{},"body":{"injectables/AppRedisService.html":{},"injectables/JwtStrategy.html":{}}}],["unlicensed",{"_index":1804,"title":{},"body":{"properties.html":{}}}],["unused",{"_index":484,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["up",{"_index":1069,"title":{},"body":{"classes/Migration20250730220636.html":{},"controllers/UsersController.html":{}}}],["up')@apioperation({summary",{"_index":1486,"title":{},"body":{"controllers/UsersController.html":{}}}],["update",{"_index":562,"title":{},"body":{"classes/BaseEntity.html":{},"injectables/JwtStrategy.html":{},"classes/Migration20250730220636.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["update(data",{"_index":1548,"title":{},"body":{"injectables/UsersService.html":{}}}],["updated",{"_index":1518,"title":{},"body":{"controllers/UsersController.html":{}}}],["updated_at",{"_index":1077,"title":{},"body":{"classes/Migration20250730220636.html":{}}}],["updatedat",{"_index":542,"title":{},"body":{"classes/BaseEntity.html":{}}}],["updateduser",{"_index":1517,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["updateprofile",{"_index":1480,"title":{},"body":{"controllers/UsersController.html":{}}}],["updateprofile(req",{"_index":1493,"title":{},"body":{"controllers/UsersController.html":{}}}],["updateprofiledto",{"_index":1413,"title":{"classes/UpdateProfileDto.html":{}},"body":{"classes/UpdateProfileDto.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["upload",{"_index":678,"title":{},"body":{"injectables/CloudinaryService.html":{},"interfaces/IStrorageService.html":{},"injectables/S3Service.html":{}}}],["upload(file",{"_index":681,"title":{},"body":{"injectables/CloudinaryService.html":{},"interfaces/IStrorageService.html":{},"injectables/S3Service.html":{}}}],["uploadapierrorresponse",{"_index":689,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["uploadapiresponse",{"_index":688,"title":{},"body":{"injectables/CloudinaryService.html":{},"interfaces/IStrorageService.html":{}}}],["uploadfilecategoryenum",{"_index":684,"title":{},"body":{"injectables/CloudinaryService.html":{},"interfaces/IStrorageService.html":{},"injectables/S3Service.html":{},"miscellaneous/enumerations.html":{}}}],["uppercase",{"_index":663,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/ResetPasswordDto.html":{}}}],["url",{"_index":131,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRedisModule.html":{},"injectables/HttpClientService.html":{},"classes/Migration20250730220636.html":{},"injectables/MorganMiddleware.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/S3Service.html":{},"injectables/SuccessResponseInterceptor.html":{},"entities/User.html":{},"dependencies.html":{}}}],["url=${result.secure_url",{"_index":723,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["usa",{"_index":844,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["usa'})@isstring()@isoptional",{"_index":806,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["usd",{"_index":1758,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["use",{"_index":224,"title":{},"body":{"injectables/AppRedisService.html":{},"injectables/MorganMiddleware.html":{},"injectables/RequestContextMiddleware.html":{}}}],["use(req",{"_index":1135,"title":{},"body":{"injectables/MorganMiddleware.html":{},"injectables/RequestContextMiddleware.html":{}}}],["useclass",{"_index":396,"title":{},"body":{"modules/AuthModule.html":{}}}],["used",{"_index":229,"title":{},"body":{"injectables/AppRedisService.html":{},"injectables/JwtStrategy.html":{}}}],["usefactory",{"_index":127,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRedisModule.html":{},"modules/AuthModule.html":{},"modules/EmailModule.html":{},"modules/PaymentModule.html":{},"modules/StorageModule.html":{}}}],["useguards",{"_index":311,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(localauthguard",{"_index":330,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(localauthguard)@public()@post('login')@httpcode(httpstatus.ok)@apioperation({summary",{"_index":293,"title":{},"body":{"controllers/AuthController.html":{}}}],["user",{"_index":294,"title":{"entities/User.html":{}},"body":{"controllers/AuthController.html":{},"classes/AuthResponseDto.html":{},"injectables/AuthService.html":{},"classes/ChangePasswordDto.html":{},"injectables/CreateUserCommand.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserResponseDto.html":{},"modules/EmailModule.html":{},"classes/GetProfileResponseDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"classes/Migration20250730220636.html":{},"injectables/MorganMiddleware.html":{},"classes/ResetPasswordDto.html":{},"entities/User.html":{},"classes/UserFactory.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/UsersSubscriber.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["user'})@apibody({type",{"_index":1488,"title":{},"body":{"controllers/UsersController.html":{}}}],["user.command",{"_index":114,"title":{},"body":{"modules/AppModule.html":{}}}],["user.command.ts",{"_index":727,"title":{},"body":{"injectables/CreateUserCommand.html":{},"coverage.html":{}}}],["user.command.ts:14",{"_index":738,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["user.command.ts:23",{"_index":760,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["user.command.ts:50",{"_index":744,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["user.command.ts:56",{"_index":749,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["user.command.ts:62",{"_index":752,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["user.command.ts:68",{"_index":756,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["user.dto",{"_index":1419,"title":{},"body":{"classes/UpdateProfileDto.html":{},"controllers/UsersController.html":{}}}],["user.dto.ts",{"_index":789,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:115",{"_index":817,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:126",{"_index":828,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:130",{"_index":804,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:22",{"_index":812,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:30",{"_index":814,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:38",{"_index":816,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:46",{"_index":802,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:54",{"_index":805,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:62",{"_index":823,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:70",{"_index":830,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:78",{"_index":807,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:91",{"_index":810,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:99",{"_index":820,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.email",{"_index":518,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.firstname",{"_index":524,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.id",{"_index":488,"title":{},"body":{"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{}}}],["user.password",{"_index":477,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersSubscriber.html":{}}}],["user.passwordresetrequested",{"_index":531,"title":{},"body":{"injectables/AuthService.html":{}}}],["user@example.com",{"_index":838,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/ForgotPasswordDto.html":{},"classes/LoginDto.html":{}}}],["user@example.com'})@isemail",{"_index":914,"title":{},"body":{"classes/ForgotPasswordDto.html":{},"classes/LoginDto.html":{}}}],["user@example.com'})@isemail()@isnotempty",{"_index":811,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["userdata",{"_index":1542,"title":{},"body":{"injectables/UsersService.html":{}}}],["userdata.email",{"_index":1560,"title":{},"body":{"injectables/UsersService.html":{}}}],["useremailcachekey",{"_index":1532,"title":{},"body":{"injectables/UsersService.html":{}}}],["userfactory",{"_index":867,"title":{"classes/UserFactory.html":{}},"body":{"classes/DatabaseSeeder.html":{},"classes/UserFactory.html":{},"coverage.html":{}}}],["userfactory(em).make(10",{"_index":869,"title":{},"body":{"classes/DatabaseSeeder.html":{}}}],["userid",{"_index":1515,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["useridcachekey",{"_index":1533,"title":{},"body":{"injectables/UsersService.html":{}}}],["usernamefield",{"_index":1058,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["userrepository",{"_index":1535,"title":{},"body":{"injectables/UsersService.html":{}}}],["userrole",{"_index":1282,"title":{},"body":{"guards/RoleGuard.html":{}}}],["userroleenum",{"_index":757,"title":{},"body":{"injectables/CreateUserCommand.html":{},"classes/CreateUserDto.html":{},"entities/User.html":{},"classes/UserFactory.html":{},"miscellaneous/enumerations.html":{}}}],["userroleenum.user",{"_index":848,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/User.html":{}}}],["userroleenum})@isenum(userroleenum",{"_index":826,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["users",{"_index":146,"title":{},"body":{"modules/AppModule.html":{},"classes/Migration20250730220636.html":{},"entities/User.html":{},"controllers/UsersController.html":{}}}],["users\".\"address",{"_index":1107,"title":{},"body":{"classes/Migration20250730220636.html":{}}}],["users\".\"avatar",{"_index":1104,"title":{},"body":{"classes/Migration20250730220636.html":{}}}],["users\".\"change_password",{"_index":1121,"title":{},"body":{"classes/Migration20250730220636.html":{}}}],["users\".\"city",{"_index":1109,"title":{},"body":{"classes/Migration20250730220636.html":{}}}],["users\".\"country",{"_index":1114,"title":{},"body":{"classes/Migration20250730220636.html":{}}}],["users\".\"country_code",{"_index":1115,"title":{},"body":{"classes/Migration20250730220636.html":{}}}],["users\".\"created_at",{"_index":1100,"title":{},"body":{"classes/Migration20250730220636.html":{}}}],["users\".\"deleted_at",{"_index":1099,"title":{},"body":{"classes/Migration20250730220636.html":{}}}],["users\".\"email",{"_index":1103,"title":{},"body":{"classes/Migration20250730220636.html":{}}}],["users\".\"first_name",{"_index":1105,"title":{},"body":{"classes/Migration20250730220636.html":{}}}],["users\".\"last_logged_in",{"_index":1125,"title":{},"body":{"classes/Migration20250730220636.html":{}}}],["users\".\"last_name",{"_index":1106,"title":{},"body":{"classes/Migration20250730220636.html":{}}}],["users\".\"password",{"_index":1118,"title":{},"body":{"classes/Migration20250730220636.html":{}}}],["users\".\"password_reset_requested",{"_index":1124,"title":{},"body":{"classes/Migration20250730220636.html":{}}}],["users\".\"phone_number",{"_index":1117,"title":{},"body":{"classes/Migration20250730220636.html":{}}}],["users\".\"postal_code",{"_index":1110,"title":{},"body":{"classes/Migration20250730220636.html":{}}}],["users\".\"role",{"_index":1120,"title":{},"body":{"classes/Migration20250730220636.html":{}}}],["users\".\"state",{"_index":1112,"title":{},"body":{"classes/Migration20250730220636.html":{}}}],["users\".\"updated_at",{"_index":1101,"title":{},"body":{"classes/Migration20250730220636.html":{}}}],["users.controller",{"_index":1528,"title":{},"body":{"modules/UsersModule.html":{}}}],["users.service",{"_index":1499,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["users/entities/user.entity",{"_index":449,"title":{},"body":{"injectables/AuthService.html":{}}}],["users/users.module",{"_index":365,"title":{},"body":{"modules/AuthModule.html":{}}}],["users/users.service",{"_index":446,"title":{},"body":{"injectables/AuthService.html":{}}}],["users:email",{"_index":1558,"title":{},"body":{"injectables/UsersService.html":{}}}],["users:id",{"_index":1556,"title":{},"body":{"injectables/UsersService.html":{}}}],["users_deleted_at_index",{"_index":1130,"title":{},"body":{"classes/Migration20250730220636.html":{}}}],["users_email_index",{"_index":1132,"title":{},"body":{"classes/Migration20250730220636.html":{}}}],["users_email_unique",{"_index":1128,"title":{},"body":{"classes/Migration20250730220636.html":{}}}],["users_pkey",{"_index":1096,"title":{},"body":{"classes/Migration20250730220636.html":{}}}],["userscontroller",{"_index":1477,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["usersmodule",{"_index":64,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersservice",{"_index":420,"title":{"injectables/UsersService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/CreateUserCommand.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["userssubscriber",{"_index":1526,"title":{"injectables/UsersSubscriber.html":{}},"body":{"modules/UsersModule.html":{},"injectables/UsersSubscriber.html":{},"coverage.html":{},"overview.html":{}}}],["using",{"_index":240,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["utc",{"_index":1055,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["util",{"_index":1740,"title":{},"body":{"dependencies.html":{}}}],["uuid",{"_index":558,"title":{},"body":{"classes/BaseEntity.html":{},"classes/Migration20250730220636.html":{},"dependencies.html":{}}}],["uuidv7",{"_index":556,"title":{},"body":{"classes/BaseEntity.html":{}}}],["v2",{"_index":686,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["v7",{"_index":568,"title":{},"body":{"classes/BaseEntity.html":{}}}],["val",{"_index":745,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["validate",{"_index":1004,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["validate(email",{"_index":1051,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["validate(req",{"_index":1006,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validateuser",{"_index":418,"title":{},"body":{"injectables/AuthService.html":{}}}],["validateuser(email",{"_index":433,"title":{},"body":{"injectables/AuthService.html":{}}}],["validator",{"_index":675,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/ForgotPasswordDto.html":{},"classes/LoginDto.html":{},"classes/RefreshTokenDto.html":{},"classes/ResetPasswordDto.html":{},"dependencies.html":{}}}],["value",{"_index":214,"title":{},"body":{"injectables/AppRedisService.html":{},"classes/BaseEntity.html":{},"classes/CatchAllFilter.html":{},"injectables/CreateUserCommand.html":{},"classes/CreateUserDto.html":{},"injectables/HttpClientService.html":{},"injectables/S3Service.html":{},"entities/User.html":{},"classes/UserFactory.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["value.replace(/\\+/g",{"_index":846,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["varchar",{"_index":1424,"title":{},"body":{"entities/User.html":{}}}],["varchar(100",{"_index":1082,"title":{},"body":{"classes/Migration20250730220636.html":{}}}],["varchar(20",{"_index":1086,"title":{},"body":{"classes/Migration20250730220636.html":{}}}],["varchar(255",{"_index":1078,"title":{},"body":{"classes/Migration20250730220636.html":{}}}],["varchar(3",{"_index":1088,"title":{},"body":{"classes/Migration20250730220636.html":{}}}],["varchar(500",{"_index":1080,"title":{},"body":{"classes/Migration20250730220636.html":{}}}],["variable",{"_index":1626,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":1812,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["vars",{"_index":485,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["version",{"_index":1146,"title":{},"body":{"injectables/MorganMiddleware.html":{},"properties.html":{}}}],["void",{"_index":80,"title":{},"body":{"modules/AppModule.html":{},"classes/CatchAllFilter.html":{},"injectables/MorganMiddleware.html":{},"injectables/RequestContextMiddleware.html":{},"injectables/UsersSubscriber.html":{},"miscellaneous/functions.html":{}}}],["w3cbaggagepropagator",{"_index":1827,"title":{},"body":{"miscellaneous/variables.html":{}}}],["w3ctracecontextpropagator",{"_index":1826,"title":{},"body":{"miscellaneous/variables.html":{}}}],["watch",{"_index":1783,"title":{},"body":{"index.html":{}}}],["webhookconfig",{"_index":1203,"title":{},"body":{"modules/PaymentModule.html":{}}}],["webhooks",{"_index":105,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["welcome",{"_index":32,"title":{},"body":{"controllers/AppController.html":{}}}],["welcomemessage",{"_index":29,"title":{},"body":{"controllers/AppController.html":{}}}],["whether",{"_index":1122,"title":{},"body":{"classes/Migration20250730220636.html":{},"entities/User.html":{}}}],["winston",{"_index":1725,"title":{},"body":{"dependencies.html":{}}}],["winston.logger",{"_index":1767,"title":{},"body":{"miscellaneous/functions.html":{}}}],["without",{"_index":241,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["word",{"_index":1273,"title":{},"body":{"classes/ResetPasswordDto.html":{}}}],["word.'})@isstring()@isnotempty()@matches(/^(?=.*[a",{"_index":1267,"title":{},"body":{"classes/ResetPasswordDto.html":{}}}],["workerhost",{"_index":1170,"title":{},"body":{"classes/PasswordResetEmailConsumer.html":{}}}],["world",{"_index":275,"title":{},"body":{"injectables/AppService.html":{}}}],["write",{"_index":1154,"title":{},"body":{"injectables/MorganMiddleware.html":{}}}],["wrong",{"_index":1035,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["yarn",{"_index":1779,"title":{},"body":{"index.html":{}}}],["yes",{"_index":212,"title":{},"body":{"injectables/AppRedisService.html":{},"interfaces/IPaymentService.html":{},"interfaces/IStrorageService.html":{},"injectables/S3Service.html":{},"injectables/StripeService.html":{},"injectables/UsersService.html":{}}}],["z\\d!@#$%^&*()_",{"_index":658,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/ResetPasswordDto.html":{}}}],["z])(?=.*[!@#$%^&*()_",{"_index":656,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/ResetPasswordDto.html":{}}}],["z])(?=.*[a",{"_index":655,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/ResetPasswordDto.html":{}}}],["za",{"_index":657,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/ResetPasswordDto.html":{}}}],["zoom",{"_index":68,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRedisModule.html":{},"modules/AuthModule.html":{},"modules/EmailModule.html":{},"modules/HttpClientModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"interfaces/ApiResponse.html":{"url":"interfaces/ApiResponse.html","title":"interface - ApiResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ApiResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/interfaces/api-response.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            data\n                                        \n                                \n                                \n                                        \n                                            message\n                                        \n                                \n                                \n                                        \n                                            statusCode\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        data:     T\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     T\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        message\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        message:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        statusCode\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        statusCode:     HttpStatus\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     HttpStatus\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { HttpStatus } from '@nestjs/common';\n\nexport interface ApiResponse {\n  statusCode: HttpStatus;\n  message: string;\n  data?: T;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                welcomeMessage\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        welcomeMessage\n                        \n                    \n                \n            \n            \n                \n                        \n                    welcomeMessage()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@HttpCode(HttpStatus.OK)@Public()@ApiOperation({summary: 'Welcome message for nest-js-boilerplate'})\n                \n            \n\n                    \n                        \n                            Defined in src/app.controller.ts:12\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     literal type\n\n                        \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, HttpCode, HttpStatus } from '@nestjs/common';\nimport { Public } from './modules/auth/decorators/public.decorator';\nimport { ApiOperation, ApiTags } from '@nestjs/swagger';\n\n@ApiTags('app')\n@Controller()\nexport class AppController {\n  @Get()\n  @HttpCode(HttpStatus.OK)\n  @Public()\n  @ApiOperation({ summary: 'Welcome message for nest-js-boilerplate' })\n  welcomeMessage(): { data: string } {\n    return { data: 'Welcome to nest-js-boilerplate! :)' };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nCreateUserCommand\n\nCreateUserCommand\n\nAppModule -->\n\nCreateUserCommand->AppModule\n\n\n\n\n\nSchemaService\n\nSchemaService\n\nAppModule -->\n\nSchemaService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                        \n                            CreateUserCommand\n                        \n                        \n                            SchemaService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        configure\n                        \n                    \n                \n            \n            \n                \nconfigure(consumer: MiddlewareConsumer)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app.module.ts:58\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                consumer\n                                            \n                                                        MiddlewareConsumer\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n    \n\n\n    \n        import {\n  Logger,\n  MiddlewareConsumer,\n  Module,\n  NestModule,\n  RequestMethod,\n} from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport configuration from './config/index.';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { UsersModule } from './modules/users/users.module';\nimport { AuthModule } from './modules/auth/auth.module';\nimport { MorganMiddleware } from './common/middlewares/morgan.middleware';\nimport { MikroOrmModule } from '@mikro-orm/nestjs';\nimport { SchemaService } from './schema.service';\nimport basicAuth from 'express-basic-auth';\nimport { applyRawBodyOnlyTo } from '@golevelup/nestjs-webhooks';\nimport { BullModule } from '@nestjs/bullmq';\nimport { BullBoardModule } from '@bull-board/nestjs';\nimport { ExpressAdapter } from '@bull-board/express';\nimport { CreateUserCommand } from './commands/create-user.command';\nimport { RequestContextMiddleware } from './common/middlewares/request-context.middleware';\nimport mikroOrmConfig from '@config/mikro-orm.config';\n\n@Module({\n  imports: [\n    ConfigModule.forRoot({\n      isGlobal: true,\n      load: [configuration],\n      cache: true,\n    }),\n    MikroOrmModule.forRootAsync({\n      imports: [ConfigModule],\n      useFactory: () => mikroOrmConfig,\n    }),\n    UsersModule,\n    AuthModule,\n    BullModule.forRootAsync({\n      inject: [ConfigService],\n      useFactory: (configService: ConfigService) => ({\n        connection: {\n          url: configService.getOrThrow('redis.url'),\n        },\n      }),\n    }),\n    BullBoardModule.forRoot({\n      adapter: ExpressAdapter,\n      route: '/queues',\n    }),\n  ],\n  controllers: [AppController],\n  providers: [AppService, Logger, SchemaService, CreateUserCommand],\n})\nexport class AppModule implements NestModule {\n  constructor(private readonly configService: ConfigService) {}\n\n  configure(consumer: MiddlewareConsumer) {\n    applyRawBodyOnlyTo(consumer, {\n      method: RequestMethod.ALL,\n      path: '*path/webhook',\n    });\n\n    consumer\n      .apply(\n        basicAuth({\n          users: {\n            [this.configService.getOrThrow('redis.bullBoard.username')]:\n              this.configService.getOrThrow('redis.bullBoard.password'),\n          },\n          challenge: true,\n          unauthorizedResponse: 'Unauthorized',\n        }),\n      )\n      .forRoutes({ path: 'queues', method: RequestMethod.ALL });\n\n    consumer.apply(MorganMiddleware).forRoutes('*');\n\n    consumer.apply(RequestContextMiddleware).forRoutes('*');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppRedisModule.html":{"url":"modules/AppRedisModule.html","title":"module - AppRedisModule","body":"\n                   \n\n\n\n\n    Modules\n    AppRedisModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppRedisModule\n\n\n\ncluster_AppRedisModule_exports\n\n\n\ncluster_AppRedisModule_providers\n\n\n\n\nAppRedisService \n\nAppRedisService \n\n\n\nAppRedisModule\n\nAppRedisModule\n\nAppRedisService  -->\n\nAppRedisModule->AppRedisService \n\n\n\n\n\nAppRedisService\n\nAppRedisService\n\nAppRedisModule -->\n\nAppRedisService->AppRedisModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/services/redis/redis.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppRedisService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AppRedisService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Logger, Module } from '@nestjs/common';\nimport { AppRedisService } from './redis.service';\nimport { RedisModule } from '@liaoliaots/nestjs-redis';\nimport { ConfigService } from '@nestjs/config';\n\n@Module({\n  imports: [\n    RedisModule.forRootAsync({\n      inject: [ConfigService],\n      useFactory: async (configService: ConfigService) => {\n        return {\n          readyLog: true,\n          errorLog: true,\n          config: [\n            {\n              namespace: configService.getOrThrow('redis.namespace'),\n              url: configService.getOrThrow('redis.url'),\n            },\n          ],\n        };\n      },\n    }),\n  ],\n  providers: [AppRedisService, Logger],\n  exports: [AppRedisService],\n})\nexport class AppRedisModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppRedisService.html":{"url":"injectables/AppRedisService.html","title":"injectable - AppRedisService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppRedisService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/redis/redis.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                appRedis\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                decrement\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                deleteMany\n                            \n                            \n                                    Async\n                                exists\n                            \n                            \n                                    Async\n                                get\n                            \n                            \n                                    Async\n                                increment\n                            \n                            \n                                    Async\n                                set\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(loggerService: LoggerService, configService: ConfigService, redisService: RedisService)\n                    \n                \n                        \n                            \n                                Defined in src/services/redis/redis.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        loggerService\n                                                  \n                                                        \n                                                                    LoggerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        redisService\n                                                  \n                                                        \n                                                                    RedisService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        decrement\n                        \n                    \n                \n            \n            \n                \n                        \n                    decrement(key: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/redis/redis.service.ts:72\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(key: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/redis/redis.service.ts:90\n                        \n                    \n\n\n            \n                \n                        Delete a Redis key\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Redis key to delete\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                Number of keys deleted (0 or 1)\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        deleteMany\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteMany(keys: string[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/redis/redis.service.ts:106\n                        \n                    \n\n\n            \n                \n                        Delete multiple Redis keys\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                keys\n                                            \n                                                        string[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Array of Redis keys to delete\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                Number of keys deleted\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        exists\n                        \n                    \n                \n            \n            \n                \n                        \n                    exists(key: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/redis/redis.service.ts:76\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        get\n                        \n                    \n                \n            \n            \n                \n                        \n                    get(key: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/redis/redis.service.ts:46\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        increment\n                        \n                    \n                \n            \n            \n                \n                        \n                    increment(key: string, ttl?: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/redis/redis.service.ts:57\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                ttl\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        set\n                        \n                    \n                \n            \n            \n                \n                        \n                    set(key: string, value: any, ttl?: number, nx: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/redis/redis.service.ts:29\n                        \n                    \n\n\n            \n                \n                        Set a Redis key\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    Redis key\n\n                                            \n                                        \n                                        \n                                                value\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    Value to store\n\n                                            \n                                        \n                                        \n                                                ttl\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    Time-to-live in seconds\n\n                                            \n                                        \n                                        \n                                                nx\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    false\n                                            \n\n                                            \n                                                    Set to true to use NX (only set if key does not exist)\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                'OK' if set successfully, null if not (when NX is used)\n\n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        appRedis\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Redis\n\n                    \n                \n                    \n                        \n                                Defined in src/services/redis/redis.service.ts:8\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable, Logger, LoggerService } from '@nestjs/common';\nimport { RedisService } from '@liaoliaots/nestjs-redis';\nimport Redis from 'ioredis';\nimport { ConfigService } from '@nestjs/config';\n\n@Injectable()\nexport class AppRedisService {\n  private readonly appRedis: Redis;\n\n  constructor(\n    @Inject(Logger)\n    private readonly loggerService: LoggerService,\n    private readonly configService: ConfigService,\n    private readonly redisService: RedisService,\n  ) {\n    this.appRedis = this.redisService.getOrThrow(\n      this.configService.getOrThrow('redis.namespace'),\n    );\n  }\n\n  /**\n   * Set a Redis key\n   * @param key Redis key\n   * @param value Value to store\n   * @param ttl Time-to-live in seconds\n   * @param nx Set to true to use NX (only set if key does not exist)\n   * @returns 'OK' if set successfully, null if not (when NX is used)\n   */\n  async set(key: string, value: any, ttl?: number, nx: boolean = false) {\n    const ttlInfo = ttl ? `TTL: ${ttl}s` : 'no TTL';\n    const nxInfo = nx ? 'using NX' : 'without NX';\n\n    this.loggerService.log(\n      `Setting key \"${key}\" (${ttlInfo}, ${nxInfo})`,\n      AppRedisService.name,\n    );\n\n    const args: (string | number)[] = [key, value];\n\n    if (nx) args.push('NX');\n    if (ttl) args.push('EX', ttl);\n\n    return this.appRedis.set(...(args as Parameters));\n  }\n\n  async get(key: string) {\n    const value = await this.appRedis.get(key);\n\n    this.loggerService.log(\n      `Getting key \"${key}\" - ${value ? 'Found' : 'Not Found'}`,\n      AppRedisService.name,\n    );\n\n    return value;\n  }\n\n  async increment(key: string, ttl?: number): Promise {\n    const pipeline = this.appRedis.pipeline();\n\n    if (ttl) {\n      pipeline.set(key, 0, 'EX', ttl, 'NX');\n    }\n\n    pipeline.incr(key);\n\n    const results = await pipeline.exec();\n    const incrResult = results[ttl ? 1 : 0];\n\n    return incrResult[1];\n  }\n\n  async decrement(key: string) {\n    return this.appRedis.decr(key);\n  }\n\n  async exists(key: string): Promise {\n    const exists = await this.appRedis.exists(key);\n    this.loggerService.log(\n      `Checking existence of key \"${key}\" - ${exists ? 'Exists' : 'Does not exist'}`,\n      AppRedisService.name,\n    );\n    return exists > 0;\n  }\n\n  /**\n   * Delete a Redis key\n   * @param key Redis key to delete\n   * @returns Number of keys deleted (0 or 1)\n   */\n  async delete(key: string): Promise {\n    const result = await this.appRedis.del(key);\n\n    this.loggerService.log(\n      `Deleting key \"${key}\" - ${result > 0 ? 'Deleted' : 'Key not found'}`,\n      AppRedisService.name,\n    );\n\n    return result;\n  }\n\n  /**\n   * Delete multiple Redis keys\n   * @param keys Array of Redis keys to delete\n   * @returns Number of keys deleted\n   */\n  async deleteMany(keys: string[]): Promise {\n    if (keys.length === 0) return 0;\n\n    const result = await this.appRedis.del(...keys);\n\n    this.loggerService.log(\n      `Deleting ${keys.length} keys - ${result} deleted`,\n      AppRedisService.name,\n    );\n\n    return result;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app.service.ts:5\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello World!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                forgotPassword\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                login\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                refresh\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                resetPassword\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        forgotPassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    forgotPassword(body: ForgotPasswordDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Post('forgot-password')@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Request password reset'})@ApiBody({type: ForgotPasswordDto})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/auth/auth.controller.ts:63\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            ForgotPasswordDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(req: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(LocalAuthGuard)@Public()@Post('login')@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'User login'})@ApiBody({type: LoginDto})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/auth/auth.controller.ts:31\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        refresh\n                        \n                    \n                \n            \n            \n                \n                        \n                    refresh(body: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Post('refresh')@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Refresh access token'})@ApiBody({type: RefreshTokenDto})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/auth/auth.controller.ts:47\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        resetPassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    resetPassword(body: ResetPasswordDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Post('reset-password')@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Reset user password'})@ApiBody({type: ResetPasswordDto, description: 'Reset password data'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/auth/auth.controller.ts:79\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            ResetPasswordDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Request,\n  Post,\n  UseGuards,\n  Body,\n  HttpStatus,\n  HttpCode,\n} from '@nestjs/common';\nimport { ApiTags, ApiOperation, ApiBody } from '@nestjs/swagger';\nimport { LocalAuthGuard } from './guards/local-auth.guard';\nimport { AuthService } from './auth.service';\nimport { Public } from './decorators/public.decorator';\nimport { LoginDto } from './dto/login.dto';\nimport { RefreshTokenDto } from './dto/refresh-token-dto';\nimport { ForgotPasswordDto } from './dto/forgot-password.dto';\nimport { ResetPasswordDto } from './dto/reset-password.dto';\nimport { ApiResponse } from '@common/interfaces/api-response.interface';\n\n@ApiTags('auth')\n@Controller('auth')\nexport class AuthController {\n  constructor(private readonly authService: AuthService) {}\n\n  @UseGuards(LocalAuthGuard)\n  @Public()\n  @Post('login')\n  @HttpCode(HttpStatus.OK)\n  @ApiOperation({ summary: 'User login' })\n  @ApiBody({ type: LoginDto })\n  async login(@Request() req: any): Promise> {\n    const { access_token, refresh_token } = await this.authService.login(\n      req.user,\n    );\n    return {\n      statusCode: HttpStatus.OK,\n      message: 'Login Successful',\n      data: { accessToken: access_token, refreshToken: refresh_token },\n    };\n  }\n\n  @Public()\n  @Post('refresh')\n  @HttpCode(HttpStatus.OK)\n  @ApiOperation({ summary: 'Refresh access token' })\n  @ApiBody({ type: RefreshTokenDto })\n  async refresh(@Body() body: any): Promise> {\n    const { refreshToken } = body;\n    const { access_token, refresh_token } =\n      await this.authService.refresh(refreshToken);\n    return {\n      statusCode: HttpStatus.OK,\n      message: 'Tokens refreshed',\n      data: { accessToken: access_token, refreshToken: refresh_token },\n    };\n  }\n\n  @Public()\n  @Post('forgot-password')\n  @HttpCode(HttpStatus.OK)\n  @ApiOperation({ summary: 'Request password reset' })\n  @ApiBody({ type: ForgotPasswordDto })\n  async forgotPassword(\n    @Body() body: ForgotPasswordDto,\n  ): Promise> {\n    const { email } = body;\n    await this.authService.forgotPassword(email);\n    return {\n      statusCode: HttpStatus.OK,\n      message: 'Password reset email sent',\n    };\n  }\n\n  @Public()\n  @Post('reset-password')\n  @HttpCode(HttpStatus.OK)\n  @ApiOperation({ summary: 'Reset user password' })\n  @ApiBody({ type: ResetPasswordDto, description: 'Reset password data' })\n  async resetPassword(\n    @Body() body: ResetPasswordDto,\n  ): Promise> {\n    const { resetToken, newPassword, confirmPassword } = body;\n    await this.authService.resetPassword(\n      resetToken,\n      newPassword,\n      confirmPassword,\n    );\n    return {\n      statusCode: HttpStatus.OK,\n      message: 'Password reset successful',\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nAppRedisModule\n\nAppRedisModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nAppRedisModule->AuthModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAuthModule -->\n\nUsersModule->AuthModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthModule -->\n\nLocalStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            JwtStrategy\n                        \n                        \n                            LocalStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AppRedisModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { APP_GUARD } from '@nestjs/core';\nimport { AuthController } from './auth.controller';\nimport { AuthService } from './auth.service';\nimport { UsersModule } from '../users/users.module';\nimport { JwtModule } from '@nestjs/jwt';\nimport { PassportModule } from '@nestjs/passport';\nimport { LocalStrategy } from './strategies/local.strategy';\nimport { JwtStrategy } from './strategies/jwt.strategy';\nimport { JwtAuthGuard } from './guards/jwt-auth.guard';\nimport { ConfigService } from '@nestjs/config';\nimport { AppRedisModule } from '@services/redis/redis.module';\nimport { BullModule } from '@nestjs/bullmq';\nimport { BullBoardModule } from '@bull-board/nestjs';\nimport { PASSWORD_RESET_EMAIL_QUEUE_NAME } from '@common/constants';\nimport { BullMQAdapter } from '@bull-board/api/bullMQAdapter';\n\n@Module({\n  imports: [\n    UsersModule,\n    PassportModule,\n    JwtModule.registerAsync({\n      useFactory: (configService: ConfigService) => ({\n        global: true,\n        secret: configService.get('auth.jwt.secret'),\n        signOptions: {\n          expiresIn: configService.get('auth.jwt.expiresIn'),\n        },\n      }),\n      inject: [ConfigService],\n    }),\n    BullModule.registerQueue({\n      name: PASSWORD_RESET_EMAIL_QUEUE_NAME,\n      defaultJobOptions: {\n        attempts: 5,\n        backoff: { type: 'exponential', delay: 2000 },\n      },\n    }),\n    BullBoardModule.forFeature({\n      name: PASSWORD_RESET_EMAIL_QUEUE_NAME,\n      adapter: BullMQAdapter,\n    }),\n    AppRedisModule,\n  ],\n  controllers: [AuthController],\n  providers: [\n    AuthService,\n    LocalStrategy,\n    JwtStrategy,\n    {\n      provide: APP_GUARD,\n      useClass: JwtAuthGuard,\n    },\n  ],\n  exports: [AuthService],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AuthResponseDto.html":{"url":"classes/AuthResponseDto.html","title":"class - AuthResponseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AuthResponseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/dto/auth-response.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                accessToken\n                            \n                            \n                                    \n                                message\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        accessToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Access token for authenticated user', example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/dto/auth-response.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        message\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Message indicating the success of the operation', example: 'Login Successful'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/dto/auth-response.dto.ts:14\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\n\nexport class AuthResponseDto {\n  @ApiProperty({\n    description: 'Access token for authenticated user',\n    example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...',\n  })\n  accessToken: string;\n\n  @ApiProperty({\n    description: 'Message indicating the success of the operation',\n    example: 'Login Successful',\n  })\n  message: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                jwtExpiresIn\n                            \n                            \n                                    Private\n                                    Readonly\n                                jwtNotBefore\n                            \n                            \n                                    Private\n                                    Readonly\n                                jwtRefreshExpriresIn\n                            \n                            \n                                    Private\n                                    Readonly\n                                jwtRefreshSecret\n                            \n                            \n                                    Private\n                                    Readonly\n                                passwordResetUrl\n                            \n                            \n                                    Private\n                                    Readonly\n                                saltRounds\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                forgotPassword\n                            \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                refresh\n                            \n                            \n                                    Async\n                                resetPassword\n                            \n                            \n                                    Async\n                                validateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(appRedisService: AppRedisService, usersService: UsersService, jwtService: JwtService, configService: ConfigService, passwordResetEmailQueue: Queue)\n                    \n                \n                        \n                            \n                                Defined in src/modules/auth/auth.service.ts:26\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        appRedisService\n                                                  \n                                                        \n                                                                        AppRedisService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        passwordResetEmailQueue\n                                                  \n                                                        \n                                                                    Queue\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        forgotPassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    forgotPassword(email: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/auth/auth.service.ts:135\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(user: User)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/auth/auth.service.ts:68\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            User\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        refresh\n                        \n                    \n                \n            \n            \n                \n                        \n                    refresh(refreshToken: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/auth/auth.service.ts:83\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                refreshToken\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        resetPassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    resetPassword(resetToken: string, newPassword: string, confirmPassword: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/auth/auth.service.ts:160\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                resetToken\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                newPassword\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                confirmPassword\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validateUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    validateUser(email: string, pass: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/auth/auth.service.ts:50\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                pass\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        jwtExpiresIn\n                        \n                    \n                \n            \n                \n                    \n                        Type :     StringValue\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/auth.service.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        jwtNotBefore\n                        \n                    \n                \n            \n                \n                    \n                        Type :     StringValue\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/auth.service.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        jwtRefreshExpriresIn\n                        \n                    \n                \n            \n                \n                    \n                        Type :     StringValue\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/auth.service.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        jwtRefreshSecret\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/auth.service.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        passwordResetUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/auth.service.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        saltRounds\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/auth.service.ts:26\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import bcrypt from 'bcrypt';\nimport {\n  BadRequestException,\n  Injectable,\n  NotFoundException,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { UsersService } from '../users/users.service';\nimport { JsonWebTokenError, JwtService, NotBeforeError } from '@nestjs/jwt';\nimport { User } from '../users/entities/user.entity';\nimport { ConfigService } from '@nestjs/config';\nimport { InjectQueue } from '@nestjs/bullmq';\nimport { PASSWORD_RESET_EMAIL_QUEUE_NAME } from '@common/constants';\nimport { Queue } from 'bullmq';\nimport { AuthTokens } from './types/auth-tokens';\nimport { AppRedisService } from '@services/redis/redis.service';\nimport ms, { StringValue } from 'ms';\n\n@Injectable()\nexport class AuthService {\n  private readonly passwordResetUrl: string;\n  private readonly jwtExpiresIn: StringValue;\n  private readonly jwtNotBefore: StringValue;\n  private readonly jwtRefreshSecret: string;\n  private readonly jwtRefreshExpriresIn: StringValue;\n  private readonly saltRounds: number;\n\n  constructor(\n    private readonly appRedisService: AppRedisService,\n    private readonly usersService: UsersService,\n    private readonly jwtService: JwtService,\n    private readonly configService: ConfigService,\n    @InjectQueue(PASSWORD_RESET_EMAIL_QUEUE_NAME)\n    private readonly passwordResetEmailQueue: Queue,\n  ) {\n    this.passwordResetUrl =\n      this.configService.getOrThrow('url.passwordReset');\n    this.jwtExpiresIn =\n      this.configService.getOrThrow('auth.jwt.expiresIn');\n    this.jwtNotBefore = `${(ms(this.jwtExpiresIn) - ms('1m')) / ms('1m')}m`;\n    this.jwtRefreshExpriresIn = this.configService.getOrThrow(\n      'auth.jwt.refreshExpiresIn',\n    );\n    this.jwtRefreshSecret = this.configService.getOrThrow(\n      'auth.jwt.refreshSecret',\n    );\n    this.saltRounds = this.configService.getOrThrow('auth.saltRounds');\n  }\n\n  async validateUser(\n    email: string,\n    pass: string,\n  ): Promise | null> {\n    const user = await this.usersService.findOne(\n      { email },\n      { failHandler: () => new NotFoundException('User not found') },\n    );\n\n    if (user && (await bcrypt.compare(pass, user.password))) {\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      const { password, ...result } = user;\n      return result;\n    }\n\n    return null;\n  }\n\n  async login(user: User): Promise {\n    const payload = {\n      sub: user.id,\n    };\n\n    return {\n      access_token: this.jwtService.sign(payload),\n      refresh_token: this.jwtService.sign(payload, {\n        secret: this.jwtRefreshSecret,\n        expiresIn: this.jwtRefreshExpriresIn,\n        notBefore: this.jwtNotBefore,\n      }),\n    };\n  }\n\n  async refresh(refreshToken: string): Promise {\n    let payload: any;\n\n    const cacheKey = `tokens:refresh:blacklisted:${refreshToken}`;\n    const isBlacklisted = await this.appRedisService.exists(cacheKey);\n    if (isBlacklisted) {\n      throw new BadRequestException('Refresh token is blacklisted');\n    }\n\n    try {\n      payload = this.jwtService.verify(refreshToken, {\n        secret: this.jwtRefreshSecret,\n      });\n    } catch (error) {\n      if (\n        error instanceof JsonWebTokenError &&\n        error.message === 'jwt malformed'\n      ) {\n        throw new BadRequestException('Malformed refresh token');\n      } else if (error instanceof NotBeforeError) {\n        throw new UnauthorizedException('Refresh token not active yet');\n      }\n      throw new UnauthorizedException('Invalid refresh token');\n    }\n\n    const user = await this.usersService.findOne(\n      {\n        id: payload.sub,\n      },\n      { failHandler: () => new NotFoundException('User not found') },\n    );\n\n    const newPayload = {\n      sub: user.id,\n    };\n\n    await this.appRedisService.set(\n      cacheKey,\n      '1',\n      (ms(this.jwtRefreshExpriresIn) + ms('1m')) / ms('1s'),\n    );\n\n    return {\n      access_token: this.jwtService.sign(newPayload),\n      refresh_token: this.jwtService.sign(newPayload, {\n        secret: this.jwtRefreshSecret,\n        expiresIn: this.jwtRefreshExpriresIn,\n        notBefore: this.jwtNotBefore,\n      }),\n    };\n  }\n\n  async forgotPassword(email: string): Promise {\n    const user = await this.usersService.findOne(\n      { email },\n      { failHandler: () => new NotFoundException('User not found') },\n    );\n\n    const token = this.jwtService.sign({\n      email: user.email,\n      sub: user.id,\n    });\n\n    const resetUrl = `${this.passwordResetUrl}?reset-token=${token}`;\n\n    await this.passwordResetEmailQueue.add('send-password-reset-email', {\n      email: user.email,\n      firstName: user.firstName,\n      resetUrl,\n    });\n\n    await this.usersService.update({\n      id: user.id,\n      passwordResetRequested: true,\n    });\n  }\n\n  async resetPassword(\n    resetToken: string,\n    newPassword: string,\n    confirmPassword: string,\n  ): Promise {\n    if (newPassword !== confirmPassword) {\n      throw new BadRequestException('Passwords do not match');\n    }\n\n    const payload = this.jwtService.verify(resetToken);\n    const user = await this.usersService.findOne(\n      {\n        email: payload.email,\n      },\n      { failHandler: () => new NotFoundException('User not found') },\n    );\n\n    if (!user.passwordResetRequested) {\n      throw new NotFoundException('Password reset not requested');\n    }\n\n    const salt = await bcrypt.genSalt(this.saltRounds);\n    const hashedPassword = await bcrypt.hash(newPassword, salt);\n    await this.usersService.update({\n      id: user.id,\n      password: hashedPassword,\n      passwordResetRequested: false,\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/BaseEntity.html":{"url":"classes/BaseEntity.html","title":"class - BaseEntity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  BaseEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/entities/base.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                    Optional\n                                deletedAt\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Default value : new Date()\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Property({type: 'timestamptz', defaultRaw: 'CURRENT_TIMESTAMP', comment: 'Record creation timestamp'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/entities/base.entity.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        deletedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Property({type: 'timestamptz', nullable: true, comment: 'Soft delete timestamp'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/entities/base.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : uuidv7()\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryKey({type: 'uuid'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/entities/base.entity.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Default value : new Date()\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Property({type: 'timestamptz', defaultRaw: 'CURRENT_TIMESTAMP', onUpdate: () => , comment: 'Record last update timestamp'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/entities/base.entity.ts:30\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Filter, Index, PrimaryKey, Property } from '@mikro-orm/core';\nimport { v7 as uuidv7 } from 'uuid';\n\n@Index({ properties: ['deletedAt'] })\n@Filter({ name: 'softDelete', cond: { deletedAt: null }, default: true })\nexport abstract class BaseEntity {\n  @PrimaryKey({ type: 'uuid' })\n  id: string = uuidv7();\n\n  @Property({\n    type: 'timestamptz',\n    nullable: true,\n    comment: 'Soft delete timestamp',\n  })\n  deletedAt?: Date;\n\n  @Property({\n    type: 'timestamptz',\n    defaultRaw: 'CURRENT_TIMESTAMP',\n    comment: 'Record creation timestamp',\n  })\n  createdAt: Date = new Date();\n\n  @Property({\n    type: 'timestamptz',\n    defaultRaw: 'CURRENT_TIMESTAMP',\n    onUpdate: () => new Date(),\n    comment: 'Record last update timestamp',\n  })\n  updatedAt: Date = new Date();\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CatchAllFilter.html":{"url":"classes/CatchAllFilter.html","title":"class - CatchAllFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CatchAllFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/filters/exception.filter.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                loggerContext\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                            \n                                    Private\n                                getErrorCode\n                            \n                            \n                                    Private\n                                getErrorMessage\n                            \n                            \n                                    Private\n                                getErrorName\n                            \n                            \n                                    Private\n                                getHttpStatus\n                            \n                            \n                                    Private\n                                sanitizeBody\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(httpAdapterHost: HttpAdapterHost, loggerService: LoggerService)\n                    \n                \n                        \n                            \n                                Defined in src/common/filters/exception.filter.ts:20\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        httpAdapterHost\n                                                  \n                                                        \n                                                                    HttpAdapterHost\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        loggerService\n                                                  \n                                                        \n                                                                    LoggerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        loggerContext\n                        \n                    \n                \n            \n                \n                    \n                        Default value : CatchAllFilter.name\n                    \n                \n                    \n                        \n                                Defined in src/common/filters/exception.filter.ts:20\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        catch\n                        \n                    \n                \n            \n            \n                \ncatch(exception: HandledException, host: ArgumentsHost)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/filters/exception.filter.ts:27\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                exception\n                                            \n                                                            HandledException\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                host\n                                            \n                                                        ArgumentsHost\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        getErrorCode\n                        \n                    \n                \n            \n            \n                \n                        \n                    getErrorCode(exception: HandledException)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/filters/exception.filter.ts:119\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                exception\n                                            \n                                                            HandledException\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     string | undefined\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        getErrorMessage\n                        \n                    \n                \n            \n            \n                \n                        \n                    getErrorMessage(exception: HandledException)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/filters/exception.filter.ts:92\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                exception\n                                            \n                                                            HandledException\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        getErrorName\n                        \n                    \n                \n            \n            \n                \n                        \n                    getErrorName(exception: HandledException)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/filters/exception.filter.ts:108\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                exception\n                                            \n                                                            HandledException\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        getHttpStatus\n                        \n                    \n                \n            \n            \n                \n                        \n                    getHttpStatus(exception: HandledException)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/filters/exception.filter.ts:78\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                exception\n                                            \n                                                            HandledException\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         number\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        sanitizeBody\n                        \n                    \n                \n            \n            \n                \n                        \n                    sanitizeBody(body: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/filters/exception.filter.ts:123\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  ExceptionFilter,\n  Catch,\n  ArgumentsHost,\n  HttpException,\n  HttpStatus,\n  ForbiddenException,\n  Logger,\n  LoggerService,\n  Inject,\n  NotFoundException,\n} from '@nestjs/common';\nimport { HttpAdapterHost } from '@nestjs/core';\nimport { AxiosError } from 'axios';\nimport { HandledException } from '../types';\nimport { ErrorResponse } from '../interfaces/error-response.interface';\n\n@Catch()\nexport class CatchAllFilter implements ExceptionFilter {\n  private readonly loggerContext = CatchAllFilter.name;\n\n  constructor(\n    private readonly httpAdapterHost: HttpAdapterHost,\n    @Inject(Logger) private readonly loggerService: LoggerService,\n  ) {}\n\n  catch(exception: HandledException, host: ArgumentsHost): void {\n    const { httpAdapter } = this.httpAdapterHost;\n    const ctx = host.switchToHttp();\n    const request = ctx.getRequest();\n    const response = ctx.getResponse();\n    const requestUrl = httpAdapter.getRequestUrl(request);\n\n    if (exception instanceof NotFoundException) {\n      const exceptionResponse = exception.getResponse() as any;\n      const message = exceptionResponse?.message || exception.message;\n\n      const isRoutingError =\n        typeof message === 'string' &&\n        (message.startsWith('Cannot ') ||\n          message.includes('Cannot find') ||\n          (message === 'Not Found' && !exceptionResponse?.error));\n\n      if (isRoutingError) {\n        const responseBody = {\n          statusCode: HttpStatus.NOT_FOUND,\n          message: `Route ${request.method} ${request.url} does not exist ¯\\\\_(ツ)_/¯`,\n        };\n\n        httpAdapter.reply(response, responseBody, HttpStatus.NOT_FOUND);\n        return;\n      }\n    }\n\n    const httpStatus = this.getHttpStatus(exception);\n    const errorMessage = this.getErrorMessage(exception);\n    const name = this.getErrorName(exception);\n    const errorCode = this.getErrorCode(exception);\n\n    const responseBody: ErrorResponse = {\n      statusCode: httpStatus,\n      message: errorMessage,\n      errorCode,\n      timestamp: new Date().toISOString(),\n      path: `${request.method} - ${requestUrl}`,\n      name,\n    };\n\n    this.loggerService.error(\n      `Exception caught: ${name} - ${errorMessage}`,\n      exception,\n      this.loggerContext,\n    );\n\n    httpAdapter.reply(response, responseBody, httpStatus);\n  }\n\n  private getHttpStatus(exception: HandledException): number {\n    if (exception instanceof HttpException) return exception.getStatus();\n    if (exception instanceof AxiosError) {\n      const status = exception.response?.status || HttpStatus.BAD_GATEWAY;\n      return status >= 500 && status \n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ChangePasswordDto.html":{"url":"classes/ChangePasswordDto.html","title":"class - ChangePasswordDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ChangePasswordDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/dto/change-password.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                confirmPassword\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                newPassword\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        confirmPassword\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The confirmation of the new password', example: 'Strong.Pass-1'})@IsString()@IsNotEmpty()@Matches(/^(?=.*[a-z])(?=.*[A-Z])(?=.*[!@#$%^&*()_\\-+=\\[\\]{};':\"\\\\|,.<>\\/?])[A-Za-z\\d!@#$%^&*()_\\-+=\\[\\]{};':\"\\\\|,.<>\\/?]{10,}$/, {message: 'Password must be at least 10 characters long and include uppercase, lowercase, and a symbol (e.g. @, #, ., -)'})@MinLength(10)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dto/change-password.dto.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        newPassword\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The new password for the user. Minimum of 10 characters.', example: 'Strong.Pass-1'})@IsString()@IsNotEmpty()@Matches(/^(?=.*[a-z])(?=.*[A-Z])(?=.*[!@#$%^&*()_\\-+=\\[\\]{};':\"\\\\|,.<>\\/?])[A-Za-z\\d!@#$%^&*()_\\-+=\\[\\]{};':\"\\\\|,.<>\\/?]{10,}$/, {message: 'Password must be at least 10 characters long and include uppercase, lowercase, and a symbol (e.g. @, #, ., -)'})@MinLength(10)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dto/change-password.dto.ts:19\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsNotEmpty, IsString, Matches, MinLength } from 'class-validator';\n\nexport class ChangePasswordDto {\n  @ApiProperty({\n    description: 'The new password for the user. Minimum of 10 characters.',\n    example: 'Strong.Pass-1',\n  })\n  @IsString()\n  @IsNotEmpty()\n  @Matches(\n    /^(?=.*[a-z])(?=.*[A-Z])(?=.*[!@#$%^&*()_\\-+=\\[\\]{};':\"\\\\|,.<>\\/?])[A-Za-z\\d!@#$%^&*()_\\-+=\\[\\]{};':\"\\\\|,.<>\\/?]{10,}$/,\n    {\n      message:\n        'Password must be at least 10 characters long and include uppercase, lowercase, and a symbol (e.g. @, #, ., -)',\n    },\n  )\n  @MinLength(10)\n  newPassword: string;\n\n  @ApiProperty({\n    description: 'The confirmation of the new password',\n    example: 'Strong.Pass-1',\n  })\n  @IsString()\n  @IsNotEmpty()\n  @Matches(\n    /^(?=.*[a-z])(?=.*[A-Z])(?=.*[!@#$%^&*()_\\-+=\\[\\]{};':\"\\\\|,.<>\\/?])[A-Za-z\\d!@#$%^&*()_\\-+=\\[\\]{};':\"\\\\|,.<>\\/?]{10,}$/,\n    {\n      message:\n        'Password must be at least 10 characters long and include uppercase, lowercase, and a symbol (e.g. @, #, ., -)',\n    },\n  )\n  @MinLength(10)\n  confirmPassword: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CloudinaryService.html":{"url":"injectables/CloudinaryService.html","title":"injectable - CloudinaryService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CloudinaryService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/storage/cloudinary.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                upload\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, loggerService: LoggerService)\n                    \n                \n                        \n                            \n                                Defined in src/services/storage/cloudinary.service.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        loggerService\n                                                  \n                                                        \n                                                                    LoggerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        upload\n                        \n                    \n                \n            \n            \n                \n                        \n                    upload(file: MemoryStoredFile, fileCategory: UploadFileCategoryEnum)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/storage/cloudinary.service.ts:26\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                file\n                                            \n                                                        MemoryStoredFile\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                fileCategory\n                                            \n                                                            UploadFileCategoryEnum\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable, Logger, LoggerService } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport {\n  v2 as cloudinary,\n  UploadApiResponse,\n  UploadApiErrorResponse,\n} from 'cloudinary';\nimport toStream = require('buffer-to-stream');\nimport { IStrorageService } from './interfaces/storage.interface';\nimport { UploadFileCategoryEnum } from '@common/enums';\nimport { MemoryStoredFile } from 'nestjs-form-data';\n\n@Injectable()\nexport class CloudinaryService implements IStrorageService {\n  constructor(\n    private readonly configService: ConfigService,\n    @Inject(Logger) private readonly loggerService: LoggerService,\n  ) {\n    cloudinary.config({\n      cloud_name: this.configService.getOrThrow('cloudinary.cloudName'),\n      api_key: this.configService.getOrThrow('cloudinary.apiKey'),\n      api_secret: this.configService.getOrThrow('cloudinary.apiSecret'),\n    });\n  }\n\n  async upload(\n    file: MemoryStoredFile,\n    fileCategory: UploadFileCategoryEnum,\n  ): Promise {\n    this.loggerService.log(\n      `Starting upload: filename=\"${file.originalName}\", size=${file.size} bytes, category=${fileCategory}`,\n      CloudinaryService.name,\n    );\n\n    return new Promise((resolve, reject) => {\n      const upload = cloudinary.uploader.upload_stream(\n        {\n          folder: `${this.configService.getOrThrow('cloudinary.folder')}/${fileCategory}`,\n          resource_type: 'auto',\n        },\n        (error: UploadApiErrorResponse, result: UploadApiResponse) => {\n          if (error) {\n            this.loggerService.error(\n              `Upload failed: filename=\"${file.originalName}\", error=${error.message}`,\n              error.stack,\n              CloudinaryService.name,\n            );\n            return reject(error);\n          }\n\n          this.loggerService.log(\n            `Upload successful: filename=\"${file.originalName}\", public_id=${result.public_id}, url=${result.secure_url}`,\n            CloudinaryService.name,\n          );\n          return resolve(result);\n        },\n      );\n\n      toStream(file.buffer).pipe(upload);\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CreateUserCommand.html":{"url":"injectables/CreateUserCommand.html","title":"injectable - CreateUserCommand","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CreateUserCommand\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/commands/create-user.command.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        CommandRunner\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                nanoid\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                parseEmail\n                            \n                            \n                                    \n                                parseFirstName\n                            \n                            \n                                    \n                                parseLastName\n                            \n                            \n                                    \n                                parseRole\n                            \n                            \n                                    Async\n                                run\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(em: EntityManager, usersService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/commands/create-user.command.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        em\n                                                  \n                                                        \n                                                                    EntityManager\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        parseEmail\n                        \n                    \n                \n            \n            \n                \n                        \n                    parseEmail(val: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Option({flags: '-e, --email ', required: true})\n                \n            \n\n                    \n                        \n                            Defined in src/commands/create-user.command.ts:50\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                val\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        parseFirstName\n                        \n                    \n                \n            \n            \n                \n                        \n                    parseFirstName(val: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Option({flags: '-f, --first-name ', required: true})\n                \n            \n\n                    \n                        \n                            Defined in src/commands/create-user.command.ts:56\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                val\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        parseLastName\n                        \n                    \n                \n            \n            \n                \n                        \n                    parseLastName(val: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Option({flags: '-l, --last-name ', required: true})\n                \n            \n\n                    \n                        \n                            Defined in src/commands/create-user.command.ts:62\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                val\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        parseRole\n                        \n                    \n                \n            \n            \n                \n                        \n                    parseRole(val: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Option({flags: '-r, --role ', required: true})\n                \n            \n\n                    \n                        \n                            Defined in src/commands/create-user.command.ts:68\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                val\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         UserRoleEnum\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        run\n                        \n                    \n                \n            \n            \n                \n                        \n                    run(inputs: string[], options: Record)\n                \n            \n\n\n                    \n                        \n                            Defined in src/commands/create-user.command.ts:23\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                inputs\n                                            \n                                                        string[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                options\n                                            \n                                                        Record\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        nanoid\n                        \n                    \n                \n            \n                \n                    \n                        Default value : customAlphabet(PASSWORD_CHARACTER_SET, 10)\n                    \n                \n                    \n                        \n                                Defined in src/commands/create-user.command.ts:14\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { Command, CommandRunner } from 'nest-commander';\nimport { UsersService } from '@modules/users/users.service';\nimport { Option } from 'nest-commander';\nimport chalk from 'chalk';\nimport { UserRoleEnum } from '@common/enums';\nimport { customAlphabet } from 'nanoid';\nimport { PASSWORD_CHARACTER_SET } from '@common/constants';\nimport { EntityManager } from '@mikro-orm/core';\n\n@Command({ name: 'create:user', description: 'Create a new user' })\n@Injectable()\nexport class CreateUserCommand extends CommandRunner {\n  private readonly nanoid = customAlphabet(PASSWORD_CHARACTER_SET, 10);\n\n  constructor(\n    private readonly em: EntityManager,\n    private readonly usersService: UsersService,\n  ) {\n    super();\n  }\n\n  async run(inputs: string[], options: Record): Promise {\n    const { email, firstName, lastName, role } = options;\n\n    try {\n      const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]{2,}$/i;\n\n      if (!emailRegex.test(email)) {\n        throw new Error('Invalid email format');\n      }\n\n      await this.em.transactional(async () => {\n        await this.usersService.create({\n          email,\n          firstName,\n          lastName,\n          password: this.nanoid(),\n          role,\n        });\n      });\n      console.log(chalk.green.bold(`✅ Created user with email: ${email}`));\n    } catch (error) {\n      console.error(\n        chalk.red.bold(`❌ Failed to create user: ${error.message}`),\n      );\n    }\n  }\n\n  @Option({ flags: '-e, --email ', required: true }) parseEmail(\n    val: string,\n  ) {\n    return val;\n  }\n\n  @Option({ flags: '-f, --first-name ', required: true }) parseFirstName(\n    val: string,\n  ) {\n    return val;\n  }\n\n  @Option({ flags: '-l, --last-name ', required: true }) parseLastName(\n    val: string,\n  ) {\n    return val;\n  }\n\n  @Option({ flags: '-r, --role ', required: true }) parseRole(\n    val: string,\n  ) {\n    return val as UserRoleEnum;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/dto/create-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                address\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                changePassword\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                city\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                country\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                countryCode\n                            \n                            \n                                    \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                firstName\n                            \n                            \n                                    \n                                    \n                                    \n                                lastName\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                password\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                phoneNumber\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                postalCode\n                            \n                            \n                                    \n                                    \n                                    \n                                role\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                state\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The address of the user', example: '123 Main St, Springfield'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dto/create-user.dto.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        changePassword\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsBoolean()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dto/create-user.dto.ts:130\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        city\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The city of the user', example: 'Springfield'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dto/create-user.dto.ts:54\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        country\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The country of the user', example: 'USA'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dto/create-user.dto.ts:78\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        countryCode\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The country code of the user', example: '+1'})@IsString()@IsOptional()@Transform( => )\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dto/create-user.dto.ts:91\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The email of the user', example: 'user@example.com'})@IsEmail()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dto/create-user.dto.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The first name of the user', example: 'John'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dto/create-user.dto.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The last name of the user', example: 'Doe'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dto/create-user.dto.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The password of the user', example: 'Strong.Pass-1'})@IsString()@IsNotEmpty()@Matches(/^(?=.*[a-z])(?=.*[A-Z])(?=.*[!@#$%^&*()_\\-+=\\[\\]{};':\"\\\\|,.<>\\/?])[A-Za-z\\d!@#$%^&*()_\\-+=\\[\\]{};':\"\\\\|,.<>\\/?]{10,}$/, {message: 'Password must be at least 10 characters long and include uppercase, lowercase, and a symbol (e.g. @, #, ., -)'})@MinLength(10)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dto/create-user.dto.ts:115\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        phoneNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The phone number of the user', example: '234567890'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dto/create-user.dto.ts:99\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        postalCode\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The postal code of the user', example: '12345'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dto/create-user.dto.ts:62\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserRoleEnum\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Role of the user', example: undefined, enum: UserRoleEnum})@IsEnum(UserRoleEnum, {message: undefined})@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dto/create-user.dto.ts:126\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        state\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The state of the user', example: 'Illinois'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dto/create-user.dto.ts:70\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsBoolean,\n  IsEmail,\n  IsEnum,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  Matches,\n  MinLength,\n} from 'class-validator';\nimport { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\nimport { UserRoleEnum } from '@common/enums';\nimport { Transform } from 'class-transformer';\n\nexport class CreateUserDto {\n  @ApiProperty({\n    description: 'The email of the user',\n    example: 'user@example.com',\n  })\n  @IsEmail()\n  @IsNotEmpty()\n  email: string;\n\n  @ApiProperty({\n    description: 'The first name of the user',\n    example: 'John',\n  })\n  @IsString()\n  @IsNotEmpty()\n  firstName: string;\n\n  @ApiProperty({\n    description: 'The last name of the user',\n    example: 'Doe',\n  })\n  @IsString()\n  @IsNotEmpty()\n  lastName: string;\n\n  @ApiProperty({\n    description: 'The address of the user',\n    example: '123 Main St, Springfield',\n  })\n  @IsString()\n  @IsOptional()\n  address?: string;\n\n  @ApiProperty({\n    description: 'The city of the user',\n    example: 'Springfield',\n  })\n  @IsString()\n  @IsOptional()\n  city?: string;\n\n  @ApiProperty({\n    description: 'The postal code of the user',\n    example: '12345',\n  })\n  @IsString()\n  @IsOptional()\n  postalCode?: string;\n\n  @ApiProperty({\n    description: 'The state of the user',\n    example: 'Illinois',\n  })\n  @IsString()\n  @IsOptional()\n  state?: string;\n\n  @ApiProperty({\n    description: 'The country of the user',\n    example: 'USA',\n  })\n  @IsString()\n  @IsOptional()\n  country?: string;\n\n  @ApiProperty({\n    description: 'The country code of the user',\n    example: '+1',\n  })\n  @IsString()\n  @IsOptional()\n  @Transform(({ value }) => {\n    if (typeof value !== 'string') return value;\n    const cleaned = value.replace(/\\+/g, '');\n    return cleaned ? `+${cleaned}` : '';\n  })\n  countryCode?: string;\n\n  @ApiProperty({\n    description: 'The phone number of the user',\n    example: '234567890',\n  })\n  @IsString()\n  @IsOptional()\n  phoneNumber?: string;\n\n  @ApiProperty({\n    description: 'The password of the user',\n    example: 'Strong.Pass-1',\n  })\n  @IsString()\n  @IsNotEmpty()\n  @Matches(\n    /^(?=.*[a-z])(?=.*[A-Z])(?=.*[!@#$%^&*()_\\-+=\\[\\]{};':\"\\\\|,.<>\\/?])[A-Za-z\\d!@#$%^&*()_\\-+=\\[\\]{};':\"\\\\|,.<>\\/?]{10,}$/,\n    {\n      message:\n        'Password must be at least 10 characters long and include uppercase, lowercase, and a symbol (e.g. @, #, ., -)',\n    },\n  )\n  @MinLength(10)\n  password: string;\n\n  @ApiPropertyOptional({\n    description: 'Role of the user',\n    example: UserRoleEnum.USER,\n    enum: UserRoleEnum,\n  })\n  @IsEnum(UserRoleEnum, {\n    message: `role must be one of: ${Object.values(UserRoleEnum).join(', ')}`,\n  })\n  @IsOptional()\n  role: UserRoleEnum;\n\n  @IsBoolean()\n  @IsOptional()\n  changePassword?: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserResponseDto.html":{"url":"classes/CreateUserResponseDto.html","title":"class - CreateUserResponseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserResponseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/dto/responses.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                data\n                            \n                            \n                                    \n                                message\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        data\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The newly created user', type: User})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dto/responses.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        message\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Message indicating the success of the operation', example: 'User created successfully'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dto/responses.dto.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { User } from '../entities/user.entity';\n\nexport class CreateUserResponseDto {\n  @ApiProperty({\n    description: 'Message indicating the success of the operation',\n    example: 'User created successfully',\n  })\n  message: string;\n\n  @ApiProperty({\n    description: 'The newly created user',\n    type: User,\n  })\n  data: User;\n}\n\nexport class GetProfileResponseDto {\n  @ApiProperty({\n    description: 'Message indicating the success of the operation',\n    example: 'Profile fetched successfully',\n  })\n  message: string;\n\n  @ApiProperty({\n    description: 'The profile of the user',\n    type: User,\n  })\n  data: User;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DatabaseSeeder.html":{"url":"classes/DatabaseSeeder.html","title":"class - DatabaseSeeder","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DatabaseSeeder\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/seeders/DatabaseSeeder.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        Seeder\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                run\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        run\n                        \n                    \n                \n            \n            \n                \n                        \n                    run(em: EntityManager)\n                \n            \n\n\n                    \n                        \n                            Defined in src/seeders/DatabaseSeeder.ts:6\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                em\n                                            \n                                                        EntityManager\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import type { EntityManager } from '@mikro-orm/core';\nimport { Seeder } from '@mikro-orm/seeder';\nimport { UserFactory } from '@modules/users/factories/user.factory';\n\nexport class DatabaseSeeder extends Seeder {\n  async run(em: EntityManager): Promise {\n    new UserFactory(em).make(10);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/EmailModule.html":{"url":"modules/EmailModule.html","title":"module - EmailModule","body":"\n                   \n\n\n\n\n    Modules\n    EmailModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_EmailModule\n\n\n\ncluster_EmailModule_exports\n\n\n\n\nEmailService \n\nEmailService \n\n\n\nEmailModule\n\nEmailModule\n\nEmailService  -->\n\nEmailModule->EmailService \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/services/email/email.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Exports\n                    \n                        \n                            EmailService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Logger, Module } from '@nestjs/common';\nimport { EmailService } from './email.service';\nimport { MailerModule } from '@nestjs-modules/mailer';\nimport { ConfigService } from '@nestjs/config';\nimport { EMAIL_FROM_NAME } from '@common/constants';\nimport { PugAdapter } from '@nestjs-modules/mailer/dist/adapters/pug.adapter';\nimport { join } from 'path';\n\n@Module({\n  imports: [\n    MailerModule.forRootAsync({\n      useFactory: (configService: ConfigService) => ({\n        transport: {\n          host: configService.getOrThrow('smtp.host'),\n          port: configService.getOrThrow('smtp.port'),\n          secure: configService.getOrThrow('smtp.secure'),\n          auth: {\n            user: configService.getOrThrow('smtp.auth.user'),\n            pass: configService.getOrThrow('smtp.auth.pass'),\n          },\n        },\n        defaults: {\n          from: `\"${EMAIL_FROM_NAME}\" ('smtp.auth.user')}>`,\n        },\n        template: {\n          dir: join(process.cwd(), 'src/templates/email'),\n          adapter: new PugAdapter(),\n          options: {\n            strict: true,\n          },\n        },\n      }),\n      inject: [ConfigService],\n    }),\n  ],\n  providers: [EmailService, Logger],\n  controllers: [],\n  exports: [EmailService],\n})\nexport class EmailModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/EmailService.html":{"url":"classes/EmailService.html","title":"class - EmailService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  EmailService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/email/email.service.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                sendEmail\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(mailerService: MailerService, loggerService: LoggerService)\n                    \n                \n                        \n                            \n                                Defined in src/services/email/email.service.ts:4\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        mailerService\n                                                  \n                                                        \n                                                                    MailerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        loggerService\n                                                  \n                                                        \n                                                                    LoggerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        sendEmail\n                        \n                    \n                \n            \n            \n                \n                        \n                    sendEmail(to: string | string[], subject: string, template: string, context: Record)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/email/email.service.ts:11\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                to\n                                            \n                                                        string | string[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                subject\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                template\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                context\n                                            \n                                                        Record\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MailerService } from '@nestjs-modules/mailer';\nimport { Inject, Logger, LoggerService } from '@nestjs/common';\n\nexport class EmailService {\n  constructor(\n    @Inject(MailerService)\n    private readonly mailerService: MailerService,\n    @Inject(Logger) private readonly loggerService: LoggerService,\n  ) {}\n\n  async sendEmail(\n    to: string | string[],\n    subject: string,\n    template: string,\n    context: Record,\n  ): Promise {\n    this.loggerService.log(\n      `Sending email to: ${to} with subject: ${subject}`,\n      'EmailService',\n    );\n\n    await this.mailerService.sendMail({\n      to,\n      subject,\n      template,\n      context,\n    });\n\n    this.loggerService.log(`Email sent successfully to: ${to}`, 'EmailService');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ErrorResponse.html":{"url":"interfaces/ErrorResponse.html","title":"interface - ErrorResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ErrorResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/interfaces/error-response.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            errorCode\n                                        \n                                \n                                \n                                        \n                                            message\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                                \n                                        \n                                            path\n                                        \n                                \n                                \n                                        \n                                            statusCode\n                                        \n                                \n                                \n                                        \n                                            timestamp\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        errorCode\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        errorCode:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        message\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        message:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        path\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        path:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        statusCode\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        statusCode:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        timestamp\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        timestamp:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface ErrorResponse {\n  statusCode: number;\n  message: string;\n  errorCode?: string;\n  timestamp: string;\n  path: string;\n  name: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ForgotPasswordDto.html":{"url":"classes/ForgotPasswordDto.html","title":"class - ForgotPasswordDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ForgotPasswordDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/dto/forgot-password.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                email\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'user@example.com'})@IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/dto/forgot-password.dto.ts:7\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail } from 'class-validator';\nimport { ApiProperty } from '@nestjs/swagger';\n\nexport class ForgotPasswordDto {\n  @ApiProperty({ example: 'user@example.com' })\n  @IsEmail()\n  email: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetProfileResponseDto.html":{"url":"classes/GetProfileResponseDto.html","title":"class - GetProfileResponseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetProfileResponseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/dto/responses.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                data\n                            \n                            \n                                    \n                                message\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        data\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The profile of the user', type: User})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dto/responses.dto.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        message\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Message indicating the success of the operation', example: 'Profile fetched successfully'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dto/responses.dto.ts:23\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { User } from '../entities/user.entity';\n\nexport class CreateUserResponseDto {\n  @ApiProperty({\n    description: 'Message indicating the success of the operation',\n    example: 'User created successfully',\n  })\n  message: string;\n\n  @ApiProperty({\n    description: 'The newly created user',\n    type: User,\n  })\n  data: User;\n}\n\nexport class GetProfileResponseDto {\n  @ApiProperty({\n    description: 'Message indicating the success of the operation',\n    example: 'Profile fetched successfully',\n  })\n  message: string;\n\n  @ApiProperty({\n    description: 'The profile of the user',\n    type: User,\n  })\n  data: User;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/HttpClientModule.html":{"url":"modules/HttpClientModule.html","title":"module - HttpClientModule","body":"\n                   \n\n\n\n\n    Modules\n    HttpClientModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_HttpClientModule\n\n\n\ncluster_HttpClientModule_exports\n\n\n\ncluster_HttpClientModule_providers\n\n\n\n\nHttpClientService \n\nHttpClientService \n\n\n\nHttpClientModule\n\nHttpClientModule\n\nHttpClientService  -->\n\nHttpClientModule->HttpClientService \n\n\n\n\n\nHttpClientService\n\nHttpClientService\n\nHttpClientModule -->\n\nHttpClientService->HttpClientModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/services/http-client/http-client.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            HttpClientService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            HttpClientService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Logger, Module } from '@nestjs/common';\nimport { HttpModule } from '@nestjs/axios';\nimport { HttpClientService } from './http-client.service';\n\n@Module({\n  imports: [HttpModule],\n  providers: [HttpClientService, Logger],\n  exports: [HttpClientService],\n})\nexport class HttpClientModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/HttpClientService.html":{"url":"injectables/HttpClientService.html","title":"injectable - HttpClientService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  HttpClientService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/http-client/http-client.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                httpAgent\n                            \n                            \n                                    Private\n                                    Readonly\n                                httpsAgent\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                makeHttpRequest\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(httpService: HttpService, loggerService: LoggerService)\n                    \n                \n                        \n                            \n                                Defined in src/services/http-client/http-client.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        httpService\n                                                  \n                                                        \n                                                                    HttpService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        loggerService\n                                                  \n                                                        \n                                                                    LoggerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        makeHttpRequest\n                        \n                    \n                \n            \n            \n                \n                        \n                    makeHttpRequest(url: string, options: AxiosRequestConfig)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/http-client/http-client.service.ts:21\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                url\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                options\n                                            \n                                                        AxiosRequestConfig\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        httpAgent\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new http.Agent({ keepAlive: false })\n                    \n                \n                    \n                        \n                                Defined in src/services/http-client/http-client.service.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        httpsAgent\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new https.Agent({ keepAlive: false })\n                    \n                \n                    \n                        \n                                Defined in src/services/http-client/http-client.service.ts:11\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { HttpService } from '@nestjs/axios';\nimport { Inject, Injectable, Logger, LoggerService } from '@nestjs/common';\nimport { AxiosRequestConfig } from 'axios';\nimport http from 'http';\nimport https from 'https';\nimport { lastValueFrom } from 'rxjs';\n\n@Injectable()\nexport class HttpClientService {\n  private readonly httpAgent = new http.Agent({ keepAlive: false });\n  private readonly httpsAgent = new https.Agent({ keepAlive: false });\n\n  constructor(\n    private readonly httpService: HttpService,\n    @Inject(Logger) private readonly loggerService: LoggerService,\n  ) {\n    this.httpService.axiosRef.defaults.httpAgent = this.httpAgent;\n    this.httpService.axiosRef.defaults.httpsAgent = this.httpsAgent;\n  }\n\n  async makeHttpRequest(\n    url: string,\n    options: AxiosRequestConfig,\n  ): Promise {\n    this.loggerService.log(\n      `Making HTTP request to ${url}`,\n      HttpClientService.name,\n    );\n\n    const data =\n      (await lastValueFrom(this.httpService.request({ url, ...options }))) ||\n      {};\n\n    this.loggerService.log(\n      `HTTP request to ${url} successful`,\n      HttpClientService.name,\n    );\n\n    return data;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IPaymentService.html":{"url":"interfaces/IPaymentService.html","title":"interface - IPaymentService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IPaymentService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/payment/interfaces/payment.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        createCheckoutSession\n                                    \n                                \n                                \n                                    \n                                        createPaymentIntent\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        createCheckoutSession\n                        \n                    \n                \n            \n            \n                \ncreateCheckoutSession(params: Stripe.Checkout.SessionCreateParams, options?: Stripe.RequestOptions)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/payment/interfaces/payment.interface.ts:4\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                params\n                                            \n                                                            Stripe.Checkout.SessionCreateParams\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                options\n                                            \n                                                        Stripe.RequestOptions\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createPaymentIntent\n                        \n                    \n                \n            \n            \n                \ncreatePaymentIntent(params: Stripe.PaymentIntentCreateParams, options?: Stripe.RequestOptions)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/payment/interfaces/payment.interface.ts:9\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                params\n                                            \n                                                            Stripe.PaymentIntentCreateParams\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                options\n                                            \n                                                        Stripe.RequestOptions\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import Stripe from 'stripe';\n\nexport interface IPaymentService {\n  createCheckoutSession(\n    params: Stripe.Checkout.SessionCreateParams,\n    options?: Stripe.RequestOptions,\n  ): Promise>;\n\n  createPaymentIntent(\n    params: Stripe.PaymentIntentCreateParams,\n    options?: Stripe.RequestOptions,\n  ): Promise>;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IStrorageService.html":{"url":"interfaces/IStrorageService.html","title":"interface - IStrorageService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IStrorageService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/storage/interfaces/storage.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                        Optional\n                                    \n                                        createPresignedUrlWithoutClient\n                                    \n                                \n                                \n                                    \n                                        upload\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        createPresignedUrlWithoutClient\n                        \n                    \n                \n            \n            \n                \ncreatePresignedUrlWithoutClient(key: string, method?: HttpRequestMethodEnum, ttl?: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/storage/interfaces/storage.interface.ts:12\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                method\n                                            \n                                                            HttpRequestMethodEnum\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                        \n                                                ttl\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        upload\n                        \n                    \n                \n            \n            \n                \nupload(file: MemoryStoredFile, fileCategory: UploadFileCategoryEnum)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/storage/interfaces/storage.interface.ts:7\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                file\n                                            \n                                                        MemoryStoredFile\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                fileCategory\n                                            \n                                                            UploadFileCategoryEnum\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { UploadApiResponse } from 'cloudinary';\nimport { MemoryStoredFile } from 'nestjs-form-data';\nimport { HttpRequestMethodEnum, UploadFileCategoryEnum } from '@common/enums';\nimport { S3PutObjectResponse } from '../types/s3-put-object-response';\n\nexport interface IStrorageService {\n  upload(\n    file: MemoryStoredFile,\n    fileCategory: UploadFileCategoryEnum,\n  ): Promise;\n\n  createPresignedUrlWithoutClient?(\n    key: string,\n    method?: HttpRequestMethodEnum,\n    ttl?: number,\n  ): Promise;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtAuthGuard.html":{"url":"injectables/JwtAuthGuard.html","title":"injectable - JwtAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/guards/jwt-auth.guard.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        AuthGuard('jwt')\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                            \n                                handleRequest\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/modules/auth/guards/jwt-auth.guard.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/auth/guards/jwt-auth.guard.ts:16\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        handleRequest\n                        \n                    \n                \n            \n            \n                \nhandleRequest(err: Error, user: any, info: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/auth/guards/jwt-auth.guard.ts:27\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                err\n                                            \n                                                        Error\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                info\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  ExecutionContext,\n  Injectable,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { AuthGuard } from '@nestjs/passport';\nimport { IS_PUBLIC_KEY } from '../decorators/public.decorator';\n\n@Injectable()\nexport class JwtAuthGuard extends AuthGuard('jwt') {\n  constructor(private reflector: Reflector) {\n    super();\n  }\n\n  canActivate(context: ExecutionContext) {\n    const isPublic = this.reflector.getAllAndOverride(IS_PUBLIC_KEY, [\n      context.getHandler(),\n      context.getClass(),\n    ]);\n    if (isPublic) {\n      return true;\n    }\n    return super.canActivate(context);\n  }\n\n  handleRequest(err: Error, user: any, info: any) {\n    if (err || !user) {\n      let errorObject: Error = {\n        name: info?.name || 'UnauthorizedException',\n        message: info?.message || 'Unauthorized',\n      };\n\n      throw new UnauthorizedException(errorObject);\n    }\n\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/strategies/jwt.strategy.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PassportStrategy(Strategy)\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, usersService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/auth/strategies/jwt.strategy.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                        \n                    validate(req: Request, payload: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/auth/strategies/jwt.strategy.ts:34\n                        \n                    \n\n\n            \n                \n                        NOTE: req is available here and can be used to extract the raw JWT.\nThis can support enforcing a single active session per user:\n\nCompare the JWT in the request with the token stored in the user document.\nReject the request if they don't match (i.e., user is logged in elsewhere).\n\nImplementation details:\n\nStore or update the token in the user document during login and token refresh.\nThis logic should be implemented in the\nlogin() (needs to be implemented as login currently stops at the controller level and no it's not wrong)\n and refresh() methods of the AuthService class.\n\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                payload\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ExtractJwt, Strategy } from 'passport-jwt';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Injectable, NotFoundException } from '@nestjs/common';\nimport { UsersService } from '@modules/users/users.service';\nimport { ConfigService } from '@nestjs/config';\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  constructor(\n    configService: ConfigService,\n    private usersService: UsersService,\n  ) {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      ignoreExpiration: false,\n      secretOrKey: configService.getOrThrow('auth.jwt.secret'),\n      passReqToCallback: true,\n    });\n  }\n\n  /**\n   * NOTE: `req` is available here and can be used to extract the raw JWT.\n   *\n   * This can support enforcing a single active session per user:\n   * - Compare the JWT in the request with the token stored in the user document.\n   * - Reject the request if they don't match (i.e., user is logged in elsewhere).\n   *\n   * Implementation details:\n   * - Store or update the token in the user document during login and token refresh.\n   * - This logic should be implemented in the\n   * `login()` (needs to be implemented as login currently stops at the controller level and no it's not wrong)\n   *  and `refresh()` methods of the `AuthService` class.\n   */\n  async validate(req: Request, payload: any) {\n    const user = await this.usersService.findOne(\n      {\n        id: payload.sub,\n      },\n      { failHandler: () => new NotFoundException('User not found') },\n    );\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalAuthGuard.html":{"url":"injectables/LocalAuthGuard.html","title":"injectable - LocalAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LocalAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/guards/local-auth.guard.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        AuthGuard('local')\n            \n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class LocalAuthGuard extends AuthGuard('local') {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalStrategy.html":{"url":"injectables/LocalStrategy.html","title":"injectable - LocalStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LocalStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/strategies/local.strategy.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PassportStrategy(Strategy)\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService, usersService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/auth/strategies/local.strategy.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                        \n                    validate(email: string, password: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/auth/strategies/local.strategy.ts:20\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                password\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Strategy } from 'passport-local';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { AuthService } from '../auth.service';\nimport { UsersService } from '@modules/users/users.service';\nimport dayjs from 'dayjs';\nimport utc from 'dayjs/plugin/utc';\n\ndayjs.extend(utc);\n\n@Injectable()\nexport class LocalStrategy extends PassportStrategy(Strategy) {\n  constructor(\n    private authService: AuthService,\n    private usersService: UsersService,\n  ) {\n    super({ usernameField: 'email' });\n  }\n\n  async validate(email: string, password: string): Promise {\n    const user = await this.authService.validateUser(email, password);\n    if (!user) {\n      throw new UnauthorizedException('Invalid credentials');\n    }\n    await this.usersService.update({\n      id: user.id,\n      lastLoggedIn: dayjs().utc().toDate(),\n    });\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginDto.html":{"url":"classes/LoginDto.html","title":"class - LoginDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/dto/login.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The email of the user', example: 'user@example.com'})@IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/dto/login.dto.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The password of the user', example: 'Strong.Pass-1'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/dto/login.dto.ts:16\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsEmail } from 'class-validator';\n\nexport class LoginDto {\n  @ApiProperty({\n    description: 'The email of the user',\n    example: 'user@example.com',\n  })\n  @IsEmail()\n  email: string;\n\n  @ApiProperty({\n    description: 'The password of the user',\n    example: 'Strong.Pass-1',\n  })\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Migration20250730220636.html":{"url":"classes/Migration20250730220636.html","title":"class - Migration20250730220636","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Migration20250730220636\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/migrations/Migration20250730220636.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        Migration\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        up\n                        \n                    \n                \n            \n            \n                \n                        \n                    up()\n                \n            \n\n\n                    \n                        \n                            Defined in src/migrations/Migration20250730220636.ts:4\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     Promise\n\n                        \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Migration } from '@mikro-orm/migrations';\n\nexport class Migration20250730220636 extends Migration {\n  override async up(): Promise {\n    this.addSql(\n      `create table \"users\" (\"id\" uuid not null, \"deleted_at\" timestamptz null, \"created_at\" timestamptz not null default CURRENT_TIMESTAMP, \"updated_at\" timestamptz not null default CURRENT_TIMESTAMP, \"email\" varchar(255) not null, \"avatar\" varchar(500) null, \"first_name\" varchar(100) not null, \"last_name\" varchar(100) not null, \"address\" text null, \"city\" varchar(100) null, \"postal_code\" varchar(20) null, \"state\" varchar(100) null, \"country\" varchar(100) null, \"country_code\" varchar(3) null, \"phone_number\" varchar(20) null, \"password\" varchar(255) not null, \"role\" text check (\"role\" in ('admin', 'user')) not null default 'user', \"change_password\" boolean not null default false, \"password_reset_requested\" boolean not null default false, \"last_logged_in\" timestamptz null, constraint \"users_pkey\" primary key (\"id\"));`,\n    );\n    this.addSql(\n      `comment on column \"users\".\"deleted_at\" is 'Soft delete timestamp';`,\n    );\n    this.addSql(\n      `comment on column \"users\".\"created_at\" is 'Record creation timestamp';`,\n    );\n    this.addSql(\n      `comment on column \"users\".\"updated_at\" is 'Record last update timestamp';`,\n    );\n    this.addSql(`comment on column \"users\".\"email\" is 'User email address';`);\n    this.addSql(`comment on column \"users\".\"avatar\" is 'Avatar URL or path';`);\n    this.addSql(`comment on column \"users\".\"first_name\" is 'User first name';`);\n    this.addSql(`comment on column \"users\".\"last_name\" is 'User last name';`);\n    this.addSql(`comment on column \"users\".\"address\" is 'Street address';`);\n    this.addSql(`comment on column \"users\".\"city\" is 'City name';`);\n    this.addSql(\n      `comment on column \"users\".\"postal_code\" is 'Postal/ZIP code';`,\n    );\n    this.addSql(`comment on column \"users\".\"state\" is 'State/Province';`);\n    this.addSql(`comment on column \"users\".\"country\" is 'Country name';`);\n    this.addSql(\n      `comment on column \"users\".\"country_code\" is 'ISO country code';`,\n    );\n    this.addSql(`comment on column \"users\".\"phone_number\" is 'Phone number';`);\n    this.addSql(`comment on column \"users\".\"password\" is 'Hashed password';`);\n    this.addSql(`comment on column \"users\".\"role\" is 'User role';`);\n    this.addSql(\n      `comment on column \"users\".\"change_password\" is 'Whether user needs to change password';`,\n    );\n    this.addSql(\n      `comment on column \"users\".\"password_reset_requested\" is 'Whether password reset was requested';`,\n    );\n    this.addSql(\n      `comment on column \"users\".\"last_logged_in\" is 'Last login timestamp';`,\n    );\n    this.addSql(\n      `alter table \"users\" add constraint \"users_email_unique\" unique (\"email\");`,\n    );\n    this.addSql(\n      `create index \"users_deleted_at_index\" on \"users\" (\"deleted_at\");`,\n    );\n    this.addSql(`create index \"users_email_index\" on \"users\" (\"email\");`);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MorganMiddleware.html":{"url":"injectables/MorganMiddleware.html","title":"injectable - MorganMiddleware","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  MorganMiddleware\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/middlewares/morgan.middleware.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                use\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(loggerService: LoggerService)\n                    \n                \n                        \n                            \n                                Defined in src/common/middlewares/morgan.middleware.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        loggerService\n                                                  \n                                                        \n                                                                    LoggerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        use\n                        \n                    \n                \n            \n            \n                \nuse(req: any, res: any, next: () => void)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/middlewares/morgan.middleware.ts:14\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                res\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                next\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  Inject,\n  Injectable,\n  Logger,\n  LoggerService,\n  NestMiddleware,\n} from '@nestjs/common';\nimport morgan from 'morgan';\n\n@Injectable()\nexport class MorganMiddleware implements NestMiddleware {\n  constructor(@Inject(Logger) private readonly loggerService: LoggerService) {}\n\n  use(req: any, res: any, next: () => void) {\n    if (req.url === '/' || req.url.match(/\\/v1\\/queues\\/.*$/)) {\n      return next();\n    }\n\n    morgan(\n      ':remote-addr :remote-user :method :url :http-version :status :res[content-length] :response-time ms :total-time ms :referrer :user-agent :req[header] :req[body]',\n      {\n        stream: {\n          write: (message: string) => {\n            const status = res.statusCode;\n            if (status === 404) {\n              this.loggerService.warn(message.trim(), MorganMiddleware.name);\n            } else {\n              this.loggerService.log(message.trim(), MorganMiddleware.name);\n            }\n          },\n        },\n      },\n    )(req, res, next);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PasswordResetEmailConsumer.html":{"url":"classes/PasswordResetEmailConsumer.html","title":"class - PasswordResetEmailConsumer","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PasswordResetEmailConsumer\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/consumers/auth.consumer.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                process\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(emailService: EmailService, loggerService: LoggerService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/auth/consumers/auth.consumer.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        emailService\n                                                  \n                                                        \n                                                                        EmailService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        loggerService\n                                                  \n                                                        \n                                                                    LoggerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        process\n                        \n                    \n                \n            \n            \n                \n                        \n                    process(job: Job)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/auth/consumers/auth.consumer.ts:20\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                job\n                                            \n                                                        Job\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { PASSWORD_RESET_EMAIL_QUEUE_NAME } from '@common/constants';\nimport os from 'os';\nimport { Processor, WorkerHost } from '@nestjs/bullmq';\nimport { Job } from 'bullmq';\nimport { EmailService } from '@services/email/email.service';\nimport { Inject, Logger, LoggerService } from '@nestjs/common';\nimport { EmailSubjectEnum, EmailTemplateEnum } from '@common/enums';\n\n@Processor(PASSWORD_RESET_EMAIL_QUEUE_NAME, {\n  concurrency: os.cpus().length,\n})\nexport class PasswordResetEmailConsumer extends WorkerHost {\n  constructor(\n    private readonly emailService: EmailService,\n    @Inject(Logger) private readonly loggerService: LoggerService,\n  ) {\n    super();\n  }\n\n  async process(job: Job) {\n    const { data } = job;\n\n    this.loggerService.log(\n      `Processing job: ${job.id} for email: ${data?.email}`,\n      'PasswordResetEmailConsumer',\n    );\n\n    await this.emailService.sendEmail(\n      data?.email,\n      EmailSubjectEnum.PASSWORD_RESET,\n      EmailTemplateEnum.PASSWORD_RESET,\n      { resetUrl: data?.resetUrl, firstName: data?.firstName },\n    );\n\n    this.loggerService.log(\n      `Job: ${job.id} processed successfully for email: ${data?.email}`,\n      'PasswordResetEmailConsumer',\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PaymentModule.html":{"url":"modules/PaymentModule.html","title":"module - PaymentModule","body":"\n                   \n\n\n\n\n    Modules\n    PaymentModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/services/payment/payment.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        register\n                        \n                    \n                \n            \n            \n                \n                        \n                    register()\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/payment/payment.module.ts:16\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     DynamicModule\n\n                        \n                \n            \n        \n    \n\n    \n\n\n    \n        import { STRIPE_CLIENT_TOKEN, StripeModule } from '@golevelup/nestjs-stripe';\nimport { DynamicModule, Logger, LoggerService, Module } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { TEMPLATE_QUEUE_NAME, PAYMENT_PROVIDER } from '@common/constants';\nimport { PaymentDriverEnum } from '@common/enums';\nimport Stripe from 'stripe';\nimport { Public } from '@modules/auth/decorators/public.decorator';\nimport { StripeService } from './stripe.service';\nimport { BullModule, getQueueToken } from '@nestjs/bullmq';\nimport { BullBoardModule } from '@bull-board/nestjs';\nimport { BullMQAdapter } from '@bull-board/api/bullMQAdapter';\nimport { Queue } from 'bullmq';\n\n@Module({})\nexport class PaymentModule {\n  static register(): DynamicModule {\n    return {\n      module: PaymentModule,\n      imports: [\n        StripeModule.forRootAsync({\n          useFactory: (configService: ConfigService) => ({\n            apiKey: configService.getOrThrow('stripe.secretKey'),\n            webhookConfig: {\n              stripeSecrets: {\n                account: configService.getOrThrow(\n                  'stripe.webhookSecret.account',\n                ),\n                accountTest: configService.getOrThrow(\n                  'stripe.webhookSecret.accountTest',\n                ),\n              },\n              loggingConfiguration: {\n                logMatchingEventHandlers: true,\n              },\n              decorators: [Public()],\n            },\n          }),\n          inject: [ConfigService],\n        }),\n        BullModule.registerQueue({\n          name: TEMPLATE_QUEUE_NAME,\n          defaultJobOptions: {\n            attempts: 5,\n            backoff: { type: 'exponential', delay: 2000 },\n          },\n        }),\n        BullBoardModule.forFeature({\n          name: TEMPLATE_QUEUE_NAME,\n          adapter: BullMQAdapter,\n        }),\n      ],\n      providers: [\n        {\n          provide: PAYMENT_PROVIDER,\n          useFactory: (\n            configService: ConfigService,\n            loggerService: LoggerService,\n            stripeClient: Stripe,\n            templateQueue: Queue,\n          ) => {\n            const driver = configService.getOrThrow('driver.payment');\n            if (driver === PaymentDriverEnum.STRIPE)\n              return new StripeService(\n                configService,\n                loggerService,\n                stripeClient,\n                templateQueue,\n              );\n          },\n          inject: [\n            ConfigService,\n            Logger,\n            STRIPE_CLIENT_TOKEN,\n            getQueueToken(TEMPLATE_QUEUE_NAME),\n          ],\n        },\n        Logger,\n      ],\n      exports: [PAYMENT_PROVIDER],\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RefreshTokenDto.html":{"url":"classes/RefreshTokenDto.html","title":"class - RefreshTokenDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RefreshTokenDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/dto/refresh-token-dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                refreshToken\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        refreshToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Refresh token provided during login', example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/dto/refresh-token-dto.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsNotEmpty, IsString } from 'class-validator';\n\nexport class RefreshTokenDto {\n  @ApiProperty({\n    description: 'Refresh token provided during login',\n    example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9',\n  })\n  @IsString()\n  @IsNotEmpty()\n  refreshToken: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RequestBodyAndResponseInterceptor.html":{"url":"injectables/RequestBodyAndResponseInterceptor.html","title":"injectable - RequestBodyAndResponseInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RequestBodyAndResponseInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/interceptors/response.interceptor.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(loggerService: LoggerService)\n                    \n                \n                        \n                            \n                                Defined in src/common/interceptors/response.interceptor.ts:53\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        loggerService\n                                                  \n                                                        \n                                                                    LoggerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/interceptors/response.interceptor.ts:56\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                next\n                                            \n                                                        CallHandler\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { STRIPE_WEBHOOK_CONTEXT_TYPE } from '@golevelup/nestjs-stripe';\nimport {\n  CallHandler,\n  ExecutionContext,\n  Inject,\n  Injectable,\n  Logger,\n  LoggerService,\n  NestInterceptor,\n} from '@nestjs/common';\nimport { Observable } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\n\n@Injectable()\nexport class SuccessResponseInterceptor implements NestInterceptor {\n  intercept(context: ExecutionContext, next: CallHandler): Observable {\n    const contextType = context.getType();\n    if (contextType === STRIPE_WEBHOOK_CONTEXT_TYPE) {\n      return next.handle();\n    }\n\n    return next.handle().pipe(\n      map((response) => {\n        const httpResponse = context.switchToHttp().getResponse();\n\n        const statusCode =\n          response?.statusCode && Number.isInteger(response.statusCode)\n            ? response.statusCode\n            : httpResponse.statusCode;\n\n        const message =\n          response?.message && typeof response.message === 'string'\n            ? response.message\n            : 'Operation successful';\n\n        const responseData =\n          response?.data !== undefined ? response?.data : response?.message;\n\n        return {\n          statusCode,\n          success: true,\n          message,\n          data: responseData,\n        };\n      }),\n    );\n  }\n}\n\n@Injectable()\nexport class RequestBodyAndResponseInterceptor implements NestInterceptor {\n  constructor(@Inject(Logger) private readonly loggerService: LoggerService) {}\n\n  intercept(context: ExecutionContext, next: CallHandler): Observable {\n    const request = context.switchToHttp().getRequest();\n    const method = request.method;\n    const url = request.url;\n\n    return next.handle().pipe(\n      tap((response) => {\n        this.loggerService.log(`[${method}] ${url} - Response:`, response);\n      }),\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RequestContextMiddleware.html":{"url":"injectables/RequestContextMiddleware.html","title":"injectable - RequestContextMiddleware","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RequestContextMiddleware\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/middlewares/request-context.middleware.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                use\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(orm: MikroORM)\n                    \n                \n                        \n                            \n                                Defined in src/common/middlewares/request-context.middleware.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        orm\n                                                  \n                                                        \n                                                                    MikroORM\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        use\n                        \n                    \n                \n            \n            \n                \nuse(req: Request, res: Response, next: NextFunction)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/middlewares/request-context.middleware.ts:9\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                res\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                next\n                                            \n                                                        NextFunction\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NestMiddleware } from '@nestjs/common';\nimport { Request, Response, NextFunction } from 'express';\nimport { MikroORM, RequestContext } from '@mikro-orm/core';\n\n@Injectable()\nexport class RequestContextMiddleware implements NestMiddleware {\n  constructor(private readonly orm: MikroORM) {}\n\n  use(req: Request, res: Response, next: NextFunction): void {\n    RequestContext.create(this.orm.em, next);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ResetPasswordDto.html":{"url":"classes/ResetPasswordDto.html","title":"class - ResetPasswordDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ResetPasswordDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/dto/reset-password.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                confirmPassword\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                newPassword\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                resetToken\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        confirmPassword\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The confirmation of the new password', example: 'Asecure-Word.'})@IsString()@IsNotEmpty()@Matches(/^(?=.*[a-z])(?=.*[A-Z])(?=.*[!@#$%^&*()_\\-+=\\[\\]{};':\"\\\\|,.<>\\/?])[A-Za-z\\d!@#$%^&*()_\\-+=\\[\\]{};':\"\\\\|,.<>\\/?]{10,}$/, {message: 'Password must be at least 10 characters long and include uppercase, lowercase, and a symbol (e.g. @, #, ., -)'})@MinLength(10)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/dto/reset-password.dto.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        newPassword\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The new password for the user', example: 'Asecure-Word.'})@IsString()@IsNotEmpty()@Matches(/^(?=.*[a-z])(?=.*[A-Z])(?=.*[!@#$%^&*()_\\-+=\\[\\]{};':\"\\\\|,.<>\\/?])[A-Za-z\\d!@#$%^&*()_\\-+=\\[\\]{};':\"\\\\|,.<>\\/?]{10,}$/, {message: 'Password must be at least 10 characters long and include uppercase, lowercase, and a symbol (e.g. @, #, ., -)'})@MinLength(10)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/dto/reset-password.dto.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        resetToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The reset token sent to the user', example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...'})@IsString()@IsJWT()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/dto/reset-password.dto.ts:50\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport {\n  IsJWT,\n  IsNotEmpty,\n  IsString,\n  Matches,\n  MinLength,\n} from 'class-validator';\n\nexport class ResetPasswordDto {\n  @ApiProperty({\n    description: 'The new password for the user',\n    example: 'Asecure-Word.',\n  })\n  @IsString()\n  @IsNotEmpty()\n  @Matches(\n    /^(?=.*[a-z])(?=.*[A-Z])(?=.*[!@#$%^&*()_\\-+=\\[\\]{};':\"\\\\|,.<>\\/?])[A-Za-z\\d!@#$%^&*()_\\-+=\\[\\]{};':\"\\\\|,.<>\\/?]{10,}$/,\n    {\n      message:\n        'Password must be at least 10 characters long and include uppercase, lowercase, and a symbol (e.g. @, #, ., -)',\n    },\n  )\n  @MinLength(10)\n  newPassword: string;\n\n  @ApiProperty({\n    description: 'The confirmation of the new password',\n    example: 'Asecure-Word.',\n  })\n  @IsString()\n  @IsNotEmpty()\n  @Matches(\n    /^(?=.*[a-z])(?=.*[A-Z])(?=.*[!@#$%^&*()_\\-+=\\[\\]{};':\"\\\\|,.<>\\/?])[A-Za-z\\d!@#$%^&*()_\\-+=\\[\\]{};':\"\\\\|,.<>\\/?]{10,}$/,\n    {\n      message:\n        'Password must be at least 10 characters long and include uppercase, lowercase, and a symbol (e.g. @, #, ., -)',\n    },\n  )\n  @MinLength(10)\n  confirmPassword: string;\n\n  @ApiProperty({\n    description: 'The reset token sent to the user',\n    example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...',\n  })\n  @IsString()\n  @IsJWT()\n  @IsNotEmpty()\n  resetToken: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/RoleGuard.html":{"url":"guards/RoleGuard.html","title":"guard - RoleGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    RoleGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/common/guards/role.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/common/guards/role.guard.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/guards/role.guard.ts:16\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     boolean | Promise | Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import {\n  Injectable,\n  CanActivate,\n  ExecutionContext,\n  ForbiddenException,\n} from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { Role } from '../decorators';\nimport { Observable } from 'rxjs';\nimport { STRIPE_WEBHOOK_CONTEXT_TYPE } from '@golevelup/nestjs-stripe';\n\n@Injectable()\nexport class RoleGuard implements CanActivate {\n  constructor(private readonly reflector: Reflector) {}\n\n  canActivate(\n    context: ExecutionContext,\n  ): boolean | Promise | Observable {\n    const contextType = context.getType();\n\n    if (contextType === STRIPE_WEBHOOK_CONTEXT_TYPE) {\n      return true;\n    }\n\n    const requiredRole = this.reflector.get(Role, context.getHandler());\n\n    if (!requiredRole) {\n      return true;\n    }\n\n    const request = context.switchToHttp().getRequest();\n    const userRole: string = request?.user?.role;\n\n    if (userRole !== requiredRole) {\n      throw new ForbiddenException(\n        'You do not have the necessary permission to access this route!',\n      );\n    }\n\n    return true;\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/S3Service.html":{"url":"injectables/S3Service.html","title":"injectable - S3Service","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  S3Service\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/storage/s3.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                nanoid\n                            \n                            \n                                    Private\n                                s3Bucket\n                            \n                            \n                                    Private\n                                s3Region\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createPresignedUrlWithoutClient\n                            \n                            \n                                    Async\n                                upload\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, loggerService: LoggerService, s3Client: S3)\n                    \n                \n                        \n                            \n                                Defined in src/services/storage/s3.service.ts:21\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        loggerService\n                                                  \n                                                        \n                                                                    LoggerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        s3Client\n                                                  \n                                                        \n                                                                    S3\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createPresignedUrlWithoutClient\n                        \n                    \n                \n            \n            \n                \n                        \n                    createPresignedUrlWithoutClient(key: string, method?: HttpRequestMethodEnum, ttl?: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/storage/s3.service.ts:62\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                method\n                                            \n                                                            HttpRequestMethodEnum\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                        \n                                                ttl\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        upload\n                        \n                    \n                \n            \n            \n                \n                        \n                    upload(file: MemoryStoredFile, fileCategory: UploadFileCategoryEnum)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/storage/s3.service.ts:32\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                file\n                                            \n                                                        MemoryStoredFile\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                fileCategory\n                                            \n                                                            UploadFileCategoryEnum\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        nanoid\n                        \n                    \n                \n            \n                \n                    \n                        Default value : customAlphabet(hexadecimalLowercase, 10)\n                    \n                \n                    \n                        \n                                Defined in src/services/storage/s3.service.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        s3Bucket\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/services/storage/s3.service.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        s3Region\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/services/storage/s3.service.ts:20\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable, Logger, LoggerService } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { IStrorageService } from './interfaces/storage.interface';\nimport { HttpRequestMethodEnum, UploadFileCategoryEnum } from '@common/enums';\nimport { MemoryStoredFile } from 'nestjs-form-data';\nimport { InjectS3, S3 } from 'nestjs-s3';\nimport { customAlphabet } from 'nanoid';\nimport { hexadecimalLowercase } from 'nanoid-dictionary';\nimport { S3PutObjectResponse } from './types/s3-put-object-response';\nimport { parseUrl } from '@smithy/url-parser';\nimport { S3RequestPresigner } from '@aws-sdk/s3-request-presigner';\nimport { fromEnv } from '@aws-sdk/credential-providers';\nimport { Hash } from '@smithy/hash-node';\nimport { HttpRequest } from '@smithy/protocol-http';\nimport { formatUrl } from '@aws-sdk/util-format-url';\n\n@Injectable()\nexport class S3Service implements IStrorageService {\n  private s3Bucket: string;\n  private s3Region: string;\n  private readonly nanoid = customAlphabet(hexadecimalLowercase, 10);\n\n  constructor(\n    private readonly configService: ConfigService,\n    @Inject(Logger) private readonly loggerService: LoggerService,\n    @InjectS3() private readonly s3Client: S3,\n  ) {\n    this.s3Bucket = this.configService.getOrThrow('aws.s3.bucket');\n    this.s3Region = this.configService.getOrThrow('aws.s3.region');\n  }\n\n  async upload(\n    file: MemoryStoredFile,\n    fileCategory: UploadFileCategoryEnum,\n  ): Promise {\n    this.s3Bucket = this.configService.getOrThrow('aws.s3.bucket');\n\n    const key = `${fileCategory}/${this.nanoid()}_${file.originalName}`;\n\n    this.loggerService.log(\n      `Starting upload: filename=\"${file.originalName}\", size=${file.size} bytes, category=${fileCategory}`,\n      S3Service.name,\n    );\n\n    await this.s3Client.putObject({\n      Bucket: this.s3Bucket,\n      Key: key,\n      Body: file.buffer,\n      ContentType: file.mimetype,\n    });\n\n    const url = `https://${this.s3Bucket}.s3.${this.s3Region}.amazonaws.com/${key}`;\n\n    this.loggerService.log(\n      `Upload successful: filename=\"${file.originalName}\", key=${key}`,\n      S3Service.name,\n    );\n\n    return { key, url };\n  }\n\n  async createPresignedUrlWithoutClient(\n    key: string,\n    method?: HttpRequestMethodEnum,\n    ttl?: number,\n  ): Promise {\n    const httpMethod = method ?? HttpRequestMethodEnum.GET;\n    const expiresIn = ttl ?? 30 * 60 * 60;\n\n    const url = parseUrl(\n      `https://${this.s3Bucket}.s3.${this.s3Region}.amazonaws.com/${key}`,\n    );\n    const presigner = new S3RequestPresigner({\n      credentials: fromEnv(),\n      region: this.s3Region,\n      sha256: Hash.bind(null, 'sha256'),\n    });\n\n    const signedUrlObject = await presigner.presign(\n      new HttpRequest({ ...url, method: httpMethod }),\n      { expiresIn },\n    );\n    return formatUrl(signedUrlObject);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SchemaService.html":{"url":"injectables/SchemaService.html","title":"injectable - SchemaService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SchemaService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/schema.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                onModuleInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(orm: MikroORM, configService: ConfigService, loggerService: LoggerService)\n                    \n                \n                        \n                            \n                                Defined in src/schema.service.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        orm\n                                                  \n                                                        \n                                                                    MikroORM\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        loggerService\n                                                  \n                                                        \n                                                                    LoggerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \n                        \n                    onModuleInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/schema.service.ts:20\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  Injectable,\n  OnModuleInit,\n  Logger,\n  LoggerService,\n  Inject,\n} from '@nestjs/common';\nimport { MikroORM } from '@mikro-orm/core';\nimport { ConfigService } from '@nestjs/config';\nimport { PRODUCTION } from './common/constants';\n\n@Injectable()\nexport class SchemaService implements OnModuleInit {\n  constructor(\n    private readonly orm: MikroORM,\n    private readonly configService: ConfigService,\n    @Inject(Logger) private readonly loggerService: LoggerService,\n  ) {}\n\n  async onModuleInit() {\n    const nodeEnv = this.configService.getOrThrow('nodeEnv');\n\n    if (nodeEnv !== PRODUCTION) {\n      const generator = this.orm.getSchemaGenerator();\n      await generator.updateSchema();\n      this.loggerService.log(\n        '✅ Database schema synchronized',\n        SchemaService.name,\n      );\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/StorageModule.html":{"url":"modules/StorageModule.html","title":"module - StorageModule","body":"\n                   \n\n\n\n\n    Modules\n    StorageModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/services/storage/storage.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        register\n                        \n                    \n                \n            \n            \n                \n                        \n                    register()\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/storage/storage.module.ts:11\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     DynamicModule\n\n                        \n                \n            \n        \n    \n\n    \n\n\n    \n        import { Module, DynamicModule, Logger, LoggerService } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { CloudinaryService } from './cloudinary.service';\nimport { STORAGE_PROVIDER } from '@common/constants';\nimport { StorageDriverEnum } from '@common/enums';\nimport { S3Service } from './s3.service';\nimport { getS3ConnectionToken, S3, S3Module } from 'nestjs-s3';\n\n@Module({})\nexport class StorageModule {\n  static register(): DynamicModule {\n    return {\n      module: StorageModule,\n      imports: [\n        S3Module.forRootAsync({\n          inject: [ConfigService],\n          useFactory: (configService: ConfigService) => ({\n            config: {\n              credentials: {\n                accessKeyId: configService.get('aws.s3.accessKeyId'),\n                secretAccessKey: configService.get(\n                  'aws.s3.secretAccessKey',\n                ),\n              },\n              region: configService.get('aws.s3.region'),\n            },\n          }),\n        }),\n      ],\n      providers: [\n        {\n          provide: STORAGE_PROVIDER,\n          useFactory: (\n            configService: ConfigService,\n            loggerService: LoggerService,\n            s3Client: S3,\n          ) => {\n            const driver = configService.getOrThrow('driver.storage');\n            if (driver === StorageDriverEnum.CLOUDINARY) {\n              return new CloudinaryService(configService, loggerService);\n            } else if (driver === StorageDriverEnum.S3) {\n              return new S3Service(configService, loggerService, s3Client);\n            }\n\n            throw new Error(`Unsupported storage driver: ${driver}`);\n          },\n          inject: [ConfigService, Logger, getS3ConnectionToken('')],\n        },\n        Logger,\n      ],\n      exports: [STORAGE_PROVIDER],\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/StripeService.html":{"url":"injectables/StripeService.html","title":"injectable - StripeService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  StripeService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/payment/stripe.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createCheckoutSession\n                            \n                            \n                                    Async\n                                createPaymentIntent\n                            \n                            \n                                    \n                                    Async\n                                handlePaymentIntentSucceeded\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, loggerService: LoggerService, stripeClient: Stripe, templateQueue: Queue)\n                    \n                \n                        \n                            \n                                Defined in src/services/payment/stripe.service.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        loggerService\n                                                  \n                                                        \n                                                                    LoggerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        stripeClient\n                                                  \n                                                        \n                                                                    Stripe\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        templateQueue\n                                                  \n                                                        \n                                                                    Queue\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createCheckoutSession\n                        \n                    \n                \n            \n            \n                \n                        \n                    createCheckoutSession(params: Stripe.Checkout.SessionCreateParams, options?: Stripe.RequestOptions)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/payment/stripe.service.ts:23\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                params\n                                            \n                                                            Stripe.Checkout.SessionCreateParams\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                options\n                                            \n                                                        Stripe.RequestOptions\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createPaymentIntent\n                        \n                    \n                \n            \n            \n                \n                        \n                    createPaymentIntent(params: Stripe.PaymentIntentCreateParams, options?: Stripe.RequestOptions)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/payment/stripe.service.ts:45\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                params\n                                            \n                                                            Stripe.PaymentIntentCreateParams\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                options\n                                            \n                                                        Stripe.RequestOptions\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        handlePaymentIntentSucceeded\n                        \n                    \n                \n            \n            \n                \n                        \n                    handlePaymentIntentSucceeded(evt: Stripe.PaymentIntentSucceededEvent)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @StripeWebhookHandler('payment_intent.succeeded')\n                \n            \n\n                    \n                        \n                            Defined in src/services/payment/stripe.service.ts:60\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                evt\n                                            \n                                                            Stripe.PaymentIntentSucceededEvent\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  InjectStripeClient,\n  StripeWebhookHandler,\n} from '@golevelup/nestjs-stripe';\nimport { Inject, Injectable, Logger, LoggerService } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport Stripe from 'stripe';\nimport { TEMPLATE_QUEUE_NAME } from '@common/constants';\nimport { IPaymentService } from './interfaces/payment.interface';\nimport { InjectQueue } from '@nestjs/bullmq';\nimport { Queue } from 'bullmq';\n\n@Injectable()\nexport class StripeService implements IPaymentService {\n  constructor(\n    private readonly configService: ConfigService,\n    @Inject(Logger) private readonly loggerService: LoggerService,\n    @InjectStripeClient() private readonly stripeClient: Stripe,\n    @InjectQueue(TEMPLATE_QUEUE_NAME)\n    private readonly templateQueue: Queue,\n  ) {}\n\n  async createCheckoutSession(\n    params: Stripe.Checkout.SessionCreateParams,\n    options?: Stripe.RequestOptions,\n  ): Promise> {\n    this.loggerService.log(\n      `Creating Stripe checkout session`,\n      StripeService.name,\n    );\n\n    const session = await this.stripeClient.checkout.sessions.create(\n      params,\n      options,\n    );\n\n    this.loggerService.log(\n      `Checkout session created successfully with ID: ${session.id}`,\n      StripeService.name,\n    );\n\n    return session;\n  }\n\n  async createPaymentIntent(\n    params: Stripe.PaymentIntentCreateParams,\n    options?: Stripe.RequestOptions,\n  ): Promise> {\n    this.loggerService.log(`Creating Payment Intent`, StripeService.name);\n\n    const paymentIntent = await this.stripeClient.paymentIntents.create(\n      params,\n      options,\n    );\n\n    return paymentIntent;\n  }\n\n  @StripeWebhookHandler('payment_intent.succeeded')\n  async handlePaymentIntentSucceeded(evt: Stripe.PaymentIntentSucceededEvent) {\n    const { data }: { data: Stripe.PaymentIntentSucceededEvent.Data } = evt;\n    const intent = data.object as Stripe.PaymentIntent;\n\n    await this.templateQueue.add(TEMPLATE_QUEUE_NAME, {\n      intent,\n      eventId: evt?.id,\n    });\n\n    this.loggerService.log(\n      `Received Stripe payment_intent.succeeded event: intent id=\"${intent.id}\" and queued into: \"${TEMPLATE_QUEUE_NAME}\"`,\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SuccessResponseInterceptor.html":{"url":"injectables/SuccessResponseInterceptor.html","title":"injectable - SuccessResponseInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SuccessResponseInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/interceptors/response.interceptor.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/interceptors/response.interceptor.ts:16\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                next\n                                            \n                                                        CallHandler\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { STRIPE_WEBHOOK_CONTEXT_TYPE } from '@golevelup/nestjs-stripe';\nimport {\n  CallHandler,\n  ExecutionContext,\n  Inject,\n  Injectable,\n  Logger,\n  LoggerService,\n  NestInterceptor,\n} from '@nestjs/common';\nimport { Observable } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\n\n@Injectable()\nexport class SuccessResponseInterceptor implements NestInterceptor {\n  intercept(context: ExecutionContext, next: CallHandler): Observable {\n    const contextType = context.getType();\n    if (contextType === STRIPE_WEBHOOK_CONTEXT_TYPE) {\n      return next.handle();\n    }\n\n    return next.handle().pipe(\n      map((response) => {\n        const httpResponse = context.switchToHttp().getResponse();\n\n        const statusCode =\n          response?.statusCode && Number.isInteger(response.statusCode)\n            ? response.statusCode\n            : httpResponse.statusCode;\n\n        const message =\n          response?.message && typeof response.message === 'string'\n            ? response.message\n            : 'Operation successful';\n\n        const responseData =\n          response?.data !== undefined ? response?.data : response?.message;\n\n        return {\n          statusCode,\n          success: true,\n          message,\n          data: responseData,\n        };\n      }),\n    );\n  }\n}\n\n@Injectable()\nexport class RequestBodyAndResponseInterceptor implements NestInterceptor {\n  constructor(@Inject(Logger) private readonly loggerService: LoggerService) {}\n\n  intercept(context: ExecutionContext, next: CallHandler): Observable {\n    const request = context.switchToHttp().getRequest();\n    const method = request.method;\n    const url = request.url;\n\n    return next.handle().pipe(\n      tap((response) => {\n        this.loggerService.log(`[${method}] ${url} - Response:`, response);\n      }),\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateProfileDto.html":{"url":"classes/UpdateProfileDto.html","title":"class - UpdateProfileDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateProfileDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/dto/update-profile.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(\n  OmitType(CreateUserDto, [\n    'role',\n    'email',\n    'password',\n    'phoneNumber',\n    'countryCode',\n  ] as const),\n)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { OmitType, PartialType } from '@nestjs/swagger';\nimport { CreateUserDto } from './create-user.dto';\n\nexport class UpdateProfileDto extends PartialType(\n  OmitType(CreateUserDto, [\n    'role',\n    'email',\n    'password',\n    'phoneNumber',\n    'countryCode',\n  ] as const),\n) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/User.html":{"url":"entities/User.html","title":"entity - User","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/entities/user.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Optional\n                                address\n                            \n                            \n                                    \n                                    Optional\n                                avatar\n                            \n                            \n                                    \n                                changePassword\n                            \n                            \n                                    \n                                    Optional\n                                city\n                            \n                            \n                                    \n                                    Optional\n                                country\n                            \n                            \n                                    \n                                    Optional\n                                countryCode\n                            \n                            \n                                    \n                                email\n                            \n                            \n                                    \n                                firstName\n                            \n                            \n                                    \n                                    Optional\n                                lastLoggedIn\n                            \n                            \n                                    \n                                lastName\n                            \n                            \n                                    \n                                password\n                            \n                            \n                                    \n                                passwordResetRequested\n                            \n                            \n                                    \n                                    Optional\n                                phoneNumber\n                            \n                            \n                                    \n                                    Optional\n                                postalCode\n                            \n                            \n                                    \n                                role\n                            \n                            \n                                    \n                                    Optional\n                                state\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Property({type: 'text', nullable: true, comment: 'Street address'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/entities/user.entity.ts:51\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        avatar\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Property({type: 'varchar', length: 500, nullable: true, comment: 'Avatar URL or path'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/entities/user.entity.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        changePassword\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Property({type: 'boolean', default: false, comment: 'Whether user needs to change password'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/entities/user.entity.ts:122\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        city\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Property({type: 'varchar', length: 100, nullable: true, comment: 'City name'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/entities/user.entity.ts:59\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        country\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Property({type: 'varchar', length: 100, nullable: true, comment: 'Country name'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/entities/user.entity.ts:83\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        countryCode\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Property({type: 'varchar', length: 3, nullable: true, comment: 'ISO country code'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/entities/user.entity.ts:91\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Property({unique: true, type: 'varchar', length: 255, comment: 'User email address'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/entities/user.entity.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Property({type: 'varchar', length: 100, comment: 'User first name'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/entities/user.entity.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        lastLoggedIn\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Property({type: 'timestamptz', nullable: true, comment: 'Last login timestamp'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/entities/user.entity.ts:136\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Property({type: 'varchar', length: 100, comment: 'User last name'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/entities/user.entity.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Property({type: 'varchar', length: 255, comment: 'Hashed password'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/entities/user.entity.ts:106\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        passwordResetRequested\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Property({type: 'boolean', default: false, comment: 'Whether password reset was requested'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/entities/user.entity.ts:129\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        phoneNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Property({type: 'varchar', length: 20, nullable: true, comment: 'Phone number'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/entities/user.entity.ts:99\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        postalCode\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Property({type: 'varchar', length: 20, nullable: true, comment: 'Postal/ZIP code'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/entities/user.entity.ts:67\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserRoleEnum\n\n                    \n                \n                \n                    \n                        Default value : UserRoleEnum.USER\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Enum({items: () => UserRoleEnum, type: 'varchar', length: 20, defaultRaw: undefined, comment: 'User role'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/entities/user.entity.ts:115\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        state\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Property({type: 'varchar', length: 100, nullable: true, comment: 'State/Province'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/entities/user.entity.ts:75\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  Property,\n  Enum,\n  BeforeCreate,\n  BeforeUpdate,\n  Index,\n} from '@mikro-orm/core';\nimport { BaseEntity } from '@common/entities/base.entity';\nimport { UserRoleEnum } from '@common/enums';\nimport { normalizeUserFields } from '@common/utils/user.util';\n\n@Entity({ tableName: 'users' })\n@Index({ properties: ['email'] })\nexport class User extends BaseEntity {\n  @Property({\n    unique: true,\n    type: 'varchar',\n    length: 255,\n    comment: 'User email address',\n  })\n  email!: string;\n\n  @Property({\n    type: 'varchar',\n    length: 500,\n    nullable: true,\n    comment: 'Avatar URL or path',\n  })\n  avatar?: string;\n\n  @Property({\n    type: 'varchar',\n    length: 100,\n    comment: 'User first name',\n  })\n  firstName!: string;\n\n  @Property({\n    type: 'varchar',\n    length: 100,\n    comment: 'User last name',\n  })\n  lastName!: string;\n\n  @Property({\n    type: 'text',\n    nullable: true,\n    comment: 'Street address',\n  })\n  address?: string;\n\n  @Property({\n    type: 'varchar',\n    length: 100,\n    nullable: true,\n    comment: 'City name',\n  })\n  city?: string;\n\n  @Property({\n    type: 'varchar',\n    length: 20,\n    nullable: true,\n    comment: 'Postal/ZIP code',\n  })\n  postalCode?: string;\n\n  @Property({\n    type: 'varchar',\n    length: 100,\n    nullable: true,\n    comment: 'State/Province',\n  })\n  state?: string;\n\n  @Property({\n    type: 'varchar',\n    length: 100,\n    nullable: true,\n    comment: 'Country name',\n  })\n  country?: string;\n\n  @Property({\n    type: 'varchar',\n    length: 3,\n    nullable: true,\n    comment: 'ISO country code',\n  })\n  countryCode?: string;\n\n  @Property({\n    type: 'varchar',\n    length: 20,\n    nullable: true,\n    comment: 'Phone number',\n  })\n  phoneNumber?: string;\n\n  @Property({\n    type: 'varchar',\n    length: 255,\n    comment: 'Hashed password',\n  })\n  password!: string;\n\n  @Enum({\n    items: () => UserRoleEnum,\n    type: 'varchar',\n    length: 20,\n    defaultRaw: UserRoleEnum.USER,\n    comment: 'User role',\n  })\n  role: UserRoleEnum = UserRoleEnum.USER;\n\n  @Property({\n    type: 'boolean',\n    default: false,\n    comment: 'Whether user needs to change password',\n  })\n  changePassword: boolean = false;\n\n  @Property({\n    type: 'boolean',\n    default: false,\n    comment: 'Whether password reset was requested',\n  })\n  passwordResetRequested: boolean = false;\n\n  @Property({\n    type: 'timestamptz',\n    nullable: true,\n    comment: 'Last login timestamp',\n  })\n  lastLoggedIn?: Date;\n\n  @BeforeCreate()\n  @BeforeUpdate()\n  private normalizeFields() {\n    normalizeUserFields(this);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserFactory.html":{"url":"classes/UserFactory.html","title":"class - UserFactory","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserFactory\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/factories/user.factory.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        Factory\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                model\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                definition\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        model\n                        \n                    \n                \n            \n                \n                    \n                        Default value : User\n                    \n                \n                    \n                        \n                                Defined in src/modules/users/factories/user.factory.ts:7\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        definition\n                        \n                    \n                \n            \n            \n                \ndefinition()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/users/factories/user.factory.ts:9\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         Partial\n\n                        \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Factory } from '@mikro-orm/seeder';\nimport { faker } from '@faker-js/faker';\nimport { User } from '../entities/user.entity';\nimport { UserRoleEnum } from '@common/enums';\n\nexport class UserFactory extends Factory {\n  model = User;\n\n  definition(): Partial {\n    return {\n      email: faker.internet.email(),\n      firstName: faker.person.firstName(),\n      lastName: faker.person.lastName(),\n      password: faker.internet.password(),\n      avatar: faker.image.avatar(),\n      address: faker.location.streetAddress(),\n      city: faker.location.city(),\n      postalCode: faker.location.zipCode(),\n      state: faker.location.state(),\n      country: faker.location.country(),\n      countryCode: faker.location.countryCode(),\n      phoneNumber: faker.phone.number(),\n      role: faker.helpers.enumValue(UserRoleEnum),\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                changePassword\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                create\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                getProfile\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                updateProfile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        changePassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    changePassword(data: ChangePasswordDto, req: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('change-password')@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Change user password'})@ApiBody({type: ChangePasswordDto})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/users/users.controller.ts:72\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                            ChangePasswordDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                req\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(user: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Post('sign-up')@ApiOperation({summary: 'Sign up a new user'})@ApiBody({type: CreateUserDto})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/users/users.controller.ts:28\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        getProfile\n                        \n                    \n                \n            \n            \n                \n                        \n                    getProfile(req: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('profile')@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Get user profile'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/users/users.controller.ts:40\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        updateProfile\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateProfile(req: any, body: UpdateProfileDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch('update-profile')@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Update user profile'})@ApiBody({type: UpdateProfileDto})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/users/users.controller.ts:55\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                body\n                                            \n                                                            UpdateProfileDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Get,\n  HttpCode,\n  HttpStatus,\n  Patch,\n  Post,\n  Request,\n} from '@nestjs/common';\nimport { ApiTags, ApiOperation, ApiBody } from '@nestjs/swagger';\nimport { UsersService } from './users.service';\nimport { Public } from '../auth/decorators/public.decorator';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport { ApiResponse } from '@common/interfaces/api-response.interface';\nimport { ChangePasswordDto } from './dto/change-password.dto';\nimport { UpdateProfileDto } from './dto/update-profile.dto';\n\n@ApiTags('users')\n@Controller('users')\nexport class UsersController {\n  constructor(private readonly usersService: UsersService) {}\n\n  @Public()\n  @Post('sign-up')\n  @ApiOperation({ summary: 'Sign up a new user' })\n  @ApiBody({ type: CreateUserDto })\n  async create(@Body() user: CreateUserDto): Promise> {\n    const newUser = await this.usersService.create(user);\n    return {\n      statusCode: HttpStatus.CREATED,\n      message: 'User created successfully',\n      data: newUser,\n    };\n  }\n\n  @Get('profile')\n  @HttpCode(HttpStatus.OK)\n  @ApiOperation({ summary: 'Get user profile' })\n  async getProfile(@Request() req: any): Promise> {\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const { password, ...safeUser } = req.user;\n\n    return {\n      statusCode: HttpStatus.OK,\n      message: 'Profile fetched successfully',\n      data: { user: safeUser },\n    };\n  }\n\n  @Patch('update-profile')\n  @HttpCode(HttpStatus.OK)\n  @ApiOperation({ summary: 'Update user profile' })\n  @ApiBody({ type: UpdateProfileDto })\n  async updateProfile(\n    @Request() req: any,\n    @Body() body: UpdateProfileDto,\n  ): Promise> {\n    const userId = req?.user?.id;\n    const updatedUser = await this.usersService.update({ id: userId, ...body });\n    return {\n      statusCode: HttpStatus.OK,\n      message: 'Profile updated successfully',\n      data: updatedUser,\n    };\n  }\n\n  @Post('change-password')\n  @HttpCode(HttpStatus.OK)\n  @ApiOperation({ summary: 'Change user password' })\n  @ApiBody({ type: ChangePasswordDto })\n  async changePassword(\n    @Body() data: ChangePasswordDto,\n    @Request() req: any,\n  ): Promise> {\n    const userId = req.user.id;\n    await this.usersService.changePassword(userId, data);\n    return {\n      statusCode: HttpStatus.OK,\n      message: 'Password Changed Successfully',\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_imports\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nAppRedisModule\n\nAppRedisModule\n\n\n\nUsersModule\n\nUsersModule\n\nUsersModule -->\n\nAppRedisModule->UsersModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\nUsersSubscriber\n\nUsersSubscriber\n\nUsersModule -->\n\nUsersSubscriber->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UsersService\n                        \n                        \n                            UsersSubscriber\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AppRedisModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UsersService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { UsersService } from './users.service';\nimport { UsersController } from './users.controller';\nimport { MikroOrmModule } from '@mikro-orm/nestjs';\nimport { User } from './entities/user.entity';\nimport { UsersSubscriber } from './subscribers/user.subscriber';\nimport { AppRedisModule } from '@services/redis/redis.module';\n\n@Module({\n  imports: [MikroOrmModule.forFeature([User]), AppRedisModule],\n  controllers: [UsersController],\n  providers: [UsersService, UsersSubscriber],\n  exports: [UsersService],\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/users.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                userEmailCacheKey\n                            \n                            \n                                    Private\n                                    Readonly\n                                userIdCacheKey\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                changePassword\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(appRedisService: AppRedisService, userRepository: EntityRepository)\n                    \n                \n                        \n                            \n                                Defined in src/modules/users/users.service.ts:21\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        appRedisService\n                                                  \n                                                        \n                                                                        AppRedisService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        EntityRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        changePassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    changePassword(userId: string, data: ChangePasswordDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/users/users.service.ts:127\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                data\n                                            \n                                                            ChangePasswordDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(userData: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/users/users.service.ts:32\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userData\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(query: FilterQuery, options?: FindOneOrFailOptions)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/users/users.service.ts:49\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                query\n                                            \n                                                            FilterQuery\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                options\n                                            \n                                                            FindOneOrFailOptions\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(data: EntityData)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/users/users.service.ts:97\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                            EntityData\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        userEmailCacheKey\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/users/users.service.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        userIdCacheKey\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/users/users.service.ts:20\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  ConflictException,\n  Injectable,\n  NotFoundException,\n} from '@nestjs/common';\nimport { InjectRepository } from '@mikro-orm/nestjs';\nimport {\n  EntityData,\n  EntityRepository,\n  FilterQuery,\n  FindOneOrFailOptions,\n} from '@mikro-orm/core';\nimport { User } from './entities/user.entity';\nimport { ChangePasswordDto } from './dto/change-password.dto';\nimport { AppRedisService } from '@services/redis/redis.service';\n\n@Injectable()\nexport class UsersService {\n  private readonly userIdCacheKey: string;\n  private readonly userEmailCacheKey: string;\n\n  constructor(\n    private readonly appRedisService: AppRedisService,\n    @InjectRepository(User)\n    private readonly userRepository: EntityRepository,\n  ) {\n    this.userIdCacheKey = `users:id`;\n    this.userEmailCacheKey = `users:email`;\n  }\n\n  async create(userData: any): Promise> {\n    const user = await this.userRepository.findOne({\n      email: userData.email,\n    });\n\n    if (user) {\n      throw new ConflictException('User already exists in the system.');\n    }\n\n    const newUser = this.userRepository.create(userData);\n    await this.userRepository.getEntityManager().persistAndFlush(newUser);\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const { password, ...result } = newUser;\n    return result;\n  }\n\n  async findOne(\n    query: FilterQuery,\n    options?: FindOneOrFailOptions,\n  ): Promise {\n    let cacheKey: string | undefined;\n\n    if (typeof query === 'string') {\n      cacheKey = `${this.userIdCacheKey}:${query}`;\n    } else if (typeof query === 'object' && query !== null) {\n      if ('id' in query && query?.id) {\n        cacheKey = `${this.userIdCacheKey}:${query?.id}`;\n      } else if ('email' in query && query?.email) {\n        cacheKey = `${this.userEmailCacheKey}:${query?.email}`;\n      }\n    }\n\n    if (cacheKey) {\n      const cached = await this.appRedisService.get(cacheKey);\n\n      if (cached) {\n        const parsed = JSON.parse(cached);\n        const user = this.userRepository.create(parsed);\n        return this.userRepository.getEntityManager().merge(user);\n      }\n    }\n\n    const user = await this.userRepository.findOneOrFail(query, options);\n\n    if (cacheKey) {\n      const serializable = { ...user };\n\n      await Promise.all([\n        this.appRedisService.set(\n          `${this.userIdCacheKey}:${user?.id}`,\n          JSON.stringify(serializable),\n          5 * 60,\n        ),\n        this.appRedisService.set(\n          `${this.userEmailCacheKey}:${user?.email}`,\n          JSON.stringify(serializable),\n          5 * 60,\n        ),\n      ]);\n    }\n\n    return user;\n  }\n\n  async update(data: EntityData): Promise> {\n    const user = await this.userRepository.findOneOrFail(\n      { id: data.id },\n      { failHandler: () => new NotFoundException('User not found') },\n    );\n\n    this.userRepository.assign(user, data);\n\n    await this.userRepository.getEntityManager().persistAndFlush(user);\n\n    if (user) {\n      await Promise.all([\n        this.appRedisService.set(\n          `${this.userIdCacheKey}:${user?.id}`,\n          JSON.stringify(user),\n          5 * 60,\n        ),\n        this.appRedisService.set(\n          `${this.userEmailCacheKey}:${user?.email}`,\n          JSON.stringify(user),\n          5 * 60,\n        ),\n      ]);\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const { password, ...result } = user;\n    return result;\n  }\n\n  async changePassword(\n    userId: string,\n    data: ChangePasswordDto,\n  ): Promise> {\n    const { newPassword, confirmPassword } = data;\n\n    if (newPassword !== confirmPassword) {\n      throw new BadRequestException('Passwords do not match');\n    }\n\n    const updatedUser = await this.update({\n      id: userId,\n      password: newPassword,\n      changePassword: false,\n    });\n\n    return updatedUser;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersSubscriber.html":{"url":"injectables/UsersSubscriber.html","title":"injectable - UsersSubscriber","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersSubscriber\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/subscribers/user.subscriber.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                beforeCreate\n                            \n                            \n                                    Async\n                                beforeUpdate\n                            \n                            \n                                getSubscribedEntities\n                            \n                            \n                                    Private\n                                    Async\n                                hashPassword\n                            \n                            \n                                    Private\n                                isPasswordModified\n                            \n                            \n                                    Private\n                                normalizeFields\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(em: EntityManager, configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/users/subscribers/user.subscriber.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        em\n                                                  \n                                                        \n                                                                    EntityManager\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        beforeCreate\n                        \n                    \n                \n            \n            \n                \n                        \n                    beforeCreate(args: EventArgs)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/users/subscribers/user.subscriber.ts:26\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                args\n                                            \n                                                            EventArgs\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        beforeUpdate\n                        \n                    \n                \n            \n            \n                \n                        \n                    beforeUpdate(args: EventArgs)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/users/subscribers/user.subscriber.ts:34\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                args\n                                            \n                                                            EventArgs\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getSubscribedEntities\n                        \n                    \n                \n            \n            \n                \ngetSubscribedEntities()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/users/subscribers/user.subscriber.ts:22\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     EntityName[]\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        hashPassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    hashPassword(user: User)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/users/subscribers/user.subscriber.ts:56\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            User\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        isPasswordModified\n                        \n                    \n                \n            \n            \n                \n                        \n                    isPasswordModified(user: User)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/users/subscribers/user.subscriber.ts:48\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            User\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        normalizeFields\n                        \n                    \n                \n            \n            \n                \n                        \n                    normalizeFields(user: User)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/users/subscribers/user.subscriber.ts:44\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            User\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  EventSubscriber,\n  EntityName,\n  EventArgs,\n  EntityManager,\n} from '@mikro-orm/core';\nimport { Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { User } from '../entities/user.entity';\nimport * as bcrypt from 'bcrypt';\nimport { normalizeUserFields } from '@common/utils/user.util';\n\n@Injectable()\nexport class UsersSubscriber implements EventSubscriber {\n  constructor(\n    em: EntityManager,\n    private readonly configService: ConfigService,\n  ) {\n    em.getEventManager().registerSubscriber(this);\n  }\n\n  getSubscribedEntities(): EntityName[] {\n    return [User];\n  }\n\n  async beforeCreate(args: EventArgs) {\n    const user = args.entity;\n\n    this.normalizeFields(user);\n\n    await this.hashPassword(user);\n  }\n\n  async beforeUpdate(args: EventArgs) {\n    const user = args.entity;\n\n    this.normalizeFields(user);\n\n    if (this.isPasswordModified(user)) {\n      await this.hashPassword(user);\n    }\n  }\n\n  private normalizeFields(user: User) {\n    normalizeUserFields(user);\n  }\n\n  private isPasswordModified(user: User): boolean {\n    const originalData = (user as any).__helper?.__originalEntityData;\n\n    if (!originalData) return true;\n\n    return user.password !== originalData.password;\n  }\n\n  private async hashPassword(user: User) {\n    const saltRounds = this.configService.get('auth.saltRounds');\n    user.password = await bcrypt.hash(user.password, saltRounds);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/commands/create-user.command.ts\n            \n            injectable\n            CreateUserCommand\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                        src/common/constants/index.ts\n            \n            variable\n            APP_NAME\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/common/constants/index.ts\n            \n            variable\n            EMAIL_FROM_NAME\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/common/constants/index.ts\n            \n            variable\n            PASSWORD_CHARACTER_SET\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/common/constants/index.ts\n            \n            variable\n            PASSWORD_RESET_EMAIL_QUEUE_NAME\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/common/constants/index.ts\n            \n            variable\n            PAYMENT_PROVIDER\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/common/constants/index.ts\n            \n            variable\n            PRODUCTION\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/common/constants/index.ts\n            \n            variable\n            STORAGE_PROVIDER\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/common/constants/index.ts\n            \n            variable\n            TEMPLATE_QUEUE_NAME\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/common/decorators/index.ts\n            \n            variable\n            Role\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/entities/base.entity.ts\n            \n            class\n            BaseEntity\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/common/filters/exception.filter.ts\n            \n            class\n            CatchAllFilter\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/common/guards/role.guard.ts\n            \n            guard\n            RoleGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/common/interceptors/response.interceptor.ts\n            \n            injectable\n            RequestBodyAndResponseInterceptor\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/common/interceptors/response.interceptor.ts\n            \n            injectable\n            SuccessResponseInterceptor\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/common/interfaces/api-response.interface.ts\n            \n            interface\n            ApiResponse\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/common/interfaces/error-response.interface.ts\n            \n            interface\n            ErrorResponse\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/common/middlewares/morgan.middleware.ts\n            \n            injectable\n            MorganMiddleware\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/common/middlewares/request-context.middleware.ts\n            \n            injectable\n            RequestContextMiddleware\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                        src/common/types/index.ts\n            \n            type alias\n            HandledException\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/common/utils/common.utils.ts\n            \n            function\n            generateSlug\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/common/utils/user.util.ts\n            \n            function\n            normalizeUserFields\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/config/mikro-orm.config.ts\n            \n            variable\n            PRODUCTION\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/config/mikro-orm.config.ts\n            \n            variable\n            sslEnabled\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/config/swagger.config.ts\n            \n            function\n            setupSwagger\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/config/winston.config.ts\n            \n            function\n            createWinstonLogger\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/main.cli.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/migrations/Migration20250730220636.ts\n            \n            class\n            Migration20250730220636\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/modules/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/modules/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/13)\n            \n        \n        \n            \n                \n                src/modules/auth/consumers/auth.consumer.ts\n            \n            class\n            PasswordResetEmailConsumer\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                        src/modules/auth/decorators/public.decorator.ts\n            \n            variable\n            IS_PUBLIC_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/modules/auth/decorators/public.decorator.ts\n            \n            variable\n            Public\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/auth/dto/auth-response.dto.ts\n            \n            class\n            AuthResponseDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/auth/dto/forgot-password.dto.ts\n            \n            class\n            ForgotPasswordDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/modules/auth/dto/login.dto.ts\n            \n            class\n            LoginDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/auth/dto/refresh-token-dto.ts\n            \n            class\n            RefreshTokenDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/modules/auth/dto/reset-password.dto.ts\n            \n            class\n            ResetPasswordDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/modules/auth/guards/jwt-auth.guard.ts\n            \n            injectable\n            JwtAuthGuard\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/modules/auth/guards/local-auth.guard.ts\n            \n            injectable\n            LocalAuthGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/auth/strategies/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                src/modules/auth/strategies/local.strategy.ts\n            \n            injectable\n            LocalStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                        src/modules/auth/types/auth-tokens.ts\n            \n            type alias\n            AuthTokens\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/users/dto/change-password.dto.ts\n            \n            class\n            ChangePasswordDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/users/dto/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/14)\n            \n        \n        \n            \n                \n                src/modules/users/dto/responses.dto.ts\n            \n            class\n            CreateUserResponseDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/users/dto/responses.dto.ts\n            \n            class\n            GetProfileResponseDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/users/dto/update-profile.dto.ts\n            \n            class\n            UpdateProfileDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/users/entities/user.entity.ts\n            \n            entity\n            User\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/users/entities/user.entity.ts\n            \n            class\n            User\n            \n                0 %\n                (0/18)\n            \n        \n        \n            \n                \n                src/modules/users/factories/user.factory.ts\n            \n            class\n            UserFactory\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/users/subscribers/user.subscriber.ts\n            \n            injectable\n            UsersSubscriber\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/modules/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/modules/users/users.service.ts\n            \n            injectable\n            UsersService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/schema.service.ts\n            \n            injectable\n            SchemaService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/seeders/DatabaseSeeder.ts\n            \n            class\n            DatabaseSeeder\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/services/email/email.service.ts\n            \n            class\n            EmailService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/services/http-client/http-client.service.ts\n            \n            injectable\n            HttpClientService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/services/payment/interfaces/payment.interface.ts\n            \n            interface\n            IPaymentService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/services/payment/stripe.service.ts\n            \n            injectable\n            StripeService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                        src/services/payment/types/checkout.ts\n            \n            type alias\n            Checkout\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/services/payment/types/payment-intent.ts\n            \n            type alias\n            PaymentIntent\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/services/redis/redis.service.ts\n            \n            injectable\n            AppRedisService\n            \n                30 %\n                (3/10)\n            \n        \n        \n            \n                \n                src/services/storage/cloudinary.service.ts\n            \n            injectable\n            CloudinaryService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/services/storage/interfaces/storage.interface.ts\n            \n            interface\n            IStrorageService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/services/storage/s3.service.ts\n            \n            injectable\n            S3Service\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                        src/services/storage/types/s3-put-object-response.ts\n            \n            type alias\n            S3PutObjectResponse\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/tracing.ts\n            \n            variable\n            otelSDK\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/tracing.ts\n            \n            variable\n            prometheusExporter\n            \n                0 %\n                (0/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @aws-sdk/credential-providers : ^3.848.0\n        \n            @aws-sdk/s3-request-presigner : ^3.850.0\n        \n            @aws-sdk/util-format-url : ^3.840.0\n        \n            @bull-board/api : ^6.12.0\n        \n            @bull-board/express : ^6.12.0\n        \n            @bull-board/nestjs : ^6.12.0\n        \n            @golevelup/nestjs-stripe : ^0.9.3\n        \n            @golevelup/nestjs-webhooks : ^0.2.21\n        \n            @liaoliaots/nestjs-redis : ^10.0.0\n        \n            @mikro-orm/cli : ^6.4.16\n        \n            @mikro-orm/core : ^6.4.16\n        \n            @mikro-orm/migrations : ^6.4.16\n        \n            @mikro-orm/nestjs : ^6.1.1\n        \n            @mikro-orm/postgresql : ^6.4.16\n        \n            @nestjs-modules/mailer : ^2.0.2\n        \n            @nestjs/axios : ^4.0.0\n        \n            @nestjs/bullmq : ^11.0.3\n        \n            @nestjs/common : ^10.0.0\n        \n            @nestjs/config : ^3.2.2\n        \n            @nestjs/core : ^10.0.0\n        \n            @nestjs/jwt : ^10.2.0\n        \n            @nestjs/mapped-types : *\n        \n            @nestjs/passport : ^10.0.3\n        \n            @nestjs/platform-express : ^10.0.0\n        \n            @nestjs/swagger : ^7.3.1\n        \n            @opentelemetry/auto-instrumentations-node : ^0.62.0\n        \n            @opentelemetry/context-async-hooks : ^2.0.1\n        \n            @opentelemetry/core : ^2.0.1\n        \n            @opentelemetry/exporter-prometheus : ^0.203.0\n        \n            @opentelemetry/propagator-b3 : ^2.0.1\n        \n            @opentelemetry/propagator-jaeger : ^2.0.1\n        \n            @opentelemetry/sdk-node : ^0.203.0\n        \n            @smithy/hash-node : ^4.0.4\n        \n            @smithy/protocol-http : ^5.1.2\n        \n            axios : ^1.10.0\n        \n            bcrypt : ^5.1.1\n        \n            buffer-to-stream : ^1.0.0\n        \n            bullmq : ^5.56.8\n        \n            chalk : ^4.1.2\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.1\n        \n            cloudinary : ^2.7.0\n        \n            dayjs : ^1.11.13\n        \n            express-basic-auth : ^1.2.1\n        \n            helmet : ^8.1.0\n        \n            moment-timezone : ^0.6.0\n        \n            morgan : ^1.10.0\n        \n            ms : ^2.1.3\n        \n            nanoid : ^3.0.0\n        \n            nanoid-dictionary : ^5.0.0\n        \n            nest-commander : ^3.18.0\n        \n            nest-winston : ^1.10.2\n        \n            nestjs-form-data : ^1.9.93\n        \n            nestjs-s3 : ^3.0.1\n        \n            nodemailer : ^7.0.5\n        \n            passport : ^0.7.0\n        \n            passport-jwt : ^4.0.1\n        \n            passport-local : ^1.0.0\n        \n            pug : ^3.0.3\n        \n            reflect-metadata : ^0.1.13\n        \n            rxjs : ^7.8.1\n        \n            stripe : ^18.3.0\n        \n            util : ^0.12.5\n        \n            uuid : ^11.1.0\n        \n            winston : ^3.17.0\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            EmailSubjectEnum   (src/.../index.ts)\n                        \n                        \n                            EmailTemplateEnum   (src/.../index.ts)\n                        \n                        \n                            HttpRequestMethodEnum   (src/.../index.ts)\n                        \n                        \n                            IANATimeZoneDatabaseEnum   (src/.../index.ts)\n                        \n                        \n                            PaymentDriverEnum   (src/.../index.ts)\n                        \n                        \n                            StorageDriverEnum   (src/.../index.ts)\n                        \n                        \n                            StripeCurrencyEnum   (src/.../index.ts)\n                        \n                        \n                            UploadFileCategoryEnum   (src/.../index.ts)\n                        \n                        \n                            UserRoleEnum   (src/.../index.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/common/enums/index.ts\n    \n        \n            \n                \n                    \n                        \n                        EmailSubjectEnum\n                    \n                \n                        \n                            \n                                 PASSWORD_RESET\n                            \n                        \n                        \n                            \n                                Value : 🔐 Reset Your Password Quickly & Securely\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        EmailTemplateEnum\n                    \n                \n                        \n                            \n                                 PASSWORD_RESET\n                            \n                        \n                        \n                            \n                                Value : password-reset\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        HttpRequestMethodEnum\n                    \n                \n                        \n                            \n                                 GET\n                            \n                        \n                        \n                            \n                                Value : GET\n                            \n                        \n                        \n                            \n                                 POST\n                            \n                        \n                        \n                            \n                                Value : POST\n                            \n                        \n                        \n                            \n                                 PUT\n                            \n                        \n                        \n                            \n                                Value : PUT\n                            \n                        \n                        \n                            \n                                 DELETE\n                            \n                        \n                        \n                            \n                                Value : DELETE\n                            \n                        \n                        \n                            \n                                 PATCH\n                            \n                        \n                        \n                            \n                                Value : PATCH\n                            \n                        \n                        \n                            \n                                 HEAD\n                            \n                        \n                        \n                            \n                                Value : HEAD\n                            \n                        \n                        \n                            \n                                 OPTIONS\n                            \n                        \n                        \n                            \n                                Value : OPTIONS\n                            \n                        \n                        \n                            \n                                 TRACE\n                            \n                        \n                        \n                            \n                                Value : TRACE\n                            \n                        \n                        \n                            \n                                 CONNECT\n                            \n                        \n                        \n                            \n                                Value : CONNECT\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        IANATimeZoneDatabaseEnum\n                    \n                \n                        \n                            \n                                 LAGOS\n                            \n                        \n                        \n                            \n                                Value : Africa/lagos\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        PaymentDriverEnum\n                    \n                \n                        \n                            \n                                 STRIPE\n                            \n                        \n                        \n                            \n                                Value : stripe\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        StorageDriverEnum\n                    \n                \n                        \n                            \n                                 CLOUDINARY\n                            \n                        \n                        \n                            \n                                Value : cloudinary\n                            \n                        \n                        \n                            \n                                 S3\n                            \n                        \n                        \n                            \n                                Value : s3\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        StripeCurrencyEnum\n                    \n                \n                        \n                            \n                                 USD\n                            \n                        \n                        \n                            \n                                Value : usd\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        UploadFileCategoryEnum\n                    \n                \n                        \n                            \n                                 AVATAR\n                            \n                        \n                        \n                            \n                                Value : avatars\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        UserRoleEnum\n                    \n                \n                        \n                            \n                                 ADMIN\n                            \n                        \n                        \n                            \n                                Value : admin\n                            \n                        \n                        \n                            \n                                 USER\n                            \n                        \n                        \n                            \n                                Value : user\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.cli.ts)\n                        \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            createWinstonLogger   (src/.../winston.config.ts)\n                        \n                        \n                            generateSlug   (src/.../common.utils.ts)\n                        \n                        \n                            normalizeUserFields   (src/.../user.util.ts)\n                        \n                        \n                            setupSwagger   (src/.../swagger.config.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.cli.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n    src/config/winston.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        createWinstonLogger\n                        \n                    \n                \n            \n            \n                \ncreateWinstonLogger()\n                \n            \n\n\n\n\n            \n                \n\n                        \n                            Returns :     winston.Logger\n\n                        \n                \n            \n        \n    \n    src/common/utils/common.utils.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        generateSlug\n                        \n                    \n                \n            \n            \n                \ngenerateSlug(text: string, limit: number)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                text\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    src/common/utils/user.util.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        normalizeUserFields\n                        \n                    \n                \n            \n            \n                \nnormalizeUserFields(user: User)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            User\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    src/config/swagger.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        setupSwagger\n                        \n                    \n                \n            \n            \n                \nsetupSwagger(app: INestApplication)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                app\n                                            \n                                                        INestApplication\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nDocumentation\nDescription\n\nNest framework TypeScript starter repository.\nProject setup\nExample :$ yarn installCompile and run the project\nExample :# development\n$ yarn run start\n\n# watch mode\n$ yarn run start:dev\n\n# production mode\n$ yarn run start:prodRun tests\nExample :# unit tests\n$ yarn run test\n\n# e2e tests\n$ yarn run test:e2e\n\n# test coverage\n$ yarn run test:cov\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AppRedisModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        EmailModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        HttpClientModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PaymentModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        StorageModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AppRedisModule\n\n\n\ncluster_AppRedisModule_exports\n\n\n\ncluster_AppRedisModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_EmailModule\n\n\n\ncluster_EmailModule_exports\n\n\n\ncluster_HttpClientModule\n\n\n\ncluster_HttpClientModule_exports\n\n\n\ncluster_HttpClientModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAuthModule -->\n\nUsersModule->AuthModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nCreateUserCommand\n\nCreateUserCommand\n\nAppModule -->\n\nCreateUserCommand->AppModule\n\n\n\n\n\nSchemaService\n\nSchemaService\n\nAppModule -->\n\nSchemaService->AppModule\n\n\n\n\n\nAppRedisService \n\nAppRedisService \n\n\n\nAppRedisModule\n\nAppRedisModule\n\nAuthModule -->\n\nAppRedisModule->AuthModule\n\n\n\nUsersModule -->\n\nAppRedisModule->UsersModule\n\n\n\nAppRedisService  -->\n\nAppRedisModule->AppRedisService \n\n\n\n\n\nAppRedisService\n\nAppRedisService\n\nAppRedisModule -->\n\nAppRedisService->AppRedisModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthModule -->\n\nLocalStrategy->AuthModule\n\n\n\n\n\nEmailService \n\nEmailService \n\n\n\nEmailModule\n\nEmailModule\n\nEmailService  -->\n\nEmailModule->EmailService \n\n\n\n\n\nHttpClientService \n\nHttpClientService \n\n\n\nHttpClientModule\n\nHttpClientModule\n\nHttpClientService  -->\n\nHttpClientModule->HttpClientService \n\n\n\n\n\nHttpClientService\n\nHttpClientService\n\nHttpClientModule -->\n\nHttpClientService->HttpClientModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\nUsersSubscriber\n\nUsersSubscriber\n\nUsersModule -->\n\nUsersSubscriber->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        8 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    3 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    1 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    19 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    18 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Guard\n                \n            \n        \n        \n            \n                \n                    \n                    4 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            AuthTokens   (src/.../auth-tokens.ts)\n                        \n                        \n                            Checkout   (src/.../checkout.ts)\n                        \n                        \n                            HandledException   (src/.../index.ts)\n                        \n                        \n                            PaymentIntent   (src/.../payment-intent.ts)\n                        \n                        \n                            S3PutObjectResponse   (src/.../s3-put-object-response.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/modules/auth/types/auth-tokens.ts\n    \n    \n        \n            \n                \n                    \n                    AuthTokens\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    src/services/payment/types/checkout.ts\n    \n    \n        \n            \n                \n                    \n                    Checkout\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    src/common/types/index.ts\n    \n    \n        \n            \n                \n                    \n                    HandledException\n                \n            \n            \n                \n                        HttpException | AxiosError | ForbiddenException | Error\n\n                \n            \n        \n    \n    src/services/payment/types/payment-intent.ts\n    \n    \n        \n            \n                \n                    \n                    PaymentIntent\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    src/services/storage/types/s3-put-object-response.ts\n    \n    \n        \n            \n                \n                    \n                    S3PutObjectResponse\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            APP_NAME   (src/.../index.ts)\n                        \n                        \n                            EMAIL_FROM_NAME   (src/.../index.ts)\n                        \n                        \n                            IS_PUBLIC_KEY   (src/.../public.decorator.ts)\n                        \n                        \n                            otelSDK   (src/.../tracing.ts)\n                        \n                        \n                            PASSWORD_CHARACTER_SET   (src/.../index.ts)\n                        \n                        \n                            PASSWORD_RESET_EMAIL_QUEUE_NAME   (src/.../index.ts)\n                        \n                        \n                            PAYMENT_PROVIDER   (src/.../index.ts)\n                        \n                        \n                            PRODUCTION   (src/.../mikro-orm.config.ts)\n                        \n                        \n                            PRODUCTION   (src/.../index.ts)\n                        \n                        \n                            prometheusExporter   (src/.../tracing.ts)\n                        \n                        \n                            Public   (src/.../public.decorator.ts)\n                        \n                        \n                            Role   (src/.../index.ts)\n                        \n                        \n                            sslEnabled   (src/.../mikro-orm.config.ts)\n                        \n                        \n                            STORAGE_PROVIDER   (src/.../index.ts)\n                        \n                        \n                            TEMPLATE_QUEUE_NAME   (src/.../index.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/common/constants/index.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        APP_NAME\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'nestjs-boilerplate'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        EMAIL_FROM_NAME\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'nestjs'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        PASSWORD_CHARACTER_SET\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!@#$%^&*()_+-=[]{}|;:,.<>?'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        PASSWORD_RESET_EMAIL_QUEUE_NAME\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'password-reset-email-queue'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        PAYMENT_PROVIDER\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'PAYMENT_PROVIDER'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        PRODUCTION\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'production'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        STORAGE_PROVIDER\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'STORAGE_PROVIDER'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        TEMPLATE_QUEUE_NAME\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'template-queue-name'\n                    \n                \n\n\n        \n    \n\n    src/modules/auth/decorators/public.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        IS_PUBLIC_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'isPublic'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => SetMetadata(IS_PUBLIC_KEY, true)\n                    \n                \n\n\n        \n    \n\n    src/tracing.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        otelSDK\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new NodeSDK({\n  metricReader: prometheusExporter,\n  contextManager: new AsyncLocalStorageContextManager(),\n  textMapPropagator: new CompositePropagator({\n    propagators: [\n      new JaegerPropagator(),\n      new W3CTraceContextPropagator(),\n      new W3CBaggagePropagator(),\n      new B3Propagator(),\n    ],\n  }),\n  instrumentations: [getNodeAutoInstrumentations()],\n})\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        prometheusExporter\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new PrometheusExporter(\n  { preventServerStart: true },\n  () => {\n    console.log('Prometheus exporter initialized');\n  },\n)\n                    \n                \n\n\n        \n    \n\n    src/config/mikro-orm.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        PRODUCTION\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'production'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        sslEnabled\n                        \n                    \n                \n            \n                \n                    \n                        Default value : process.env.DB_SSL === 'true'\n                    \n                \n\n\n        \n    \n\n    src/common/decorators/index.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Role\n                        \n                    \n                \n            \n                \n                    \n                        Default value : Reflector.createDecorator()\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
