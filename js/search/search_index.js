var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/interfaces/ApiResponse.html",[0,1.918,1,2.477]],["body/interfaces/ApiResponse.html",[0,2.661,1,4.178,2,3.436,3,0.263,4,0.263,5,0.236,6,4.554,7,4.077,8,0.408,9,1.673,10,1.114,11,2.56,12,2.56,13,4.084,14,6.917,15,0.535,16,0.017,17,1.259,18,4.684,19,0.291,20,0.751,21,0.263,22,0.014,23,0.014]],["title/controllers/AppController.html",[24,2.032,25,2.683]],["body/controllers/AppController.html",[3,0.243,4,0.243,5,0.218,8,0.377,11,2.174,12,2.174,15,0.377,16,0.017,17,0.887,18,3.174,19,0.368,20,0.694,21,0.243,22,0.013,23,0.013,24,3.264,25,4.308,26,2.604,27,4.207,28,1.112,29,7,30,1.585,31,4.877,32,6.677,33,4.706,34,6.677,35,5.76,36,0.495,37,4.877,38,0.846,39,3.766,40,3.766,41,3.704,42,4.207,43,4.721,44,3.766,45,1.904,46,4.877,47,0.05,48,3.766,49,3.766,50,1.164]],["title/modules/AppModule.html",[51,1.294,52,2.683]],["body/modules/AppModule.html",[3,0.159,4,0.159,5,0.143,10,0.554,15,0.247,16,0.017,19,0.415,20,0.454,21,0.159,22,0.01,23,0.01,25,3.792,26,2.453,28,0.581,36,0.324,38,0.554,47,0.033,51,1.829,52,5.191,53,1.445,54,1.609,55,1.812,56,1.812,57,1.609,58,2.436,59,1.609,60,2.754,61,2.754,62,2.754,63,4.227,64,3.935,65,4.227,66,4.227,67,4.227,68,2.607,69,1.246,70,1.812,71,3.192,72,2.873,73,3.192,74,4.594,75,5.885,76,3.192,77,0.697,78,0.478,79,4.594,80,1.935,81,1.493,82,4.594,83,3.192,84,3.192,85,3.192,86,4.594,87,3.192,88,4.594,89,2.535,90,1.189,91,3.192,92,3.192,93,2.25,94,3.192,95,2.754,96,1.445,97,2.25,98,3.192,99,4.594,100,2.465,101,2.754,102,2.25,103,3.192,104,1.812,105,2.754,106,2.465,107,1.812,108,2.465,109,3.238,110,2.25,111,4.594,112,2.754,113,3.192,114,3.192,115,2.25,116,3.192,117,3.192,118,4.594,119,3.192,120,3.192,121,3.192,122,3.192,123,1.829,124,3.192,125,3.192,126,3.192,127,2.784,128,3.192,129,1.037,130,3.192,131,1.523,132,2.754,133,3.192,134,2.25,135,2.465,136,4.594,137,1.374,138,1.935,139,0.908,140,3.192,141,2.784,142,4.594,143,2.784,144,3.192,145,3.192,146,2.25,147,3.192,148,3.192,149,3.192,150,3.192,151,2.754,152,3.192,153,3.192,154,3.192]],["title/modules/AppRedisModule.html",[51,1.294,155,2.307]],["body/modules/AppRedisModule.html",[3,0.228,4,0.228,5,0.205,16,0.017,19,0.377,20,0.652,21,0.228,22,0.013,23,0.013,47,0.047,50,1.093,51,2.204,53,2.072,54,2.307,55,2.598,56,2.598,57,2.307,58,2.935,59,3.268,68,3.333,69,1.787,70,2.598,72,2.444,81,1.908,89,2.67,90,1.705,123,1.996,127,2.774,129,1.488,131,2.184,132,3.949,155,4.459,156,3.949,157,3.949,158,3.949,159,4.36,160,4.578,161,4.578,162,4.578,163,3.536,164,3.536,165,4.578,166,1.423,167,4.578,168,4.578,169,3.949,170,4.578,171,4.578]],["title/injectables/AppRedisService.html",[159,2.16,172,0.435]],["body/injectables/AppRedisService.html",[3,0.104,4,0.104,5,0.094,8,0.162,9,0.869,10,1.042,15,0.478,16,0.017,17,1.316,19,0.261,20,0.298,21,0.104,22,0.009,23,0.007,28,0.607,36,0.628,38,1.101,47,0.021,50,1.433,77,1.351,78,0.899,81,0.68,89,2.257,90,0.78,123,1.133,129,0.68,139,1.569,159,1.892,163,1.617,164,5.35,166,2.235,172,0.381,173,0.622,174,1.806,175,1.713,176,4.155,177,3.334,178,4.469,179,3.334,180,4.756,181,3.334,182,6.341,183,0.991,184,1.617,185,2.152,186,5.782,187,3.334,188,3.334,189,2.093,190,5.227,191,3.585,192,3.334,193,2.093,194,1.702,195,2.135,196,3.089,197,6.474,198,5.512,199,5.179,200,2.518,201,3.334,202,2.093,203,3.334,204,3.334,205,3.334,206,2.093,207,3.334,208,2.093,209,3.334,210,5.235,211,2.093,212,2.02,213,3.334,214,2.931,215,6.689,216,2.518,217,2.093,218,0.999,219,2.876,220,2.876,221,3.334,222,3.334,223,1.892,224,2.575,225,3.585,226,3.334,227,1.892,228,2.17,229,2.876,230,2.093,231,1.055,232,2.093,233,2.093,234,2.093,235,5.512,236,1.514,237,3.334,238,2.093,239,3.334,240,2.093,241,2.093,242,2.763,243,2.093,244,5.174,245,1.806,246,2.093,247,2.093,248,2.093,249,1.927,250,2.093,251,1.806,252,2.704,253,2.093,254,2.093,255,2.093,256,2.093,257,2.093,258,2.093,259,2.093,260,2.093,261,2.093,262,2.093,263,2.093,264,2.093,265,2.093,266,3.885,267,2.093,268,3.334,269,3.334,270,2.093]],["title/injectables/AppService.html",[65,2.477,172,0.435]],["body/injectables/AppService.html",[3,0.274,4,0.274,5,0.246,8,0.426,16,0.017,17,1.198,19,0.303,20,0.784,21,0.274,22,0.014,23,0.014,28,1.198,36,0.559,38,0.955,47,0.056,50,1.314,65,4.285,172,0.753,173,1.637,271,4.75,272,7.299,273,5.505,274,5.505,275,5.505]],["title/controllers/AuthController.html",[24,2.032,276,2.683]],["body/controllers/AuthController.html",[1,1.764,3,0.135,4,0.135,5,0.121,8,0.209,10,0.944,11,1.935,12,1.935,13,3.087,15,0.505,16,0.017,18,1.764,19,0.375,20,0.386,21,0.135,22,0.009,23,0.009,24,1.447,26,1.447,28,0.741,30,1.767,36,0.552,38,0.944,40,2.093,41,3.533,43,4.503,44,2.093,45,1.058,47,0.028,48,4.201,49,4.201,50,1.298,69,2.48,77,1.188,78,0.815,102,1.91,138,1.642,139,0.771,166,2.178,194,1.668,195,2.325,236,1.392,249,2.026,276,2.87,277,2.338,278,2.338,279,4.22,280,3.087,281,3.833,282,4.22,283,2.71,284,4.316,285,2.71,286,3.513,287,2.214,288,2.49,289,2.71,290,2.71,291,4.939,292,2.71,293,2.71,294,1.298,295,2.71,296,3.448,297,2.71,298,2.65,299,2.71,300,2.71,301,3.145,302,2.71,303,3.448,304,2.71,305,2.71,306,4.316,307,2.71,308,2.338,309,2.71,310,2.093,311,2.71,312,5.03,313,1.91,314,2.71,315,2.338,316,2.612,317,2.093,318,2.338,319,2.71,320,2.71,321,2.311,322,2.71,323,2.71,324,3.145,325,2.71,326,2.338,327,2.093,328,2.71,329,2.71,330,2.71,331,2.71,332,2.71,333,4.692,334,4.692,335,2.71,336,2.338,337,4.692,338,2.311,339,3.513,340,3.778,341,2.71,342,2.71,343,2.71,344,2.338,345,2.71,346,2.71,347,1.59,348,2.71,349,2.093,350,2.71,351,3.145,352,2.65,353,2.65,354,2.71]],["title/modules/AuthModule.html",[51,1.294,63,2.477]],["body/modules/AuthModule.html",[3,0.174,4,0.174,5,0.156,15,0.27,16,0.017,19,0.416,20,0.498,21,0.174,22,0.011,23,0.011,26,2.617,47,0.036,51,1.923,53,1.583,54,1.763,55,1.985,56,1.985,57,1.763,58,2.561,59,2.852,63,4.892,64,4.055,68,2.782,69,1.365,70,1.985,72,2.617,78,0.734,89,2.394,90,1.303,106,2.701,107,1.985,108,2.701,109,3.454,110,2.465,123,1.189,127,2.119,129,1.136,134,2.465,155,4.055,276,3.988,315,3.017,316,3.932,317,2.701,355,3.017,356,3.497,357,3.017,358,3.017,359,4.356,360,4.356,361,3.497,362,4.901,363,2.276,364,3.497,365,3.497,366,3.497,367,2.701,368,4.901,369,2.119,370,3.497,371,3.497,372,3.454,373,3.497,374,3.017,375,3.683,376,1.763,377,4.228,378,3.017,379,3.497,380,3.497,381,3.017,382,3.497,383,3.497,384,2.701,385,3.497,386,3.017,387,3.017,388,3.017,389,2.701,390,3.017,391,3.017,392,3.017,393,3.017,394,3.017,395,2.701,396,3.497]],["title/classes/AuthResponseDto.html",[47,0.039,397,2.94]],["body/classes/AuthResponseDto.html",[3,0.242,4,0.242,5,0.217,8,0.376,9,1.591,12,2.562,15,0.472,16,0.017,17,1.272,19,0.268,21,0.242,22,0.013,23,0.013,30,1.983,36,0.619,45,1.899,47,0.05,194,2.499,280,3.463,294,1.457,301,4.713,321,3.463,338,3.463,339,5.753,397,4.713,398,1.73,399,5.753,400,4.196,401,3.258,402,6.102,403,3.336,404,4.713,405,4.863,406,4.713,407,3.972,408,3.972,409,4.863,410,3.361]],["title/injectables/AuthService.html",[172,0.435,316,2.032]],["body/injectables/AuthService.html",[3,0.092,4,0.092,5,0.082,8,0.142,9,0.784,10,0.903,15,0.492,16,0.017,17,1.309,19,0.351,20,0.262,21,0.092,22,0.007,23,0.007,28,0.547,36,0.645,38,0.841,47,0.019,50,1.05,69,1.174,77,1.136,78,0.779,89,2.142,90,0.686,107,1.045,123,0.626,139,2.026,159,2.952,166,2.069,172,0.344,173,0.548,175,2.213,183,0.894,195,2.166,196,1.435,200,1.116,223,1.045,228,1.957,236,1.569,249,2.369,252,2.863,266,2.119,279,2.594,280,1.706,281,3.1,282,3.287,288,1.419,294,1.488,316,1.605,321,2.751,333,2.594,334,2.594,340,1.422,344,1.589,347,2.311,351,2.322,352,2.863,353,2.863,367,1.422,375,1.199,376,0.928,381,3.287,384,2.322,411,1.589,412,3.81,413,3.81,414,3.81,415,3.81,416,3.81,417,3.287,418,3.81,419,1.589,420,2.618,421,5.487,422,3.81,423,3.1,424,3.007,425,3.007,426,1.842,427,3.007,428,1.842,429,3.007,430,1.842,431,1.842,432,1.842,433,1.842,434,3.287,435,1.842,436,5.487,437,1.842,438,1.842,439,1.842,440,1.842,441,1.842,442,2.322,443,1.589,444,1.298,445,1.422,446,1.842,447,3.007,448,3.007,449,1.842,450,1.589,451,1.199,452,1.422,453,1.842,454,1.589,455,2.322,456,1.842,457,1.842,458,1.842,459,1.842,460,1.842,461,3.81,462,1.842,463,3.007,464,1.842,465,3.81,466,3.007,467,1.842,468,4.398,469,1.842,470,1.842,471,1.842,472,3.795,473,3.397,474,1.733,475,3.397,476,1.842,477,1.589,478,1.422,479,1.422,480,1.045,481,1.422,482,1.298,483,1.422,484,1.422,485,1.422,486,3.795,487,3.81,488,4.182,489,3.007,490,3.007,491,2.594,492,1.842,493,3.007,494,1.842,495,2.952,496,1.842,497,1.842,498,1.589,499,1.842,500,1.422,501,2.48,502,2.594,503,1.589,504,1.422,505,1.842,506,1.842,507,1.842,508,1.589,509,1.589,510,2.034,511,1.589,512,1.842,513,1.589,514,1.842,515,1.842,516,3.007,517,1.842,518,3.007,519,2.594,520,1.842,521,1.842,522,1.842,523,1.199,524,1.842,525,2.322,526,2.594,527,1.589,528,1.422,529,1.842,530,1.842,531,1.842,532,1.842,533,1.422,534,3.007,535,1.842,536,3.007,537,1.842]],["title/classes/BaseEntity.html",[47,0.039,538,2.683]],["body/classes/BaseEntity.html",[3,0.188,4,0.188,5,0.169,8,0.456,9,1.536,10,0.897,15,0.552,16,0.017,17,0.941,19,0.285,21,0.188,22,0.011,23,0.011,30,2.059,36,0.643,47,0.039,78,0.566,96,1.71,123,2.003,178,3.644,214,2.668,218,3.024,228,2.459,398,1.344,474,1.889,510,3.147,538,3.644,539,3.259,540,5.894,541,6.638,542,5.894,543,6.386,544,5.085,545,5.294,546,6.338,547,5.468,548,5.294,549,4.467,550,4.46,551,4.461,552,3.777,553,4.46,554,4.46,555,3.777,556,5.894,557,3.777,558,4.552,559,3.777,560,5.17,561,3.365,562,3.365,563,3.777,564,5.17,565,5.17,566,5.468,567,2.017,568,3.777,569,3.777,570,3.777,571,3.777]],["title/classes/CatchEverythingFilter.html",[47,0.039,572,2.94]],["body/classes/CatchEverythingFilter.html",[3,0.137,4,0.137,5,0.123,8,0.212,9,1.071,10,1.107,12,2.085,13,2.332,15,0.493,16,0.017,17,0.996,18,3.562,19,0.323,20,0.39,21,0.137,22,0.009,23,0.009,28,0.748,36,0.666,38,1.068,47,0.028,50,1.176,77,1.393,78,1.024,80,2.49,81,0.891,129,0.891,135,2.119,137,1.768,139,1.668,143,1.662,175,2.264,183,1.222,185,2.49,196,1.961,214,1.242,218,1.309,225,2.366,231,1.383,236,1.726,252,1.785,287,1.242,291,1.933,327,2.119,363,1.785,398,0.976,444,2.896,474,0.781,500,4.226,502,4.251,551,1.785,572,3.174,573,2.366,574,4.927,575,4.927,576,4.109,577,4.109,578,4.109,579,4.109,580,4.109,581,2.743,582,6.152,583,4.109,584,4.109,585,4.109,586,5.486,587,4.251,588,5.472,589,2.743,590,6.832,591,2.743,592,2.743,593,1.662,594,2.743,595,2.743,596,2.743,597,2.743,598,4.109,599,2.743,600,2.743,601,2.743,602,3.545,603,2.119,604,3.545,605,2.119,606,2.366,607,2.896,608,2.743,609,2.743,610,2.743,611,2.743,612,2.743,613,2.743,614,1.557,615,2.743,616,4.109,617,2.743,618,2.743,619,2.743,620,2.743,621,2.743,622,4.109,623,1.785,624,2.743,625,2.743,626,2.743,627,2.743,628,5.472,629,4.109,630,3.174,631,2.119,632,2.743,633,4.109,634,2.743,635,4.927,636,2.743,637,2.743,638,3.545,639,2.743,640,2.743,641,2.366,642,2.743,643,2.743,644,2.743,645,4.251,646,2.743,647,2.743,648,2.366]],["title/classes/ChangePasswordDto.html",[47,0.039,649,2.477]],["body/classes/ChangePasswordDto.html",[3,0.19,4,0.19,5,0.17,8,0.294,9,1.353,12,2.26,15,0.401,16,0.017,17,1.156,19,0.286,21,0.19,22,0.011,23,0.011,30,1.687,36,0.527,45,1.484,47,0.053,194,2.127,200,3.146,288,2.665,294,1.239,352,3.849,353,3.849,398,1.352,401,2.772,403,3.032,410,2.98,474,1.808,649,3.379,650,5.102,651,2.679,652,4.479,653,4.908,654,4.479,655,4.908,656,4.908,657,4.908,658,4.908,659,4.778,660,5.304,661,4.908,662,4.908,663,4.908,664,4.908,665,4.908,666,4.908,667,4.908,668,3.801,669,5.192,670,3.801,671,4.168,672,4.168,673,4.567,674,2.936,675,2.157]],["title/injectables/CloudinaryService.html",[172,0.435,676,2.683]],["body/injectables/CloudinaryService.html",[3,0.187,4,0.187,5,0.263,8,0.29,10,0.893,11,1.335,15,0.398,16,0.017,19,0.386,20,0.534,21,0.187,22,0.011,23,0.011,28,0.937,36,0.522,38,0.651,47,0.038,50,1.402,77,1.124,78,0.771,81,1.22,89,2.671,90,1.398,129,1.22,137,1.615,139,1.465,166,1.826,172,0.589,173,1.116,175,1.6,183,1.531,185,2.735,195,1.831,231,1.892,236,0.896,242,2.748,266,2.646,338,2.13,474,1.068,501,3.35,641,3.238,676,3.628,677,3.238,678,5.411,679,2.646,680,3.754,681,2.899,682,4.882,683,4.537,684,4.455,685,3.754,686,3.754,687,3.628,688,4.441,689,5.147,690,3.754,691,3.754,692,2.899,693,3.35,694,3.238,695,1.892,696,2.004,697,2.646,698,3.754,699,3.754,700,3.754,701,3.754,702,3.754,703,3.754,704,3.754,705,3.238,706,5.068,707,3.238,708,3.238,709,3.238,710,5.875,711,3.754,712,3.238,713,3.754,714,3.754,715,3.754,716,3.754,717,3.754,718,3.238,719,3.754,720,3.754,721,3.754,722,3.754,723,3.754,724,3.754,725,3.754]],["title/injectables/CreateUserCommand.html",[66,2.477,172,0.435]],["body/injectables/CreateUserCommand.html",[3,0.131,4,0.131,5,0.118,8,0.204,9,1.039,10,1.051,15,0.468,16,0.017,17,1.334,19,0.366,20,0.375,21,0.131,22,0.009,23,0.009,28,0.725,30,1.742,33,2.809,36,0.638,38,1,47,0.027,50,1.28,66,2.594,77,1.323,78,1.029,96,1.192,123,2.202,139,1.639,166,1.495,172,0.456,173,0.783,175,1.79,183,1.185,194,1.079,195,1.418,214,1.192,218,1.257,236,0.952,249,1.485,288,0.981,294,1.148,347,2.457,376,1.328,420,3.002,474,1.134,495,1.495,498,2.273,500,2.034,501,1.715,503,2.273,523,2.594,549,3.389,561,2.594,567,1.406,659,2.594,695,1.328,718,2.273,726,5.591,727,2.273,728,2.009,729,4.809,730,4.141,731,4.809,732,4.809,733,4.809,734,4.809,735,3.439,736,2.273,737,4.626,738,3.986,739,3.439,740,2.634,741,5.362,742,3.986,743,6.48,744,2.634,745,6.964,746,2.634,747,3.986,748,2.809,749,2.634,750,2.634,751,3.986,752,2.634,753,2.634,754,3.986,755,2.863,756,2.634,757,3.389,758,3.986,759,3.043,760,2.634,761,2.634,762,3.986,763,3.986,764,3.439,765,2.034,766,5.759,767,3.439,768,2.273,769,2.034,770,2.634,771,2.594,772,1.715,773,3.079,774,2.634,775,2.634,776,2.634,777,2.634,778,2.034,779,2.634,780,2.634,781,2.634,782,2.634,783,1.715,784,2.634,785,2.634,786,5.362]],["title/classes/CreateUserDto.html",[47,0.039,787,2.477]],["body/classes/CreateUserDto.html",[3,0.115,4,0.115,5,0.103,8,0.179,9,0.94,10,1.226,12,1.781,15,0.529,16,0.017,17,1.341,19,0.276,21,0.115,22,0.008,23,0.008,30,2.225,36,0.695,45,0.902,47,0.045,50,0.861,78,0.75,194,2.768,196,1.72,200,2.185,214,2.006,216,2.185,236,0.552,288,2.237,294,1.767,347,2.119,398,0.822,401,3.607,403,3.533,410,3.452,523,2.885,561,2.347,593,2.185,623,1.505,653,2.784,654,1.994,655,2.784,656,2.784,657,2.784,658,2.784,659,3.258,660,2.784,661,2.784,662,2.784,663,2.784,664,2.784,665,2.784,666,2.784,667,2.784,671,3.826,672,4.687,673,2.784,674,1.785,675,1.312,695,1.165,748,2.541,755,3.071,757,3.528,773,3.423,787,2.347,788,5.978,789,1.994,790,4.192,791,3.124,792,4.192,793,4.639,794,3.423,795,3.423,796,3.824,797,4.192,798,3.605,799,3.605,800,3.605,801,3.605,802,2.312,803,2.312,804,2.312,805,2.312,806,2.312,807,2.312,808,3.866,809,2.312,810,2.312,811,2.312,812,2.312,813,2.312,814,2.312,815,2.312,816,2.312,817,2.312,818,2.784,819,2.312,820,2.312,821,3.605,822,2.312,823,2.312,824,3.11,825,2.312,826,2.312,827,2.312,828,2.312,829,3.605,830,2.784,831,2.312,832,6.384,833,3.605,834,1.994,835,1.785,836,2.312,837,2.312,838,3.605,839,2.312,840,2.312,841,2.312,842,4.432,843,2.312,844,2.312,845,2.312,846,2.312,847,2.312,848,2.312]],["title/classes/CreateUserResponseDto.html",[47,0.039,849,2.683]],["body/classes/CreateUserResponseDto.html",[3,0.225,4,0.225,5,0.201,8,0.349,9,1.516,11,2.419,12,2.608,15,0.544,16,0.017,17,1.171,19,0.321,21,0.29,22,0.013,23,0.013,30,1.89,36,0.59,45,1.76,47,0.059,194,2.786,227,3.653,294,1.83,398,1.604,401,3.105,403,3.071,406,4.971,407,4.19,408,4.19,410,3.548,783,4.426,849,4.099,850,3.482,851,5.017,852,4.509,853,4.509,854,2.935,855,3.178,856,4.491,857,3.482]],["title/modules/EmailModule.html",[51,1.294,858,2.683]],["body/modules/EmailModule.html",[3,0.214,4,0.214,5,0.191,16,0.017,19,0.399,20,0.61,21,0.214,22,0.012,23,0.012,26,2.287,47,0.044,51,2.134,53,1.939,54,2.159,55,2.431,56,2.431,57,2.159,58,2.546,59,3.165,68,3.192,69,1.672,70,2.431,72,2.287,81,1.827,89,2.603,90,1.595,102,3.018,123,1.456,127,2.595,129,1.392,134,3.018,143,2.595,294,1.022,376,2.159,434,3.695,474,1.219,587,3.695,696,3.003,759,2.431,858,4.881,859,3.695,860,3.695,861,4.454,862,4.283,863,4.283,864,4.283,865,3.308,866,4.343,867,5.624,868,4.283,869,4.283,870,4.283,871,4.283,872,4.283,873,4.283,874,4.283,875,4.283,876,4.283,877,4.283,878,4.283,879,4.283,880,4.283,881,3.308,882,4.283,883,4.283,884,4.283,885,4.283]],["title/classes/EmailService.html",[47,0.039,861,2.307]],["body/classes/EmailService.html",[3,0.217,4,0.217,5,0.195,8,0.337,10,0.987,15,0.44,16,0.017,17,1.388,19,0.313,20,0.62,21,0.217,22,0.012,23,0.012,28,1.035,36,0.577,38,0.756,47,0.045,77,1.242,78,0.852,81,1.415,129,1.415,139,1.618,166,1.968,175,1.767,183,1.691,185,2.84,195,2.022,227,2.472,231,2.195,242,2.325,249,1.622,347,1.7,349,3.364,398,1.549,549,4.462,696,2.325,861,4.067,865,3.364,881,5.183,886,3.758,887,6.331,888,4.355,889,7.141,890,4.355,891,4.355,892,7.141,893,4.368,894,4.355,895,4.355,896,4.355,897,4.355,898,4.355]],["title/interfaces/ErrorResponse.html",[0,1.918,607,2.683]],["body/interfaces/ErrorResponse.html",[0,2.499,2,3.227,3,0.247,4,0.247,5,0.222,7,3.829,8,0.383,9,1.61,10,1.072,12,2.504,13,3.996,15,0.571,16,0.017,17,1.428,21,0.247,22,0.013,23,0.013,78,1.055,143,4.267,196,3.21,551,4.583,607,4.353,638,6.074,899,4.277]],["title/classes/ForgotPasswordDto.html",[47,0.039,284,2.683]],["body/classes/ForgotPasswordDto.html",[3,0.266,4,0.266,5,0.239,8,0.413,9,1.685,15,0.413,16,0.017,17,1.176,19,0.356,21,0.266,22,0.014,23,0.014,30,1.736,36,0.542,45,2.085,47,0.066,284,4.557,347,2.714,398,1.9,403,2.549,410,3.259,651,3.765,675,3.031,830,4.993,835,4.125,900,5.578,901,5.341,902,4.608,903,5.341]],["title/classes/GetProfileResponseDto.html",[47,0.039,855,2.683]],["body/classes/GetProfileResponseDto.html",[3,0.225,4,0.225,5,0.202,8,0.349,9,1.518,11,2.421,12,2.61,15,0.545,16,0.017,17,1.173,19,0.321,21,0.29,22,0.013,23,0.013,30,1.893,36,0.591,45,1.765,47,0.06,194,2.788,227,3.658,294,1.82,398,1.608,401,3.11,403,3.075,406,4.977,407,4.195,408,4.195,410,3.551,783,3.791,849,3.186,850,3.491,851,3.9,854,2.942,855,4.105,856,5.257,857,4.499,904,4.52,905,4.52]],["title/modules/HttpClientModule.html",[51,1.294,906,2.683]],["body/modules/HttpClientModule.html",[3,0.248,4,0.248,5,0.222,16,0.017,19,0.371,20,0.708,21,0.248,22,0.013,23,0.013,47,0.051,51,2.289,53,2.25,54,2.506,55,2.821,56,2.821,57,2.506,58,3.049,59,3.395,68,3.511,69,1.941,70,2.821,72,2.654,81,2.01,906,5.282,907,4.289,908,4.289,909,4.289,910,5.057,911,3.839,912,3.839,913,4.971,914,6.186,915,3.839,916,3.236,917,4.971]],["title/injectables/HttpClientService.html",[172,0.435,910,2.477]],["body/injectables/HttpClientService.html",[3,0.183,4,0.183,5,0.164,8,0.283,9,1.319,10,0.878,11,1.8,15,0.391,16,0.017,17,1.055,19,0.374,20,0.521,21,0.183,22,0.011,23,0.011,28,0.921,36,0.635,38,0.635,47,0.037,50,0.874,77,1.105,78,0.758,81,1.19,129,1.19,131,3.132,139,2.018,166,1.802,172,0.579,173,1.089,175,2.204,183,1.505,185,2.717,195,1.8,214,2.291,218,2.414,223,3.55,231,1.846,236,0.874,242,2.702,249,1.364,287,2.291,338,2.078,474,1.78,605,2.828,759,3.55,910,3.294,911,5.07,912,5.07,915,2.828,916,4.071,918,3.159,919,5.799,920,5.799,921,5.799,922,3.662,923,6.789,924,5.06,925,3.662,926,6.255,927,3.662,928,5.06,929,6.255,930,3.662,931,5.06,932,5.06,933,3.662,934,2.383,935,3.662,936,3.662,937,3.662,938,3.662,939,3.662,940,5.06,941,3.662]],["title/interfaces/IPaymentService.html",[0,1.918,942,2.683]],["body/interfaces/IPaymentService.html",[0,2.485,2,3.209,3,0.246,4,0.246,5,0.22,8,0.381,10,1.068,15,0.476,16,0.017,19,0.272,21,0.246,22,0.013,23,0.013,28,1.12,36,0.624,38,1.068,77,1.344,78,0.922,195,2.499,212,3.73,759,4.186,942,4.338,943,4.253,944,5.789,945,5.789,946,4.253,947,5.789,948,6.363,949,4.93,950,6.062,951,4.253,952,5.789,953,4.93,954,3.286]],["title/interfaces/IStrorageService.html",[0,1.918,693,2.477]],["body/interfaces/IStrorageService.html",[0,2.29,2,2.957,3,0.226,4,0.226,5,0.289,8,0.351,10,1.184,11,1.616,15,0.452,16,0.017,17,1.175,19,0.376,21,0.226,22,0.013,23,0.013,28,1.063,36,0.593,38,1.014,77,1.276,78,0.876,141,3.915,190,4.119,195,2.426,196,3.082,210,4.989,212,3.541,614,2.578,678,4.989,681,3.509,682,5.267,683,4.989,684,4.807,687,3.202,688,3.919,693,3.804,695,2.29,696,2.426,697,3.202,955,3.919,956,5.573,957,3.919,958,5.267,959,4.543,960,4.543,961,3.202,962,3.919,963,2.957,964,2.957]],["title/injectables/JwtAuthGuard.html",[172,0.435,372,2.683]],["body/injectables/JwtAuthGuard.html",[3,0.327,4,0.205,5,0.184,8,0.318,10,1.069,12,1.464,15,0.476,16,0.017,19,0.362,20,0.586,21,0.205,22,0.012,23,0.012,28,0.997,36,0.625,38,0.951,47,0.042,50,1.47,77,1.345,78,0.983,123,1.399,138,2.494,151,3.551,172,0.627,173,1.224,183,1.224,236,0.982,294,1.632,318,3.551,363,2.679,369,2.494,372,3.861,445,4.231,474,1.171,495,2.336,501,4.272,728,2.761,772,2.679,893,2.679,965,5.663,966,3.178,967,5.478,968,4.726,969,5.478,970,3.551,971,6.064,972,4.115,973,4.726,974,4.626,975,4.115,976,5.478,977,4.115,978,5.478,979,3.551,980,3.178,981,4.726,982,4.115,983,3.551,984,4.115,985,4.115,986,4.115,987,4.115,988,4.115,989,4.115]],["title/injectables/JwtStrategy.html",[172,0.435,359,2.477]],["body/injectables/JwtStrategy.html",[3,0.164,4,0.164,5,0.147,8,0.254,10,0.814,15,0.363,16,0.017,19,0.348,20,0.468,21,0.164,22,0.01,23,0.01,24,2.504,28,1.085,36,0.476,38,0.57,47,0.056,50,0.784,77,1.024,78,0.703,89,2.56,90,1.224,123,1.117,166,1.7,172,0.537,173,0.977,175,1.021,183,1.395,191,2.835,219,4.046,223,1.865,229,4.046,236,0.784,249,1.224,252,2.139,280,3.722,281,4.203,287,3.055,294,1.701,298,3.559,316,2.504,321,3.722,359,3.052,369,1.991,420,3.22,444,2.316,472,2.835,473,2.538,474,0.935,475,2.538,486,4.718,504,4.87,508,4.046,510,1.754,511,2.835,528,3.622,562,3.052,679,2.316,712,4.046,728,2.364,765,2.538,772,2.139,990,2.835,991,4.046,992,4.046,993,3.286,994,4.69,995,3.286,996,4.69,997,4.046,998,4.69,999,4.69,1000,4.69,1001,4.046,1002,4.69,1003,4.69,1004,4.046,1005,4.69,1006,4.69,1007,4.69,1008,5.964,1009,4.69,1010,4.69,1011,4.69,1012,4.69,1013,4.69,1014,4.69,1015,4.046,1016,4.69,1017,5.964,1018,3.622,1019,4.69,1020,4.69,1021,4.69,1022,4.69,1023,4.69,1024,3.286,1025,2.835,1026,2.538,1027,2.835,1028,3.286,1029,3.286,1030,3.286,1031,3.286,1032,3.286,1033,3.286]],["title/injectables/LocalAuthGuard.html",[172,0.435,313,2.683]],["body/injectables/LocalAuthGuard.html",[3,0.282,4,0.282,5,0.253,16,0.017,19,0.369,20,0.806,21,0.282,22,0.015,23,0.015,47,0.058,172,0.766,173,1.684,313,4.718,369,3.431,728,3.374,966,4.373,979,4.885,1034,4.885,1035,6.694]],["title/injectables/LocalStrategy.html",[172,0.435,360,2.477]],["body/injectables/LocalStrategy.html",[3,0.212,4,0.212,5,0.19,8,0.329,10,0.971,15,0.433,16,0.017,17,1.291,19,0.391,20,0.605,21,0.212,22,0.012,23,0.012,28,1.018,36,0.568,38,0.738,47,0.043,50,1.015,77,1.223,78,0.839,166,1.945,172,0.64,173,1.264,175,1.74,183,1.664,195,1.991,236,1.015,249,2.085,288,2.477,294,1.494,316,3.787,317,3.284,347,2.185,360,3.643,369,2.577,420,3.45,445,3.284,474,1.21,488,3.668,495,2.413,509,3.668,510,2.27,525,3.284,728,2.821,765,3.284,772,2.768,991,4.829,992,4.829,1025,3.668,1026,3.284,1027,3.668,1036,3.668,1037,4.252,1038,4.252,1039,5.597,1040,4.252,1041,3.668,1042,4.829,1043,4.252,1044,4.252,1045,3.284,1046,3.668,1047,4.252]],["title/classes/LoginDto.html",[47,0.039,296,2.683]],["body/classes/LoginDto.html",[3,0.245,4,0.245,5,0.22,8,0.38,9,1.602,15,0.475,16,0.017,17,1.277,19,0.339,21,0.245,22,0.013,23,0.013,30,1.996,36,0.623,45,1.92,47,0.063,194,2.517,200,3.723,288,2.692,294,1.676,296,4.33,347,2.821,398,1.749,401,3.28,403,3.35,410,3.378,653,4.745,675,2.79,830,4.745,835,3.797,902,4.242,1048,4.242,1049,4.917,1050,4.917]],["title/classes/Migration20250730220636.html",[47,0.039,1051,2.94]],["body/classes/Migration20250730220636.html",[3,0.159,4,0.159,5,0.143,8,0.416,16,0.017,19,0.176,21,0.159,22,0.01,23,0.01,28,0.836,36,0.324,38,0.554,47,0.033,69,1.246,78,0.882,96,1.445,131,1.523,143,1.935,146,4.148,166,1.672,178,2.25,190,2.25,195,1.634,196,1.523,216,2.784,218,2.975,223,2.607,228,4.943,280,1.812,288,2.192,294,1.597,347,2.298,398,1.135,510,2.453,533,2.465,545,4.545,547,3.963,548,5.289,549,3.238,550,2.754,551,3.831,554,2.754,558,2.465,561,3.502,562,2.078,728,2.315,748,2.25,755,2.873,771,2.99,790,4.156,792,3.548,793,4.156,797,2.465,808,3.548,818,2.465,1018,2.465,1051,3.548,1052,2.754,1053,5.381,1054,5.077,1055,3.192,1056,2.754,1057,3.192,1058,7.168,1059,3.963,1060,4.594,1061,3.192,1062,3.192,1063,4.594,1064,3.548,1065,3.192,1066,3.192,1067,6.236,1068,3.192,1069,3.548,1070,3.192,1071,4.594,1072,3.192,1073,3.192,1074,3.192,1075,3.192,1076,2.754,1077,3.192,1078,3.192,1079,3.192,1080,4.594,1081,3.192,1082,3.192,1083,7.565,1084,3.192,1085,3.192,1086,3.192,1087,7.168,1088,3.192,1089,3.192,1090,3.192,1091,3.192,1092,3.192,1093,2.754,1094,3.192,1095,3.192,1096,2.754,1097,3.192,1098,2.754,1099,3.192,1100,3.192,1101,2.754,1102,3.192,1103,3.192,1104,2.754,1105,3.192,1106,3.192,1107,3.963,1108,2.465,1109,3.192,1110,3.192,1111,3.192,1112,3.192,1113,3.192,1114,2.754,1115,3.192,1116,3.192,1117,3.192]],["title/injectables/MorganMiddleware.html",[93,2.683,172,0.435]],["body/injectables/MorganMiddleware.html",[3,0.209,4,0.209,5,0.187,8,0.323,10,0.961,12,1.488,15,0.428,16,0.017,17,0.761,19,0.305,20,0.595,21,0.209,22,0.012,23,0.012,28,1.007,36,0.562,38,0.726,47,0.043,50,0.998,77,1.209,78,0.83,80,3.761,81,1.359,93,3.902,129,1.359,131,1.996,137,1.8,139,1.19,141,2.535,172,0.634,173,1.244,175,1.3,183,1.244,184,3.23,185,2.757,220,4.777,224,4.276,236,0.998,294,1.322,298,3.604,455,4.276,480,3.9,614,2.374,645,5.355,692,3.23,916,2.722,1118,3.609,1119,4.183,1120,4.777,1121,5.699,1122,4.183,1123,3.609,1124,4.777,1125,5.355,1126,3.23,1127,4.183,1128,4.183,1129,5.537,1130,4.183,1131,3.609,1132,4.183,1133,3.609,1134,4.183,1135,4.183,1136,4.183,1137,4.183,1138,4.183,1139,4.183,1140,4.183,1141,4.183,1142,4.183,1143,5.537,1144,4.183]],["title/classes/PasswordResetEmailConsumer.html",[47,0.039,1145,2.94]],["body/classes/PasswordResetEmailConsumer.html",[3,0.205,4,0.205,5,0.184,8,0.318,10,0.951,11,1.464,15,0.423,16,0.017,19,0.395,20,0.586,21,0.205,22,0.012,23,0.012,28,0.997,36,0.556,38,0.714,47,0.042,77,1.197,78,0.821,81,1.337,107,2.336,129,1.337,139,1.559,166,1.914,175,1.702,183,1.629,185,2.801,227,2.336,231,2.074,236,0.982,242,2.925,249,1.533,347,2.139,375,2.679,376,2.074,398,1.464,451,2.679,519,3.551,523,2.679,695,2.074,728,2.074,772,2.679,861,4.259,1145,5.07,1146,3.551,1147,5.478,1148,4.115,1149,4.115,1150,5.478,1151,7.286,1152,4.115,1153,5.478,1154,4.115,1155,5.478,1156,4.115,1157,3.551,1158,3.551,1159,4.115,1160,4.115,1161,4.115,1162,4.115,1163,5.478,1164,6.157,1165,4.115,1166,4.115,1167,4.115,1168,4.115,1169,4.115,1170,4.115]],["title/modules/PaymentModule.html",[51,1.294,1171,2.94]],["body/modules/PaymentModule.html",[3,0.181,4,0.181,5,0.163,15,0.281,16,0.017,19,0.409,20,0.518,21,0.181,22,0.011,23,0.011,28,0.662,30,1.183,36,0.369,38,0.632,41,3.054,42,3.14,47,0.037,50,1.203,51,1.964,53,1.648,58,1.648,59,1.834,72,1.943,78,0.755,81,1.878,89,2.765,90,1.356,104,2.065,106,2.811,107,2.065,108,2.811,109,3.551,110,2.565,123,1.237,127,3.054,129,1.637,134,2.565,185,2.436,236,0.869,376,1.834,377,4.347,378,3.14,386,3.14,387,3.14,388,3.14,389,2.811,390,3.14,391,3.14,392,3.14,393,3.14,394,3.14,395,2.811,423,3.551,451,2.369,474,1.036,695,1.834,954,3.331,1171,4.464,1172,3.639,1173,4.347,1174,4.987,1175,3.639,1176,4.987,1177,5.039,1178,3.639,1179,4.074,1180,4.464,1181,3.14,1182,3.551,1183,3.639,1184,3.639,1185,3.639,1186,3.639,1187,3.639,1188,3.639,1189,3.639,1190,3.639,1191,5.039,1192,3.639,1193,3.639,1194,3.639,1195,3.639,1196,3.639,1197,4.347,1198,4.347,1199,4.347,1200,3.639,1201,3.639,1202,3.639]],["title/classes/RefreshTokenDto.html",[47,0.039,303,2.683]],["body/classes/RefreshTokenDto.html",[3,0.254,4,0.254,5,0.228,8,0.394,9,1.638,15,0.394,16,0.017,17,1.143,19,0.346,21,0.254,22,0.014,23,0.014,30,1.657,36,0.517,45,1.99,47,0.064,194,2.088,280,3.566,281,4.429,303,4.429,321,4.036,340,5.261,398,1.813,401,2.722,403,2.998,404,3.938,410,3.167,671,4.429,672,4.429,675,2.894,1015,5.421,1203,5.421,1204,4.399,1205,6.284,1206,5.098,1207,5.098]],["title/injectables/RequestBodyAndResponseInterceptor.html",[172,0.435,1208,2.683]],["body/injectables/RequestBodyAndResponseInterceptor.html",[3,0.185,4,0.185,5,0.166,8,0.287,10,0.886,11,1.319,12,1.815,13,2.896,15,0.394,16,0.017,17,0.674,19,0.347,20,0.528,21,0.254,22,0.011,23,0.011,28,0.929,36,0.518,38,0.643,47,0.052,50,1.501,77,1.115,78,0.765,81,1.205,104,2.104,123,1.26,129,1.205,131,2.435,137,2.196,139,1.055,141,2.246,172,0.668,173,1.102,175,1.152,183,1.102,184,2.863,185,2.661,236,1.698,287,1.678,338,2.104,407,2.413,408,2.413,480,3.569,593,2.246,614,2.896,623,2.413,630,2.863,631,2.863,893,2.413,934,2.413,954,1.979,974,4.647,1126,2.863,1208,3.597,1209,2.863,1210,4.403,1211,3.707,1212,5.035,1213,5.689,1214,3.707,1215,4.856,1216,3.942,1217,5.035,1218,3.198,1219,3.198,1220,3.198,1221,2.613,1222,3.942,1223,2.863,1224,3.198,1225,4.403,1226,3.198,1227,3.198,1228,3.198,1229,3.198,1230,3.198,1231,3.198,1232,3.198,1233,4.403,1234,4.403,1235,4.403,1236,4.403,1237,2.863,1238,3.198,1239,3.198]],["title/injectables/RequestContextMiddleware.html",[115,2.683,172,0.435]],["body/injectables/RequestContextMiddleware.html",[3,0.234,4,0.234,5,0.209,8,0.362,10,1.034,15,0.461,16,0.017,19,0.361,20,0.667,21,0.234,22,0.013,23,0.013,28,1.084,36,0.605,38,0.813,47,0.048,77,1.302,78,0.893,80,3.612,96,2.121,100,3.619,115,4.201,137,2.016,138,2.839,139,1.333,172,0.682,173,1.393,183,1.393,224,4.603,287,3.123,298,3.05,480,3.915,567,2.502,614,3.915,1120,5.142,1121,5.655,1124,5.142,1240,5.655,1241,4.042,1242,4.042,1243,5.952,1244,4.685,1245,5.142,1246,6.899,1247,4.685,1248,4.685,1249,4.685]],["title/classes/ResetPasswordDto.html",[47,0.039,306,2.683]],["body/classes/ResetPasswordDto.html",[3,0.18,4,0.18,5,0.161,8,0.278,9,1.304,12,2.209,15,0.444,16,0.017,17,1.229,19,0.276,21,0.18,22,0.011,23,0.011,30,1.868,36,0.583,45,1.407,47,0.051,69,1.954,194,2.355,288,2.631,294,1.483,306,3.527,321,2.84,349,3.865,351,4.44,352,3.742,353,3.742,398,1.281,401,3.069,403,3.223,404,2.783,410,3.131,474,1.768,651,2.539,652,4.317,655,4.797,656,4.797,657,4.797,658,4.797,659,4.598,660,4.797,661,4.797,662,4.797,663,4.797,664,4.797,665,4.797,666,4.797,667,4.797,671,4.378,672,4.378,673,4.44,674,2.783,675,2.045,1250,5.359,1251,6.211,1252,5.004,1253,3.603,1254,3.603,1255,3.603,1256,3.603,1257,5.004,1258,5.004]],["title/guards/RoleGuard.html",[1259,2.94,1260,2.94]],["body/guards/RoleGuard.html",[3,0.208,4,0.208,5,0.186,8,0.323,10,0.959,15,0.427,16,0.017,17,0.759,19,0.379,20,0.594,21,0.208,22,0.012,23,0.012,28,1.006,30,1.356,36,0.561,38,0.724,47,0.043,50,1.48,77,1.208,78,0.828,104,2.368,123,2.107,135,3.223,137,1.796,138,2.529,139,1.187,172,0.633,183,1.241,195,1.966,216,3.35,236,1.576,287,1.889,301,3.223,363,2.716,474,1.187,495,2.368,603,4.27,755,2.228,893,3.598,934,2.716,954,2.228,968,5.924,970,3.6,971,6.088,973,3.6,974,4.652,983,3.6,1215,4.788,1216,4.27,1222,4.27,1223,3.223,1237,3.223,1260,4.27,1261,4.173,1262,3.6,1263,4.173,1264,4.173,1265,6.199,1266,4.173,1267,5.528,1268,4.173,1269,4.173,1270,4.173]],["title/injectables/S3Service.html",[172,0.435,1271,2.683]],["body/injectables/S3Service.html",[3,0.135,4,0.135,5,0.219,8,0.209,9,1.061,10,0.849,11,0.964,15,0.451,16,0.017,17,1.156,19,0.398,20,0.386,21,0.135,22,0.009,23,0.009,28,0.741,36,0.621,38,0.707,47,0.028,50,0.972,58,1.227,77,1.069,78,0.733,81,0.881,89,2.391,90,1.009,129,0.881,131,2.782,137,1.166,139,1.743,141,3.533,166,1.903,172,0.466,173,0.806,175,2.178,183,1.211,185,2.48,190,4.316,195,1.935,196,2.334,210,4.201,212,2.468,214,1.227,218,1.293,231,1.366,236,1.517,242,2.174,249,1.517,287,1.227,291,1.91,338,1.538,384,3.145,474,1.159,614,1.538,659,2.65,678,4.503,679,1.91,681,2.093,682,4.201,683,3.778,684,3.833,693,2.65,694,2.338,695,1.366,696,2.174,697,1.91,705,2.338,706,3.513,707,2.338,708,2.338,709,2.338,730,4.503,768,2.338,778,2.093,916,1.764,956,4.22,957,2.338,958,4.201,961,1.91,962,2.338,963,1.764,964,1.764,1045,2.093,1271,2.87,1272,2.338,1273,4.892,1274,4.892,1275,4.22,1276,4.109,1277,4.072,1278,2.71,1279,2.71,1280,4.072,1281,2.71,1282,2.71,1283,4.072,1284,2.71,1285,2.338,1286,4.072,1287,2.71,1288,2.71,1289,4.072,1290,4.22,1291,2.338,1292,3.513,1293,4.072,1294,2.338,1295,2.71,1296,2.338,1297,2.338,1298,4.072,1299,2.338,1300,2.71,1301,2.338,1302,4.892,1303,4.072,1304,4.072,1305,2.71,1306,2.71,1307,4.072,1308,2.71,1309,2.71,1310,2.71,1311,2.71,1312,2.71,1313,4.072,1314,2.71,1315,4.072,1316,2.71,1317,2.338,1318,3.513,1319,2.338,1320,4.072,1321,2.71,1322,2.71,1323,2.71,1324,2.71]],["title/injectables/SchemaService.html",[67,2.477,172,0.435]],["body/injectables/SchemaService.html",[3,0.21,4,0.21,5,0.189,8,0.326,9,1.452,10,0.733,15,0.326,16,0.017,19,0.366,20,0.601,21,0.21,22,0.012,23,0.012,28,1.014,36,0.633,38,0.733,47,0.043,67,3.626,77,0.922,78,0.633,81,2.155,89,2.818,90,1.573,96,1.911,129,1.372,137,1.817,139,2.015,166,1.938,172,0.637,173,1.256,175,2.2,183,1.657,185,2.818,214,1.911,218,2.015,231,2.128,236,1.33,242,2.254,249,1.573,376,2.128,474,1.585,567,2.254,1242,3.643,1243,5.721,1245,4.807,1325,3.643,1326,7.079,1327,5.571,1328,4.222,1329,5.571,1330,3.927,1331,5.571,1332,4.222,1333,4.222,1334,4.222,1335,4.222,1336,4.222,1337,4.222,1338,4.222,1339,4.222]],["title/modules/StorageModule.html",[51,1.294,1340,2.94]],["body/modules/StorageModule.html",[3,0.201,4,0.201,5,0.18,16,0.017,19,0.393,20,0.574,21,0.201,22,0.012,23,0.012,28,0.734,36,0.409,38,0.7,47,0.041,50,1.455,51,2.071,53,1.825,58,1.825,59,2.032,72,2.153,81,1.98,89,2.786,90,1.502,127,3.274,129,1.756,169,3.479,185,2.65,236,0.963,376,2.032,395,3.114,474,1.734,495,2.288,676,2.842,695,2.032,696,2.153,1045,3.114,1173,4.662,1174,5.258,1176,5.258,1199,5.857,1271,2.842,1275,4.662,1276,4.295,1319,3.479,1340,4.707,1341,4.032,1342,4.032,1343,4.032,1344,4.707,1345,3.479,1346,4.032,1347,5.403,1348,4.032,1349,4.032,1350,4.032,1351,4.032,1352,4.032,1353,4.032,1354,4.032,1355,4.032,1356,4.032,1357,4.032,1358,4.032,1359,4.032,1360,4.032,1361,4.032,1362,4.032]],["title/injectables/StripeService.html",[172,0.435,1182,2.683]],["body/injectables/StripeService.html",[3,0.159,4,0.159,5,0.143,8,0.247,10,1.022,11,1.636,15,0.455,16,0.017,19,0.378,20,0.455,21,0.159,22,0.01,23,0.01,28,0.837,30,1.039,36,0.598,38,0.935,47,0.033,50,1.098,77,1.287,78,0.882,81,1.039,89,2.537,90,1.191,104,1.815,107,1.815,129,1.039,137,1.376,139,1.676,166,2.169,172,0.526,173,0.951,175,1.831,183,1.368,185,2.614,195,2.095,212,2.787,227,1.815,231,1.612,236,1.406,242,2.876,249,2.006,376,1.612,423,4.151,450,2.759,451,2.082,510,1.707,679,2.254,759,3.889,783,2.082,942,3.242,944,4.647,945,4.647,946,2.759,947,4.647,948,5.606,950,5.606,951,2.759,952,4.647,954,3.658,1004,5.082,1179,3.242,1182,3.242,1197,4.647,1198,4.647,1363,2.759,1364,4.599,1365,3.198,1366,3.198,1367,3.198,1368,4.599,1369,5.386,1370,4.599,1371,3.198,1372,4.599,1373,4.599,1374,3.198,1375,3.198,1376,3.198,1377,3.198,1378,3.552,1379,5.386,1380,3.198,1381,3.198,1382,3.198,1383,3.198,1384,5.89,1385,3.552,1386,3.198,1387,3.198,1388,3.198,1389,3.198,1390,3.198,1391,3.198,1392,3.198,1393,3.198,1394,3.198,1395,3.198,1396,3.198,1397,3.198]],["title/injectables/SuccessResponseInterceptor.html",[172,0.435,1221,2.683]],["body/injectables/SuccessResponseInterceptor.html",[3,0.19,4,0.19,5,0.17,8,0.294,10,0.66,11,1.352,12,1.847,13,2.947,15,0.294,16,0.017,17,0.692,19,0.35,20,0.541,21,0.259,22,0.011,23,0.011,28,0.945,36,0.386,38,0.66,47,0.053,50,1.517,77,0.83,78,0.57,81,1.235,104,2.157,123,1.292,129,1.235,131,2.477,137,2.234,139,1.082,141,2.304,172,0.677,173,1.13,175,1.181,185,2.309,236,1.708,287,1.721,338,2.157,407,2.474,408,2.474,480,3.607,593,2.304,614,2.947,623,2.474,630,2.936,631,2.936,893,2.474,934,2.474,954,2.03,974,4.689,1126,2.936,1208,2.679,1209,2.936,1210,4.479,1212,5.102,1213,5.739,1215,4.908,1216,4.01,1217,5.102,1218,3.28,1219,3.28,1220,3.28,1221,3.659,1222,4.01,1223,2.936,1224,3.28,1225,4.479,1226,3.28,1227,3.28,1228,3.28,1229,3.28,1230,3.28,1231,3.28,1232,3.28,1233,4.479,1234,4.479,1235,4.479,1236,4.479,1237,2.936,1238,3.28,1239,3.28,1398,3.801]],["title/classes/UpdateProfileDto.html",[47,0.039,1399,2.683]],["body/classes/UpdateProfileDto.html",[3,0.265,4,0.265,5,0.237,16,0.017,19,0.355,21,0.265,22,0.014,23,0.014,45,2.073,47,0.054,236,1.538,288,2.4,347,2.515,398,1.889,728,3.247,755,3.439,771,3.456,787,3.456,794,4.975,795,4.975,1399,4.54,1400,4.581,1401,4.581,1402,6.935,1403,6.442,1404,5.31,1405,4.581]],["title/entities/User.html",[294,0.909,1406,2.94]],["body/entities/User.html",[3,0.102,4,0.102,5,0.091,8,0.316,9,1.064,10,1.217,15,0.581,16,0.017,17,1.323,19,0.257,21,0.102,22,0.007,23,0.007,30,2.239,36,0.699,47,0.021,69,1.274,78,0.891,96,0.923,123,2.418,131,1.557,143,1.978,146,1.437,175,0.634,196,1.557,214,1.848,216,3.603,218,2.926,223,3.374,280,1.852,288,2.284,294,1.562,347,2.127,523,2.657,526,3.522,533,2.521,538,2.301,543,2.816,544,5.812,545,2.521,548,5.779,551,2.125,553,6.05,561,3.038,566,5.943,567,1.088,593,1.235,648,2.816,695,1.027,728,1.027,748,2.301,755,2.726,757,3.599,773,3.153,790,4.419,791,2.877,792,3.944,793,4.419,794,3.153,795,3.153,796,3.522,797,3.153,808,3.605,818,2.521,824,2.816,1018,2.521,1046,3.522,1064,3.944,1069,2.521,1093,2.816,1096,2.816,1098,2.816,1101,2.816,1104,2.816,1107,4.027,1108,2.521,1114,1.759,1133,6.275,1406,2.521,1407,1.759,1408,1.759,1409,2.038,1410,7.273,1411,2.038,1412,2.038,1413,6.29,1414,2.038,1415,2.038,1416,2.816,1417,2.038,1418,2.038,1419,4.667,1420,2.038,1421,2.038,1422,2.038,1423,2.038,1424,2.038,1425,2.038,1426,5.448,1427,2.038,1428,2.038,1429,4.082,1430,2.038,1431,2.038,1432,2.038,1433,2.816,1434,2.816,1435,2.038,1436,1.437,1437,1.759,1438,2.038,1439,2.038,1440,1.759,1441,2.038]],["title/controllers/UsersController.html",[24,2.032,1442,2.683]],["body/controllers/UsersController.html",[1,1.83,3,0.14,4,0.14,5,0.126,8,0.217,10,0.961,11,2.209,12,1.97,13,3.144,15,0.497,16,0.017,18,1.83,19,0.364,20,0.4,21,0.14,22,0.009,23,0.009,24,1.501,26,1.501,28,0.762,30,1.8,36,0.562,38,0.961,40,2.172,41,2.537,43,4.574,44,2.172,45,1.098,47,0.029,48,3.862,49,4.279,50,1.322,77,1.21,78,0.83,138,1.704,139,0.8,146,1.982,166,2.195,195,2.351,227,3.144,236,1.414,249,1.863,278,2.426,286,2.426,287,2.264,288,2.064,291,4.533,294,1.665,298,4.186,308,2.426,310,2.172,312,4.779,324,2.172,326,2.426,327,2.172,336,2.426,337,4.314,420,2.386,474,1.191,478,2.172,479,2.172,480,1.596,481,2.172,482,1.982,483,2.172,484,2.172,485,2.172,510,1.501,525,2.172,562,2.725,649,4.041,771,2.725,783,1.83,787,4.041,791,3.525,856,4.796,857,2.172,1054,4.314,1108,3.233,1399,4.376,1405,2.426,1442,2.95,1443,2.426,1444,4.186,1445,5.001,1446,2.812,1447,4.186,1448,2.812,1449,2.812,1450,2.812,1451,2.812,1452,4.186,1453,2.812,1454,2.812,1455,2.812,1456,2.812,1457,2.812,1458,2.812,1459,4.186,1460,2.812,1461,2.812,1462,2.812,1463,2.426,1464,2.426,1465,2.812,1466,2.812,1467,2.426,1468,2.812,1469,2.812,1470,2.812,1471,2.812,1472,2.812,1473,2.812,1474,3.611,1475,2.812,1476,2.812,1477,2.812,1478,2.812,1479,4.186,1480,4.314,1481,2.812,1482,3.611,1483,2.812,1484,2.812,1485,2.812,1486,2.812]],["title/modules/UsersModule.html",[51,1.294,64,2.307]],["body/modules/UsersModule.html",[3,0.224,4,0.224,5,0.201,16,0.017,19,0.404,20,0.64,21,0.224,22,0.013,23,0.013,26,3.1,47,0.046,51,2.185,53,2.036,54,2.267,55,2.552,56,2.552,57,2.267,58,2.91,59,3.241,64,4.617,68,3.295,69,1.756,70,2.552,72,3.1,95,3.88,96,2.036,97,3.17,155,4.365,294,1.074,374,3.88,420,3.657,854,2.927,1442,4.531,1464,3.88,1487,3.88,1488,3.88,1489,4.497,1490,3.88,1491,4.688,1492,4.497,1493,4.497,1494,4.497,1495,4.497]],["title/injectables/UsersService.html",[172,0.435,420,1.816]],["body/injectables/UsersService.html",[3,0.119,4,0.119,5,0.107,8,0.185,9,0.966,10,0.958,11,2.076,15,0.47,16,0.017,17,1.174,19,0.322,20,0.341,21,0.119,22,0.008,23,0.008,28,0.674,36,0.617,38,0.886,47,0.024,50,1.317,77,1.205,78,0.827,96,1.678,97,1.688,139,1.789,159,3.312,166,2.118,172,0.424,173,0.712,175,1.954,180,2.066,183,1.102,195,2.236,212,1.451,223,1.359,228,1.559,236,1.627,249,2.404,252,1.559,266,3.596,288,1.689,294,1.574,324,1.85,347,1.447,352,2.95,353,2.412,389,3.941,419,2.066,420,1.768,443,2.066,444,1.688,454,2.066,473,1.85,474,1.29,475,1.85,478,2.862,479,2.862,480,2.103,481,2.862,482,2.612,483,2.862,484,2.862,485,2.862,491,5.034,495,2.103,510,2.42,513,4.402,527,2.066,528,1.85,562,2.412,567,1.279,593,1.451,623,2.412,649,3.321,759,2.896,771,2.412,791,3.596,854,1.559,964,1.559,1318,4.402,1467,2.066,1474,3.197,1480,3.911,1482,3.197,1496,2.066,1497,4.533,1498,4.533,1499,4.533,1500,4.533,1501,5.102,1502,3.706,1503,2.395,1504,2.395,1505,3.706,1506,2.395,1507,2.395,1508,2.395,1509,5.102,1510,5.102,1511,2.395,1512,6.085,1513,3.706,1514,5.102,1515,2.395,1516,2.395,1517,2.395,1518,2.395,1519,2.395,1520,2.395,1521,2.395,1522,2.395,1523,2.395,1524,2.395,1525,2.395,1526,2.395,1527,2.395,1528,2.395,1529,2.395,1530,2.395,1531,2.395,1532,2.395,1533,2.395,1534,2.395,1535,2.395,1536,3.706,1537,2.395,1538,2.395,1539,2.395,1540,2.395,1541,2.395,1542,2.395,1543,2.395,1544,3.706,1545,3.706,1546,3.706,1547,3.706,1548,2.395,1549,2.395,1550,2.395,1551,2.395,1552,3.706,1553,2.395]],["title/injectables/UsersSubscriber.html",[172,0.435,1491,2.477]],["body/injectables/UsersSubscriber.html",[3,0.167,4,0.167,5,0.149,8,0.258,10,1.144,15,0.51,16,0.017,19,0.363,20,0.476,21,0.167,22,0.01,23,0.01,28,0.863,36,0.688,38,1.144,47,0.034,50,1.318,77,1.44,78,0.988,80,2.025,89,2.648,90,1.244,96,1.512,123,1.136,137,1.438,139,0.951,166,2.192,172,0.543,173,0.993,175,2.222,183,1.411,216,2.876,236,1.434,245,4.094,249,2.056,294,1.801,417,4.094,442,3.665,477,4.094,567,1.784,736,2.882,737,5.184,739,4.094,854,2.175,1433,4.094,1434,4.094,1436,2.355,1437,2.882,1440,4.094,1491,3.089,1554,2.882,1555,6.009,1556,4.746,1557,4.746,1558,3.341,1559,4.746,1560,6.782,1561,3.341,1562,4.746,1563,3.341,1564,3.341,1565,5.519,1566,4.746,1567,3.341,1568,4.746,1569,3.341,1570,4.746,1571,3.341,1572,4.746,1573,3.341,1574,4.746,1575,4.746,1576,4.746,1577,3.341,1578,2.882,1579,4.746,1580,3.341,1581,3.341,1582,3.341,1583,3.341]],["title/coverage.html",[1584,4.014]],["body/coverage.html",[0,2.586,1,1.576,5,0.108,6,2.089,7,2.886,15,0.453,16,0.017,22,0.008,23,0.008,24,2.437,25,1.706,27,2.089,41,1.467,47,0.073,57,1.883,65,1.576,66,1.576,67,1.576,93,1.706,115,1.706,159,1.374,172,0.832,174,2.089,199,6.821,271,2.089,276,1.706,277,2.089,284,1.706,294,0.892,296,1.706,303,1.706,306,1.706,313,1.706,316,1.293,321,1.374,359,1.576,360,1.576,372,1.706,375,1.576,397,1.87,399,2.089,400,2.089,411,2.089,420,1.155,452,1.87,474,0.689,538,1.706,539,2.089,572,1.87,573,2.089,586,1.87,607,1.706,649,1.576,650,2.089,651,3.217,676,1.706,677,2.089,693,1.576,726,2.089,727,2.089,755,1.293,769,1.87,787,1.576,788,2.089,789,2.089,849,1.706,850,2.886,855,1.706,861,1.467,866,1.87,886,2.089,899,2.089,900,2.089,910,1.576,911,1.87,912,1.87,918,2.089,942,1.706,943,2.089,955,2.089,961,1.706,963,1.576,964,1.576,965,2.089,966,2.886,980,1.87,990,2.089,1034,2.089,1036,2.089,1048,2.089,1051,1.87,1052,2.089,1059,2.089,1118,2.089,1123,5.056,1145,1.87,1146,2.089,1179,1.706,1180,1.87,1182,1.706,1203,2.089,1204,2.089,1208,1.706,1209,2.886,1221,1.706,1240,2.089,1241,2.089,1250,2.089,1259,1.87,1260,1.87,1262,2.089,1271,1.706,1272,2.089,1317,2.089,1325,2.089,1330,2.634,1344,1.87,1363,2.089,1378,1.87,1385,1.87,1399,1.706,1400,2.089,1401,2.089,1406,1.87,1408,3.224,1436,1.706,1442,1.706,1443,2.089,1491,1.576,1496,2.089,1554,2.089,1584,1.87,1585,2.089,1586,2.421,1587,2.421,1588,5.861,1589,4.564,1590,5.443,1591,6.997,1592,2.089,1593,7.546,1594,2.089,1595,5.546,1596,2.421,1597,7.066,1598,5.132,1599,3.737,1600,2.089,1601,5.546,1602,2.089,1603,2.089,1604,2.089,1605,2.089,1606,2.089,1607,2.089,1608,2.089,1609,2.089,1610,2.089,1611,2.089,1612,2.089,1613,2.421,1614,3.224,1615,2.421,1616,2.421,1617,2.089,1618,2.089,1619,2.421,1620,2.421,1621,2.089,1622,2.089,1623,2.089,1624,2.421,1625,2.089,1626,2.089,1627,3.224,1628,2.089,1629,2.089,1630,2.421]],["title/dependencies.html",[54,2.308,1631,2.741]],["body/dependencies.html",[11,1.169,16,0.017,20,0.468,22,0.01,23,0.01,33,3.305,45,1.283,47,0.048,54,1.656,58,1.487,90,1.224,96,2.855,97,2.316,100,3.622,101,2.835,102,2.316,104,2.662,105,2.835,107,1.865,109,3.854,110,2.316,112,2.835,131,1.568,163,2.538,164,2.538,166,1.021,287,1.487,363,2.139,367,2.538,369,1.991,442,2.538,451,2.139,455,2.538,504,2.538,558,2.538,567,1.754,605,2.538,606,2.835,675,1.865,687,2.316,692,2.538,696,2.92,697,2.316,730,3.622,764,2.835,767,2.835,778,2.538,834,2.835,865,2.538,915,2.538,916,2.139,934,2.139,954,2.504,1026,4.223,1041,2.835,1042,2.835,1056,2.835,1125,2.835,1276,2.316,1285,2.835,1290,4.718,1291,2.835,1292,2.835,1294,2.835,1296,2.835,1297,4.718,1299,2.835,1301,2.835,1632,3.286,1633,3.286,1634,3.286,1635,3.286,1636,5.468,1637,3.286,1638,3.286,1639,3.286,1640,3.286,1641,5.964,1642,3.286,1643,5.964,1644,3.286,1645,3.286,1646,3.286,1647,3.286,1648,3.286,1649,3.286,1650,3.286,1651,3.286,1652,3.286,1653,3.286,1654,3.286,1655,3.286,1656,2.835,1657,3.286,1658,3.286,1659,3.286,1660,5.964,1661,3.286,1662,3.286,1663,3.286,1664,4.69,1665,4.69,1666,3.286,1667,3.286,1668,3.286,1669,3.286,1670,3.286,1671,3.286,1672,3.286,1673,3.286,1674,3.286,1675,3.286,1676,3.286,1677,3.286,1678,3.286,1679,4.69,1680,3.286,1681,3.286,1682,4.69,1683,3.286,1684,3.286,1685,3.286,1686,3.286,1687,3.286,1688,3.286,1689,3.286,1690,3.286,1691,3.286,1692,3.286,1693,3.286,1694,3.286,1695,3.286,1696,3.286,1697,4.69,1698,3.286,1699,3.286,1700,3.286,1701,3.286,1702,3.286,1703,3.286,1704,3.286,1705,3.286,1706,3.286,1707,3.286,1708,3.286,1709,3.286,1710,3.286,1711,3.286,1712,3.286,1713,3.286,1714,3.286,1715,3.286]],["title/miscellaneous/enumerations.html",[1716,1.697,1717,3.95]],["body/miscellaneous/enumerations.html",[8,0.345,16,0.017,22,0.013,23,0.013,69,2.256,178,4.072,214,3.551,288,2.152,294,1.379,310,4.462,684,4.072,687,4.072,757,4.072,759,3.279,954,3.085,958,4.462,963,3.761,1064,3.448,1076,4.985,1157,4.985,1158,4.985,1181,4.985,1276,4.072,1345,4.985,1463,4.985,1716,2.383,1717,3.851,1718,5.787,1719,5.778,1720,5.778,1721,4.464,1722,5.778,1723,4.464,1724,4.464,1725,5.778,1726,5.778,1727,5.778,1728,4.464,1729,4.464,1730,5.778,1731,4.464]],["title/miscellaneous/functions.html",[1716,1.697,1732,3.95]],["body/miscellaneous/functions.html",[8,0.372,10,1.209,15,0.555,16,0.017,17,1.306,22,0.013,23,0.013,38,1.209,39,3.716,57,3.695,77,1.522,78,1.044,80,3.673,196,2.892,294,1.584,1069,3.716,1436,4.272,1578,4.151,1602,4.151,1603,5.229,1604,4.151,1605,5.229,1606,4.151,1609,4.151,1610,5.229,1611,4.151,1612,4.151,1716,2.569,1732,4.151,1733,4.811,1734,4.811,1735,4.811,1736,4.811,1737,4.811,1738,4.811,1739,4.811,1740,6.061,1741,4.811,1742,4.811,1743,4.811,1744,6.061,1745,4.811]],["title/index.html",[8,0.246,251,2.741,1746,3.178]],["body/index.html",[16,0.017,22,0.014,23,0.014,33,3.614,194,2.1,403,3.258,482,3.614,735,6.509,1330,3.614,1584,3.96,1585,4.424,1747,5.128,1748,5.128,1749,5.128,1750,6.306,1751,5.128,1752,7.544,1753,5.128,1754,5.128,1755,5.128,1756,5.128,1757,6.306,1758,5.128,1759,5.128,1760,6.829,1761,5.128,1762,6.306,1763,5.128,1764,5.128,1765,5.128]],["title/modules.html",[53,2.352]],["body/modules.html",[16,0.014,22,0.014,23,0.014,52,3.833,53,2.462,63,3.54,64,3.296,155,3.296,858,3.833,906,3.833,997,5.639,1001,6.515,1171,4.2,1340,4.2,1766,7.551,1767,7.551,1768,7.701,1769,6.536]],["title/overview.html",[1770,4.483]],["body/overview.html",[2,2.561,16,0.017,22,0.012,23,0.012,26,2.101,51,1.337,52,5.294,53,1.781,54,1.983,55,2.233,56,2.233,57,1.983,58,1.781,59,1.983,60,3.395,61,3.395,62,3.395,63,4.947,64,4.518,65,3.918,66,3.918,67,3.918,68,3.017,69,1.536,70,2.233,155,4.298,156,3.395,157,3.395,158,3.395,159,4.025,173,1.17,200,3.221,316,3.787,355,3.395,357,3.395,358,3.395,359,3.918,360,3.918,398,1.4,420,3.384,858,4.242,859,3.395,860,3.395,861,3.906,906,4.745,907,3.395,908,3.395,909,3.395,910,4.616,1259,3.039,1407,3.395,1416,3.395,1487,3.395,1488,3.395,1490,3.395,1491,3.918,1770,3.395,1771,3.935,1772,3.935,1773,3.935,1774,3.935]],["title/properties.html",[9,1.193,1631,2.741]],["body/properties.html",[9,1.549,16,0.017,22,0.015,23,0.015,194,2.434,1131,5.128,1775,5.943,1776,5.943,1777,5.943,1778,5.943]],["title/miscellaneous/typealiases.html",[1716,1.697,1779,4.578]],["body/miscellaneous/typealiases.html",[8,0.408,15,0.57,16,0.016,22,0.014,23,0.014,39,5.558,452,4.957,501,3.436,586,4.957,602,4.554,603,4.077,604,4.554,961,4.524,963,4.178,964,4.178,1378,4.957,1385,4.957,1600,4.554,1617,4.554,1618,5.538,1621,4.554,1622,4.554,1623,5.538,1625,4.554,1626,5.538,1716,2.818,1718,4.077,1780,5.278,1781,5.278,1782,5.278,1783,5.278,1784,5.278]],["title/miscellaneous/variables.html",[1716,1.697,1785,3.95]],["body/miscellaneous/variables.html",[8,0.291,15,0.566,16,0.017,17,1.333,22,0.011,23,0.011,35,3.252,41,3.128,69,1.472,78,0.565,123,1.755,214,3.42,218,3.605,288,1.404,347,1.472,375,3.36,423,3.638,474,2.032,696,2.756,755,2.756,769,3.987,866,3.987,881,2.911,980,3.987,981,3.252,1179,3.638,1180,4.547,1330,4.828,1344,4.547,1590,3.252,1592,4.454,1594,3.252,1607,3.252,1608,4.454,1614,3.252,1627,3.252,1628,4.454,1629,5.463,1656,3.252,1716,2.013,1718,5.595,1785,3.252,1786,5.162,1787,5.162,1788,3.769,1789,3.769,1790,3.769,1791,3.769,1792,3.769,1793,3.769,1794,3.769,1795,3.769,1796,3.769,1797,3.769,1798,3.769,1799,3.769,1800,3.769,1801,3.769,1802,3.769,1803,3.769,1804,3.769,1805,3.769,1806,3.769,1807,3.769]]],"invertedIndex":[["",{"_index":16,"title":{},"body":{"interfaces/ApiResponse.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AppRedisModule.html":{},"injectables/AppRedisService.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/AuthResponseDto.html":{},"injectables/AuthService.html":{},"classes/BaseEntity.html":{},"classes/CatchEverythingFilter.html":{},"classes/ChangePasswordDto.html":{},"injectables/CloudinaryService.html":{},"injectables/CreateUserCommand.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserResponseDto.html":{},"modules/EmailModule.html":{},"classes/EmailService.html":{},"interfaces/ErrorResponse.html":{},"classes/ForgotPasswordDto.html":{},"classes/GetProfileResponseDto.html":{},"modules/HttpClientModule.html":{},"injectables/HttpClientService.html":{},"interfaces/IPaymentService.html":{},"interfaces/IStrorageService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"classes/Migration20250730220636.html":{},"injectables/MorganMiddleware.html":{},"classes/PasswordResetEmailConsumer.html":{},"modules/PaymentModule.html":{},"classes/RefreshTokenDto.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/RequestContextMiddleware.html":{},"classes/ResetPasswordDto.html":{},"guards/RoleGuard.html":{},"injectables/S3Service.html":{},"injectables/SchemaService.html":{},"modules/StorageModule.html":{},"injectables/StripeService.html":{},"injectables/SuccessResponseInterceptor.html":{},"classes/UpdateProfileDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/UsersSubscriber.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":199,"title":{},"body":{"injectables/AppRedisService.html":{},"coverage.html":{}}}],["0.0.1",{"_index":1775,"title":{},"body":{"properties.html":{}}}],["0.1.13",{"_index":1709,"title":{},"body":{"dependencies.html":{}}}],["0.12.5",{"_index":1713,"title":{},"body":{"dependencies.html":{}}}],["0.14.1",{"_index":1686,"title":{},"body":{"dependencies.html":{}}}],["0.2.21",{"_index":1640,"title":{},"body":{"dependencies.html":{}}}],["0.203.0",{"_index":1664,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":1685,"title":{},"body":{"dependencies.html":{}}}],["0.6.0",{"_index":1692,"title":{},"body":{"dependencies.html":{}}}],["0.62.0",{"_index":1657,"title":{},"body":{"dependencies.html":{}}}],["0.7.0",{"_index":1703,"title":{},"body":{"dependencies.html":{}}}],["0.9.3",{"_index":1639,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":1593,"title":{},"body":{"coverage.html":{}}}],["0/13",{"_index":1613,"title":{},"body":{"coverage.html":{}}}],["0/14",{"_index":1619,"title":{},"body":{"coverage.html":{}}}],["0/18",{"_index":1620,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":1588,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":1597,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":1598,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":1595,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":1599,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":1589,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":1596,"title":{},"body":{"coverage.html":{}}}],["0123456789abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz!@#$%^&*()_",{"_index":1789,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1",{"_index":200,"title":{},"body":{"injectables/AppRedisService.html":{},"injectables/AuthService.html":{},"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginDto.html":{},"overview.html":{}}}],["1'})@isstring()@isnotempty()@matches(/^(?=.*[a",{"_index":654,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{}}}],["1'})@isstring()@isoptional()@transform",{"_index":809,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["1.0.0",{"_index":1682,"title":{},"body":{"dependencies.html":{}}}],["1.1.26",{"_index":1638,"title":{},"body":{"dependencies.html":{}}}],["1.10.0",{"_index":1679,"title":{},"body":{"dependencies.html":{}}}],["1.10.2",{"_index":1698,"title":{},"body":{"dependencies.html":{}}}],["1.2.1",{"_index":1688,"title":{},"body":{"dependencies.html":{}}}],["1.9.10",{"_index":1676,"title":{},"body":{"dependencies.html":{}}}],["1.9.93",{"_index":1699,"title":{},"body":{"dependencies.html":{}}}],["1/3",{"_index":1616,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":659,"title":{},"body":{"classes/ChangePasswordDto.html":{},"injectables/CreateUserCommand.html":{},"classes/CreateUserDto.html":{},"classes/ResetPasswordDto.html":{},"injectables/S3Service.html":{}}}],["10.0.0",{"_index":1641,"title":{},"body":{"dependencies.html":{}}}],["10.0.3",{"_index":1652,"title":{},"body":{"dependencies.html":{}}}],["10.2.0",{"_index":1650,"title":{},"body":{"dependencies.html":{}}}],["100",{"_index":1413,"title":{},"body":{"entities/User.html":{}}}],["11.0.3",{"_index":1648,"title":{},"body":{"dependencies.html":{}}}],["11.1.0",{"_index":1714,"title":{},"body":{"dependencies.html":{}}}],["123",{"_index":798,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["12345",{"_index":839,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["12345'})@isstring()@isoptional",{"_index":822,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["16",{"_index":1773,"title":{},"body":{"overview.html":{}}}],["18.3.0",{"_index":1711,"title":{},"body":{"dependencies.html":{}}}],["19",{"_index":1772,"title":{},"body":{"overview.html":{}}}],["2.0.1",{"_index":1660,"title":{},"body":{"dependencies.html":{}}}],["2.0.2",{"_index":1646,"title":{},"body":{"dependencies.html":{}}}],["2.1.0",{"_index":1678,"title":{},"body":{"dependencies.html":{}}}],["2.1.3",{"_index":1693,"title":{},"body":{"dependencies.html":{}}}],["2.2.4",{"_index":1674,"title":{},"body":{"dependencies.html":{}}}],["2.7.0",{"_index":1687,"title":{},"body":{"dependencies.html":{}}}],["20",{"_index":1426,"title":{},"body":{"entities/User.html":{}}}],["2000",{"_index":393,"title":{},"body":{"modules/AuthModule.html":{},"modules/PaymentModule.html":{}}}],["234567890",{"_index":844,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["234567890'})@isstring()@isoptional",{"_index":819,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["255",{"_index":1419,"title":{},"body":{"entities/User.html":{}}}],["3",{"_index":1416,"title":{},"body":{"entities/User.html":{},"overview.html":{}}}],["3.0.0",{"_index":1694,"title":{},"body":{"dependencies.html":{}}}],["3.0.1",{"_index":1700,"title":{},"body":{"dependencies.html":{}}}],["3.0.3",{"_index":1706,"title":{},"body":{"dependencies.html":{}}}],["3.17.0",{"_index":1715,"title":{},"body":{"dependencies.html":{}}}],["3.18.0",{"_index":1696,"title":{},"body":{"dependencies.html":{}}}],["3.2.2",{"_index":1649,"title":{},"body":{"dependencies.html":{}}}],["3.840.0",{"_index":1634,"title":{},"body":{"dependencies.html":{}}}],["3.848.0",{"_index":1632,"title":{},"body":{"dependencies.html":{}}}],["3.850.0",{"_index":1633,"title":{},"body":{"dependencies.html":{}}}],["3/10",{"_index":1624,"title":{},"body":{"coverage.html":{}}}],["30",{"_index":1317,"title":{},"body":{"injectables/S3Service.html":{},"coverage.html":{}}}],["33",{"_index":1615,"title":{},"body":{"coverage.html":{}}}],["4",{"_index":1774,"title":{},"body":{"overview.html":{}}}],["4.0.0",{"_index":1647,"title":{},"body":{"dependencies.html":{}}}],["4.0.1",{"_index":1704,"title":{},"body":{"dependencies.html":{}}}],["4.0.4",{"_index":1669,"title":{},"body":{"dependencies.html":{}}}],["4.1.2",{"_index":1684,"title":{},"body":{"dependencies.html":{}}}],["404",{"_index":1141,"title":{},"body":{"injectables/MorganMiddleware.html":{}}}],["5",{"_index":389,"title":{},"body":{"modules/AuthModule.html":{},"modules/PaymentModule.html":{},"injectables/UsersService.html":{}}}],["5.0.0",{"_index":1695,"title":{},"body":{"dependencies.html":{}}}],["5.0.2",{"_index":1672,"title":{},"body":{"dependencies.html":{}}}],["5.1.1",{"_index":1680,"title":{},"body":{"dependencies.html":{}}}],["5.1.2",{"_index":1670,"title":{},"body":{"dependencies.html":{}}}],["5.56.8",{"_index":1683,"title":{},"body":{"dependencies.html":{}}}],["500",{"_index":648,"title":{},"body":{"classes/CatchEverythingFilter.html":{},"entities/User.html":{}}}],["6.1.1",{"_index":1644,"title":{},"body":{"dependencies.html":{}}}],["6.12.0",{"_index":1636,"title":{},"body":{"dependencies.html":{}}}],["6.4.16",{"_index":1643,"title":{},"body":{"dependencies.html":{}}}],["60",{"_index":1318,"title":{},"body":{"injectables/S3Service.html":{},"injectables/UsersService.html":{}}}],["7.0.5",{"_index":1702,"title":{},"body":{"dependencies.html":{}}}],["7.3.1",{"_index":1654,"title":{},"body":{"dependencies.html":{}}}],["7.8.1",{"_index":1710,"title":{},"body":{"dependencies.html":{}}}],["8",{"_index":1771,"title":{},"body":{"overview.html":{}}}],["8.1.0",{"_index":1690,"title":{},"body":{"dependencies.html":{}}}],["_(ツ)_",{"_index":632,"title":{},"body":{"classes/CatchEverythingFilter.html":{}}}],["abstract",{"_index":571,"title":{},"body":{"classes/BaseEntity.html":{}}}],["access",{"_index":301,"title":{},"body":{"controllers/AuthController.html":{},"classes/AuthResponseDto.html":{},"guards/RoleGuard.html":{}}}],["access_token",{"_index":333,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["accesskeyid",{"_index":1350,"title":{},"body":{"modules/StorageModule.html":{}}}],["accesstoken",{"_index":339,"title":{},"body":{"controllers/AuthController.html":{},"classes/AuthResponseDto.html":{}}}],["account",{"_index":1190,"title":{},"body":{"modules/PaymentModule.html":{}}}],["accounttest",{"_index":1193,"title":{},"body":{"modules/PaymentModule.html":{}}}],["active",{"_index":508,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["adapter",{"_index":134,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/EmailModule.html":{},"modules/PaymentModule.html":{}}}],["add",{"_index":1112,"title":{},"body":{"classes/Migration20250730220636.html":{}}}],["addr",{"_index":1130,"title":{},"body":{"injectables/MorganMiddleware.html":{}}}],["address",{"_index":790,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/Migration20250730220636.html":{},"entities/User.html":{}}}],["admin",{"_index":1076,"title":{},"body":{"classes/Migration20250730220636.html":{},"miscellaneous/enumerations.html":{}}}],["africa/lagos",{"_index":1729,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["agent",{"_index":1136,"title":{},"body":{"injectables/MorganMiddleware.html":{}}}],["alias",{"_index":1601,"title":{},"body":{"coverage.html":{}}}],["aliases",{"_index":1780,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["already",{"_index":1527,"title":{},"body":{"injectables/UsersService.html":{}}}],["alter",{"_index":1111,"title":{},"body":{"classes/Migration20250730220636.html":{}}}],["any).__helper?.__originalentitydata",{"_index":1580,"title":{},"body":{"injectables/UsersSubscriber.html":{}}}],["api_key",{"_index":701,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["api_secret",{"_index":703,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["apibody",{"_index":312,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["apikey",{"_index":1186,"title":{},"body":{"modules/PaymentModule.html":{}}}],["apioperation",{"_index":43,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["apiproperty",{"_index":410,"title":{},"body":{"classes/AuthResponseDto.html":{},"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserResponseDto.html":{},"classes/ForgotPasswordDto.html":{},"classes/GetProfileResponseDto.html":{},"classes/LoginDto.html":{},"classes/RefreshTokenDto.html":{},"classes/ResetPasswordDto.html":{}}}],["apiproperty({description",{"_index":401,"title":{},"body":{"classes/AuthResponseDto.html":{},"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserResponseDto.html":{},"classes/GetProfileResponseDto.html":{},"classes/LoginDto.html":{},"classes/RefreshTokenDto.html":{},"classes/ResetPasswordDto.html":{}}}],["apiproperty({example",{"_index":901,"title":{},"body":{"classes/ForgotPasswordDto.html":{}}}],["apiresponse",{"_index":1,"title":{"interfaces/ApiResponse.html":{}},"body":{"interfaces/ApiResponse.html":{},"controllers/AuthController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["apitags",{"_index":44,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["apitags('app",{"_index":46,"title":{},"body":{"controllers/AppController.html":{}}}],["apitags('auth",{"_index":328,"title":{},"body":{"controllers/AuthController.html":{}}}],["apitags('users",{"_index":1470,"title":{},"body":{"controllers/UsersController.html":{}}}],["app",{"_index":1745,"title":{},"body":{"miscellaneous/functions.html":{}}}],["app.controller",{"_index":84,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":85,"title":{},"body":{"modules/AppModule.html":{}}}],["app_guard",{"_index":362,"title":{},"body":{"modules/AuthModule.html":{}}}],["app_name",{"_index":1592,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["appcontroller",{"_index":25,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["apply",{"_index":145,"title":{},"body":{"modules/AppModule.html":{}}}],["applyrawbodyonlyto",{"_index":103,"title":{},"body":{"modules/AppModule.html":{}}}],["applyrawbodyonlyto(consumer",{"_index":140,"title":{},"body":{"modules/AppModule.html":{}}}],["appmodule",{"_index":52,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appredis",{"_index":176,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["appredismodule",{"_index":155,"title":{"modules/AppRedisModule.html":{}},"body":{"modules/AppRedisModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["appredisservice",{"_index":159,"title":{"injectables/AppRedisService.html":{}},"body":{"modules/AppRedisModule.html":{},"injectables/AppRedisService.html":{},"injectables/AuthService.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["appredisservice.name",{"_index":244,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["appservice",{"_index":65,"title":{"injectables/AppService.html":{}},"body":{"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["args",{"_index":245,"title":{},"body":{"injectables/AppRedisService.html":{},"injectables/UsersSubscriber.html":{}}}],["args.entity",{"_index":1574,"title":{},"body":{"injectables/UsersSubscriber.html":{}}}],["args.push('ex",{"_index":247,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["args.push('nx",{"_index":246,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["argumentshost",{"_index":588,"title":{},"body":{"classes/CatchEverythingFilter.html":{}}}],["array",{"_index":204,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["asecure",{"_index":1251,"title":{},"body":{"classes/ResetPasswordDto.html":{}}}],["async",{"_index":166,"title":{},"body":{"modules/AppRedisModule.html":{},"injectables/AppRedisService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CloudinaryService.html":{},"injectables/CreateUserCommand.html":{},"classes/EmailService.html":{},"injectables/HttpClientService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/Migration20250730220636.html":{},"classes/PasswordResetEmailConsumer.html":{},"injectables/S3Service.html":{},"injectables/SchemaService.html":{},"injectables/StripeService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/UsersSubscriber.html":{},"dependencies.html":{}}}],["asynclocalstoragecontextmanager",{"_index":1794,"title":{},"body":{"miscellaneous/variables.html":{}}}],["attempts",{"_index":388,"title":{},"body":{"modules/AuthModule.html":{},"modules/PaymentModule.html":{}}}],["auth",{"_index":102,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/EmailModule.html":{},"dependencies.html":{}}}],["auth.controller",{"_index":364,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.guard",{"_index":315,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["auth.guard.ts",{"_index":966,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/LocalAuthGuard.html":{},"coverage.html":{}}}],["auth.guard.ts:11",{"_index":972,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["auth.guard.ts:16",{"_index":975,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["auth.guard.ts:27",{"_index":977,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["auth.jwt.refreshexpiresin",{"_index":467,"title":{},"body":{"injectables/AuthService.html":{}}}],["auth.jwt.refreshsecret",{"_index":469,"title":{},"body":{"injectables/AuthService.html":{}}}],["auth.service",{"_index":317,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/LocalStrategy.html":{}}}],["auth/decorators/public.decorator",{"_index":1465,"title":{},"body":{"controllers/UsersController.html":{}}}],["authcontroller",{"_index":276,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authenticated",{"_index":402,"title":{},"body":{"classes/AuthResponseDto.html":{}}}],["authguard",{"_index":979,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/LocalAuthGuard.html":{}}}],["authguard('jwt",{"_index":967,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authguard('local",{"_index":1035,"title":{},"body":{"injectables/LocalAuthGuard.html":{}}}],["authmodule",{"_index":63,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":1778,"title":{},"body":{"properties.html":{}}}],["authresponsedto",{"_index":397,"title":{"classes/AuthResponseDto.html":{}},"body":{"classes/AuthResponseDto.html":{},"coverage.html":{}}}],["authservice",{"_index":316,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["authtokens",{"_index":452,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["auto",{"_index":717,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["available",{"_index":997,"title":{},"body":{"injectables/JwtStrategy.html":{},"modules.html":{}}}],["avatar",{"_index":1064,"title":{},"body":{"classes/Migration20250730220636.html":{},"entities/User.html":{},"miscellaneous/enumerations.html":{}}}],["avatars",{"_index":1731,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["await",{"_index":249,"title":{},"body":{"injectables/AppRedisService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CreateUserCommand.html":{},"classes/EmailService.html":{},"injectables/HttpClientService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/PasswordResetEmailConsumer.html":{},"injectables/S3Service.html":{},"injectables/SchemaService.html":{},"injectables/StripeService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/UsersSubscriber.html":{}}}],["aws",{"_index":1290,"title":{},"body":{"injectables/S3Service.html":{},"dependencies.html":{}}}],["aws.s3.secretaccesskey",{"_index":1354,"title":{},"body":{"modules/StorageModule.html":{}}}],["axios",{"_index":605,"title":{},"body":{"classes/CatchEverythingFilter.html":{},"injectables/HttpClientService.html":{},"dependencies.html":{}}}],["axioserror",{"_index":604,"title":{},"body":{"classes/CatchEverythingFilter.html":{},"miscellaneous/typealiases.html":{}}}],["axiosrequestconfig",{"_index":926,"title":{},"body":{"injectables/HttpClientService.html":{}}}],["b3",{"_index":1666,"title":{},"body":{"dependencies.html":{}}}],["b3propagator",{"_index":1801,"title":{},"body":{"miscellaneous/variables.html":{}}}],["backoff",{"_index":390,"title":{},"body":{"modules/AuthModule.html":{},"modules/PaymentModule.html":{}}}],["badrequestexception",{"_index":443,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["badrequestexception('malformed",{"_index":506,"title":{},"body":{"injectables/AuthService.html":{}}}],["badrequestexception('passwords",{"_index":527,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["badrequestexception('refresh",{"_index":496,"title":{},"body":{"injectables/AuthService.html":{}}}],["baseentity",{"_index":538,"title":{"classes/BaseEntity.html":{}},"body":{"classes/BaseEntity.html":{},"entities/User.html":{},"coverage.html":{}}}],["basic",{"_index":101,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["basicauth",{"_index":99,"title":{},"body":{"modules/AppModule.html":{}}}],["bcrypt",{"_index":442,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersSubscriber.html":{},"dependencies.html":{}}}],["bcrypt.compare(pass",{"_index":476,"title":{},"body":{"injectables/AuthService.html":{}}}],["bcrypt.gensalt(this.saltrounds",{"_index":535,"title":{},"body":{"injectables/AuthService.html":{}}}],["bcrypt.hash(newpassword",{"_index":537,"title":{},"body":{"injectables/AuthService.html":{}}}],["bcrypt.hash(user.password",{"_index":1583,"title":{},"body":{"injectables/UsersSubscriber.html":{}}}],["beforecreate",{"_index":1433,"title":{},"body":{"entities/User.html":{},"injectables/UsersSubscriber.html":{}}}],["beforecreate(args",{"_index":1559,"title":{},"body":{"injectables/UsersSubscriber.html":{}}}],["beforeupdate",{"_index":1434,"title":{},"body":{"entities/User.html":{},"injectables/UsersSubscriber.html":{}}}],["beforeupdate(args",{"_index":1562,"title":{},"body":{"injectables/UsersSubscriber.html":{}}}],["blacklisted",{"_index":497,"title":{},"body":{"injectables/AuthService.html":{}}}],["board/api",{"_index":1635,"title":{},"body":{"dependencies.html":{}}}],["board/api/bullmqadapter",{"_index":378,"title":{},"body":{"modules/AuthModule.html":{},"modules/PaymentModule.html":{}}}],["board/express",{"_index":112,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["board/nestjs",{"_index":110,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PaymentModule.html":{},"dependencies.html":{}}}],["body",{"_index":291,"title":{},"body":{"controllers/AuthController.html":{},"classes/CatchEverythingFilter.html":{},"injectables/S3Service.html":{},"controllers/UsersController.html":{}}}],["boilerplate",{"_index":35,"title":{},"body":{"controllers/AppController.html":{},"miscellaneous/variables.html":{}}}],["boolean",{"_index":216,"title":{},"body":{"injectables/AppRedisService.html":{},"classes/CreateUserDto.html":{},"classes/Migration20250730220636.html":{},"guards/RoleGuard.html":{},"entities/User.html":{},"injectables/UsersSubscriber.html":{}}}],["bootstrap",{"_index":57,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRedisModule.html":{},"modules/AuthModule.html":{},"modules/EmailModule.html":{},"modules/HttpClientModule.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["browse",{"_index":1768,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1766,"title":{},"body":{"modules.html":{}}}],["bucket",{"_index":1309,"title":{},"body":{"injectables/S3Service.html":{}}}],["buffer",{"_index":1681,"title":{},"body":{"dependencies.html":{}}}],["bull",{"_index":109,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PaymentModule.html":{},"dependencies.html":{}}}],["bullboardmodule",{"_index":108,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PaymentModule.html":{}}}],["bullboardmodule.forfeature",{"_index":394,"title":{},"body":{"modules/AuthModule.html":{},"modules/PaymentModule.html":{}}}],["bullboardmodule.forroot",{"_index":133,"title":{},"body":{"modules/AppModule.html":{}}}],["bullmodule",{"_index":106,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PaymentModule.html":{}}}],["bullmodule.forrootasync",{"_index":128,"title":{},"body":{"modules/AppModule.html":{}}}],["bullmodule.registerqueue",{"_index":386,"title":{},"body":{"modules/AuthModule.html":{},"modules/PaymentModule.html":{}}}],["bullmq",{"_index":451,"title":{},"body":{"injectables/AuthService.html":{},"classes/PasswordResetEmailConsumer.html":{},"modules/PaymentModule.html":{},"injectables/StripeService.html":{},"dependencies.html":{}}}],["bullmqadapter",{"_index":377,"title":{},"body":{"modules/AuthModule.html":{},"modules/PaymentModule.html":{}}}],["bytes",{"_index":708,"title":{},"body":{"injectables/CloudinaryService.html":{},"injectables/S3Service.html":{}}}],["cache",{"_index":125,"title":{},"body":{"modules/AppModule.html":{}}}],["cached",{"_index":1536,"title":{},"body":{"injectables/UsersService.html":{}}}],["cachekey",{"_index":491,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["callhandler",{"_index":1213,"title":{},"body":{"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/SuccessResponseInterceptor.html":{}}}],["canactivate",{"_index":968,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/RoleGuard.html":{}}}],["canactivate(context",{"_index":973,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/RoleGuard.html":{}}}],["catch",{"_index":500,"title":{},"body":{"injectables/AuthService.html":{},"classes/CatchEverythingFilter.html":{},"injectables/CreateUserCommand.html":{}}}],["catch(exception",{"_index":585,"title":{},"body":{"classes/CatchEverythingFilter.html":{}}}],["catcheverythingfilter",{"_index":572,"title":{"classes/CatchEverythingFilter.html":{}},"body":{"classes/CatchEverythingFilter.html":{},"coverage.html":{}}}],["catcheverythingfilter.name",{"_index":584,"title":{},"body":{"classes/CatchEverythingFilter.html":{}}}],["category=${filecategory",{"_index":709,"title":{},"body":{"injectables/CloudinaryService.html":{},"injectables/S3Service.html":{}}}],["caught",{"_index":642,"title":{},"body":{"classes/CatchEverythingFilter.html":{}}}],["chalk",{"_index":767,"title":{},"body":{"injectables/CreateUserCommand.html":{},"dependencies.html":{}}}],["chalk.red.bold",{"_index":785,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["challenge",{"_index":149,"title":{},"body":{"modules/AppModule.html":{}}}],["change",{"_index":1108,"title":{},"body":{"classes/Migration20250730220636.html":{},"entities/User.html":{},"controllers/UsersController.html":{}}}],["change_password",{"_index":1077,"title":{},"body":{"classes/Migration20250730220636.html":{}}}],["changed",{"_index":1486,"title":{},"body":{"controllers/UsersController.html":{}}}],["changepassword",{"_index":791,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["changepassword(data",{"_index":1446,"title":{},"body":{"controllers/UsersController.html":{}}}],["changepassword(userid",{"_index":1503,"title":{},"body":{"injectables/UsersService.html":{}}}],["changepassworddto",{"_index":649,"title":{"classes/ChangePasswordDto.html":{}},"body":{"classes/ChangePasswordDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["characters",{"_index":660,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/ResetPasswordDto.html":{}}}],["check",{"_index":1075,"title":{},"body":{"classes/Migration20250730220636.html":{}}}],["checking",{"_index":264,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["checkout",{"_index":1378,"title":{},"body":{"injectables/StripeService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["city",{"_index":792,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/Migration20250730220636.html":{},"entities/User.html":{}}}],["class",{"_index":47,"title":{"classes/AuthResponseDto.html":{},"classes/BaseEntity.html":{},"classes/CatchEverythingFilter.html":{},"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserResponseDto.html":{},"classes/EmailService.html":{},"classes/ForgotPasswordDto.html":{},"classes/GetProfileResponseDto.html":{},"classes/LoginDto.html":{},"classes/Migration20250730220636.html":{},"classes/PasswordResetEmailConsumer.html":{},"classes/RefreshTokenDto.html":{},"classes/ResetPasswordDto.html":{},"classes/UpdateProfileDto.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AppRedisModule.html":{},"injectables/AppRedisService.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/AuthResponseDto.html":{},"injectables/AuthService.html":{},"classes/BaseEntity.html":{},"classes/CatchEverythingFilter.html":{},"classes/ChangePasswordDto.html":{},"injectables/CloudinaryService.html":{},"injectables/CreateUserCommand.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserResponseDto.html":{},"modules/EmailModule.html":{},"classes/EmailService.html":{},"classes/ForgotPasswordDto.html":{},"classes/GetProfileResponseDto.html":{},"modules/HttpClientModule.html":{},"injectables/HttpClientService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"classes/Migration20250730220636.html":{},"injectables/MorganMiddleware.html":{},"classes/PasswordResetEmailConsumer.html":{},"modules/PaymentModule.html":{},"classes/RefreshTokenDto.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/RequestContextMiddleware.html":{},"classes/ResetPasswordDto.html":{},"guards/RoleGuard.html":{},"injectables/S3Service.html":{},"injectables/SchemaService.html":{},"modules/StorageModule.html":{},"injectables/StripeService.html":{},"injectables/SuccessResponseInterceptor.html":{},"classes/UpdateProfileDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/UsersSubscriber.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":398,"title":{},"body":{"classes/AuthResponseDto.html":{},"classes/BaseEntity.html":{},"classes/CatchEverythingFilter.html":{},"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserResponseDto.html":{},"classes/EmailService.html":{},"classes/ForgotPasswordDto.html":{},"classes/GetProfileResponseDto.html":{},"classes/LoginDto.html":{},"classes/Migration20250730220636.html":{},"classes/PasswordResetEmailConsumer.html":{},"classes/RefreshTokenDto.html":{},"classes/ResetPasswordDto.html":{},"classes/UpdateProfileDto.html":{},"overview.html":{}}}],["cleaned",{"_index":842,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["client.module.ts",{"_index":913,"title":{},"body":{"modules/HttpClientModule.html":{}}}],["client.service",{"_index":917,"title":{},"body":{"modules/HttpClientModule.html":{}}}],["client.service.ts",{"_index":918,"title":{},"body":{"injectables/HttpClientService.html":{},"coverage.html":{}}}],["client.service.ts:10",{"_index":930,"title":{},"body":{"injectables/HttpClientService.html":{}}}],["client.service.ts:11",{"_index":924,"title":{},"body":{"injectables/HttpClientService.html":{}}}],["client.service.ts:21",{"_index":927,"title":{},"body":{"injectables/HttpClientService.html":{}}}],["client/http",{"_index":912,"title":{},"body":{"modules/HttpClientModule.html":{},"injectables/HttpClientService.html":{},"coverage.html":{}}}],["cloud_name",{"_index":699,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["cloudinary",{"_index":687,"title":{},"body":{"injectables/CloudinaryService.html":{},"interfaces/IStrorageService.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{}}}],["cloudinary.config",{"_index":698,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["cloudinary.service",{"_index":1343,"title":{},"body":{"modules/StorageModule.html":{}}}],["cloudinary.uploader.upload_stream",{"_index":713,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["cloudinaryservice",{"_index":676,"title":{"injectables/CloudinaryService.html":{}},"body":{"injectables/CloudinaryService.html":{},"modules/StorageModule.html":{},"coverage.html":{}}}],["cloudinaryservice(configservice",{"_index":1358,"title":{},"body":{"modules/StorageModule.html":{}}}],["cloudinaryservice.name",{"_index":710,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["cluster_appmodule",{"_index":60,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":62,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":61,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appredismodule",{"_index":156,"title":{},"body":{"modules/AppRedisModule.html":{},"overview.html":{}}}],["cluster_appredismodule_exports",{"_index":157,"title":{},"body":{"modules/AppRedisModule.html":{},"overview.html":{}}}],["cluster_appredismodule_providers",{"_index":158,"title":{},"body":{"modules/AppRedisModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":355,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":358,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":356,"title":{},"body":{"modules/AuthModule.html":{}}}],["cluster_authmodule_providers",{"_index":357,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_emailmodule",{"_index":859,"title":{},"body":{"modules/EmailModule.html":{},"overview.html":{}}}],["cluster_emailmodule_exports",{"_index":860,"title":{},"body":{"modules/EmailModule.html":{},"overview.html":{}}}],["cluster_httpclientmodule",{"_index":907,"title":{},"body":{"modules/HttpClientModule.html":{},"overview.html":{}}}],["cluster_httpclientmodule_exports",{"_index":908,"title":{},"body":{"modules/HttpClientModule.html":{},"overview.html":{}}}],["cluster_httpclientmodule_providers",{"_index":909,"title":{},"body":{"modules/HttpClientModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":1487,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_exports",{"_index":1488,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_imports",{"_index":1489,"title":{},"body":{"modules/UsersModule.html":{}}}],["cluster_usersmodule_providers",{"_index":1490,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["code",{"_index":808,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/Migration20250730220636.html":{},"entities/User.html":{}}}],["column",{"_index":1083,"title":{},"body":{"classes/Migration20250730220636.html":{}}}],["command",{"_index":763,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["commander",{"_index":764,"title":{},"body":{"injectables/CreateUserCommand.html":{},"dependencies.html":{}}}],["commandrunner",{"_index":729,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["commands/create",{"_index":113,"title":{},"body":{"modules/AppModule.html":{}}}],["comment",{"_index":548,"title":{},"body":{"classes/BaseEntity.html":{},"classes/Migration20250730220636.html":{},"entities/User.html":{}}}],["common/constants",{"_index":376,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CreateUserCommand.html":{},"modules/EmailModule.html":{},"classes/PasswordResetEmailConsumer.html":{},"modules/PaymentModule.html":{},"injectables/SchemaService.html":{},"modules/StorageModule.html":{},"injectables/StripeService.html":{}}}],["common/entities/base.entity",{"_index":1435,"title":{},"body":{"entities/User.html":{}}}],["common/enums",{"_index":695,"title":{},"body":{"injectables/CloudinaryService.html":{},"injectables/CreateUserCommand.html":{},"classes/CreateUserDto.html":{},"interfaces/IStrorageService.html":{},"classes/PasswordResetEmailConsumer.html":{},"modules/PaymentModule.html":{},"injectables/S3Service.html":{},"modules/StorageModule.html":{},"entities/User.html":{}}}],["common/interfaces/api",{"_index":326,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["common/middlewares/morgan.middleware",{"_index":94,"title":{},"body":{"modules/AppModule.html":{}}}],["common/middlewares/request",{"_index":116,"title":{},"body":{"modules/AppModule.html":{}}}],["common/utils/user.util",{"_index":1437,"title":{},"body":{"entities/User.html":{},"injectables/UsersSubscriber.html":{}}}],["compare",{"_index":1006,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["compodoc/compodoc",{"_index":1637,"title":{},"body":{"dependencies.html":{}}}],["compositepropagator",{"_index":1796,"title":{},"body":{"miscellaneous/variables.html":{}}}],["concurrency",{"_index":1160,"title":{},"body":{"classes/PasswordResetEmailConsumer.html":{}}}],["cond",{"_index":570,"title":{},"body":{"classes/BaseEntity.html":{}}}],["config",{"_index":169,"title":{},"body":{"modules/AppRedisModule.html":{},"modules/StorageModule.html":{}}}],["config/index",{"_index":87,"title":{},"body":{"modules/AppModule.html":{}}}],["config/mikro",{"_index":119,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule",{"_index":88,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule.forroot",{"_index":121,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":89,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRedisModule.html":{},"injectables/AppRedisService.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CloudinaryService.html":{},"modules/EmailModule.html":{},"injectables/JwtStrategy.html":{},"modules/PaymentModule.html":{},"injectables/S3Service.html":{},"injectables/SchemaService.html":{},"modules/StorageModule.html":{},"injectables/StripeService.html":{},"injectables/UsersSubscriber.html":{}}}],["configservice.get",{"_index":1353,"title":{},"body":{"modules/StorageModule.html":{}}}],["configservice.get('auth.jwt.expiresin",{"_index":385,"title":{},"body":{"modules/AuthModule.html":{}}}],["configservice.get('auth.jwt.secret",{"_index":382,"title":{},"body":{"modules/AuthModule.html":{}}}],["configservice.get('aws.s3.accesskeyid",{"_index":1351,"title":{},"body":{"modules/StorageModule.html":{}}}],["configservice.get('aws.s3.region",{"_index":1355,"title":{},"body":{"modules/StorageModule.html":{}}}],["configservice.getorthrow",{"_index":1191,"title":{},"body":{"modules/PaymentModule.html":{}}}],["configservice.getorthrow('auth.jwt.secret",{"_index":1032,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["configservice.getorthrow('driver.payment",{"_index":1200,"title":{},"body":{"modules/PaymentModule.html":{}}}],["configservice.getorthrow('driver.storage",{"_index":1356,"title":{},"body":{"modules/StorageModule.html":{}}}],["configservice.getorthrow('redis.namespace",{"_index":171,"title":{},"body":{"modules/AppRedisModule.html":{}}}],["configservice.getorthrow('redis.url",{"_index":132,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRedisModule.html":{}}}],["configservice.getorthrow('smtp.auth.pass",{"_index":878,"title":{},"body":{"modules/EmailModule.html":{}}}],["configservice.getorthrow('smtp.auth.user",{"_index":877,"title":{},"body":{"modules/EmailModule.html":{}}}],["configservice.getorthrow('smtp.host",{"_index":872,"title":{},"body":{"modules/EmailModule.html":{}}}],["configservice.getorthrow('smtp.port",{"_index":874,"title":{},"body":{"modules/EmailModule.html":{}}}],["configservice.getorthrow('smtp.secure",{"_index":876,"title":{},"body":{"modules/EmailModule.html":{}}}],["configservice.getorthrow('stripe.secretkey",{"_index":1187,"title":{},"body":{"modules/PaymentModule.html":{}}}],["configuration",{"_index":86,"title":{},"body":{"modules/AppModule.html":{}}}],["configure",{"_index":73,"title":{},"body":{"modules/AppModule.html":{}}}],["configure(consumer",{"_index":74,"title":{},"body":{"modules/AppModule.html":{}}}],["confirmation",{"_index":652,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/ResetPasswordDto.html":{}}}],["confirmpassword",{"_index":353,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ChangePasswordDto.html":{},"classes/ResetPasswordDto.html":{},"injectables/UsersService.html":{}}}],["conflictexception",{"_index":1517,"title":{},"body":{"injectables/UsersService.html":{}}}],["conflictexception('user",{"_index":1526,"title":{},"body":{"injectables/UsersService.html":{}}}],["connect",{"_index":1727,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["connection",{"_index":130,"title":{},"body":{"modules/AppModule.html":{}}}],["console.error",{"_index":784,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["console.log('prometheus",{"_index":1804,"title":{},"body":{"miscellaneous/variables.html":{}}}],["console.log(chalk.green.bold",{"_index":782,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["const",{"_index":236,"title":{},"body":{"injectables/AppRedisService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CatchEverythingFilter.html":{},"injectables/CloudinaryService.html":{},"injectables/CreateUserCommand.html":{},"classes/CreateUserDto.html":{},"injectables/HttpClientService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/MorganMiddleware.html":{},"classes/PasswordResetEmailConsumer.html":{},"modules/PaymentModule.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"guards/RoleGuard.html":{},"injectables/S3Service.html":{},"injectables/SchemaService.html":{},"modules/StorageModule.html":{},"injectables/StripeService.html":{},"injectables/SuccessResponseInterceptor.html":{},"classes/UpdateProfileDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/UsersSubscriber.html":{}}}],["constraint",{"_index":1080,"title":{},"body":{"classes/Migration20250730220636.html":{}}}],["constructor",{"_index":183,"title":{},"body":{"injectables/AppRedisService.html":{},"injectables/AuthService.html":{},"classes/CatchEverythingFilter.html":{},"injectables/CloudinaryService.html":{},"injectables/CreateUserCommand.html":{},"classes/EmailService.html":{},"injectables/HttpClientService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/MorganMiddleware.html":{},"classes/PasswordResetEmailConsumer.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/RequestContextMiddleware.html":{},"guards/RoleGuard.html":{},"injectables/S3Service.html":{},"injectables/SchemaService.html":{},"injectables/StripeService.html":{},"injectables/UsersService.html":{},"injectables/UsersSubscriber.html":{}}}],["constructor(@inject(logger",{"_index":1126,"title":{},"body":{"injectables/MorganMiddleware.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/SuccessResponseInterceptor.html":{}}}],["constructor(appredisservice",{"_index":419,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["constructor(authservice",{"_index":1037,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["constructor(configservice",{"_index":679,"title":{},"body":{"injectables/CloudinaryService.html":{},"injectables/JwtStrategy.html":{},"injectables/S3Service.html":{},"injectables/StripeService.html":{}}}],["constructor(em",{"_index":736,"title":{},"body":{"injectables/CreateUserCommand.html":{},"injectables/UsersSubscriber.html":{}}}],["constructor(emailservice",{"_index":1148,"title":{},"body":{"classes/PasswordResetEmailConsumer.html":{}}}],["constructor(httpadapterhost",{"_index":581,"title":{},"body":{"classes/CatchEverythingFilter.html":{}}}],["constructor(httpservice",{"_index":922,"title":{},"body":{"injectables/HttpClientService.html":{}}}],["constructor(loggerservice",{"_index":184,"title":{},"body":{"injectables/AppRedisService.html":{},"injectables/MorganMiddleware.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{}}}],["constructor(mailerservice",{"_index":888,"title":{},"body":{"classes/EmailService.html":{}}}],["constructor(orm",{"_index":1242,"title":{},"body":{"injectables/RequestContextMiddleware.html":{},"injectables/SchemaService.html":{}}}],["constructor(private",{"_index":138,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/JwtAuthGuard.html":{},"injectables/RequestContextMiddleware.html":{},"guards/RoleGuard.html":{},"controllers/UsersController.html":{}}}],["constructor(reflector",{"_index":970,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/RoleGuard.html":{}}}],["consumer",{"_index":79,"title":{},"body":{"modules/AppModule.html":{}}}],["consumer.apply(morganmiddleware).forroutes",{"_index":153,"title":{},"body":{"modules/AppModule.html":{}}}],["consumer.apply(requestcontextmiddleware).forroutes",{"_index":154,"title":{},"body":{"modules/AppModule.html":{}}}],["contenttype",{"_index":1311,"title":{},"body":{"injectables/S3Service.html":{}}}],["context",{"_index":893,"title":{},"body":{"classes/EmailService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"guards/RoleGuard.html":{},"injectables/SuccessResponseInterceptor.html":{}}}],["context.getclass",{"_index":984,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["context.gethandler",{"_index":983,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/RoleGuard.html":{}}}],["context.gettype",{"_index":1223,"title":{},"body":{"injectables/RequestBodyAndResponseInterceptor.html":{},"guards/RoleGuard.html":{},"injectables/SuccessResponseInterceptor.html":{}}}],["context.middleware",{"_index":117,"title":{},"body":{"modules/AppModule.html":{}}}],["context.middleware.ts",{"_index":1241,"title":{},"body":{"injectables/RequestContextMiddleware.html":{},"coverage.html":{}}}],["context.middleware.ts:6",{"_index":1244,"title":{},"body":{"injectables/RequestContextMiddleware.html":{}}}],["context.middleware.ts:9",{"_index":1247,"title":{},"body":{"injectables/RequestContextMiddleware.html":{}}}],["context.switchtohttp().getrequest",{"_index":1237,"title":{},"body":{"injectables/RequestBodyAndResponseInterceptor.html":{},"guards/RoleGuard.html":{},"injectables/SuccessResponseInterceptor.html":{}}}],["context.switchtohttp().getresponse",{"_index":1228,"title":{},"body":{"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/SuccessResponseInterceptor.html":{}}}],["contextmanager",{"_index":1793,"title":{},"body":{"miscellaneous/variables.html":{}}}],["contexttype",{"_index":1222,"title":{},"body":{"injectables/RequestBodyAndResponseInterceptor.html":{},"guards/RoleGuard.html":{},"injectables/SuccessResponseInterceptor.html":{}}}],["controller",{"_index":24,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/JwtStrategy.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":329,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('users",{"_index":1471,"title":{},"body":{"controllers/UsersController.html":{}}}],["controllers",{"_index":26,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"modules/EmailModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["country",{"_index":793,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/Migration20250730220636.html":{},"entities/User.html":{}}}],["country_code",{"_index":1072,"title":{},"body":{"classes/Migration20250730220636.html":{}}}],["countrycode",{"_index":794,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateProfileDto.html":{},"entities/User.html":{}}}],["coverage",{"_index":1584,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":771,"title":{},"body":{"injectables/CreateUserCommand.html":{},"classes/Migration20250730220636.html":{},"classes/UpdateProfileDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["create(@body",{"_index":1473,"title":{},"body":{"controllers/UsersController.html":{}}}],["create(user",{"_index":1449,"title":{},"body":{"controllers/UsersController.html":{}}}],["create(userdata",{"_index":1505,"title":{},"body":{"injectables/UsersService.html":{}}}],["create:user",{"_index":770,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["createcheckoutsession",{"_index":944,"title":{},"body":{"interfaces/IPaymentService.html":{},"injectables/StripeService.html":{}}}],["createcheckoutsession(params",{"_index":946,"title":{},"body":{"interfaces/IPaymentService.html":{},"injectables/StripeService.html":{}}}],["created",{"_index":783,"title":{},"body":{"injectables/CreateUserCommand.html":{},"classes/CreateUserResponseDto.html":{},"classes/GetProfileResponseDto.html":{},"injectables/StripeService.html":{},"controllers/UsersController.html":{}}}],["created_at",{"_index":1061,"title":{},"body":{"classes/Migration20250730220636.html":{}}}],["createdat",{"_index":540,"title":{},"body":{"classes/BaseEntity.html":{}}}],["createpaymentintent",{"_index":945,"title":{},"body":{"interfaces/IPaymentService.html":{},"injectables/StripeService.html":{}}}],["createpaymentintent(params",{"_index":951,"title":{},"body":{"interfaces/IPaymentService.html":{},"injectables/StripeService.html":{}}}],["createpresignedurlwithoutclient",{"_index":956,"title":{},"body":{"interfaces/IStrorageService.html":{},"injectables/S3Service.html":{}}}],["createpresignedurlwithoutclient(key",{"_index":957,"title":{},"body":{"interfaces/IStrorageService.html":{},"injectables/S3Service.html":{}}}],["createusercommand",{"_index":66,"title":{"injectables/CreateUserCommand.html":{}},"body":{"modules/AppModule.html":{},"injectables/CreateUserCommand.html":{},"coverage.html":{},"overview.html":{}}}],["createuserdto",{"_index":787,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/CreateUserDto.html":{},"classes/UpdateProfileDto.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["createuserresponsedto",{"_index":849,"title":{"classes/CreateUserResponseDto.html":{}},"body":{"classes/CreateUserResponseDto.html":{},"classes/GetProfileResponseDto.html":{},"coverage.html":{}}}],["creating",{"_index":1377,"title":{},"body":{"injectables/StripeService.html":{}}}],["creation",{"_index":550,"title":{},"body":{"classes/BaseEntity.html":{},"classes/Migration20250730220636.html":{}}}],["credentials",{"_index":1045,"title":{},"body":{"injectables/LocalStrategy.html":{},"injectables/S3Service.html":{},"modules/StorageModule.html":{}}}],["ctx",{"_index":611,"title":{},"body":{"classes/CatchEverythingFilter.html":{}}}],["ctx.getrequest",{"_index":613,"title":{},"body":{"classes/CatchEverythingFilter.html":{}}}],["ctx.getresponse",{"_index":615,"title":{},"body":{"classes/CatchEverythingFilter.html":{}}}],["current_timestamp",{"_index":547,"title":{},"body":{"classes/BaseEntity.html":{},"classes/Migration20250730220636.html":{}}}],["currently",{"_index":1019,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["customalphabet",{"_index":768,"title":{},"body":{"injectables/CreateUserCommand.html":{},"injectables/S3Service.html":{}}}],["customalphabet(hexadecimallowercase",{"_index":1280,"title":{},"body":{"injectables/S3Service.html":{}}}],["customalphabet(password_character_set",{"_index":762,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["data",{"_index":11,"title":{},"body":{"interfaces/ApiResponse.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/CloudinaryService.html":{},"classes/CreateUserResponseDto.html":{},"classes/GetProfileResponseDto.html":{},"injectables/HttpClientService.html":{},"interfaces/IStrorageService.html":{},"classes/PasswordResetEmailConsumer.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/S3Service.html":{},"injectables/StripeService.html":{},"injectables/SuccessResponseInterceptor.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["data.id",{"_index":1549,"title":{},"body":{"injectables/UsersService.html":{}}}],["data.object",{"_index":1388,"title":{},"body":{"injectables/StripeService.html":{}}}],["data?.email",{"_index":1164,"title":{},"body":{"classes/PasswordResetEmailConsumer.html":{}}}],["data?.firstname",{"_index":1169,"title":{},"body":{"classes/PasswordResetEmailConsumer.html":{}}}],["data?.reseturl",{"_index":1168,"title":{},"body":{"classes/PasswordResetEmailConsumer.html":{}}}],["database",{"_index":1336,"title":{},"body":{"injectables/SchemaService.html":{}}}],["date",{"_index":543,"title":{},"body":{"classes/BaseEntity.html":{},"entities/User.html":{}}}],["date().toisostring",{"_index":640,"title":{},"body":{"classes/CatchEverythingFilter.html":{}}}],["declarations",{"_index":56,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRedisModule.html":{},"modules/AuthModule.html":{},"modules/EmailModule.html":{},"modules/HttpClientModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["decorators",{"_index":30,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/AuthResponseDto.html":{},"classes/BaseEntity.html":{},"classes/ChangePasswordDto.html":{},"injectables/CreateUserCommand.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserResponseDto.html":{},"classes/ForgotPasswordDto.html":{},"classes/GetProfileResponseDto.html":{},"classes/LoginDto.html":{},"modules/PaymentModule.html":{},"classes/RefreshTokenDto.html":{},"classes/ResetPasswordDto.html":{},"guards/RoleGuard.html":{},"injectables/StripeService.html":{},"entities/User.html":{},"controllers/UsersController.html":{}}}],["decorators/public.decorator",{"_index":318,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtAuthGuard.html":{}}}],["decrement",{"_index":177,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["decrement(key",{"_index":188,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["default",{"_index":218,"title":{},"body":{"injectables/AppRedisService.html":{},"classes/BaseEntity.html":{},"classes/CatchEverythingFilter.html":{},"injectables/CreateUserCommand.html":{},"injectables/HttpClientService.html":{},"classes/Migration20250730220636.html":{},"injectables/S3Service.html":{},"injectables/SchemaService.html":{},"entities/User.html":{},"miscellaneous/variables.html":{}}}],["defaultjoboptions",{"_index":387,"title":{},"body":{"modules/AuthModule.html":{},"modules/PaymentModule.html":{}}}],["defaultraw",{"_index":546,"title":{},"body":{"classes/BaseEntity.html":{}}}],["defaults",{"_index":879,"title":{},"body":{"modules/EmailModule.html":{}}}],["defined",{"_index":36,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppRedisService.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthResponseDto.html":{},"injectables/AuthService.html":{},"classes/BaseEntity.html":{},"classes/CatchEverythingFilter.html":{},"classes/ChangePasswordDto.html":{},"injectables/CloudinaryService.html":{},"injectables/CreateUserCommand.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserResponseDto.html":{},"classes/EmailService.html":{},"classes/ForgotPasswordDto.html":{},"classes/GetProfileResponseDto.html":{},"injectables/HttpClientService.html":{},"interfaces/IPaymentService.html":{},"interfaces/IStrorageService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"classes/Migration20250730220636.html":{},"injectables/MorganMiddleware.html":{},"classes/PasswordResetEmailConsumer.html":{},"modules/PaymentModule.html":{},"classes/RefreshTokenDto.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/RequestContextMiddleware.html":{},"classes/ResetPasswordDto.html":{},"guards/RoleGuard.html":{},"injectables/S3Service.html":{},"injectables/SchemaService.html":{},"modules/StorageModule.html":{},"injectables/StripeService.html":{},"injectables/SuccessResponseInterceptor.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/UsersSubscriber.html":{}}}],["delay",{"_index":392,"title":{},"body":{"modules/AuthModule.html":{},"modules/PaymentModule.html":{}}}],["delete",{"_index":178,"title":{},"body":{"injectables/AppRedisService.html":{},"classes/BaseEntity.html":{},"classes/Migration20250730220636.html":{},"miscellaneous/enumerations.html":{}}}],["delete(key",{"_index":192,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["deleted",{"_index":198,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["deleted_at",{"_index":1060,"title":{},"body":{"classes/Migration20250730220636.html":{}}}],["deletedat",{"_index":541,"title":{},"body":{"classes/BaseEntity.html":{}}}],["deletemany",{"_index":179,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["deletemany(keys",{"_index":201,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["deleting",{"_index":268,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["dependencies",{"_index":54,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AppRedisModule.html":{},"modules/AuthModule.html":{},"modules/EmailModule.html":{},"modules/HttpClientModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":194,"title":{},"body":{"injectables/AppRedisService.html":{},"controllers/AuthController.html":{},"classes/AuthResponseDto.html":{},"classes/ChangePasswordDto.html":{},"injectables/CreateUserCommand.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserResponseDto.html":{},"classes/GetProfileResponseDto.html":{},"classes/LoginDto.html":{},"classes/RefreshTokenDto.html":{},"classes/ResetPasswordDto.html":{},"index.html":{},"properties.html":{}}}],["details",{"_index":1014,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["development",{"_index":1754,"title":{},"body":{"index.html":{}}}],["dictionary",{"_index":1285,"title":{},"body":{"injectables/S3Service.html":{},"dependencies.html":{}}}],["dir",{"_index":882,"title":{},"body":{"modules/EmailModule.html":{}}}],["disable",{"_index":479,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["document",{"_index":1008,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["documentation",{"_index":1585,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["doe",{"_index":837,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["doe'})@isstring()@isnotempty",{"_index":815,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["don't",{"_index":1009,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["driver",{"_index":1199,"title":{},"body":{"modules/PaymentModule.html":{},"modules/StorageModule.html":{}}}],["dto",{"_index":322,"title":{},"body":{"controllers/AuthController.html":{}}}],["dto.ts",{"_index":1204,"title":{},"body":{"classes/RefreshTokenDto.html":{},"coverage.html":{}}}],["dto.ts:11",{"_index":1207,"title":{},"body":{"classes/RefreshTokenDto.html":{}}}],["dto/change",{"_index":1467,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dto/create",{"_index":1466,"title":{},"body":{"controllers/UsersController.html":{}}}],["dto/forgot",{"_index":323,"title":{},"body":{"controllers/AuthController.html":{}}}],["dto/login.dto",{"_index":319,"title":{},"body":{"controllers/AuthController.html":{}}}],["dto/refresh",{"_index":320,"title":{},"body":{"controllers/AuthController.html":{}}}],["dto/reset",{"_index":325,"title":{},"body":{"controllers/AuthController.html":{}}}],["dto/update",{"_index":1468,"title":{},"body":{"controllers/UsersController.html":{}}}],["during",{"_index":1015,"title":{},"body":{"injectables/JwtStrategy.html":{},"classes/RefreshTokenDto.html":{}}}],["dynamicmodule",{"_index":1176,"title":{},"body":{"modules/PaymentModule.html":{},"modules/StorageModule.html":{}}}],["e",{"_index":742,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["e.g",{"_index":666,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/ResetPasswordDto.html":{}}}],["e2e",{"_index":1763,"title":{},"body":{"index.html":{}}}],["elsewhere",{"_index":1012,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["em",{"_index":739,"title":{},"body":{"injectables/CreateUserCommand.html":{},"injectables/UsersSubscriber.html":{}}}],["em.geteventmanager().registersubscriber(this",{"_index":1573,"title":{},"body":{"injectables/UsersSubscriber.html":{}}}],["email",{"_index":347,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CreateUserCommand.html":{},"classes/CreateUserDto.html":{},"classes/EmailService.html":{},"classes/ForgotPasswordDto.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"classes/Migration20250730220636.html":{},"classes/PasswordResetEmailConsumer.html":{},"classes/UpdateProfileDto.html":{},"entities/User.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["email.service",{"_index":863,"title":{},"body":{"modules/EmailModule.html":{}}}],["email_from_name",{"_index":866,"title":{},"body":{"modules/EmailModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["emailmodule",{"_index":858,"title":{"modules/EmailModule.html":{}},"body":{"modules/EmailModule.html":{},"modules.html":{},"overview.html":{}}}],["emailregex",{"_index":774,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["emailregex.test(email",{"_index":776,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["emailservice",{"_index":861,"title":{"classes/EmailService.html":{}},"body":{"modules/EmailModule.html":{},"classes/EmailService.html":{},"classes/PasswordResetEmailConsumer.html":{},"coverage.html":{},"overview.html":{}}}],["emailsubjectenum",{"_index":1157,"title":{},"body":{"classes/PasswordResetEmailConsumer.html":{},"miscellaneous/enumerations.html":{}}}],["emailsubjectenum.password_reset",{"_index":1166,"title":{},"body":{"classes/PasswordResetEmailConsumer.html":{}}}],["emailtemplateenum",{"_index":1158,"title":{},"body":{"classes/PasswordResetEmailConsumer.html":{},"miscellaneous/enumerations.html":{}}}],["emailtemplateenum.password_reset",{"_index":1167,"title":{},"body":{"classes/PasswordResetEmailConsumer.html":{}}}],["enforcing",{"_index":1002,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["entities",{"_index":1407,"title":{},"body":{"entities/User.html":{},"overview.html":{}}}],["entities/user.entity",{"_index":854,"title":{},"body":{"classes/CreateUserResponseDto.html":{},"classes/GetProfileResponseDto.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/UsersSubscriber.html":{}}}],["entity",{"_index":1406,"title":{"entities/User.html":{}},"body":{"entities/User.html":{},"coverage.html":{}}}],["entitydata",{"_index":1514,"title":{},"body":{"injectables/UsersService.html":{}}}],["entitymanager",{"_index":737,"title":{},"body":{"injectables/CreateUserCommand.html":{},"injectables/UsersSubscriber.html":{}}}],["entityname",{"_index":1565,"title":{},"body":{"injectables/UsersSubscriber.html":{}}}],["entityrepository",{"_index":1501,"title":{},"body":{"injectables/UsersService.html":{}}}],["enum",{"_index":824,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/User.html":{}}}],["enum({items",{"_index":1430,"title":{},"body":{"entities/User.html":{}}}],["enumerations",{"_index":1717,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["err",{"_index":978,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["error",{"_index":501,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CloudinaryService.html":{},"injectables/CreateUserCommand.html":{},"injectables/JwtAuthGuard.html":{},"miscellaneous/typealiases.html":{}}}],["error('invalid",{"_index":777,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["error(`unsupported",{"_index":1361,"title":{},"body":{"modules/StorageModule.html":{}}}],["error.message",{"_index":503,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CreateUserCommand.html":{}}}],["error.stack",{"_index":720,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["error=${error.message",{"_index":719,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["errorcode",{"_index":638,"title":{},"body":{"classes/CatchEverythingFilter.html":{},"interfaces/ErrorResponse.html":{}}}],["errorlog",{"_index":168,"title":{},"body":{"modules/AppRedisModule.html":{}}}],["errormessage",{"_index":635,"title":{},"body":{"classes/CatchEverythingFilter.html":{}}}],["errorobject",{"_index":986,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["errorresponse",{"_index":607,"title":{"interfaces/ErrorResponse.html":{}},"body":{"classes/CatchEverythingFilter.html":{},"interfaces/ErrorResponse.html":{},"coverage.html":{}}}],["eslint",{"_index":478,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["eslint/no",{"_index":483,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["event",{"_index":1395,"title":{},"body":{"injectables/StripeService.html":{}}}],["eventargs",{"_index":1560,"title":{},"body":{"injectables/UsersSubscriber.html":{}}}],["eventid",{"_index":1391,"title":{},"body":{"injectables/StripeService.html":{}}}],["eventsubscriber",{"_index":1572,"title":{},"body":{"injectables/UsersSubscriber.html":{}}}],["evt",{"_index":1372,"title":{},"body":{"injectables/StripeService.html":{}}}],["evt?.id",{"_index":1392,"title":{},"body":{"injectables/StripeService.html":{}}}],["ex",{"_index":256,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["example",{"_index":403,"title":{},"body":{"classes/AuthResponseDto.html":{},"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserResponseDto.html":{},"classes/ForgotPasswordDto.html":{},"classes/GetProfileResponseDto.html":{},"classes/LoginDto.html":{},"classes/RefreshTokenDto.html":{},"classes/ResetPasswordDto.html":{},"index.html":{}}}],["exception",{"_index":590,"title":{},"body":{"classes/CatchEverythingFilter.html":{}}}],["exception.getresponse",{"_index":619,"title":{},"body":{"classes/CatchEverythingFilter.html":{}}}],["exception.getstatus",{"_index":644,"title":{},"body":{"classes/CatchEverythingFilter.html":{}}}],["exception.message",{"_index":621,"title":{},"body":{"classes/CatchEverythingFilter.html":{}}}],["exception.response?.status",{"_index":646,"title":{},"body":{"classes/CatchEverythingFilter.html":{}}}],["exceptionfilter",{"_index":574,"title":{},"body":{"classes/CatchEverythingFilter.html":{}}}],["exceptionresponse",{"_index":618,"title":{},"body":{"classes/CatchEverythingFilter.html":{}}}],["exceptionresponse?.error",{"_index":627,"title":{},"body":{"classes/CatchEverythingFilter.html":{}}}],["exceptionresponse?.message",{"_index":620,"title":{},"body":{"classes/CatchEverythingFilter.html":{}}}],["executioncontext",{"_index":974,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"guards/RoleGuard.html":{},"injectables/SuccessResponseInterceptor.html":{}}}],["exist",{"_index":225,"title":{},"body":{"injectables/AppRedisService.html":{},"classes/CatchEverythingFilter.html":{}}}],["existence",{"_index":265,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["exists",{"_index":180,"title":{},"body":{"injectables/AppRedisService.html":{},"injectables/UsersService.html":{}}}],["exists(key",{"_index":205,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["expiresin",{"_index":384,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/S3Service.html":{}}}],["exponential",{"_index":391,"title":{},"body":{"modules/AuthModule.html":{},"modules/PaymentModule.html":{}}}],["export",{"_index":21,"title":{},"body":{"interfaces/ApiResponse.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AppRedisModule.html":{},"injectables/AppRedisService.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/AuthResponseDto.html":{},"injectables/AuthService.html":{},"classes/BaseEntity.html":{},"classes/CatchEverythingFilter.html":{},"classes/ChangePasswordDto.html":{},"injectables/CloudinaryService.html":{},"injectables/CreateUserCommand.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserResponseDto.html":{},"modules/EmailModule.html":{},"classes/EmailService.html":{},"interfaces/ErrorResponse.html":{},"classes/ForgotPasswordDto.html":{},"classes/GetProfileResponseDto.html":{},"modules/HttpClientModule.html":{},"injectables/HttpClientService.html":{},"interfaces/IPaymentService.html":{},"interfaces/IStrorageService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"classes/Migration20250730220636.html":{},"injectables/MorganMiddleware.html":{},"classes/PasswordResetEmailConsumer.html":{},"modules/PaymentModule.html":{},"classes/RefreshTokenDto.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/RequestContextMiddleware.html":{},"classes/ResetPasswordDto.html":{},"guards/RoleGuard.html":{},"injectables/S3Service.html":{},"injectables/SchemaService.html":{},"modules/StorageModule.html":{},"injectables/StripeService.html":{},"injectables/SuccessResponseInterceptor.html":{},"classes/UpdateProfileDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/UsersSubscriber.html":{}}}],["exporter",{"_index":1805,"title":{},"body":{"miscellaneous/variables.html":{}}}],["exports",{"_index":59,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRedisModule.html":{},"modules/AuthModule.html":{},"modules/EmailModule.html":{},"modules/HttpClientModule.html":{},"modules/PaymentModule.html":{},"modules/StorageModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["express",{"_index":100,"title":{},"body":{"modules/AppModule.html":{},"injectables/RequestContextMiddleware.html":{},"dependencies.html":{}}}],["expressadapter",{"_index":111,"title":{},"body":{"modules/AppModule.html":{}}}],["extends",{"_index":728,"title":{},"body":{"injectables/CreateUserCommand.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/Migration20250730220636.html":{},"classes/PasswordResetEmailConsumer.html":{},"classes/UpdateProfileDto.html":{},"entities/User.html":{}}}],["extract",{"_index":999,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt",{"_index":1024,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":1029,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["eyjhbgcioijiuzi1niisinr5cci6ikpxvcj9",{"_index":404,"title":{},"body":{"classes/AuthResponseDto.html":{},"classes/RefreshTokenDto.html":{},"classes/ResetPasswordDto.html":{}}}],["eyjhbgcioijiuzi1niisinr5cci6ikpxvcj9'})@isstring()@isnotempty",{"_index":1206,"title":{},"body":{"classes/RefreshTokenDto.html":{}}}],["eyjhbgcioijiuzi1niisinr5cci6ikpxvcj9...'})@isstring()@isjwt()@isnotempty",{"_index":1255,"title":{},"body":{"classes/ResetPasswordDto.html":{}}}],["f",{"_index":747,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["failed",{"_index":718,"title":{},"body":{"injectables/CloudinaryService.html":{},"injectables/CreateUserCommand.html":{}}}],["failhandler",{"_index":473,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/UsersService.html":{}}}],["false",{"_index":223,"title":{},"body":{"injectables/AppRedisService.html":{},"injectables/AuthService.html":{},"injectables/HttpClientService.html":{},"injectables/JwtStrategy.html":{},"classes/Migration20250730220636.html":{},"entities/User.html":{},"injectables/UsersService.html":{}}}],["fetched",{"_index":857,"title":{},"body":{"classes/CreateUserResponseDto.html":{},"classes/GetProfileResponseDto.html":{},"controllers/UsersController.html":{}}}],["file",{"_index":5,"title":{},"body":{"interfaces/ApiResponse.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AppRedisModule.html":{},"injectables/AppRedisService.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/AuthResponseDto.html":{},"injectables/AuthService.html":{},"classes/BaseEntity.html":{},"classes/CatchEverythingFilter.html":{},"classes/ChangePasswordDto.html":{},"injectables/CloudinaryService.html":{},"injectables/CreateUserCommand.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserResponseDto.html":{},"modules/EmailModule.html":{},"classes/EmailService.html":{},"interfaces/ErrorResponse.html":{},"classes/ForgotPasswordDto.html":{},"classes/GetProfileResponseDto.html":{},"modules/HttpClientModule.html":{},"injectables/HttpClientService.html":{},"interfaces/IPaymentService.html":{},"interfaces/IStrorageService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"classes/Migration20250730220636.html":{},"injectables/MorganMiddleware.html":{},"classes/PasswordResetEmailConsumer.html":{},"modules/PaymentModule.html":{},"classes/RefreshTokenDto.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/RequestContextMiddleware.html":{},"classes/ResetPasswordDto.html":{},"guards/RoleGuard.html":{},"injectables/S3Service.html":{},"injectables/SchemaService.html":{},"modules/StorageModule.html":{},"injectables/StripeService.html":{},"injectables/SuccessResponseInterceptor.html":{},"classes/UpdateProfileDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/UsersSubscriber.html":{},"coverage.html":{}}}],["file.buffer",{"_index":1310,"title":{},"body":{"injectables/S3Service.html":{}}}],["file.mimetype",{"_index":1312,"title":{},"body":{"injectables/S3Service.html":{}}}],["filecategory",{"_index":683,"title":{},"body":{"injectables/CloudinaryService.html":{},"interfaces/IStrorageService.html":{},"injectables/S3Service.html":{}}}],["filecategory}/${this.nanoid()}_${file.originalname",{"_index":1306,"title":{},"body":{"injectables/S3Service.html":{}}}],["filename=\"${file.originalname",{"_index":706,"title":{},"body":{"injectables/CloudinaryService.html":{},"injectables/S3Service.html":{}}}],["filter",{"_index":564,"title":{},"body":{"classes/BaseEntity.html":{}}}],["filterquery",{"_index":1509,"title":{},"body":{"injectables/UsersService.html":{}}}],["find",{"_index":626,"title":{},"body":{"classes/CatchEverythingFilter.html":{}}}],["findone",{"_index":1499,"title":{},"body":{"injectables/UsersService.html":{}}}],["findone(query",{"_index":1508,"title":{},"body":{"injectables/UsersService.html":{}}}],["findoneorfailoptions",{"_index":1510,"title":{},"body":{"injectables/UsersService.html":{}}}],["first",{"_index":748,"title":{},"body":{"injectables/CreateUserCommand.html":{},"classes/CreateUserDto.html":{},"classes/Migration20250730220636.html":{},"entities/User.html":{}}}],["first_name",{"_index":1066,"title":{},"body":{"classes/Migration20250730220636.html":{}}}],["firstname",{"_index":523,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CreateUserCommand.html":{},"classes/CreateUserDto.html":{},"classes/PasswordResetEmailConsumer.html":{},"entities/User.html":{}}}],["flags",{"_index":786,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["folder",{"_index":714,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["forbiddenexception",{"_index":603,"title":{},"body":{"classes/CatchEverythingFilter.html":{},"guards/RoleGuard.html":{},"miscellaneous/typealiases.html":{}}}],["forgotpassword",{"_index":279,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["forgotpassword(body",{"_index":283,"title":{},"body":{"controllers/AuthController.html":{}}}],["forgotpassword(email",{"_index":425,"title":{},"body":{"injectables/AuthService.html":{}}}],["forgotpassworddto",{"_index":284,"title":{"classes/ForgotPasswordDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/ForgotPasswordDto.html":{},"coverage.html":{}}}],["form",{"_index":697,"title":{},"body":{"injectables/CloudinaryService.html":{},"interfaces/IStrorageService.html":{},"injectables/S3Service.html":{},"dependencies.html":{}}}],["format",{"_index":778,"title":{},"body":{"injectables/CreateUserCommand.html":{},"injectables/S3Service.html":{},"dependencies.html":{}}}],["formaturl",{"_index":1300,"title":{},"body":{"injectables/S3Service.html":{}}}],["formaturl(signedurlobject",{"_index":1324,"title":{},"body":{"injectables/S3Service.html":{}}}],["forroutes",{"_index":152,"title":{},"body":{"modules/AppModule.html":{}}}],["found",{"_index":252,"title":{},"body":{"injectables/AppRedisService.html":{},"injectables/AuthService.html":{},"classes/CatchEverythingFilter.html":{},"injectables/JwtStrategy.html":{},"injectables/UsersService.html":{}}}],["framework",{"_index":1747,"title":{},"body":{"index.html":{}}}],["fromenv",{"_index":1293,"title":{},"body":{"injectables/S3Service.html":{}}}],["function",{"_index":1123,"title":{},"body":{"injectables/MorganMiddleware.html":{},"coverage.html":{}}}],["functions",{"_index":1732,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["generateslug",{"_index":1603,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["generateslug(text",{"_index":1739,"title":{},"body":{"miscellaneous/functions.html":{}}}],["generator",{"_index":1333,"title":{},"body":{"injectables/SchemaService.html":{}}}],["generator.updateschema",{"_index":1335,"title":{},"body":{"injectables/SchemaService.html":{}}}],["get('profile",{"_index":1477,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('profile')@httpcode(httpstatus.ok)@apioperation({summary",{"_index":1456,"title":{},"body":{"controllers/UsersController.html":{}}}],["get()@httpcode(httpstatus.ok)@public()@apioperation({summary",{"_index":31,"title":{},"body":{"controllers/AppController.html":{}}}],["get(key",{"_index":207,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["geterrorcode",{"_index":576,"title":{},"body":{"classes/CatchEverythingFilter.html":{}}}],["geterrorcode(exception",{"_index":591,"title":{},"body":{"classes/CatchEverythingFilter.html":{}}}],["geterrormessage",{"_index":577,"title":{},"body":{"classes/CatchEverythingFilter.html":{}}}],["geterrormessage(exception",{"_index":594,"title":{},"body":{"classes/CatchEverythingFilter.html":{}}}],["geterrorname",{"_index":578,"title":{},"body":{"classes/CatchEverythingFilter.html":{}}}],["geterrorname(exception",{"_index":596,"title":{},"body":{"classes/CatchEverythingFilter.html":{}}}],["gethello",{"_index":272,"title":{},"body":{"injectables/AppService.html":{}}}],["gethttpstatus",{"_index":579,"title":{},"body":{"classes/CatchEverythingFilter.html":{}}}],["gethttpstatus(exception",{"_index":598,"title":{},"body":{"classes/CatchEverythingFilter.html":{}}}],["getnodeautoinstrumentations",{"_index":1802,"title":{},"body":{"miscellaneous/variables.html":{}}}],["getprofile",{"_index":1444,"title":{},"body":{"controllers/UsersController.html":{}}}],["getprofile(@request",{"_index":1478,"title":{},"body":{"controllers/UsersController.html":{}}}],["getprofile(req",{"_index":1455,"title":{},"body":{"controllers/UsersController.html":{}}}],["getprofileresponsedto",{"_index":855,"title":{"classes/GetProfileResponseDto.html":{}},"body":{"classes/CreateUserResponseDto.html":{},"classes/GetProfileResponseDto.html":{},"coverage.html":{}}}],["getqueuetoken",{"_index":1184,"title":{},"body":{"modules/PaymentModule.html":{}}}],["getqueuetoken(template_queue_name",{"_index":1202,"title":{},"body":{"modules/PaymentModule.html":{}}}],["gets3connectiontoken",{"_index":1347,"title":{},"body":{"modules/StorageModule.html":{}}}],["getsubscribedentities",{"_index":1555,"title":{},"body":{"injectables/UsersSubscriber.html":{}}}],["getting",{"_index":251,"title":{"index.html":{}},"body":{"injectables/AppRedisService.html":{}}}],["global",{"_index":380,"title":{},"body":{"modules/AuthModule.html":{}}}],["golevelup/nestjs",{"_index":104,"title":{},"body":{"modules/AppModule.html":{},"modules/PaymentModule.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"guards/RoleGuard.html":{},"injectables/StripeService.html":{},"injectables/SuccessResponseInterceptor.html":{},"dependencies.html":{}}}],["graph",{"_index":1769,"title":{},"body":{"modules.html":{}}}],["guard",{"_index":1259,"title":{"guards/RoleGuard.html":{}},"body":{"coverage.html":{},"overview.html":{}}}],["guards",{"_index":1261,"title":{},"body":{"guards/RoleGuard.html":{}}}],["guards/jwt",{"_index":373,"title":{},"body":{"modules/AuthModule.html":{}}}],["guards/local",{"_index":314,"title":{},"body":{"controllers/AuthController.html":{}}}],["handledexception",{"_index":586,"title":{},"body":{"classes/CatchEverythingFilter.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["handlepaymentintentsucceeded",{"_index":1364,"title":{},"body":{"injectables/StripeService.html":{}}}],["handlepaymentintentsucceeded(evt",{"_index":1368,"title":{},"body":{"injectables/StripeService.html":{}}}],["handlerequest",{"_index":969,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["handlerequest(err",{"_index":976,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["hash",{"_index":1295,"title":{},"body":{"injectables/S3Service.html":{}}}],["hash.bind(null",{"_index":1321,"title":{},"body":{"injectables/S3Service.html":{}}}],["hashed",{"_index":1104,"title":{},"body":{"classes/Migration20250730220636.html":{},"entities/User.html":{}}}],["hashedpassword",{"_index":536,"title":{},"body":{"injectables/AuthService.html":{}}}],["hashpassword",{"_index":1556,"title":{},"body":{"injectables/UsersSubscriber.html":{}}}],["hashpassword(user",{"_index":1566,"title":{},"body":{"injectables/UsersSubscriber.html":{}}}],["head",{"_index":1725,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["hello",{"_index":274,"title":{},"body":{"injectables/AppService.html":{}}}],["helmet",{"_index":1689,"title":{},"body":{"dependencies.html":{}}}],["here",{"_index":998,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["hexadecimallowercase",{"_index":1284,"title":{},"body":{"injectables/S3Service.html":{}}}],["hooks",{"_index":1659,"title":{},"body":{"dependencies.html":{}}}],["host",{"_index":587,"title":{},"body":{"classes/CatchEverythingFilter.html":{},"modules/EmailModule.html":{}}}],["host.switchtohttp",{"_index":612,"title":{},"body":{"classes/CatchEverythingFilter.html":{}}}],["http",{"_index":916,"title":{},"body":{"modules/HttpClientModule.html":{},"injectables/HttpClientService.html":{},"injectables/MorganMiddleware.html":{},"injectables/S3Service.html":{},"dependencies.html":{}}}],["http.agent",{"_index":928,"title":{},"body":{"injectables/HttpClientService.html":{}}}],["httpadapter",{"_index":609,"title":{},"body":{"classes/CatchEverythingFilter.html":{}}}],["httpadapter.getrequesturl(request",{"_index":617,"title":{},"body":{"classes/CatchEverythingFilter.html":{}}}],["httpadapter.reply(response",{"_index":633,"title":{},"body":{"classes/CatchEverythingFilter.html":{}}}],["httpadapterhost",{"_index":582,"title":{},"body":{"classes/CatchEverythingFilter.html":{}}}],["httpagent",{"_index":919,"title":{},"body":{"injectables/HttpClientService.html":{}}}],["httpclientmodule",{"_index":906,"title":{"modules/HttpClientModule.html":{}},"body":{"modules/HttpClientModule.html":{},"modules.html":{},"overview.html":{}}}],["httpclientservice",{"_index":910,"title":{"injectables/HttpClientService.html":{}},"body":{"modules/HttpClientModule.html":{},"injectables/HttpClientService.html":{},"coverage.html":{},"overview.html":{}}}],["httpclientservice.name",{"_index":940,"title":{},"body":{"injectables/HttpClientService.html":{}}}],["httpcode",{"_index":40,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["httpcode(httpstatus.ok",{"_index":48,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["httpexception",{"_index":602,"title":{},"body":{"classes/CatchEverythingFilter.html":{},"miscellaneous/typealiases.html":{}}}],["httpmethod",{"_index":1315,"title":{},"body":{"injectables/S3Service.html":{}}}],["httpmodule",{"_index":914,"title":{},"body":{"modules/HttpClientModule.html":{}}}],["httprequest",{"_index":1298,"title":{},"body":{"injectables/S3Service.html":{}}}],["httprequestmethodenum",{"_index":958,"title":{},"body":{"interfaces/IStrorageService.html":{},"injectables/S3Service.html":{},"miscellaneous/enumerations.html":{}}}],["httprequestmethodenum.get",{"_index":1316,"title":{},"body":{"injectables/S3Service.html":{}}}],["httpresponse",{"_index":1227,"title":{},"body":{"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/SuccessResponseInterceptor.html":{}}}],["httpresponse.statuscode",{"_index":1232,"title":{},"body":{"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/SuccessResponseInterceptor.html":{}}}],["https",{"_index":932,"title":{},"body":{"injectables/HttpClientService.html":{}}}],["https.agent",{"_index":931,"title":{},"body":{"injectables/HttpClientService.html":{}}}],["https://${this.s3bucket}.s3.${this.s3region}.amazonaws.com/${key",{"_index":1313,"title":{},"body":{"injectables/S3Service.html":{}}}],["httpsagent",{"_index":920,"title":{},"body":{"injectables/HttpClientService.html":{}}}],["httpservice",{"_index":923,"title":{},"body":{"injectables/HttpClientService.html":{}}}],["httpstatus",{"_index":18,"title":{},"body":{"interfaces/ApiResponse.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/CatchEverythingFilter.html":{},"controllers/UsersController.html":{}}}],["httpstatus.bad_gateway",{"_index":647,"title":{},"body":{"classes/CatchEverythingFilter.html":{}}}],["httpstatus.created",{"_index":1476,"title":{},"body":{"controllers/UsersController.html":{}}}],["httpstatus.not_found",{"_index":629,"title":{},"body":{"classes/CatchEverythingFilter.html":{}}}],["httpstatus.ok",{"_index":337,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["i.e",{"_index":1010,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["ianatimezonedatabaseenum",{"_index":1719,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["id",{"_index":510,"title":{},"body":{"injectables/AuthService.html":{},"classes/BaseEntity.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/Migration20250730220636.html":{},"injectables/StripeService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["id=\"${intent.id",{"_index":1396,"title":{},"body":{"injectables/StripeService.html":{}}}],["identifier",{"_index":1586,"title":{},"body":{"coverage.html":{}}}],["ignoreexpiration",{"_index":1030,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["illinois",{"_index":840,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["illinois'})@isstring()@isoptional",{"_index":827,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["implementation",{"_index":1013,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["implemented",{"_index":1017,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["implements",{"_index":137,"title":{},"body":{"modules/AppModule.html":{},"classes/CatchEverythingFilter.html":{},"injectables/CloudinaryService.html":{},"injectables/MorganMiddleware.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/RequestContextMiddleware.html":{},"guards/RoleGuard.html":{},"injectables/S3Service.html":{},"injectables/SchemaService.html":{},"injectables/StripeService.html":{},"injectables/SuccessResponseInterceptor.html":{},"injectables/UsersSubscriber.html":{}}}],["import",{"_index":19,"title":{},"body":{"interfaces/ApiResponse.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AppRedisModule.html":{},"injectables/AppRedisService.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/AuthResponseDto.html":{},"injectables/AuthService.html":{},"classes/BaseEntity.html":{},"classes/CatchEverythingFilter.html":{},"classes/ChangePasswordDto.html":{},"injectables/CloudinaryService.html":{},"injectables/CreateUserCommand.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserResponseDto.html":{},"modules/EmailModule.html":{},"classes/EmailService.html":{},"classes/ForgotPasswordDto.html":{},"classes/GetProfileResponseDto.html":{},"modules/HttpClientModule.html":{},"injectables/HttpClientService.html":{},"interfaces/IPaymentService.html":{},"interfaces/IStrorageService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"classes/Migration20250730220636.html":{},"injectables/MorganMiddleware.html":{},"classes/PasswordResetEmailConsumer.html":{},"modules/PaymentModule.html":{},"classes/RefreshTokenDto.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/RequestContextMiddleware.html":{},"classes/ResetPasswordDto.html":{},"guards/RoleGuard.html":{},"injectables/S3Service.html":{},"injectables/SchemaService.html":{},"modules/StorageModule.html":{},"injectables/StripeService.html":{},"injectables/SuccessResponseInterceptor.html":{},"classes/UpdateProfileDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/UsersSubscriber.html":{}}}],["imports",{"_index":72,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRedisModule.html":{},"modules/AuthModule.html":{},"modules/EmailModule.html":{},"modules/HttpClientModule.html":{},"modules/PaymentModule.html":{},"modules/StorageModule.html":{},"modules/UsersModule.html":{}}}],["include",{"_index":662,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/ResetPasswordDto.html":{}}}],["increment",{"_index":181,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["increment(key",{"_index":209,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["incrresult",{"_index":259,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["incrresult[1",{"_index":261,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["index",{"_index":8,"title":{"index.html":{}},"body":{"interfaces/ApiResponse.html":{},"controllers/AppController.html":{},"injectables/AppRedisService.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthResponseDto.html":{},"injectables/AuthService.html":{},"classes/BaseEntity.html":{},"classes/CatchEverythingFilter.html":{},"classes/ChangePasswordDto.html":{},"injectables/CloudinaryService.html":{},"injectables/CreateUserCommand.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserResponseDto.html":{},"classes/EmailService.html":{},"interfaces/ErrorResponse.html":{},"classes/ForgotPasswordDto.html":{},"classes/GetProfileResponseDto.html":{},"injectables/HttpClientService.html":{},"interfaces/IPaymentService.html":{},"interfaces/IStrorageService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"classes/Migration20250730220636.html":{},"injectables/MorganMiddleware.html":{},"classes/PasswordResetEmailConsumer.html":{},"classes/RefreshTokenDto.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/RequestContextMiddleware.html":{},"classes/ResetPasswordDto.html":{},"guards/RoleGuard.html":{},"injectables/S3Service.html":{},"injectables/SchemaService.html":{},"injectables/StripeService.html":{},"injectables/SuccessResponseInterceptor.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/UsersSubscriber.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["indicating",{"_index":406,"title":{},"body":{"classes/AuthResponseDto.html":{},"classes/CreateUserResponseDto.html":{},"classes/GetProfileResponseDto.html":{}}}],["inestapplication",{"_index":1744,"title":{},"body":{"miscellaneous/functions.html":{}}}],["info",{"_index":3,"title":{},"body":{"interfaces/ApiResponse.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AppRedisModule.html":{},"injectables/AppRedisService.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/AuthResponseDto.html":{},"injectables/AuthService.html":{},"classes/BaseEntity.html":{},"classes/CatchEverythingFilter.html":{},"classes/ChangePasswordDto.html":{},"injectables/CloudinaryService.html":{},"injectables/CreateUserCommand.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserResponseDto.html":{},"modules/EmailModule.html":{},"classes/EmailService.html":{},"interfaces/ErrorResponse.html":{},"classes/ForgotPasswordDto.html":{},"classes/GetProfileResponseDto.html":{},"modules/HttpClientModule.html":{},"injectables/HttpClientService.html":{},"interfaces/IPaymentService.html":{},"interfaces/IStrorageService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"classes/Migration20250730220636.html":{},"injectables/MorganMiddleware.html":{},"classes/PasswordResetEmailConsumer.html":{},"modules/PaymentModule.html":{},"classes/RefreshTokenDto.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/RequestContextMiddleware.html":{},"classes/ResetPasswordDto.html":{},"guards/RoleGuard.html":{},"injectables/S3Service.html":{},"injectables/SchemaService.html":{},"modules/StorageModule.html":{},"injectables/StripeService.html":{},"injectables/SuccessResponseInterceptor.html":{},"classes/UpdateProfileDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/UsersSubscriber.html":{}}}],["info?.message",{"_index":988,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["info?.name",{"_index":987,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["initialized",{"_index":1806,"title":{},"body":{"miscellaneous/variables.html":{}}}],["inject",{"_index":129,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRedisModule.html":{},"injectables/AppRedisService.html":{},"modules/AuthModule.html":{},"classes/CatchEverythingFilter.html":{},"injectables/CloudinaryService.html":{},"modules/EmailModule.html":{},"classes/EmailService.html":{},"injectables/HttpClientService.html":{},"injectables/MorganMiddleware.html":{},"classes/PasswordResetEmailConsumer.html":{},"modules/PaymentModule.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/S3Service.html":{},"injectables/SchemaService.html":{},"modules/StorageModule.html":{},"injectables/StripeService.html":{},"injectables/SuccessResponseInterceptor.html":{}}}],["inject(logger",{"_index":231,"title":{},"body":{"injectables/AppRedisService.html":{},"classes/CatchEverythingFilter.html":{},"injectables/CloudinaryService.html":{},"classes/EmailService.html":{},"injectables/HttpClientService.html":{},"classes/PasswordResetEmailConsumer.html":{},"injectables/S3Service.html":{},"injectables/SchemaService.html":{},"injectables/StripeService.html":{}}}],["inject(mailerservice",{"_index":895,"title":{},"body":{"classes/EmailService.html":{}}}],["injectable",{"_index":172,"title":{"injectables/AppRedisService.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/CloudinaryService.html":{},"injectables/CreateUserCommand.html":{},"injectables/HttpClientService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/MorganMiddleware.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/RequestContextMiddleware.html":{},"injectables/S3Service.html":{},"injectables/SchemaService.html":{},"injectables/StripeService.html":{},"injectables/SuccessResponseInterceptor.html":{},"injectables/UsersService.html":{},"injectables/UsersSubscriber.html":{}},"body":{"injectables/AppRedisService.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/CloudinaryService.html":{},"injectables/CreateUserCommand.html":{},"injectables/HttpClientService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/MorganMiddleware.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/RequestContextMiddleware.html":{},"guards/RoleGuard.html":{},"injectables/S3Service.html":{},"injectables/SchemaService.html":{},"injectables/StripeService.html":{},"injectables/SuccessResponseInterceptor.html":{},"injectables/UsersService.html":{},"injectables/UsersSubscriber.html":{},"coverage.html":{}}}],["injectables",{"_index":173,"title":{},"body":{"injectables/AppRedisService.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/CloudinaryService.html":{},"injectables/CreateUserCommand.html":{},"injectables/HttpClientService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/MorganMiddleware.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/RequestContextMiddleware.html":{},"injectables/S3Service.html":{},"injectables/SchemaService.html":{},"injectables/StripeService.html":{},"injectables/SuccessResponseInterceptor.html":{},"injectables/UsersService.html":{},"injectables/UsersSubscriber.html":{},"overview.html":{}}}],["injectqueue",{"_index":450,"title":{},"body":{"injectables/AuthService.html":{},"injectables/StripeService.html":{}}}],["injectqueue(password_reset_email_queue_name",{"_index":456,"title":{},"body":{"injectables/AuthService.html":{}}}],["injectqueue(template_queue_name",{"_index":1376,"title":{},"body":{"injectables/StripeService.html":{}}}],["injectrepository",{"_index":1518,"title":{},"body":{"injectables/UsersService.html":{}}}],["injectrepository(user",{"_index":1519,"title":{},"body":{"injectables/UsersService.html":{}}}],["injects3",{"_index":1283,"title":{},"body":{"injectables/S3Service.html":{}}}],["injectstripeclient",{"_index":1373,"title":{},"body":{"injectables/StripeService.html":{}}}],["inputs",{"_index":761,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["installcompile",{"_index":1753,"title":{},"body":{"index.html":{}}}],["instanceof",{"_index":502,"title":{},"body":{"injectables/AuthService.html":{},"classes/CatchEverythingFilter.html":{}}}],["instrumentations",{"_index":1656,"title":{},"body":{"dependencies.html":{},"miscellaneous/variables.html":{}}}],["intent",{"_index":1384,"title":{},"body":{"injectables/StripeService.html":{}}}],["intent.ts",{"_index":1623,"title":{},"body":{"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["intercept",{"_index":1210,"title":{},"body":{"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/SuccessResponseInterceptor.html":{}}}],["intercept(context",{"_index":1212,"title":{},"body":{"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/SuccessResponseInterceptor.html":{}}}],["interface",{"_index":0,"title":{"interfaces/ApiResponse.html":{},"interfaces/ErrorResponse.html":{},"interfaces/IPaymentService.html":{},"interfaces/IStrorageService.html":{}},"body":{"interfaces/ApiResponse.html":{},"interfaces/ErrorResponse.html":{},"interfaces/IPaymentService.html":{},"interfaces/IStrorageService.html":{},"coverage.html":{}}}],["interfaces",{"_index":2,"title":{},"body":{"interfaces/ApiResponse.html":{},"interfaces/ErrorResponse.html":{},"interfaces/IPaymentService.html":{},"interfaces/IStrorageService.html":{},"overview.html":{}}}],["interfaces/error",{"_index":608,"title":{},"body":{"classes/CatchEverythingFilter.html":{}}}],["interfaces/payment.interface",{"_index":1375,"title":{},"body":{"injectables/StripeService.html":{}}}],["interfaces/storage.interface",{"_index":694,"title":{},"body":{"injectables/CloudinaryService.html":{},"injectables/S3Service.html":{}}}],["ioredis",{"_index":230,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["ipaymentservice",{"_index":942,"title":{"interfaces/IPaymentService.html":{}},"body":{"interfaces/IPaymentService.html":{},"injectables/StripeService.html":{},"coverage.html":{}}}],["is_public_key",{"_index":980,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["isblacklisted",{"_index":493,"title":{},"body":{"injectables/AuthService.html":{}}}],["isboolean",{"_index":829,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isboolean()@isoptional",{"_index":803,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isemail",{"_index":830,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/ForgotPasswordDto.html":{},"classes/LoginDto.html":{}}}],["isenum",{"_index":831,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isenum(userroleenum",{"_index":846,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isglobal",{"_index":122,"title":{},"body":{"modules/AppModule.html":{}}}],["isjwt",{"_index":1257,"title":{},"body":{"classes/ResetPasswordDto.html":{}}}],["isnotempty",{"_index":671,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/RefreshTokenDto.html":{},"classes/ResetPasswordDto.html":{}}}],["iso",{"_index":1101,"title":{},"body":{"classes/Migration20250730220636.html":{},"entities/User.html":{}}}],["isoptional",{"_index":832,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["ispasswordmodified",{"_index":1557,"title":{},"body":{"injectables/UsersSubscriber.html":{}}}],["ispasswordmodified(user",{"_index":1568,"title":{},"body":{"injectables/UsersSubscriber.html":{}}}],["ispublic",{"_index":981,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"miscellaneous/variables.html":{}}}],["isroutingerror",{"_index":622,"title":{},"body":{"classes/CatchEverythingFilter.html":{}}}],["isstring",{"_index":672,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/RefreshTokenDto.html":{},"classes/ResetPasswordDto.html":{}}}],["istrorageservice",{"_index":693,"title":{"interfaces/IStrorageService.html":{}},"body":{"injectables/CloudinaryService.html":{},"interfaces/IStrorageService.html":{},"injectables/S3Service.html":{},"coverage.html":{}}}],["it's",{"_index":1022,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["items",{"_index":1439,"title":{},"body":{"entities/User.html":{}}}],["jaeger",{"_index":1667,"title":{},"body":{"dependencies.html":{}}}],["jaegerpropagator",{"_index":1798,"title":{},"body":{"miscellaneous/variables.html":{}}}],["job",{"_index":1151,"title":{},"body":{"classes/PasswordResetEmailConsumer.html":{}}}],["job.id",{"_index":1163,"title":{},"body":{"classes/PasswordResetEmailConsumer.html":{}}}],["john",{"_index":836,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["john'})@isstring()@isnotempty",{"_index":813,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["join",{"_index":869,"title":{},"body":{"modules/EmailModule.html":{}}}],["join(process.cwd",{"_index":883,"title":{},"body":{"modules/EmailModule.html":{}}}],["js",{"_index":34,"title":{},"body":{"controllers/AppController.html":{}}}],["json.parse(cached",{"_index":1539,"title":{},"body":{"injectables/UsersService.html":{}}}],["json.stringify(serializable",{"_index":1546,"title":{},"body":{"injectables/UsersService.html":{}}}],["json.stringify(user",{"_index":1552,"title":{},"body":{"injectables/UsersService.html":{}}}],["jsonwebtokenerror",{"_index":447,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwt",{"_index":504,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["jwtauthguard",{"_index":372,"title":{"injectables/JwtAuthGuard.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["jwtexpiresin",{"_index":412,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtfromrequest",{"_index":1028,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtmodule",{"_index":366,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.registerasync",{"_index":379,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtnotbefore",{"_index":413,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtrefreshexpriresin",{"_index":414,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtrefreshsecret",{"_index":415,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtservice",{"_index":421,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtstrategy",{"_index":359,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["keepalive",{"_index":929,"title":{},"body":{"injectables/HttpClientService.html":{}}}],["key",{"_index":190,"title":{},"body":{"injectables/AppRedisService.html":{},"interfaces/IStrorageService.html":{},"classes/Migration20250730220636.html":{},"injectables/S3Service.html":{}}}],["key=${key",{"_index":1314,"title":{},"body":{"injectables/S3Service.html":{}}}],["keys",{"_index":197,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["keys.length",{"_index":269,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["l",{"_index":751,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["lagos",{"_index":1728,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["last",{"_index":561,"title":{},"body":{"classes/BaseEntity.html":{},"injectables/CreateUserCommand.html":{},"classes/CreateUserDto.html":{},"classes/Migration20250730220636.html":{},"entities/User.html":{}}}],["last_logged_in",{"_index":1079,"title":{},"body":{"classes/Migration20250730220636.html":{}}}],["last_name",{"_index":1068,"title":{},"body":{"classes/Migration20250730220636.html":{}}}],["lastloggedin",{"_index":1046,"title":{},"body":{"injectables/LocalStrategy.html":{},"entities/User.html":{}}}],["lastname",{"_index":773,"title":{},"body":{"injectables/CreateUserCommand.html":{},"classes/CreateUserDto.html":{},"entities/User.html":{}}}],["lastvaluefrom",{"_index":933,"title":{},"body":{"injectables/HttpClientService.html":{}}}],["lastvaluefrom(this.httpservice.request",{"_index":941,"title":{},"body":{"injectables/HttpClientService.html":{}}}],["legend",{"_index":55,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRedisModule.html":{},"modules/AuthModule.html":{},"modules/EmailModule.html":{},"modules/HttpClientModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["length",{"_index":1133,"title":{},"body":{"injectables/MorganMiddleware.html":{},"entities/User.html":{}}}],["level",{"_index":1021,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["liaoliaots/nestjs",{"_index":163,"title":{},"body":{"modules/AppRedisModule.html":{},"injectables/AppRedisService.html":{},"dependencies.html":{}}}],["license",{"_index":1776,"title":{},"body":{"properties.html":{}}}],["limit",{"_index":1740,"title":{},"body":{"miscellaneous/functions.html":{}}}],["line",{"_index":481,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["literal",{"_index":39,"title":{},"body":{"controllers/AppController.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["live",{"_index":221,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["load",{"_index":124,"title":{},"body":{"modules/AppModule.html":{}}}],["local",{"_index":1041,"title":{},"body":{"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["localauthguard",{"_index":313,"title":{"injectables/LocalAuthGuard.html":{}},"body":{"controllers/AuthController.html":{},"injectables/LocalAuthGuard.html":{},"coverage.html":{}}}],["localstrategy",{"_index":360,"title":{"injectables/LocalStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/LocalStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["logged",{"_index":1011,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["logger",{"_index":81,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRedisModule.html":{},"injectables/AppRedisService.html":{},"classes/CatchEverythingFilter.html":{},"injectables/CloudinaryService.html":{},"modules/EmailModule.html":{},"classes/EmailService.html":{},"modules/HttpClientModule.html":{},"injectables/HttpClientService.html":{},"injectables/MorganMiddleware.html":{},"classes/PasswordResetEmailConsumer.html":{},"modules/PaymentModule.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/S3Service.html":{},"injectables/SchemaService.html":{},"modules/StorageModule.html":{},"injectables/StripeService.html":{},"injectables/SuccessResponseInterceptor.html":{}}}],["logger(schemaservice.name",{"_index":1329,"title":{},"body":{"injectables/SchemaService.html":{}}}],["loggercontext",{"_index":575,"title":{},"body":{"classes/CatchEverythingFilter.html":{}}}],["loggerservice",{"_index":185,"title":{},"body":{"injectables/AppRedisService.html":{},"classes/CatchEverythingFilter.html":{},"injectables/CloudinaryService.html":{},"classes/EmailService.html":{},"injectables/HttpClientService.html":{},"injectables/MorganMiddleware.html":{},"classes/PasswordResetEmailConsumer.html":{},"modules/PaymentModule.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/S3Service.html":{},"injectables/SchemaService.html":{},"modules/StorageModule.html":{},"injectables/StripeService.html":{},"injectables/SuccessResponseInterceptor.html":{}}}],["loggingconfiguration",{"_index":1195,"title":{},"body":{"modules/PaymentModule.html":{}}}],["logic",{"_index":1016,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["login",{"_index":280,"title":{},"body":{"controllers/AuthController.html":{},"classes/AuthResponseDto.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/Migration20250730220636.html":{},"classes/RefreshTokenDto.html":{},"entities/User.html":{}}}],["login'})@apibody({type",{"_index":295,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(@request",{"_index":332,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(req",{"_index":292,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(user",{"_index":427,"title":{},"body":{"injectables/AuthService.html":{}}}],["logindto",{"_index":296,"title":{"classes/LoginDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/LoginDto.html":{},"coverage.html":{}}}],["logmatchingeventhandlers",{"_index":1196,"title":{},"body":{"modules/PaymentModule.html":{}}}],["long",{"_index":661,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/ResetPasswordDto.html":{}}}],["lowercase",{"_index":664,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/ResetPasswordDto.html":{}}}],["mailermodule",{"_index":864,"title":{},"body":{"modules/EmailModule.html":{}}}],["mailermodule.forrootasync",{"_index":870,"title":{},"body":{"modules/EmailModule.html":{}}}],["mailerservice",{"_index":889,"title":{},"body":{"classes/EmailService.html":{}}}],["main",{"_index":799,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["makehttprequest",{"_index":921,"title":{},"body":{"injectables/HttpClientService.html":{}}}],["makehttprequest(url",{"_index":925,"title":{},"body":{"injectables/HttpClientService.html":{}}}],["making",{"_index":939,"title":{},"body":{"injectables/HttpClientService.html":{}}}],["malformed",{"_index":505,"title":{},"body":{"injectables/AuthService.html":{}}}],["map",{"_index":1218,"title":{},"body":{"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/SuccessResponseInterceptor.html":{}}}],["map((response",{"_index":1226,"title":{},"body":{"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/SuccessResponseInterceptor.html":{}}}],["match",{"_index":528,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/UsersService.html":{}}}],["matches",{"_index":673,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/ResetPasswordDto.html":{}}}],["matching",{"_index":23,"title":{},"body":{"interfaces/ApiResponse.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AppRedisModule.html":{},"injectables/AppRedisService.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/AuthResponseDto.html":{},"injectables/AuthService.html":{},"classes/BaseEntity.html":{},"classes/CatchEverythingFilter.html":{},"classes/ChangePasswordDto.html":{},"injectables/CloudinaryService.html":{},"injectables/CreateUserCommand.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserResponseDto.html":{},"modules/EmailModule.html":{},"classes/EmailService.html":{},"interfaces/ErrorResponse.html":{},"classes/ForgotPasswordDto.html":{},"classes/GetProfileResponseDto.html":{},"modules/HttpClientModule.html":{},"injectables/HttpClientService.html":{},"interfaces/IPaymentService.html":{},"interfaces/IStrorageService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"classes/Migration20250730220636.html":{},"injectables/MorganMiddleware.html":{},"classes/PasswordResetEmailConsumer.html":{},"modules/PaymentModule.html":{},"classes/RefreshTokenDto.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/RequestContextMiddleware.html":{},"classes/ResetPasswordDto.html":{},"guards/RoleGuard.html":{},"injectables/S3Service.html":{},"injectables/SchemaService.html":{},"modules/StorageModule.html":{},"injectables/StripeService.html":{},"injectables/SuccessResponseInterceptor.html":{},"classes/UpdateProfileDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/UsersSubscriber.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["memorystoredfile",{"_index":682,"title":{},"body":{"injectables/CloudinaryService.html":{},"interfaces/IStrorageService.html":{},"injectables/S3Service.html":{}}}],["message",{"_index":12,"title":{},"body":{"interfaces/ApiResponse.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/AuthResponseDto.html":{},"classes/CatchEverythingFilter.html":{},"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserResponseDto.html":{},"interfaces/ErrorResponse.html":{},"classes/GetProfileResponseDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/MorganMiddleware.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"classes/ResetPasswordDto.html":{},"injectables/SuccessResponseInterceptor.html":{},"controllers/UsersController.html":{}}}],["message.includes('cannot",{"_index":625,"title":{},"body":{"classes/CatchEverythingFilter.html":{}}}],["message.startswith('cannot",{"_index":624,"title":{},"body":{"classes/CatchEverythingFilter.html":{}}}],["metadata",{"_index":1708,"title":{},"body":{"dependencies.html":{}}}],["method",{"_index":141,"title":{},"body":{"modules/AppModule.html":{},"interfaces/IStrorageService.html":{},"injectables/MorganMiddleware.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/S3Service.html":{},"injectables/SuccessResponseInterceptor.html":{}}}],["methods",{"_index":28,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppRedisService.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CatchEverythingFilter.html":{},"injectables/CloudinaryService.html":{},"injectables/CreateUserCommand.html":{},"classes/EmailService.html":{},"injectables/HttpClientService.html":{},"interfaces/IPaymentService.html":{},"interfaces/IStrorageService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/Migration20250730220636.html":{},"injectables/MorganMiddleware.html":{},"classes/PasswordResetEmailConsumer.html":{},"modules/PaymentModule.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/RequestContextMiddleware.html":{},"guards/RoleGuard.html":{},"injectables/S3Service.html":{},"injectables/SchemaService.html":{},"modules/StorageModule.html":{},"injectables/StripeService.html":{},"injectables/SuccessResponseInterceptor.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/UsersSubscriber.html":{}}}],["metricreader",{"_index":1792,"title":{},"body":{"miscellaneous/variables.html":{}}}],["middlewareconsumer",{"_index":75,"title":{},"body":{"modules/AppModule.html":{}}}],["migration",{"_index":1053,"title":{},"body":{"classes/Migration20250730220636.html":{}}}],["migration20250730220636",{"_index":1051,"title":{"classes/Migration20250730220636.html":{}},"body":{"classes/Migration20250730220636.html":{},"coverage.html":{}}}],["mikro",{"_index":96,"title":{},"body":{"modules/AppModule.html":{},"classes/BaseEntity.html":{},"injectables/CreateUserCommand.html":{},"classes/Migration20250730220636.html":{},"injectables/RequestContextMiddleware.html":{},"injectables/SchemaService.html":{},"entities/User.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/UsersSubscriber.html":{},"dependencies.html":{}}}],["mikroorm",{"_index":1243,"title":{},"body":{"injectables/RequestContextMiddleware.html":{},"injectables/SchemaService.html":{}}}],["mikroormconfig",{"_index":118,"title":{},"body":{"modules/AppModule.html":{}}}],["mikroormmodule",{"_index":95,"title":{},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{}}}],["mikroormmodule.forfeature([user",{"_index":1495,"title":{},"body":{"modules/UsersModule.html":{}}}],["mikroormmodule.forrootasync",{"_index":126,"title":{},"body":{"modules/AppModule.html":{}}}],["minimum",{"_index":669,"title":{},"body":{"classes/ChangePasswordDto.html":{}}}],["minlength",{"_index":674,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/ResetPasswordDto.html":{}}}],["minlength(10",{"_index":667,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/ResetPasswordDto.html":{}}}],["miscellaneous",{"_index":1716,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mode",{"_index":1757,"title":{},"body":{"index.html":{}}}],["module",{"_index":51,"title":{"modules/AppModule.html":{},"modules/AppRedisModule.html":{},"modules/AuthModule.html":{},"modules/EmailModule.html":{},"modules/HttpClientModule.html":{},"modules/PaymentModule.html":{},"modules/StorageModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AppRedisModule.html":{},"modules/AuthModule.html":{},"modules/EmailModule.html":{},"modules/HttpClientModule.html":{},"modules/PaymentModule.html":{},"modules/StorageModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["modules",{"_index":53,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AppRedisModule.html":{},"modules/AuthModule.html":{},"modules/EmailModule.html":{},"modules/HttpClientModule.html":{},"modules/PaymentModule.html":{},"modules/StorageModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["modules/auth/auth.module",{"_index":92,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/auth/decorators/public.decorator",{"_index":42,"title":{},"body":{"controllers/AppController.html":{},"modules/PaymentModule.html":{}}}],["modules/mailer",{"_index":865,"title":{},"body":{"modules/EmailModule.html":{},"classes/EmailService.html":{},"dependencies.html":{}}}],["modules/mailer/dist/adapters/pug.adapter",{"_index":868,"title":{},"body":{"modules/EmailModule.html":{}}}],["modules/users/users.module",{"_index":91,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/users/users.service",{"_index":765,"title":{},"body":{"injectables/CreateUserCommand.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["moment",{"_index":1042,"title":{},"body":{"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["moment().utc().todate",{"_index":1047,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["morgan",{"_index":1125,"title":{},"body":{"injectables/MorganMiddleware.html":{},"dependencies.html":{}}}],["morganmiddleware",{"_index":93,"title":{"injectables/MorganMiddleware.html":{}},"body":{"modules/AppModule.html":{},"injectables/MorganMiddleware.html":{},"coverage.html":{}}}],["morganmiddleware.name",{"_index":1143,"title":{},"body":{"injectables/MorganMiddleware.html":{}}}],["ms",{"_index":455,"title":{},"body":{"injectables/AuthService.html":{},"injectables/MorganMiddleware.html":{},"dependencies.html":{}}}],["ms('1m",{"_index":463,"title":{},"body":{"injectables/AuthService.html":{}}}],["ms('1m')}m",{"_index":464,"title":{},"body":{"injectables/AuthService.html":{}}}],["ms('1s",{"_index":515,"title":{},"body":{"injectables/AuthService.html":{}}}],["ms(this.jwtexpiresin",{"_index":462,"title":{},"body":{"injectables/AuthService.html":{}}}],["ms(this.jwtrefreshexpriresin",{"_index":514,"title":{},"body":{"injectables/AuthService.html":{}}}],["multiple",{"_index":203,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["name",{"_index":78,"title":{},"body":{"modules/AppModule.html":{},"injectables/AppRedisService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BaseEntity.html":{},"classes/CatchEverythingFilter.html":{},"injectables/CloudinaryService.html":{},"injectables/CreateUserCommand.html":{},"classes/CreateUserDto.html":{},"classes/EmailService.html":{},"interfaces/ErrorResponse.html":{},"injectables/HttpClientService.html":{},"interfaces/IPaymentService.html":{},"interfaces/IStrorageService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/Migration20250730220636.html":{},"injectables/MorganMiddleware.html":{},"classes/PasswordResetEmailConsumer.html":{},"modules/PaymentModule.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/RequestContextMiddleware.html":{},"guards/RoleGuard.html":{},"injectables/S3Service.html":{},"injectables/SchemaService.html":{},"injectables/StripeService.html":{},"injectables/SuccessResponseInterceptor.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/UsersSubscriber.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["namespace",{"_index":170,"title":{},"body":{"modules/AppRedisModule.html":{}}}],["nanoid",{"_index":730,"title":{},"body":{"injectables/CreateUserCommand.html":{},"injectables/S3Service.html":{},"dependencies.html":{}}}],["necessary",{"_index":1269,"title":{},"body":{"guards/RoleGuard.html":{}}}],["needs",{"_index":1018,"title":{},"body":{"injectables/JwtStrategy.html":{},"classes/Migration20250730220636.html":{},"entities/User.html":{}}}],["nest",{"_index":33,"title":{},"body":{"controllers/AppController.html":{},"injectables/CreateUserCommand.html":{},"dependencies.html":{},"index.html":{}}}],["nestinterceptor",{"_index":1217,"title":{},"body":{"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/SuccessResponseInterceptor.html":{}}}],["nestjs",{"_index":696,"title":{},"body":{"injectables/CloudinaryService.html":{},"modules/EmailModule.html":{},"classes/EmailService.html":{},"interfaces/IStrorageService.html":{},"injectables/S3Service.html":{},"modules/StorageModule.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["nestjs/axios",{"_index":915,"title":{},"body":{"modules/HttpClientModule.html":{},"injectables/HttpClientService.html":{},"dependencies.html":{}}}],["nestjs/bullmq",{"_index":107,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/PasswordResetEmailConsumer.html":{},"modules/PaymentModule.html":{},"injectables/StripeService.html":{},"dependencies.html":{}}}],["nestjs/common",{"_index":20,"title":{},"body":{"interfaces/ApiResponse.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AppRedisModule.html":{},"injectables/AppRedisService.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CatchEverythingFilter.html":{},"injectables/CloudinaryService.html":{},"injectables/CreateUserCommand.html":{},"modules/EmailModule.html":{},"classes/EmailService.html":{},"modules/HttpClientModule.html":{},"injectables/HttpClientService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/MorganMiddleware.html":{},"classes/PasswordResetEmailConsumer.html":{},"modules/PaymentModule.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/RequestContextMiddleware.html":{},"guards/RoleGuard.html":{},"injectables/S3Service.html":{},"injectables/SchemaService.html":{},"modules/StorageModule.html":{},"injectables/StripeService.html":{},"injectables/SuccessResponseInterceptor.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/UsersSubscriber.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":90,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRedisModule.html":{},"injectables/AppRedisService.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CloudinaryService.html":{},"modules/EmailModule.html":{},"injectables/JwtStrategy.html":{},"modules/PaymentModule.html":{},"injectables/S3Service.html":{},"injectables/SchemaService.html":{},"modules/StorageModule.html":{},"injectables/StripeService.html":{},"injectables/UsersSubscriber.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":363,"title":{},"body":{"modules/AuthModule.html":{},"classes/CatchEverythingFilter.html":{},"injectables/JwtAuthGuard.html":{},"guards/RoleGuard.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":367,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["nestjs/mapped",{"_index":1651,"title":{},"body":{"dependencies.html":{}}}],["nestjs/passport",{"_index":369,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":1653,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":45,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/AuthResponseDto.html":{},"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserResponseDto.html":{},"classes/ForgotPasswordDto.html":{},"classes/GetProfileResponseDto.html":{},"classes/LoginDto.html":{},"classes/RefreshTokenDto.html":{},"classes/ResetPasswordDto.html":{},"classes/UpdateProfileDto.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["nestmiddleware",{"_index":1124,"title":{},"body":{"injectables/MorganMiddleware.html":{},"injectables/RequestContextMiddleware.html":{}}}],["nestmodule",{"_index":82,"title":{},"body":{"modules/AppModule.html":{}}}],["new",{"_index":474,"title":{},"body":{"injectables/AuthService.html":{},"classes/BaseEntity.html":{},"classes/CatchEverythingFilter.html":{},"classes/ChangePasswordDto.html":{},"injectables/CloudinaryService.html":{},"injectables/CreateUserCommand.html":{},"modules/EmailModule.html":{},"injectables/HttpClientService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"modules/PaymentModule.html":{},"classes/ResetPasswordDto.html":{},"guards/RoleGuard.html":{},"injectables/S3Service.html":{},"injectables/SchemaService.html":{},"modules/StorageModule.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["newly",{"_index":851,"title":{},"body":{"classes/CreateUserResponseDto.html":{},"classes/GetProfileResponseDto.html":{}}}],["newpassword",{"_index":352,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ChangePasswordDto.html":{},"classes/ResetPasswordDto.html":{},"injectables/UsersService.html":{}}}],["newpayload",{"_index":512,"title":{},"body":{"injectables/AuthService.html":{}}}],["newuser",{"_index":1474,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["next",{"_index":480,"title":{},"body":{"injectables/AuthService.html":{},"injectables/MorganMiddleware.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/RequestContextMiddleware.html":{},"injectables/SuccessResponseInterceptor.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["next.handle",{"_index":1224,"title":{},"body":{"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/SuccessResponseInterceptor.html":{}}}],["next.handle().pipe",{"_index":1225,"title":{},"body":{"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/SuccessResponseInterceptor.html":{}}}],["nextfunction",{"_index":1246,"title":{},"body":{"injectables/RequestContextMiddleware.html":{}}}],["node",{"_index":1297,"title":{},"body":{"injectables/S3Service.html":{},"dependencies.html":{}}}],["nodeenv",{"_index":1331,"title":{},"body":{"injectables/SchemaService.html":{}}}],["nodemailer",{"_index":1701,"title":{},"body":{"dependencies.html":{}}}],["nodesdk",{"_index":1791,"title":{},"body":{"miscellaneous/variables.html":{}}}],["normalizefields",{"_index":1440,"title":{},"body":{"entities/User.html":{},"injectables/UsersSubscriber.html":{}}}],["normalizefields(user",{"_index":1570,"title":{},"body":{"injectables/UsersSubscriber.html":{}}}],["normalizeuserfields",{"_index":1436,"title":{},"body":{"entities/User.html":{},"injectables/UsersSubscriber.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["normalizeuserfields(this",{"_index":1441,"title":{},"body":{"entities/User.html":{}}}],["normalizeuserfields(user",{"_index":1578,"title":{},"body":{"injectables/UsersSubscriber.html":{},"miscellaneous/functions.html":{}}}],["notbefore",{"_index":490,"title":{},"body":{"injectables/AuthService.html":{}}}],["notbeforeerror",{"_index":448,"title":{},"body":{"injectables/AuthService.html":{}}}],["note",{"_index":996,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["notfoundexception",{"_index":444,"title":{},"body":{"injectables/AuthService.html":{},"classes/CatchEverythingFilter.html":{},"injectables/JwtStrategy.html":{},"injectables/UsersService.html":{}}}],["notfoundexception('password",{"_index":532,"title":{},"body":{"injectables/AuthService.html":{}}}],["notfoundexception('user",{"_index":475,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/UsersService.html":{}}}],["null",{"_index":228,"title":{},"body":{"injectables/AppRedisService.html":{},"injectables/AuthService.html":{},"classes/BaseEntity.html":{},"classes/Migration20250730220636.html":{},"injectables/UsersService.html":{}}}],["nullable",{"_index":553,"title":{},"body":{"classes/BaseEntity.html":{},"entities/User.html":{}}}],["number",{"_index":196,"title":{},"body":{"injectables/AppRedisService.html":{},"injectables/AuthService.html":{},"classes/CatchEverythingFilter.html":{},"classes/CreateUserDto.html":{},"interfaces/ErrorResponse.html":{},"interfaces/IStrorageService.html":{},"classes/Migration20250730220636.html":{},"injectables/S3Service.html":{},"entities/User.html":{},"miscellaneous/functions.html":{}}}],["number.isinteger(response.statuscode",{"_index":1230,"title":{},"body":{"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/SuccessResponseInterceptor.html":{}}}],["nx",{"_index":215,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["nxinfo",{"_index":239,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["object",{"_index":964,"title":{},"body":{"interfaces/IStrorageService.html":{},"injectables/S3Service.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["object.values(userroleenum).join",{"_index":848,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["observable",{"_index":1215,"title":{},"body":{"injectables/RequestBodyAndResponseInterceptor.html":{},"guards/RoleGuard.html":{},"injectables/SuccessResponseInterceptor.html":{}}}],["ok",{"_index":226,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["omittype",{"_index":1404,"title":{},"body":{"classes/UpdateProfileDto.html":{}}}],["omittype(createuserdto",{"_index":1403,"title":{},"body":{"classes/UpdateProfileDto.html":{}}}],["one",{"_index":847,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["onmoduleinit",{"_index":1326,"title":{},"body":{"injectables/SchemaService.html":{}}}],["onupdate",{"_index":560,"title":{},"body":{"classes/BaseEntity.html":{}}}],["opentelemetry/auto",{"_index":1655,"title":{},"body":{"dependencies.html":{}}}],["opentelemetry/context",{"_index":1658,"title":{},"body":{"dependencies.html":{}}}],["opentelemetry/core",{"_index":1661,"title":{},"body":{"dependencies.html":{}}}],["opentelemetry/exporter",{"_index":1662,"title":{},"body":{"dependencies.html":{}}}],["opentelemetry/propagator",{"_index":1665,"title":{},"body":{"dependencies.html":{}}}],["opentelemetry/sdk",{"_index":1668,"title":{},"body":{"dependencies.html":{}}}],["operation",{"_index":408,"title":{},"body":{"classes/AuthResponseDto.html":{},"classes/CreateUserResponseDto.html":{},"classes/GetProfileResponseDto.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/SuccessResponseInterceptor.html":{}}}],["option",{"_index":766,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["option({flags",{"_index":741,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["optional",{"_index":10,"title":{},"body":{"interfaces/ApiResponse.html":{},"modules/AppModule.html":{},"injectables/AppRedisService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/BaseEntity.html":{},"classes/CatchEverythingFilter.html":{},"injectables/CloudinaryService.html":{},"injectables/CreateUserCommand.html":{},"classes/CreateUserDto.html":{},"classes/EmailService.html":{},"interfaces/ErrorResponse.html":{},"injectables/HttpClientService.html":{},"interfaces/IPaymentService.html":{},"interfaces/IStrorageService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/MorganMiddleware.html":{},"classes/PasswordResetEmailConsumer.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/RequestContextMiddleware.html":{},"guards/RoleGuard.html":{},"injectables/S3Service.html":{},"injectables/SchemaService.html":{},"injectables/StripeService.html":{},"injectables/SuccessResponseInterceptor.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/UsersSubscriber.html":{},"miscellaneous/functions.html":{}}}],["options",{"_index":759,"title":{},"body":{"injectables/CreateUserCommand.html":{},"modules/EmailModule.html":{},"injectables/HttpClientService.html":{},"interfaces/IPaymentService.html":{},"injectables/StripeService.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{}}}],["originaldata",{"_index":1579,"title":{},"body":{"injectables/UsersSubscriber.html":{}}}],["originaldata.password",{"_index":1581,"title":{},"body":{"injectables/UsersSubscriber.html":{}}}],["orm",{"_index":1245,"title":{},"body":{"injectables/RequestContextMiddleware.html":{},"injectables/SchemaService.html":{}}}],["orm.config",{"_index":120,"title":{},"body":{"modules/AppModule.html":{}}}],["orm.config.ts",{"_index":1608,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["orm/cli",{"_index":1642,"title":{},"body":{"dependencies.html":{}}}],["orm/core",{"_index":567,"title":{},"body":{"classes/BaseEntity.html":{},"injectables/CreateUserCommand.html":{},"injectables/RequestContextMiddleware.html":{},"injectables/SchemaService.html":{},"entities/User.html":{},"injectables/UsersService.html":{},"injectables/UsersSubscriber.html":{},"dependencies.html":{}}}],["orm/migrations",{"_index":1056,"title":{},"body":{"classes/Migration20250730220636.html":{},"dependencies.html":{}}}],["orm/nestjs",{"_index":97,"title":{},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["orm/postgresql",{"_index":1645,"title":{},"body":{"dependencies.html":{}}}],["os",{"_index":1153,"title":{},"body":{"classes/PasswordResetEmailConsumer.html":{}}}],["os.cpus().length",{"_index":1161,"title":{},"body":{"classes/PasswordResetEmailConsumer.html":{}}}],["otelsdk",{"_index":1628,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["out",{"_index":70,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRedisModule.html":{},"modules/AuthModule.html":{},"modules/EmailModule.html":{},"modules/HttpClientModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["override",{"_index":1057,"title":{},"body":{"classes/Migration20250730220636.html":{}}}],["overview",{"_index":1770,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":1631,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["param",{"_index":235,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["parameters",{"_index":77,"title":{},"body":{"modules/AppModule.html":{},"injectables/AppRedisService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CatchEverythingFilter.html":{},"injectables/CloudinaryService.html":{},"injectables/CreateUserCommand.html":{},"classes/EmailService.html":{},"injectables/HttpClientService.html":{},"interfaces/IPaymentService.html":{},"interfaces/IStrorageService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/MorganMiddleware.html":{},"classes/PasswordResetEmailConsumer.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/RequestContextMiddleware.html":{},"guards/RoleGuard.html":{},"injectables/S3Service.html":{},"injectables/SchemaService.html":{},"injectables/StripeService.html":{},"injectables/SuccessResponseInterceptor.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/UsersSubscriber.html":{},"miscellaneous/functions.html":{}}}],["params",{"_index":950,"title":{},"body":{"interfaces/IPaymentService.html":{},"injectables/StripeService.html":{}}}],["parsed",{"_index":1538,"title":{},"body":{"injectables/UsersService.html":{}}}],["parseemail",{"_index":731,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["parseemail(val",{"_index":740,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["parsefirstname",{"_index":732,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["parsefirstname(val",{"_index":746,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["parselastname",{"_index":733,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["parselastname(val",{"_index":750,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["parser",{"_index":1288,"title":{},"body":{"injectables/S3Service.html":{}}}],["parserole",{"_index":734,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["parserole(val",{"_index":753,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["parsetimestring",{"_index":1605,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["parsetimestring(timestring",{"_index":1741,"title":{},"body":{"miscellaneous/functions.html":{}}}],["parseurl",{"_index":1286,"title":{},"body":{"injectables/S3Service.html":{}}}],["partialtype",{"_index":1402,"title":{},"body":{"classes/UpdateProfileDto.html":{}}}],["pass",{"_index":434,"title":{},"body":{"injectables/AuthService.html":{},"modules/EmailModule.html":{}}}],["passport",{"_index":1026,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["passportmodule",{"_index":368,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":1027,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["passportstrategy(strategy",{"_index":991,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["passreqtocallback",{"_index":1033,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["password",{"_index":288,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ChangePasswordDto.html":{},"injectables/CreateUserCommand.html":{},"classes/CreateUserDto.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"classes/Migration20250730220636.html":{},"classes/ResetPasswordDto.html":{},"classes/UpdateProfileDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["password')@httpcode(httpstatus.ok)@apioperation({summary",{"_index":286,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["password'})@apibody({type",{"_index":308,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["password.dto",{"_index":324,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["password.dto.ts",{"_index":651,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/ForgotPasswordDto.html":{},"classes/ResetPasswordDto.html":{},"coverage.html":{}}}],["password.dto.ts:19",{"_index":670,"title":{},"body":{"classes/ChangePasswordDto.html":{}}}],["password.dto.ts:25",{"_index":1254,"title":{},"body":{"classes/ResetPasswordDto.html":{}}}],["password.dto.ts:35",{"_index":668,"title":{},"body":{"classes/ChangePasswordDto.html":{}}}],["password.dto.ts:41",{"_index":1253,"title":{},"body":{"classes/ResetPasswordDto.html":{}}}],["password.dto.ts:50",{"_index":1256,"title":{},"body":{"classes/ResetPasswordDto.html":{}}}],["password.dto.ts:7",{"_index":903,"title":{},"body":{"classes/ForgotPasswordDto.html":{}}}],["password_character_set",{"_index":769,"title":{},"body":{"injectables/CreateUserCommand.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["password_reset",{"_index":1722,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["password_reset_email_queue_name",{"_index":375,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/PasswordResetEmailConsumer.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["password_reset_requested",{"_index":1078,"title":{},"body":{"classes/Migration20250730220636.html":{}}}],["passwordresetemailconsumer",{"_index":1145,"title":{"classes/PasswordResetEmailConsumer.html":{}},"body":{"classes/PasswordResetEmailConsumer.html":{},"coverage.html":{}}}],["passwordresetemailqueue",{"_index":422,"title":{},"body":{"injectables/AuthService.html":{}}}],["passwordresetrequested",{"_index":526,"title":{},"body":{"injectables/AuthService.html":{},"entities/User.html":{}}}],["passwordreseturl",{"_index":416,"title":{},"body":{"injectables/AuthService.html":{}}}],["patch",{"_index":1463,"title":{},"body":{"controllers/UsersController.html":{},"miscellaneous/enumerations.html":{}}}],["patch('update",{"_index":1459,"title":{},"body":{"controllers/UsersController.html":{}}}],["path",{"_index":143,"title":{},"body":{"modules/AppModule.html":{},"classes/CatchEverythingFilter.html":{},"modules/EmailModule.html":{},"interfaces/ErrorResponse.html":{},"classes/Migration20250730220636.html":{},"entities/User.html":{}}}],["path/webhook",{"_index":144,"title":{},"body":{"modules/AppModule.html":{}}}],["payload",{"_index":486,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["payload.email",{"_index":530,"title":{},"body":{"injectables/AuthService.html":{}}}],["payload.sub",{"_index":511,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["payment",{"_index":1383,"title":{},"body":{"injectables/StripeService.html":{}}}],["payment_intent.succeeded",{"_index":1394,"title":{},"body":{"injectables/StripeService.html":{}}}],["payment_provider",{"_index":1180,"title":{},"body":{"modules/PaymentModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["paymentdriverenum",{"_index":1181,"title":{},"body":{"modules/PaymentModule.html":{},"miscellaneous/enumerations.html":{}}}],["paymentdriverenum.stripe",{"_index":1201,"title":{},"body":{"modules/PaymentModule.html":{}}}],["paymentintent",{"_index":1385,"title":{},"body":{"injectables/StripeService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["paymentmodule",{"_index":1171,"title":{"modules/PaymentModule.html":{}},"body":{"modules/PaymentModule.html":{},"modules.html":{}}}],["per",{"_index":1005,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["permission",{"_index":1270,"title":{},"body":{"guards/RoleGuard.html":{}}}],["phone",{"_index":818,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/Migration20250730220636.html":{},"entities/User.html":{}}}],["phone_number",{"_index":1074,"title":{},"body":{"classes/Migration20250730220636.html":{}}}],["phonenumber",{"_index":795,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateProfileDto.html":{},"entities/User.html":{}}}],["pipeline",{"_index":253,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["pipeline.exec",{"_index":258,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["pipeline.incr(key",{"_index":257,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["pipeline.set(key",{"_index":255,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["port",{"_index":873,"title":{},"body":{"modules/EmailModule.html":{}}}],["post",{"_index":310,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{},"miscellaneous/enumerations.html":{}}}],["post('change",{"_index":1447,"title":{},"body":{"controllers/UsersController.html":{}}}],["post('forgot",{"_index":346,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('login",{"_index":331,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('refresh",{"_index":341,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('reset",{"_index":350,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('sign",{"_index":1472,"title":{},"body":{"controllers/UsersController.html":{}}}],["postal",{"_index":821,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["postal/zip",{"_index":1096,"title":{},"body":{"classes/Migration20250730220636.html":{},"entities/User.html":{}}}],["postal_code",{"_index":1070,"title":{},"body":{"classes/Migration20250730220636.html":{}}}],["postalcode",{"_index":796,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/User.html":{}}}],["prefix",{"_index":278,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["presigner",{"_index":1292,"title":{},"body":{"injectables/S3Service.html":{},"dependencies.html":{}}}],["presigner.presign",{"_index":1323,"title":{},"body":{"injectables/S3Service.html":{}}}],["preventserverstart",{"_index":1803,"title":{},"body":{"miscellaneous/variables.html":{}}}],["primary",{"_index":1082,"title":{},"body":{"classes/Migration20250730220636.html":{}}}],["primarykey",{"_index":565,"title":{},"body":{"classes/BaseEntity.html":{}}}],["primarykey({type",{"_index":557,"title":{},"body":{"classes/BaseEntity.html":{}}}],["private",{"_index":175,"title":{},"body":{"injectables/AppRedisService.html":{},"injectables/AuthService.html":{},"classes/CatchEverythingFilter.html":{},"injectables/CloudinaryService.html":{},"injectables/CreateUserCommand.html":{},"classes/EmailService.html":{},"injectables/HttpClientService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/MorganMiddleware.html":{},"classes/PasswordResetEmailConsumer.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/S3Service.html":{},"injectables/SchemaService.html":{},"injectables/StripeService.html":{},"injectables/SuccessResponseInterceptor.html":{},"entities/User.html":{},"injectables/UsersService.html":{},"injectables/UsersSubscriber.html":{}}}],["process",{"_index":1147,"title":{},"body":{"classes/PasswordResetEmailConsumer.html":{}}}],["process(job",{"_index":1150,"title":{},"body":{"classes/PasswordResetEmailConsumer.html":{}}}],["processed",{"_index":1170,"title":{},"body":{"classes/PasswordResetEmailConsumer.html":{}}}],["processing",{"_index":1162,"title":{},"body":{"classes/PasswordResetEmailConsumer.html":{}}}],["processor",{"_index":1154,"title":{},"body":{"classes/PasswordResetEmailConsumer.html":{}}}],["processor(password_reset_email_queue_name",{"_index":1159,"title":{},"body":{"classes/PasswordResetEmailConsumer.html":{}}}],["production",{"_index":1330,"title":{},"body":{"injectables/SchemaService.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["profile",{"_index":856,"title":{},"body":{"classes/CreateUserResponseDto.html":{},"classes/GetProfileResponseDto.html":{},"controllers/UsersController.html":{}}}],["profile')@httpcode(httpstatus.ok)@apioperation({summary",{"_index":1460,"title":{},"body":{"controllers/UsersController.html":{}}}],["profile'})@apibody({type",{"_index":1461,"title":{},"body":{"controllers/UsersController.html":{}}}],["profile.dto",{"_index":1469,"title":{},"body":{"controllers/UsersController.html":{}}}],["profile.dto.ts",{"_index":1401,"title":{},"body":{"classes/UpdateProfileDto.html":{},"coverage.html":{}}}],["project",{"_index":1750,"title":{},"body":{"index.html":{}}}],["prometheus",{"_index":1663,"title":{},"body":{"dependencies.html":{}}}],["prometheusexporter",{"_index":1629,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["promise",{"_index":195,"title":{},"body":{"injectables/AppRedisService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CloudinaryService.html":{},"injectables/CreateUserCommand.html":{},"classes/EmailService.html":{},"injectables/HttpClientService.html":{},"interfaces/IPaymentService.html":{},"interfaces/IStrorageService.html":{},"injectables/LocalStrategy.html":{},"classes/Migration20250730220636.html":{},"guards/RoleGuard.html":{},"injectables/S3Service.html":{},"injectables/StripeService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["promise((resolve",{"_index":711,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["promise.all",{"_index":1544,"title":{},"body":{"injectables/UsersService.html":{}}}],["propagators",{"_index":1797,"title":{},"body":{"miscellaneous/variables.html":{}}}],["properties",{"_index":9,"title":{"properties.html":{}},"body":{"interfaces/ApiResponse.html":{},"injectables/AppRedisService.html":{},"classes/AuthResponseDto.html":{},"injectables/AuthService.html":{},"classes/BaseEntity.html":{},"classes/CatchEverythingFilter.html":{},"classes/ChangePasswordDto.html":{},"injectables/CreateUserCommand.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserResponseDto.html":{},"interfaces/ErrorResponse.html":{},"classes/ForgotPasswordDto.html":{},"classes/GetProfileResponseDto.html":{},"injectables/HttpClientService.html":{},"classes/LoginDto.html":{},"classes/RefreshTokenDto.html":{},"classes/ResetPasswordDto.html":{},"injectables/S3Service.html":{},"injectables/SchemaService.html":{},"entities/User.html":{},"injectables/UsersService.html":{},"properties.html":{}}}],["property",{"_index":566,"title":{},"body":{"classes/BaseEntity.html":{},"entities/User.html":{}}}],["property({type",{"_index":544,"title":{},"body":{"classes/BaseEntity.html":{},"entities/User.html":{}}}],["property({unique",{"_index":1418,"title":{},"body":{"entities/User.html":{}}}],["provide",{"_index":395,"title":{},"body":{"modules/AuthModule.html":{},"modules/PaymentModule.html":{},"modules/StorageModule.html":{}}}],["provided",{"_index":1205,"title":{},"body":{"classes/RefreshTokenDto.html":{}}}],["providers",{"_index":58,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRedisModule.html":{},"modules/AuthModule.html":{},"modules/EmailModule.html":{},"modules/HttpClientModule.html":{},"modules/PaymentModule.html":{},"injectables/S3Service.html":{},"modules/StorageModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"overview.html":{}}}],["public",{"_index":41,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"modules/PaymentModule.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["public()@post('forgot",{"_index":285,"title":{},"body":{"controllers/AuthController.html":{}}}],["public()@post('refresh')@httpcode(httpstatus.ok)@apioperation({summary",{"_index":300,"title":{},"body":{"controllers/AuthController.html":{}}}],["public()@post('reset",{"_index":307,"title":{},"body":{"controllers/AuthController.html":{}}}],["public()@post('sign",{"_index":1450,"title":{},"body":{"controllers/UsersController.html":{}}}],["public_id=${result.public_id",{"_index":722,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["pug",{"_index":1705,"title":{},"body":{"dependencies.html":{}}}],["pugadapter",{"_index":867,"title":{},"body":{"modules/EmailModule.html":{}}}],["put",{"_index":963,"title":{},"body":{"interfaces/IStrorageService.html":{},"injectables/S3Service.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["query",{"_index":1512,"title":{},"body":{"injectables/UsersService.html":{}}}],["query?.email",{"_index":1534,"title":{},"body":{"injectables/UsersService.html":{}}}],["query?.id",{"_index":1532,"title":{},"body":{"injectables/UsersService.html":{}}}],["queue",{"_index":423,"title":{},"body":{"injectables/AuthService.html":{},"modules/PaymentModule.html":{},"injectables/StripeService.html":{},"miscellaneous/variables.html":{}}}],["queued",{"_index":1397,"title":{},"body":{"injectables/StripeService.html":{}}}],["queues",{"_index":136,"title":{},"body":{"modules/AppModule.html":{}}}],["quickly",{"_index":1723,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["r",{"_index":754,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["raw",{"_index":1000,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["readonly",{"_index":139,"title":{},"body":{"modules/AppModule.html":{},"injectables/AppRedisService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CatchEverythingFilter.html":{},"injectables/CloudinaryService.html":{},"injectables/CreateUserCommand.html":{},"classes/EmailService.html":{},"injectables/HttpClientService.html":{},"injectables/MorganMiddleware.html":{},"classes/PasswordResetEmailConsumer.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/RequestContextMiddleware.html":{},"guards/RoleGuard.html":{},"injectables/S3Service.html":{},"injectables/SchemaService.html":{},"injectables/StripeService.html":{},"injectables/SuccessResponseInterceptor.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/UsersSubscriber.html":{}}}],["readylog",{"_index":167,"title":{},"body":{"modules/AppRedisModule.html":{}}}],["received",{"_index":1393,"title":{},"body":{"injectables/StripeService.html":{}}}],["record",{"_index":549,"title":{},"body":{"classes/BaseEntity.html":{},"injectables/CreateUserCommand.html":{},"classes/EmailService.html":{},"classes/Migration20250730220636.html":{}}}],["redis",{"_index":164,"title":{},"body":{"modules/AppRedisModule.html":{},"injectables/AppRedisService.html":{},"dependencies.html":{}}}],["redis.service",{"_index":161,"title":{},"body":{"modules/AppRedisModule.html":{}}}],["redismodule",{"_index":162,"title":{},"body":{"modules/AppRedisModule.html":{}}}],["redismodule.forrootasync",{"_index":165,"title":{},"body":{"modules/AppRedisModule.html":{}}}],["redisservice",{"_index":186,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["referrer",{"_index":1135,"title":{},"body":{"injectables/MorganMiddleware.html":{}}}],["reflect",{"_index":1707,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":971,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/RoleGuard.html":{}}}],["reflector.createdecorator",{"_index":1807,"title":{},"body":{"miscellaneous/variables.html":{}}}],["refresh",{"_index":281,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/RefreshTokenDto.html":{}}}],["refresh(@body",{"_index":342,"title":{},"body":{"controllers/AuthController.html":{}}}],["refresh(body",{"_index":299,"title":{},"body":{"controllers/AuthController.html":{}}}],["refresh(refreshtoken",{"_index":429,"title":{},"body":{"injectables/AuthService.html":{}}}],["refresh_token",{"_index":334,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["refreshed",{"_index":345,"title":{},"body":{"controllers/AuthController.html":{}}}],["refreshtoken",{"_index":340,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/RefreshTokenDto.html":{}}}],["refreshtokendto",{"_index":303,"title":{"classes/RefreshTokenDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/RefreshTokenDto.html":{},"coverage.html":{}}}],["region",{"_index":1319,"title":{},"body":{"injectables/S3Service.html":{},"modules/StorageModule.html":{}}}],["register",{"_index":1174,"title":{},"body":{"modules/PaymentModule.html":{},"modules/StorageModule.html":{}}}],["reject",{"_index":712,"title":{},"body":{"injectables/CloudinaryService.html":{},"injectables/JwtStrategy.html":{}}}],["reject(error",{"_index":721,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["remote",{"_index":1129,"title":{},"body":{"injectables/MorganMiddleware.html":{}}}],["repository",{"_index":1749,"title":{},"body":{"index.html":{}}}],["req",{"_index":298,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtStrategy.html":{},"injectables/MorganMiddleware.html":{},"injectables/RequestContextMiddleware.html":{},"controllers/UsersController.html":{}}}],["req.url",{"_index":1127,"title":{},"body":{"injectables/MorganMiddleware.html":{}}}],["req.url.match(/\\/v1\\/queues",{"_index":1128,"title":{},"body":{"injectables/MorganMiddleware.html":{}}}],["req.user",{"_index":336,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["req.user.id",{"_index":1484,"title":{},"body":{"controllers/UsersController.html":{}}}],["req?.user?.id",{"_index":1481,"title":{},"body":{"controllers/UsersController.html":{}}}],["req[body",{"_index":1138,"title":{},"body":{"injectables/MorganMiddleware.html":{}}}],["req[header",{"_index":1137,"title":{},"body":{"injectables/MorganMiddleware.html":{}}}],["request",{"_index":287,"title":{},"body":{"controllers/AuthController.html":{},"classes/CatchEverythingFilter.html":{},"injectables/HttpClientService.html":{},"injectables/JwtStrategy.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/RequestContextMiddleware.html":{},"guards/RoleGuard.html":{},"injectables/S3Service.html":{},"injectables/SuccessResponseInterceptor.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["request.method",{"_index":630,"title":{},"body":{"classes/CatchEverythingFilter.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/SuccessResponseInterceptor.html":{}}}],["request.url",{"_index":631,"title":{},"body":{"classes/CatchEverythingFilter.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/SuccessResponseInterceptor.html":{}}}],["request?.user?.role",{"_index":1268,"title":{},"body":{"guards/RoleGuard.html":{}}}],["requestbodyandresponseinterceptor",{"_index":1208,"title":{"injectables/RequestBodyAndResponseInterceptor.html":{}},"body":{"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/SuccessResponseInterceptor.html":{},"coverage.html":{}}}],["requestcontext",{"_index":1248,"title":{},"body":{"injectables/RequestContextMiddleware.html":{}}}],["requestcontext.create(this.orm.em",{"_index":1249,"title":{},"body":{"injectables/RequestContextMiddleware.html":{}}}],["requestcontextmiddleware",{"_index":115,"title":{"injectables/RequestContextMiddleware.html":{}},"body":{"modules/AppModule.html":{},"injectables/RequestContextMiddleware.html":{},"coverage.html":{}}}],["requested",{"_index":533,"title":{},"body":{"injectables/AuthService.html":{},"classes/Migration20250730220636.html":{},"entities/User.html":{}}}],["requestmethod",{"_index":83,"title":{},"body":{"modules/AppModule.html":{}}}],["requestmethod.all",{"_index":142,"title":{},"body":{"modules/AppModule.html":{}}}],["requesturl",{"_index":616,"title":{},"body":{"classes/CatchEverythingFilter.html":{}}}],["require('buffer",{"_index":691,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["required",{"_index":743,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["requiredrole",{"_index":1265,"title":{},"body":{"guards/RoleGuard.html":{}}}],["res",{"_index":1121,"title":{},"body":{"injectables/MorganMiddleware.html":{},"injectables/RequestContextMiddleware.html":{}}}],["res.statuscode",{"_index":1140,"title":{},"body":{"injectables/MorganMiddleware.html":{}}}],["res[content",{"_index":1132,"title":{},"body":{"injectables/MorganMiddleware.html":{}}}],["reset",{"_index":69,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRedisModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/EmailModule.html":{},"modules/HttpClientModule.html":{},"classes/Migration20250730220636.html":{},"classes/ResetPasswordDto.html":{},"entities/User.html":{},"modules/UsersModule.html":{},"miscellaneous/enumerations.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["reset'})@apibody({type",{"_index":289,"title":{},"body":{"controllers/AuthController.html":{}}}],["resetpassword",{"_index":282,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["resetpassword(body",{"_index":305,"title":{},"body":{"controllers/AuthController.html":{}}}],["resetpassword(resettoken",{"_index":431,"title":{},"body":{"injectables/AuthService.html":{}}}],["resetpassworddto",{"_index":306,"title":{"classes/ResetPasswordDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/ResetPasswordDto.html":{},"coverage.html":{}}}],["resettoken",{"_index":351,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ResetPasswordDto.html":{}}}],["reseturl",{"_index":519,"title":{},"body":{"injectables/AuthService.html":{},"classes/PasswordResetEmailConsumer.html":{}}}],["resolve(result",{"_index":724,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["resource_type",{"_index":716,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["response",{"_index":614,"title":{},"body":{"classes/CatchEverythingFilter.html":{},"interfaces/IStrorageService.html":{},"injectables/MorganMiddleware.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/RequestContextMiddleware.html":{},"injectables/S3Service.html":{},"injectables/SuccessResponseInterceptor.html":{}}}],["response.dto.ts",{"_index":400,"title":{},"body":{"classes/AuthResponseDto.html":{},"coverage.html":{}}}],["response.dto.ts:14",{"_index":409,"title":{},"body":{"classes/AuthResponseDto.html":{}}}],["response.dto.ts:8",{"_index":405,"title":{},"body":{"classes/AuthResponseDto.html":{}}}],["response.interface",{"_index":327,"title":{},"body":{"controllers/AuthController.html":{},"classes/CatchEverythingFilter.html":{},"controllers/UsersController.html":{}}}],["response.interface.ts",{"_index":7,"title":{},"body":{"interfaces/ApiResponse.html":{},"interfaces/ErrorResponse.html":{},"coverage.html":{}}}],["response.message",{"_index":1234,"title":{},"body":{"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/SuccessResponseInterceptor.html":{}}}],["response.statuscode",{"_index":1231,"title":{},"body":{"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/SuccessResponseInterceptor.html":{}}}],["response.ts",{"_index":1626,"title":{},"body":{"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["response?.data",{"_index":1236,"title":{},"body":{"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/SuccessResponseInterceptor.html":{}}}],["response?.message",{"_index":1233,"title":{},"body":{"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/SuccessResponseInterceptor.html":{}}}],["response?.statuscode",{"_index":1229,"title":{},"body":{"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/SuccessResponseInterceptor.html":{}}}],["responsebody",{"_index":628,"title":{},"body":{"classes/CatchEverythingFilter.html":{}}}],["responsedata",{"_index":1235,"title":{},"body":{"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/SuccessResponseInterceptor.html":{}}}],["result",{"_index":266,"title":{},"body":{"injectables/AppRedisService.html":{},"injectables/AuthService.html":{},"injectables/CloudinaryService.html":{},"injectables/UsersService.html":{}}}],["results",{"_index":22,"title":{},"body":{"interfaces/ApiResponse.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AppRedisModule.html":{},"injectables/AppRedisService.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/AuthResponseDto.html":{},"injectables/AuthService.html":{},"classes/BaseEntity.html":{},"classes/CatchEverythingFilter.html":{},"classes/ChangePasswordDto.html":{},"injectables/CloudinaryService.html":{},"injectables/CreateUserCommand.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserResponseDto.html":{},"modules/EmailModule.html":{},"classes/EmailService.html":{},"interfaces/ErrorResponse.html":{},"classes/ForgotPasswordDto.html":{},"classes/GetProfileResponseDto.html":{},"modules/HttpClientModule.html":{},"injectables/HttpClientService.html":{},"interfaces/IPaymentService.html":{},"interfaces/IStrorageService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"classes/Migration20250730220636.html":{},"injectables/MorganMiddleware.html":{},"classes/PasswordResetEmailConsumer.html":{},"modules/PaymentModule.html":{},"classes/RefreshTokenDto.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/RequestContextMiddleware.html":{},"classes/ResetPasswordDto.html":{},"guards/RoleGuard.html":{},"injectables/S3Service.html":{},"injectables/SchemaService.html":{},"modules/StorageModule.html":{},"injectables/StripeService.html":{},"injectables/SuccessResponseInterceptor.html":{},"classes/UpdateProfileDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/UsersSubscriber.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["results[ttl",{"_index":260,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["return",{"_index":50,"title":{},"body":{"controllers/AppController.html":{},"modules/AppRedisModule.html":{},"injectables/AppRedisService.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CatchEverythingFilter.html":{},"injectables/CloudinaryService.html":{},"injectables/CreateUserCommand.html":{},"classes/CreateUserDto.html":{},"injectables/HttpClientService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/MorganMiddleware.html":{},"modules/PaymentModule.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"guards/RoleGuard.html":{},"injectables/S3Service.html":{},"modules/StorageModule.html":{},"injectables/StripeService.html":{},"injectables/SuccessResponseInterceptor.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/UsersSubscriber.html":{}}}],["returns",{"_index":38,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppRedisService.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CatchEverythingFilter.html":{},"injectables/CloudinaryService.html":{},"injectables/CreateUserCommand.html":{},"classes/EmailService.html":{},"injectables/HttpClientService.html":{},"interfaces/IPaymentService.html":{},"interfaces/IStrorageService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/Migration20250730220636.html":{},"injectables/MorganMiddleware.html":{},"classes/PasswordResetEmailConsumer.html":{},"modules/PaymentModule.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/RequestContextMiddleware.html":{},"guards/RoleGuard.html":{},"injectables/S3Service.html":{},"injectables/SchemaService.html":{},"modules/StorageModule.html":{},"injectables/StripeService.html":{},"injectables/SuccessResponseInterceptor.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/UsersSubscriber.html":{},"miscellaneous/functions.html":{}}}],["role",{"_index":755,"title":{},"body":{"injectables/CreateUserCommand.html":{},"classes/CreateUserDto.html":{},"classes/Migration20250730220636.html":{},"guards/RoleGuard.html":{},"classes/UpdateProfileDto.html":{},"entities/User.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["roleguard",{"_index":1260,"title":{"guards/RoleGuard.html":{}},"body":{"guards/RoleGuard.html":{},"coverage.html":{}}}],["route",{"_index":135,"title":{},"body":{"modules/AppModule.html":{},"classes/CatchEverythingFilter.html":{},"guards/RoleGuard.html":{}}}],["run",{"_index":735,"title":{},"body":{"injectables/CreateUserCommand.html":{},"index.html":{}}}],["run(inputs",{"_index":758,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["rxjs",{"_index":934,"title":{},"body":{"injectables/HttpClientService.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"guards/RoleGuard.html":{},"injectables/SuccessResponseInterceptor.html":{},"dependencies.html":{}}}],["rxjs/operators",{"_index":1220,"title":{},"body":{"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/SuccessResponseInterceptor.html":{}}}],["s3",{"_index":1276,"title":{},"body":{"injectables/S3Service.html":{},"modules/StorageModule.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{}}}],["s3.service",{"_index":1346,"title":{},"body":{"modules/StorageModule.html":{}}}],["s3bucket",{"_index":1273,"title":{},"body":{"injectables/S3Service.html":{}}}],["s3client",{"_index":1275,"title":{},"body":{"injectables/S3Service.html":{},"modules/StorageModule.html":{}}}],["s3module",{"_index":1348,"title":{},"body":{"modules/StorageModule.html":{}}}],["s3module.forrootasync",{"_index":1349,"title":{},"body":{"modules/StorageModule.html":{}}}],["s3putobjectresponse",{"_index":961,"title":{},"body":{"interfaces/IStrorageService.html":{},"injectables/S3Service.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["s3region",{"_index":1274,"title":{},"body":{"injectables/S3Service.html":{}}}],["s3requestpresigner",{"_index":1289,"title":{},"body":{"injectables/S3Service.html":{}}}],["s3service",{"_index":1271,"title":{"injectables/S3Service.html":{}},"body":{"injectables/S3Service.html":{},"modules/StorageModule.html":{},"coverage.html":{}}}],["s3service(configservice",{"_index":1360,"title":{},"body":{"modules/StorageModule.html":{}}}],["s3service.name",{"_index":1307,"title":{},"body":{"injectables/S3Service.html":{}}}],["s@]+@[^\\s@]+\\.[^\\s@]{2,}$/i",{"_index":775,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["safeuser",{"_index":1479,"title":{},"body":{"controllers/UsersController.html":{}}}],["salt",{"_index":534,"title":{},"body":{"injectables/AuthService.html":{}}}],["saltrounds",{"_index":417,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersSubscriber.html":{}}}],["sanitizebody",{"_index":580,"title":{},"body":{"classes/CatchEverythingFilter.html":{}}}],["sanitizebody(body",{"_index":600,"title":{},"body":{"classes/CatchEverythingFilter.html":{}}}],["schema",{"_index":1337,"title":{},"body":{"injectables/SchemaService.html":{}}}],["schema.service",{"_index":98,"title":{},"body":{"modules/AppModule.html":{}}}],["schemaservice",{"_index":67,"title":{"injectables/SchemaService.html":{}},"body":{"modules/AppModule.html":{},"injectables/SchemaService.html":{},"coverage.html":{},"overview.html":{}}}],["schemaservice.name",{"_index":1339,"title":{},"body":{"injectables/SchemaService.html":{}}}],["sdk/credential",{"_index":1294,"title":{},"body":{"injectables/S3Service.html":{},"dependencies.html":{}}}],["sdk/s3",{"_index":1291,"title":{},"body":{"injectables/S3Service.html":{},"dependencies.html":{}}}],["sdk/util",{"_index":1301,"title":{},"body":{"injectables/S3Service.html":{},"dependencies.html":{}}}],["seconds",{"_index":222,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["secret",{"_index":381,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{}}}],["secretaccesskey",{"_index":1352,"title":{},"body":{"modules/StorageModule.html":{}}}],["secretorkey",{"_index":1031,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["secure",{"_index":875,"title":{},"body":{"modules/EmailModule.html":{}}}],["securely",{"_index":1724,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["sendemail",{"_index":887,"title":{},"body":{"classes/EmailService.html":{}}}],["sendemail(to",{"_index":891,"title":{},"body":{"classes/EmailService.html":{}}}],["sending",{"_index":896,"title":{},"body":{"classes/EmailService.html":{}}}],["sent",{"_index":349,"title":{},"body":{"controllers/AuthController.html":{},"classes/EmailService.html":{},"classes/ResetPasswordDto.html":{}}}],["serializable",{"_index":1543,"title":{},"body":{"injectables/UsersService.html":{}}}],["services/email/email.service",{"_index":1156,"title":{},"body":{"classes/PasswordResetEmailConsumer.html":{}}}],["services/redis/redis.module",{"_index":374,"title":{},"body":{"modules/AuthModule.html":{},"modules/UsersModule.html":{}}}],["services/redis/redis.service",{"_index":454,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["session",{"_index":1004,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/StripeService.html":{}}}],["session.id",{"_index":1381,"title":{},"body":{"injectables/StripeService.html":{}}}],["set",{"_index":182,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["set(key",{"_index":213,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["setmetadata(is_public_key",{"_index":1790,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setting",{"_index":243,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["setup",{"_index":1751,"title":{},"body":{"index.html":{}}}],["setupswagger",{"_index":1610,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["setupswagger(app",{"_index":1743,"title":{},"body":{"miscellaneous/functions.html":{}}}],["sha256",{"_index":1320,"title":{},"body":{"injectables/S3Service.html":{}}}],["sign",{"_index":1452,"title":{},"body":{"controllers/UsersController.html":{}}}],["signedurlobject",{"_index":1322,"title":{},"body":{"injectables/S3Service.html":{}}}],["signoptions",{"_index":383,"title":{},"body":{"modules/AuthModule.html":{}}}],["single",{"_index":1003,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["size=${file.size",{"_index":707,"title":{},"body":{"injectables/CloudinaryService.html":{},"injectables/S3Service.html":{}}}],["smithy/hash",{"_index":1296,"title":{},"body":{"injectables/S3Service.html":{},"dependencies.html":{}}}],["smithy/protocol",{"_index":1299,"title":{},"body":{"injectables/S3Service.html":{},"dependencies.html":{}}}],["smithy/url",{"_index":1287,"title":{},"body":{"injectables/S3Service.html":{}}}],["smtp.auth.user",{"_index":880,"title":{},"body":{"modules/EmailModule.html":{}}}],["soft",{"_index":554,"title":{},"body":{"classes/BaseEntity.html":{},"classes/Migration20250730220636.html":{}}}],["softdelete",{"_index":569,"title":{},"body":{"classes/BaseEntity.html":{}}}],["source",{"_index":4,"title":{},"body":{"interfaces/ApiResponse.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AppRedisModule.html":{},"injectables/AppRedisService.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/AuthResponseDto.html":{},"injectables/AuthService.html":{},"classes/BaseEntity.html":{},"classes/CatchEverythingFilter.html":{},"classes/ChangePasswordDto.html":{},"injectables/CloudinaryService.html":{},"injectables/CreateUserCommand.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserResponseDto.html":{},"modules/EmailModule.html":{},"classes/EmailService.html":{},"interfaces/ErrorResponse.html":{},"classes/ForgotPasswordDto.html":{},"classes/GetProfileResponseDto.html":{},"modules/HttpClientModule.html":{},"injectables/HttpClientService.html":{},"interfaces/IPaymentService.html":{},"interfaces/IStrorageService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"classes/Migration20250730220636.html":{},"injectables/MorganMiddleware.html":{},"classes/PasswordResetEmailConsumer.html":{},"modules/PaymentModule.html":{},"classes/RefreshTokenDto.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/RequestContextMiddleware.html":{},"classes/ResetPasswordDto.html":{},"guards/RoleGuard.html":{},"injectables/S3Service.html":{},"injectables/SchemaService.html":{},"modules/StorageModule.html":{},"injectables/StripeService.html":{},"injectables/SuccessResponseInterceptor.html":{},"classes/UpdateProfileDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/UsersSubscriber.html":{}}}],["springfield",{"_index":838,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["springfield'})@isstring()@isoptional",{"_index":801,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["src/.../auth",{"_index":1781,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../checkout.ts",{"_index":1782,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../common.utils.ts",{"_index":1735,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../index.ts",{"_index":1718,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../main.cli.ts",{"_index":1733,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../main.ts",{"_index":1734,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../mikro",{"_index":1788,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../payment",{"_index":1783,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../public.decorator.ts",{"_index":1786,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../s3",{"_index":1784,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../swagger.config.ts",{"_index":1738,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../time.util.ts",{"_index":1737,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../tracing.ts",{"_index":1787,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../user.util.ts",{"_index":1736,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/app.controller.ts",{"_index":27,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:12",{"_index":37,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":71,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.module.ts:58",{"_index":76,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":271,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":273,"title":{},"body":{"injectables/AppService.html":{}}}],["src/commands/create",{"_index":726,"title":{},"body":{"injectables/CreateUserCommand.html":{},"coverage.html":{}}}],["src/common/constants/index.ts",{"_index":1590,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/common/decorators/index.ts",{"_index":1594,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/common/entities/base.entity.ts",{"_index":539,"title":{},"body":{"classes/BaseEntity.html":{},"coverage.html":{}}}],["src/common/entities/base.entity.ts:15",{"_index":555,"title":{},"body":{"classes/BaseEntity.html":{}}}],["src/common/entities/base.entity.ts:22",{"_index":552,"title":{},"body":{"classes/BaseEntity.html":{}}}],["src/common/entities/base.entity.ts:30",{"_index":563,"title":{},"body":{"classes/BaseEntity.html":{}}}],["src/common/entities/base.entity.ts:8",{"_index":559,"title":{},"body":{"classes/BaseEntity.html":{}}}],["src/common/enums/index.ts",{"_index":1721,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/common/filters/exception.filter.ts",{"_index":573,"title":{},"body":{"classes/CatchEverythingFilter.html":{},"coverage.html":{}}}],["src/common/filters/exception.filter.ts:108",{"_index":597,"title":{},"body":{"classes/CatchEverythingFilter.html":{}}}],["src/common/filters/exception.filter.ts:119",{"_index":592,"title":{},"body":{"classes/CatchEverythingFilter.html":{}}}],["src/common/filters/exception.filter.ts:123",{"_index":601,"title":{},"body":{"classes/CatchEverythingFilter.html":{}}}],["src/common/filters/exception.filter.ts:20",{"_index":583,"title":{},"body":{"classes/CatchEverythingFilter.html":{}}}],["src/common/filters/exception.filter.ts:27",{"_index":589,"title":{},"body":{"classes/CatchEverythingFilter.html":{}}}],["src/common/filters/exception.filter.ts:78",{"_index":599,"title":{},"body":{"classes/CatchEverythingFilter.html":{}}}],["src/common/filters/exception.filter.ts:92",{"_index":595,"title":{},"body":{"classes/CatchEverythingFilter.html":{}}}],["src/common/guards/role.guard.ts",{"_index":1262,"title":{},"body":{"guards/RoleGuard.html":{},"coverage.html":{}}}],["src/common/guards/role.guard.ts:13",{"_index":1263,"title":{},"body":{"guards/RoleGuard.html":{}}}],["src/common/guards/role.guard.ts:16",{"_index":1264,"title":{},"body":{"guards/RoleGuard.html":{}}}],["src/common/interceptors/response.interceptor.ts",{"_index":1209,"title":{},"body":{"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/SuccessResponseInterceptor.html":{},"coverage.html":{}}}],["src/common/interceptors/response.interceptor.ts:16",{"_index":1398,"title":{},"body":{"injectables/SuccessResponseInterceptor.html":{}}}],["src/common/interceptors/response.interceptor.ts:53",{"_index":1211,"title":{},"body":{"injectables/RequestBodyAndResponseInterceptor.html":{}}}],["src/common/interceptors/response.interceptor.ts:56",{"_index":1214,"title":{},"body":{"injectables/RequestBodyAndResponseInterceptor.html":{}}}],["src/common/interfaces/api",{"_index":6,"title":{},"body":{"interfaces/ApiResponse.html":{},"coverage.html":{}}}],["src/common/interfaces/error",{"_index":899,"title":{},"body":{"interfaces/ErrorResponse.html":{},"coverage.html":{}}}],["src/common/middlewares/morgan.middleware.ts",{"_index":1118,"title":{},"body":{"injectables/MorganMiddleware.html":{},"coverage.html":{}}}],["src/common/middlewares/morgan.middleware.ts:11",{"_index":1119,"title":{},"body":{"injectables/MorganMiddleware.html":{}}}],["src/common/middlewares/morgan.middleware.ts:14",{"_index":1122,"title":{},"body":{"injectables/MorganMiddleware.html":{}}}],["src/common/middlewares/request",{"_index":1240,"title":{},"body":{"injectables/RequestContextMiddleware.html":{},"coverage.html":{}}}],["src/common/types/index.ts",{"_index":1600,"title":{},"body":{"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/common/utils/common.utils.ts",{"_index":1602,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/common/utils/time.util.ts",{"_index":1604,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/common/utils/user.util.ts",{"_index":1606,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/config/mikro",{"_index":1607,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/config/swagger.config.ts",{"_index":1609,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/main.cli.ts",{"_index":1611,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/main.ts",{"_index":1612,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/migrations/migration20250730220636.ts",{"_index":1052,"title":{},"body":{"classes/Migration20250730220636.html":{},"coverage.html":{}}}],["src/migrations/migration20250730220636.ts:4",{"_index":1055,"title":{},"body":{"classes/Migration20250730220636.html":{}}}],["src/modules/auth/auth.controller.ts",{"_index":277,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/modules/auth/auth.controller.ts:31",{"_index":297,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/modules/auth/auth.controller.ts:47",{"_index":304,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/modules/auth/auth.controller.ts:63",{"_index":290,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/modules/auth/auth.controller.ts:79",{"_index":309,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/modules/auth/auth.module.ts",{"_index":361,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/modules/auth/auth.service.ts",{"_index":411,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/modules/auth/auth.service.ts:135",{"_index":426,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:160",{"_index":432,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:21",{"_index":441,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:22",{"_index":437,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:23",{"_index":438,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:24",{"_index":440,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:25",{"_index":439,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:26",{"_index":424,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:50",{"_index":435,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:68",{"_index":428,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:83",{"_index":430,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/consumers/auth.consumer.ts",{"_index":1146,"title":{},"body":{"classes/PasswordResetEmailConsumer.html":{},"coverage.html":{}}}],["src/modules/auth/consumers/auth.consumer.ts:12",{"_index":1149,"title":{},"body":{"classes/PasswordResetEmailConsumer.html":{}}}],["src/modules/auth/consumers/auth.consumer.ts:20",{"_index":1152,"title":{},"body":{"classes/PasswordResetEmailConsumer.html":{}}}],["src/modules/auth/decorators/public.decorator.ts",{"_index":1614,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/modules/auth/dto/auth",{"_index":399,"title":{},"body":{"classes/AuthResponseDto.html":{},"coverage.html":{}}}],["src/modules/auth/dto/forgot",{"_index":900,"title":{},"body":{"classes/ForgotPasswordDto.html":{},"coverage.html":{}}}],["src/modules/auth/dto/login.dto.ts",{"_index":1048,"title":{},"body":{"classes/LoginDto.html":{},"coverage.html":{}}}],["src/modules/auth/dto/login.dto.ts:10",{"_index":1049,"title":{},"body":{"classes/LoginDto.html":{}}}],["src/modules/auth/dto/login.dto.ts:16",{"_index":1050,"title":{},"body":{"classes/LoginDto.html":{}}}],["src/modules/auth/dto/refresh",{"_index":1203,"title":{},"body":{"classes/RefreshTokenDto.html":{},"coverage.html":{}}}],["src/modules/auth/dto/reset",{"_index":1250,"title":{},"body":{"classes/ResetPasswordDto.html":{},"coverage.html":{}}}],["src/modules/auth/guards/jwt",{"_index":965,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["src/modules/auth/guards/local",{"_index":1034,"title":{},"body":{"injectables/LocalAuthGuard.html":{},"coverage.html":{}}}],["src/modules/auth/strategies/jwt.strategy.ts",{"_index":990,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/modules/auth/strategies/jwt.strategy.ts:34",{"_index":995,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/modules/auth/strategies/jwt.strategy.ts:8",{"_index":993,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/modules/auth/strategies/local.strategy.ts",{"_index":1036,"title":{},"body":{"injectables/LocalStrategy.html":{},"coverage.html":{}}}],["src/modules/auth/strategies/local.strategy.ts:17",{"_index":1040,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/modules/auth/strategies/local.strategy.ts:9",{"_index":1038,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/modules/auth/types/auth",{"_index":1617,"title":{},"body":{"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/modules/users/dto/change",{"_index":650,"title":{},"body":{"classes/ChangePasswordDto.html":{},"coverage.html":{}}}],["src/modules/users/dto/create",{"_index":788,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/modules/users/dto/responses.dto.ts",{"_index":850,"title":{},"body":{"classes/CreateUserResponseDto.html":{},"classes/GetProfileResponseDto.html":{},"coverage.html":{}}}],["src/modules/users/dto/responses.dto.ts:15",{"_index":852,"title":{},"body":{"classes/CreateUserResponseDto.html":{}}}],["src/modules/users/dto/responses.dto.ts:23",{"_index":905,"title":{},"body":{"classes/GetProfileResponseDto.html":{}}}],["src/modules/users/dto/responses.dto.ts:29",{"_index":904,"title":{},"body":{"classes/GetProfileResponseDto.html":{}}}],["src/modules/users/dto/responses.dto.ts:9",{"_index":853,"title":{},"body":{"classes/CreateUserResponseDto.html":{}}}],["src/modules/users/dto/update",{"_index":1400,"title":{},"body":{"classes/UpdateProfileDto.html":{},"coverage.html":{}}}],["src/modules/users/entities/user.entity.ts",{"_index":1408,"title":{},"body":{"entities/User.html":{},"coverage.html":{}}}],["src/modules/users/entities/user.entity.ts:106",{"_index":1424,"title":{},"body":{"entities/User.html":{}}}],["src/modules/users/entities/user.entity.ts:115",{"_index":1431,"title":{},"body":{"entities/User.html":{}}}],["src/modules/users/entities/user.entity.ts:122",{"_index":1412,"title":{},"body":{"entities/User.html":{}}}],["src/modules/users/entities/user.entity.ts:129",{"_index":1425,"title":{},"body":{"entities/User.html":{}}}],["src/modules/users/entities/user.entity.ts:136",{"_index":1422,"title":{},"body":{"entities/User.html":{}}}],["src/modules/users/entities/user.entity.ts:22",{"_index":1420,"title":{},"body":{"entities/User.html":{}}}],["src/modules/users/entities/user.entity.ts:30",{"_index":1411,"title":{},"body":{"entities/User.html":{}}}],["src/modules/users/entities/user.entity.ts:37",{"_index":1421,"title":{},"body":{"entities/User.html":{}}}],["src/modules/users/entities/user.entity.ts:44",{"_index":1423,"title":{},"body":{"entities/User.html":{}}}],["src/modules/users/entities/user.entity.ts:51",{"_index":1409,"title":{},"body":{"entities/User.html":{}}}],["src/modules/users/entities/user.entity.ts:59",{"_index":1414,"title":{},"body":{"entities/User.html":{}}}],["src/modules/users/entities/user.entity.ts:67",{"_index":1428,"title":{},"body":{"entities/User.html":{}}}],["src/modules/users/entities/user.entity.ts:75",{"_index":1432,"title":{},"body":{"entities/User.html":{}}}],["src/modules/users/entities/user.entity.ts:83",{"_index":1415,"title":{},"body":{"entities/User.html":{}}}],["src/modules/users/entities/user.entity.ts:91",{"_index":1417,"title":{},"body":{"entities/User.html":{}}}],["src/modules/users/entities/user.entity.ts:99",{"_index":1427,"title":{},"body":{"entities/User.html":{}}}],["src/modules/users/subscribers/user.subscriber.ts",{"_index":1554,"title":{},"body":{"injectables/UsersSubscriber.html":{},"coverage.html":{}}}],["src/modules/users/subscribers/user.subscriber.ts:14",{"_index":1558,"title":{},"body":{"injectables/UsersSubscriber.html":{}}}],["src/modules/users/subscribers/user.subscriber.ts:22",{"_index":1564,"title":{},"body":{"injectables/UsersSubscriber.html":{}}}],["src/modules/users/subscribers/user.subscriber.ts:26",{"_index":1561,"title":{},"body":{"injectables/UsersSubscriber.html":{}}}],["src/modules/users/subscribers/user.subscriber.ts:34",{"_index":1563,"title":{},"body":{"injectables/UsersSubscriber.html":{}}}],["src/modules/users/subscribers/user.subscriber.ts:44",{"_index":1571,"title":{},"body":{"injectables/UsersSubscriber.html":{}}}],["src/modules/users/subscribers/user.subscriber.ts:48",{"_index":1569,"title":{},"body":{"injectables/UsersSubscriber.html":{}}}],["src/modules/users/subscribers/user.subscriber.ts:56",{"_index":1567,"title":{},"body":{"injectables/UsersSubscriber.html":{}}}],["src/modules/users/users.controller.ts",{"_index":1443,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/modules/users/users.controller.ts:28",{"_index":1454,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/modules/users/users.controller.ts:40",{"_index":1457,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/modules/users/users.controller.ts:55",{"_index":1462,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/modules/users/users.controller.ts:72",{"_index":1448,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/modules/users/users.module.ts",{"_index":1492,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/modules/users/users.service.ts",{"_index":1496,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["src/modules/users/users.service.ts:127",{"_index":1504,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/modules/users/users.service.ts:20",{"_index":1516,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/modules/users/users.service.ts:21",{"_index":1502,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/modules/users/users.service.ts:32",{"_index":1506,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/modules/users/users.service.ts:49",{"_index":1511,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/modules/users/users.service.ts:97",{"_index":1515,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/schema.service.ts",{"_index":1325,"title":{},"body":{"injectables/SchemaService.html":{},"coverage.html":{}}}],["src/schema.service.ts:14",{"_index":1327,"title":{},"body":{"injectables/SchemaService.html":{}}}],["src/schema.service.ts:22",{"_index":1328,"title":{},"body":{"injectables/SchemaService.html":{}}}],["src/services/email/email.module.ts",{"_index":862,"title":{},"body":{"modules/EmailModule.html":{}}}],["src/services/email/email.service.ts",{"_index":886,"title":{},"body":{"classes/EmailService.html":{},"coverage.html":{}}}],["src/services/email/email.service.ts:11",{"_index":894,"title":{},"body":{"classes/EmailService.html":{}}}],["src/services/email/email.service.ts:4",{"_index":890,"title":{},"body":{"classes/EmailService.html":{}}}],["src/services/http",{"_index":911,"title":{},"body":{"modules/HttpClientModule.html":{},"injectables/HttpClientService.html":{},"coverage.html":{}}}],["src/services/payment/interfaces/payment.interface.ts",{"_index":943,"title":{},"body":{"interfaces/IPaymentService.html":{},"coverage.html":{}}}],["src/services/payment/interfaces/payment.interface.ts:4",{"_index":949,"title":{},"body":{"interfaces/IPaymentService.html":{}}}],["src/services/payment/interfaces/payment.interface.ts:9",{"_index":953,"title":{},"body":{"interfaces/IPaymentService.html":{}}}],["src/services/payment/payment.module.ts",{"_index":1172,"title":{},"body":{"modules/PaymentModule.html":{}}}],["src/services/payment/payment.module.ts:16",{"_index":1175,"title":{},"body":{"modules/PaymentModule.html":{}}}],["src/services/payment/stripe.service.ts",{"_index":1363,"title":{},"body":{"injectables/StripeService.html":{},"coverage.html":{}}}],["src/services/payment/stripe.service.ts:14",{"_index":1365,"title":{},"body":{"injectables/StripeService.html":{}}}],["src/services/payment/stripe.service.ts:23",{"_index":1366,"title":{},"body":{"injectables/StripeService.html":{}}}],["src/services/payment/stripe.service.ts:45",{"_index":1367,"title":{},"body":{"injectables/StripeService.html":{}}}],["src/services/payment/stripe.service.ts:60",{"_index":1371,"title":{},"body":{"injectables/StripeService.html":{}}}],["src/services/payment/types/checkout.ts",{"_index":1621,"title":{},"body":{"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/services/payment/types/payment",{"_index":1622,"title":{},"body":{"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/services/redis/redis.module.ts",{"_index":160,"title":{},"body":{"modules/AppRedisModule.html":{}}}],["src/services/redis/redis.service.ts",{"_index":174,"title":{},"body":{"injectables/AppRedisService.html":{},"coverage.html":{}}}],["src/services/redis/redis.service.ts:106",{"_index":202,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["src/services/redis/redis.service.ts:29",{"_index":217,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["src/services/redis/redis.service.ts:46",{"_index":208,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["src/services/redis/redis.service.ts:57",{"_index":211,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["src/services/redis/redis.service.ts:72",{"_index":189,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["src/services/redis/redis.service.ts:76",{"_index":206,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["src/services/redis/redis.service.ts:8",{"_index":187,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["src/services/redis/redis.service.ts:90",{"_index":193,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["src/services/storage/cloudinary.service.ts",{"_index":677,"title":{},"body":{"injectables/CloudinaryService.html":{},"coverage.html":{}}}],["src/services/storage/cloudinary.service.ts:14",{"_index":680,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["src/services/storage/cloudinary.service.ts:26",{"_index":685,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["src/services/storage/interfaces/storage.interface.ts",{"_index":955,"title":{},"body":{"interfaces/IStrorageService.html":{},"coverage.html":{}}}],["src/services/storage/interfaces/storage.interface.ts:12",{"_index":959,"title":{},"body":{"interfaces/IStrorageService.html":{}}}],["src/services/storage/interfaces/storage.interface.ts:7",{"_index":960,"title":{},"body":{"interfaces/IStrorageService.html":{}}}],["src/services/storage/s3.service.ts",{"_index":1272,"title":{},"body":{"injectables/S3Service.html":{},"coverage.html":{}}}],["src/services/storage/s3.service.ts:19",{"_index":1281,"title":{},"body":{"injectables/S3Service.html":{}}}],["src/services/storage/s3.service.ts:20",{"_index":1282,"title":{},"body":{"injectables/S3Service.html":{}}}],["src/services/storage/s3.service.ts:21",{"_index":1277,"title":{},"body":{"injectables/S3Service.html":{}}}],["src/services/storage/s3.service.ts:32",{"_index":1279,"title":{},"body":{"injectables/S3Service.html":{}}}],["src/services/storage/s3.service.ts:62",{"_index":1278,"title":{},"body":{"injectables/S3Service.html":{}}}],["src/services/storage/storage.module.ts",{"_index":1341,"title":{},"body":{"modules/StorageModule.html":{}}}],["src/services/storage/storage.module.ts:11",{"_index":1342,"title":{},"body":{"modules/StorageModule.html":{}}}],["src/services/storage/types/s3",{"_index":1625,"title":{},"body":{"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/templates/email",{"_index":884,"title":{},"body":{"modules/EmailModule.html":{}}}],["src/tracing.ts",{"_index":1627,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["st",{"_index":800,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["start",{"_index":1755,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":1758,"title":{},"body":{"index.html":{}}}],["start:prodrun",{"_index":1759,"title":{},"body":{"index.html":{}}}],["started",{"_index":1746,"title":{"index.html":{}},"body":{}}],["starter",{"_index":1748,"title":{},"body":{"index.html":{}}}],["starting",{"_index":705,"title":{},"body":{"injectables/CloudinaryService.html":{},"injectables/S3Service.html":{}}}],["state",{"_index":797,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/Migration20250730220636.html":{},"entities/User.html":{}}}],["state/province",{"_index":1098,"title":{},"body":{"classes/Migration20250730220636.html":{},"entities/User.html":{}}}],["statements",{"_index":1587,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":1173,"title":{},"body":{"modules/PaymentModule.html":{},"modules/StorageModule.html":{}}}],["status",{"_index":645,"title":{},"body":{"classes/CatchEverythingFilter.html":{},"injectables/MorganMiddleware.html":{}}}],["statuscode",{"_index":13,"title":{},"body":{"interfaces/ApiResponse.html":{},"controllers/AuthController.html":{},"classes/CatchEverythingFilter.html":{},"interfaces/ErrorResponse.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/SuccessResponseInterceptor.html":{},"controllers/UsersController.html":{}}}],["stops",{"_index":1020,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["storage",{"_index":1362,"title":{},"body":{"modules/StorageModule.html":{}}}],["storage_provider",{"_index":1344,"title":{},"body":{"modules/StorageModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["storagedriverenum",{"_index":1345,"title":{},"body":{"modules/StorageModule.html":{},"miscellaneous/enumerations.html":{}}}],["storagedriverenum.cloudinary",{"_index":1357,"title":{},"body":{"modules/StorageModule.html":{}}}],["storagedriverenum.s3",{"_index":1359,"title":{},"body":{"modules/StorageModule.html":{}}}],["storagemodule",{"_index":1340,"title":{"modules/StorageModule.html":{}},"body":{"modules/StorageModule.html":{},"modules.html":{}}}],["store",{"_index":219,"title":{},"body":{"injectables/AppRedisService.html":{},"injectables/JwtStrategy.html":{}}}],["stored",{"_index":1007,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["strategies/jwt.strategy",{"_index":371,"title":{},"body":{"modules/AuthModule.html":{}}}],["strategies/local.strategy",{"_index":370,"title":{},"body":{"modules/AuthModule.html":{}}}],["strategy",{"_index":1025,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["stream",{"_index":692,"title":{},"body":{"injectables/CloudinaryService.html":{},"injectables/MorganMiddleware.html":{},"dependencies.html":{}}}],["street",{"_index":1093,"title":{},"body":{"classes/Migration20250730220636.html":{},"entities/User.html":{}}}],["strict",{"_index":885,"title":{},"body":{"modules/EmailModule.html":{}}}],["string",{"_index":17,"title":{},"body":{"interfaces/ApiResponse.html":{},"controllers/AppController.html":{},"injectables/AppRedisService.html":{},"injectables/AppService.html":{},"classes/AuthResponseDto.html":{},"injectables/AuthService.html":{},"classes/BaseEntity.html":{},"classes/CatchEverythingFilter.html":{},"classes/ChangePasswordDto.html":{},"injectables/CreateUserCommand.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserResponseDto.html":{},"classes/EmailService.html":{},"interfaces/ErrorResponse.html":{},"classes/ForgotPasswordDto.html":{},"classes/GetProfileResponseDto.html":{},"injectables/HttpClientService.html":{},"interfaces/IStrorageService.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"injectables/MorganMiddleware.html":{},"classes/RefreshTokenDto.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"classes/ResetPasswordDto.html":{},"guards/RoleGuard.html":{},"injectables/S3Service.html":{},"injectables/SuccessResponseInterceptor.html":{},"entities/User.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["stringvalue",{"_index":436,"title":{},"body":{"injectables/AuthService.html":{}}}],["stripe",{"_index":954,"title":{},"body":{"interfaces/IPaymentService.html":{},"modules/PaymentModule.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"guards/RoleGuard.html":{},"injectables/StripeService.html":{},"injectables/SuccessResponseInterceptor.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{}}}],["stripe.checkout.sessioncreateparams",{"_index":947,"title":{},"body":{"interfaces/IPaymentService.html":{},"injectables/StripeService.html":{}}}],["stripe.paymentintent",{"_index":1389,"title":{},"body":{"injectables/StripeService.html":{}}}],["stripe.paymentintentcreateparams",{"_index":952,"title":{},"body":{"interfaces/IPaymentService.html":{},"injectables/StripeService.html":{}}}],["stripe.paymentintentsucceededevent",{"_index":1369,"title":{},"body":{"injectables/StripeService.html":{}}}],["stripe.paymentintentsucceededevent.data",{"_index":1387,"title":{},"body":{"injectables/StripeService.html":{}}}],["stripe.requestoptions",{"_index":948,"title":{},"body":{"interfaces/IPaymentService.html":{},"injectables/StripeService.html":{}}}],["stripe.service",{"_index":1183,"title":{},"body":{"modules/PaymentModule.html":{}}}],["stripe.webhooksecret.account",{"_index":1192,"title":{},"body":{"modules/PaymentModule.html":{}}}],["stripe.webhooksecret.accounttest",{"_index":1194,"title":{},"body":{"modules/PaymentModule.html":{}}}],["stripe_client_token",{"_index":1177,"title":{},"body":{"modules/PaymentModule.html":{}}}],["stripe_webhook_context_type",{"_index":1216,"title":{},"body":{"injectables/RequestBodyAndResponseInterceptor.html":{},"guards/RoleGuard.html":{},"injectables/SuccessResponseInterceptor.html":{}}}],["stripeclient",{"_index":1197,"title":{},"body":{"modules/PaymentModule.html":{},"injectables/StripeService.html":{}}}],["stripecurrencyenum",{"_index":1720,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["stripemodule",{"_index":1178,"title":{},"body":{"modules/PaymentModule.html":{}}}],["stripemodule.forrootasync",{"_index":1185,"title":{},"body":{"modules/PaymentModule.html":{}}}],["stripesecrets",{"_index":1189,"title":{},"body":{"modules/PaymentModule.html":{}}}],["stripeservice",{"_index":1182,"title":{"injectables/StripeService.html":{}},"body":{"modules/PaymentModule.html":{},"injectables/StripeService.html":{},"coverage.html":{}}}],["stripeservice.name",{"_index":1379,"title":{},"body":{"injectables/StripeService.html":{}}}],["stripewebhookhandler",{"_index":1374,"title":{},"body":{"injectables/StripeService.html":{}}}],["stripewebhookhandler('payment_intent.succeeded",{"_index":1370,"title":{},"body":{"injectables/StripeService.html":{}}}],["strong.pass",{"_index":653,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginDto.html":{}}}],["sub",{"_index":487,"title":{},"body":{"injectables/AuthService.html":{}}}],["subject",{"_index":892,"title":{},"body":{"classes/EmailService.html":{}}}],["subscribers/user.subscriber",{"_index":1494,"title":{},"body":{"modules/UsersModule.html":{}}}],["success",{"_index":407,"title":{},"body":{"classes/AuthResponseDto.html":{},"classes/CreateUserResponseDto.html":{},"classes/GetProfileResponseDto.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/SuccessResponseInterceptor.html":{}}}],["successful",{"_index":338,"title":{},"body":{"controllers/AuthController.html":{},"classes/AuthResponseDto.html":{},"injectables/CloudinaryService.html":{},"injectables/HttpClientService.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/S3Service.html":{},"injectables/SuccessResponseInterceptor.html":{}}}],["successfully",{"_index":227,"title":{},"body":{"injectables/AppRedisService.html":{},"classes/CreateUserResponseDto.html":{},"classes/EmailService.html":{},"classes/GetProfileResponseDto.html":{},"classes/PasswordResetEmailConsumer.html":{},"injectables/StripeService.html":{},"controllers/UsersController.html":{}}}],["successresponseinterceptor",{"_index":1221,"title":{"injectables/SuccessResponseInterceptor.html":{}},"body":{"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/SuccessResponseInterceptor.html":{},"coverage.html":{}}}],["summary",{"_index":49,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["super",{"_index":772,"title":{},"body":{"injectables/CreateUserCommand.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/PasswordResetEmailConsumer.html":{}}}],["super.canactivate(context",{"_index":985,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["support",{"_index":1001,"title":{},"body":{"injectables/JwtStrategy.html":{},"modules.html":{}}}],["svg",{"_index":1767,"title":{},"body":{"modules.html":{}}}],["symbol",{"_index":665,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/ResetPasswordDto.html":{}}}],["synchronized",{"_index":1338,"title":{},"body":{"injectables/SchemaService.html":{}}}],["system",{"_index":1528,"title":{},"body":{"injectables/UsersService.html":{}}}],["t",{"_index":14,"title":{},"body":{"interfaces/ApiResponse.html":{}}}],["table",{"_index":1059,"title":{},"body":{"classes/Migration20250730220636.html":{},"coverage.html":{}}}],["tablename",{"_index":1438,"title":{},"body":{"entities/User.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":1630,"title":{},"body":{"coverage.html":{}}}],["tap",{"_index":1219,"title":{},"body":{"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/SuccessResponseInterceptor.html":{}}}],["tap((response",{"_index":1238,"title":{},"body":{"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/SuccessResponseInterceptor.html":{}}}],["template",{"_index":881,"title":{},"body":{"modules/EmailModule.html":{},"classes/EmailService.html":{},"miscellaneous/variables.html":{}}}],["template_queue_name",{"_index":1179,"title":{},"body":{"modules/PaymentModule.html":{},"injectables/StripeService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["templatequeue",{"_index":1198,"title":{},"body":{"modules/PaymentModule.html":{},"injectables/StripeService.html":{}}}],["test",{"_index":1762,"title":{},"body":{"index.html":{}}}],["test:cov",{"_index":1765,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":1764,"title":{},"body":{"index.html":{}}}],["tests",{"_index":1760,"title":{},"body":{"index.html":{}}}],["text",{"_index":1069,"title":{},"body":{"classes/Migration20250730220636.html":{},"entities/User.html":{},"miscellaneous/functions.html":{}}}],["textmappropagator",{"_index":1795,"title":{},"body":{"miscellaneous/variables.html":{}}}],["this.addsql",{"_index":1058,"title":{},"body":{"classes/Migration20250730220636.html":{}}}],["this.addsql(`comment",{"_index":1087,"title":{},"body":{"classes/Migration20250730220636.html":{}}}],["this.addsql(`create",{"_index":1116,"title":{},"body":{"classes/Migration20250730220636.html":{}}}],["this.appredis",{"_index":232,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["this.appredis.decr(key",{"_index":262,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["this.appredis.del(...keys",{"_index":270,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["this.appredis.del(key",{"_index":267,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["this.appredis.exists(key",{"_index":263,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["this.appredis.get(key",{"_index":250,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["this.appredis.pipeline",{"_index":254,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["this.appredis.set(...(args",{"_index":248,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["this.appredisservice.exists(cachekey",{"_index":494,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.appredisservice.get(cachekey",{"_index":1537,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.appredisservice.set",{"_index":513,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["this.authservice.forgotpassword(email",{"_index":348,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.login",{"_index":335,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.refresh(refreshtoken",{"_index":343,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.resetpassword",{"_index":354,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.validateuser(email",{"_index":1044,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["this.configservice.get('auth.saltrounds",{"_index":1582,"title":{},"body":{"injectables/UsersSubscriber.html":{}}}],["this.configservice.getorthrow",{"_index":466,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.configservice.getorthrow('auth.jwt.expiresin",{"_index":460,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.configservice.getorthrow('auth.saltrounds",{"_index":471,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.configservice.getorthrow('aws.s3.bucket",{"_index":1303,"title":{},"body":{"injectables/S3Service.html":{}}}],["this.configservice.getorthrow('aws.s3.region",{"_index":1305,"title":{},"body":{"injectables/S3Service.html":{}}}],["this.configservice.getorthrow('cloudinary.apikey",{"_index":702,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["this.configservice.getorthrow('cloudinary.apisecret",{"_index":704,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["this.configservice.getorthrow('cloudinary.cloudname",{"_index":700,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["this.configservice.getorthrow('cloudinary.folder')}/${filecategory",{"_index":715,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["this.configservice.getorthrow('nodeenv",{"_index":1332,"title":{},"body":{"injectables/SchemaService.html":{}}}],["this.configservice.getorthrow('redis.bullboard.password",{"_index":148,"title":{},"body":{"modules/AppModule.html":{}}}],["this.configservice.getorthrow('redis.bullboard.username",{"_index":147,"title":{},"body":{"modules/AppModule.html":{}}}],["this.configservice.getorthrow('redis.namespace",{"_index":234,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["this.configservice.getorthrow('url.passwordreset",{"_index":458,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.em.transactional(async",{"_index":779,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["this.emailservice.sendemail",{"_index":1165,"title":{},"body":{"classes/PasswordResetEmailConsumer.html":{}}}],["this.geterrorcode(exception",{"_index":639,"title":{},"body":{"classes/CatchEverythingFilter.html":{}}}],["this.geterrormessage(exception",{"_index":636,"title":{},"body":{"classes/CatchEverythingFilter.html":{}}}],["this.geterrorname(exception",{"_index":637,"title":{},"body":{"classes/CatchEverythingFilter.html":{}}}],["this.gethttpstatus(exception",{"_index":634,"title":{},"body":{"classes/CatchEverythingFilter.html":{}}}],["this.hashpassword(user",{"_index":1576,"title":{},"body":{"injectables/UsersSubscriber.html":{}}}],["this.httpadapterhost",{"_index":610,"title":{},"body":{"classes/CatchEverythingFilter.html":{}}}],["this.httpagent",{"_index":936,"title":{},"body":{"injectables/HttpClientService.html":{}}}],["this.httpsagent",{"_index":938,"title":{},"body":{"injectables/HttpClientService.html":{}}}],["this.httpservice.axiosref.defaults.httpagent",{"_index":935,"title":{},"body":{"injectables/HttpClientService.html":{}}}],["this.httpservice.axiosref.defaults.httpsagent",{"_index":937,"title":{},"body":{"injectables/HttpClientService.html":{}}}],["this.ispasswordmodified(user",{"_index":1577,"title":{},"body":{"injectables/UsersSubscriber.html":{}}}],["this.jwtexpiresin",{"_index":459,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.jwtnotbefore",{"_index":461,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.jwtrefreshexpriresin",{"_index":465,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.jwtrefreshsecret",{"_index":468,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.jwtservice.sign",{"_index":517,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.jwtservice.sign(newpayload",{"_index":516,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.jwtservice.sign(payload",{"_index":489,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.jwtservice.verify(refreshtoken",{"_index":499,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.jwtservice.verify(resettoken",{"_index":529,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.loggercontext",{"_index":643,"title":{},"body":{"classes/CatchEverythingFilter.html":{}}}],["this.loggerservice.error",{"_index":641,"title":{},"body":{"classes/CatchEverythingFilter.html":{},"injectables/CloudinaryService.html":{}}}],["this.loggerservice.log",{"_index":242,"title":{},"body":{"injectables/AppRedisService.html":{},"injectables/CloudinaryService.html":{},"classes/EmailService.html":{},"injectables/HttpClientService.html":{},"classes/PasswordResetEmailConsumer.html":{},"injectables/S3Service.html":{},"injectables/SchemaService.html":{},"injectables/StripeService.html":{}}}],["this.loggerservice.log(`[${method",{"_index":1239,"title":{},"body":{"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/SuccessResponseInterceptor.html":{}}}],["this.loggerservice.log(`creating",{"_index":1382,"title":{},"body":{"injectables/StripeService.html":{}}}],["this.loggerservice.log(`email",{"_index":898,"title":{},"body":{"classes/EmailService.html":{}}}],["this.loggerservice.log(message.trim",{"_index":1144,"title":{},"body":{"injectables/MorganMiddleware.html":{}}}],["this.loggerservice.warn(message.trim",{"_index":1142,"title":{},"body":{"injectables/MorganMiddleware.html":{}}}],["this.mailerservice.sendmail",{"_index":897,"title":{},"body":{"classes/EmailService.html":{}}}],["this.nanoid",{"_index":781,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["this.normalizefields(user",{"_index":1575,"title":{},"body":{"injectables/UsersSubscriber.html":{}}}],["this.orm.getschemagenerator",{"_index":1334,"title":{},"body":{"injectables/SchemaService.html":{}}}],["this.passwordresetemailqueue.add('send",{"_index":522,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.passwordreseturl",{"_index":457,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.passwordreseturl}?reset",{"_index":520,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.redisservice.getorthrow",{"_index":233,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["this.reflector.get(role",{"_index":1266,"title":{},"body":{"guards/RoleGuard.html":{}}}],["this.reflector.getallandoverride(is_public_key",{"_index":982,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["this.s3bucket",{"_index":1302,"title":{},"body":{"injectables/S3Service.html":{}}}],["this.s3client.putobject",{"_index":1308,"title":{},"body":{"injectables/S3Service.html":{}}}],["this.s3region",{"_index":1304,"title":{},"body":{"injectables/S3Service.html":{}}}],["this.saltrounds",{"_index":470,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.stripeclient.checkout.sessions.create",{"_index":1380,"title":{},"body":{"injectables/StripeService.html":{}}}],["this.stripeclient.paymentintents.create",{"_index":1386,"title":{},"body":{"injectables/StripeService.html":{}}}],["this.templatequeue.add(template_queue_name",{"_index":1390,"title":{},"body":{"injectables/StripeService.html":{}}}],["this.update",{"_index":1553,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.useremailcachekey",{"_index":1522,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.useremailcachekey}:${query?.email",{"_index":1535,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.useremailcachekey}:${user?.email",{"_index":1547,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.useridcachekey",{"_index":1520,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.useridcachekey}:${query",{"_index":1531,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.useridcachekey}:${query?.id",{"_index":1533,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.useridcachekey}:${user?.id",{"_index":1545,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.assign(user",{"_index":1550,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.create(parsed",{"_index":1540,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.create(userdata",{"_index":1529,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.findone",{"_index":1524,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.findoneorfail",{"_index":1548,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.findoneorfail(query",{"_index":1542,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.getentitymanager().merge(user",{"_index":1541,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.getentitymanager().persistandflush(newuser",{"_index":1530,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.getentitymanager().persistandflush(user",{"_index":1551,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersservice.changepassword(userid",{"_index":1485,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.create",{"_index":780,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["this.usersservice.create(user",{"_index":1475,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findone",{"_index":472,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["this.usersservice.update",{"_index":525,"title":{},"body":{"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"controllers/UsersController.html":{}}}],["throw",{"_index":495,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CreateUserCommand.html":{},"injectables/JwtAuthGuard.html":{},"injectables/LocalStrategy.html":{},"guards/RoleGuard.html":{},"modules/StorageModule.html":{},"injectables/UsersService.html":{}}}],["time",{"_index":220,"title":{},"body":{"injectables/AppRedisService.html":{},"injectables/MorganMiddleware.html":{}}}],["timestamp",{"_index":551,"title":{},"body":{"classes/BaseEntity.html":{},"classes/CatchEverythingFilter.html":{},"interfaces/ErrorResponse.html":{},"classes/Migration20250730220636.html":{},"entities/User.html":{}}}],["timestamptz",{"_index":545,"title":{},"body":{"classes/BaseEntity.html":{},"classes/Migration20250730220636.html":{},"entities/User.html":{}}}],["timestring",{"_index":1742,"title":{},"body":{"miscellaneous/functions.html":{}}}],["timezone",{"_index":1691,"title":{},"body":{"dependencies.html":{}}}],["token",{"_index":321,"title":{},"body":{"controllers/AuthController.html":{},"classes/AuthResponseDto.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/RefreshTokenDto.html":{},"classes/ResetPasswordDto.html":{},"coverage.html":{}}}],["token'})@apibody({type",{"_index":302,"title":{},"body":{"controllers/AuthController.html":{}}}],["token=${token",{"_index":521,"title":{},"body":{"injectables/AuthService.html":{}}}],["tokens",{"_index":344,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["tokens.ts",{"_index":1618,"title":{},"body":{"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["tokens:refresh:blacklisted:${refreshtoken",{"_index":492,"title":{},"body":{"injectables/AuthService.html":{}}}],["tostream",{"_index":690,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["tostream(file.buffer).pipe(upload",{"_index":725,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["total",{"_index":1134,"title":{},"body":{"injectables/MorganMiddleware.html":{}}}],["trace",{"_index":1726,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["transform",{"_index":833,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["transformer",{"_index":834,"title":{},"body":{"classes/CreateUserDto.html":{},"dependencies.html":{}}}],["transport",{"_index":871,"title":{},"body":{"modules/EmailModule.html":{}}}],["true",{"_index":123,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRedisModule.html":{},"injectables/AppRedisService.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BaseEntity.html":{},"injectables/CreateUserCommand.html":{},"modules/EmailModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"modules/PaymentModule.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"guards/RoleGuard.html":{},"injectables/SuccessResponseInterceptor.html":{},"entities/User.html":{},"injectables/UsersSubscriber.html":{},"miscellaneous/variables.html":{}}}],["try",{"_index":498,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CreateUserCommand.html":{}}}],["ttl",{"_index":210,"title":{},"body":{"injectables/AppRedisService.html":{},"interfaces/IStrorageService.html":{},"injectables/S3Service.html":{}}}],["ttlinfo",{"_index":237,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["ttl}s",{"_index":238,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["type",{"_index":15,"title":{},"body":{"interfaces/ApiResponse.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppRedisService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/AuthResponseDto.html":{},"injectables/AuthService.html":{},"classes/BaseEntity.html":{},"classes/CatchEverythingFilter.html":{},"classes/ChangePasswordDto.html":{},"injectables/CloudinaryService.html":{},"injectables/CreateUserCommand.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserResponseDto.html":{},"classes/EmailService.html":{},"interfaces/ErrorResponse.html":{},"classes/ForgotPasswordDto.html":{},"classes/GetProfileResponseDto.html":{},"injectables/HttpClientService.html":{},"interfaces/IPaymentService.html":{},"interfaces/IStrorageService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"injectables/MorganMiddleware.html":{},"classes/PasswordResetEmailConsumer.html":{},"modules/PaymentModule.html":{},"classes/RefreshTokenDto.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/RequestContextMiddleware.html":{},"classes/ResetPasswordDto.html":{},"guards/RoleGuard.html":{},"injectables/S3Service.html":{},"injectables/SchemaService.html":{},"injectables/StripeService.html":{},"injectables/SuccessResponseInterceptor.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/UsersSubscriber.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":1779,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typeof",{"_index":623,"title":{},"body":{"classes/CatchEverythingFilter.html":{},"classes/CreateUserDto.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/SuccessResponseInterceptor.html":{},"injectables/UsersService.html":{}}}],["types",{"_index":606,"title":{},"body":{"classes/CatchEverythingFilter.html":{},"dependencies.html":{}}}],["types/auth",{"_index":453,"title":{},"body":{"injectables/AuthService.html":{}}}],["types/bcrypt",{"_index":1671,"title":{},"body":{"dependencies.html":{}}}],["types/chalk",{"_index":1673,"title":{},"body":{"dependencies.html":{}}}],["types/morgan",{"_index":1675,"title":{},"body":{"dependencies.html":{}}}],["types/ms",{"_index":1677,"title":{},"body":{"dependencies.html":{}}}],["types/s3",{"_index":962,"title":{},"body":{"interfaces/IStrorageService.html":{},"injectables/S3Service.html":{}}}],["typescript",{"_index":482,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["unauthorized",{"_index":151,"title":{},"body":{"modules/AppModule.html":{},"injectables/JwtAuthGuard.html":{}}}],["unauthorizedexception",{"_index":445,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/LocalStrategy.html":{}}}],["unauthorizedexception('invalid",{"_index":509,"title":{},"body":{"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{}}}],["unauthorizedexception('refresh",{"_index":507,"title":{},"body":{"injectables/AuthService.html":{}}}],["unauthorizedexception(errorobject",{"_index":989,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["unauthorizedresponse",{"_index":150,"title":{},"body":{"modules/AppModule.html":{}}}],["undefined",{"_index":593,"title":{},"body":{"classes/CatchEverythingFilter.html":{},"classes/CreateUserDto.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/SuccessResponseInterceptor.html":{},"entities/User.html":{},"injectables/UsersService.html":{}}}],["unique",{"_index":1114,"title":{},"body":{"classes/Migration20250730220636.html":{},"entities/User.html":{}}}],["unit",{"_index":1761,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":191,"title":{},"body":{"injectables/AppRedisService.html":{},"injectables/JwtStrategy.html":{}}}],["unlicensed",{"_index":1777,"title":{},"body":{"properties.html":{}}}],["unused",{"_index":484,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["up",{"_index":1054,"title":{},"body":{"classes/Migration20250730220636.html":{},"controllers/UsersController.html":{}}}],["up')@apioperation({summary",{"_index":1451,"title":{},"body":{"controllers/UsersController.html":{}}}],["update",{"_index":562,"title":{},"body":{"classes/BaseEntity.html":{},"injectables/JwtStrategy.html":{},"classes/Migration20250730220636.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["update(data",{"_index":1513,"title":{},"body":{"injectables/UsersService.html":{}}}],["updated",{"_index":1483,"title":{},"body":{"controllers/UsersController.html":{}}}],["updated_at",{"_index":1062,"title":{},"body":{"classes/Migration20250730220636.html":{}}}],["updatedat",{"_index":542,"title":{},"body":{"classes/BaseEntity.html":{}}}],["updateduser",{"_index":1482,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["updateprofile",{"_index":1445,"title":{},"body":{"controllers/UsersController.html":{}}}],["updateprofile(req",{"_index":1458,"title":{},"body":{"controllers/UsersController.html":{}}}],["updateprofiledto",{"_index":1399,"title":{"classes/UpdateProfileDto.html":{}},"body":{"classes/UpdateProfileDto.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["upload",{"_index":678,"title":{},"body":{"injectables/CloudinaryService.html":{},"interfaces/IStrorageService.html":{},"injectables/S3Service.html":{}}}],["upload(file",{"_index":681,"title":{},"body":{"injectables/CloudinaryService.html":{},"interfaces/IStrorageService.html":{},"injectables/S3Service.html":{}}}],["uploadapierrorresponse",{"_index":689,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["uploadapiresponse",{"_index":688,"title":{},"body":{"injectables/CloudinaryService.html":{},"interfaces/IStrorageService.html":{}}}],["uploadfilecategoryenum",{"_index":684,"title":{},"body":{"injectables/CloudinaryService.html":{},"interfaces/IStrorageService.html":{},"injectables/S3Service.html":{},"miscellaneous/enumerations.html":{}}}],["uppercase",{"_index":663,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/ResetPasswordDto.html":{}}}],["url",{"_index":131,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRedisModule.html":{},"injectables/HttpClientService.html":{},"classes/Migration20250730220636.html":{},"injectables/MorganMiddleware.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/S3Service.html":{},"injectables/SuccessResponseInterceptor.html":{},"entities/User.html":{},"dependencies.html":{}}}],["url=${result.secure_url",{"_index":723,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["usa",{"_index":841,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["usa'})@isstring()@isoptional",{"_index":806,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["usd",{"_index":1730,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["use",{"_index":224,"title":{},"body":{"injectables/AppRedisService.html":{},"injectables/MorganMiddleware.html":{},"injectables/RequestContextMiddleware.html":{}}}],["use(req",{"_index":1120,"title":{},"body":{"injectables/MorganMiddleware.html":{},"injectables/RequestContextMiddleware.html":{}}}],["useclass",{"_index":396,"title":{},"body":{"modules/AuthModule.html":{}}}],["used",{"_index":229,"title":{},"body":{"injectables/AppRedisService.html":{},"injectables/JwtStrategy.html":{}}}],["usefactory",{"_index":127,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRedisModule.html":{},"modules/AuthModule.html":{},"modules/EmailModule.html":{},"modules/PaymentModule.html":{},"modules/StorageModule.html":{}}}],["useguards",{"_index":311,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(localauthguard",{"_index":330,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(localauthguard)@public()@post('login')@httpcode(httpstatus.ok)@apioperation({summary",{"_index":293,"title":{},"body":{"controllers/AuthController.html":{}}}],["user",{"_index":294,"title":{"entities/User.html":{}},"body":{"controllers/AuthController.html":{},"classes/AuthResponseDto.html":{},"injectables/AuthService.html":{},"classes/ChangePasswordDto.html":{},"injectables/CreateUserCommand.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserResponseDto.html":{},"modules/EmailModule.html":{},"classes/GetProfileResponseDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"classes/Migration20250730220636.html":{},"injectables/MorganMiddleware.html":{},"classes/ResetPasswordDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/UsersSubscriber.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["user'})@apibody({type",{"_index":1453,"title":{},"body":{"controllers/UsersController.html":{}}}],["user.command",{"_index":114,"title":{},"body":{"modules/AppModule.html":{}}}],["user.command.ts",{"_index":727,"title":{},"body":{"injectables/CreateUserCommand.html":{},"coverage.html":{}}}],["user.command.ts:14",{"_index":738,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["user.command.ts:23",{"_index":760,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["user.command.ts:50",{"_index":744,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["user.command.ts:56",{"_index":749,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["user.command.ts:62",{"_index":752,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["user.command.ts:68",{"_index":756,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["user.dto",{"_index":1405,"title":{},"body":{"classes/UpdateProfileDto.html":{},"controllers/UsersController.html":{}}}],["user.dto.ts",{"_index":789,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:115",{"_index":817,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:125",{"_index":826,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:129",{"_index":804,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:22",{"_index":812,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:30",{"_index":814,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:38",{"_index":816,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:46",{"_index":802,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:54",{"_index":805,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:62",{"_index":823,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:70",{"_index":828,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:78",{"_index":807,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:91",{"_index":810,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:99",{"_index":820,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.email",{"_index":518,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.firstname",{"_index":524,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.id",{"_index":488,"title":{},"body":{"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{}}}],["user.password",{"_index":477,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersSubscriber.html":{}}}],["user.passwordresetrequested",{"_index":531,"title":{},"body":{"injectables/AuthService.html":{}}}],["user@example.com",{"_index":835,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/ForgotPasswordDto.html":{},"classes/LoginDto.html":{}}}],["user@example.com'})@isemail",{"_index":902,"title":{},"body":{"classes/ForgotPasswordDto.html":{},"classes/LoginDto.html":{}}}],["user@example.com'})@isemail()@isnotempty",{"_index":811,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["userdata",{"_index":1507,"title":{},"body":{"injectables/UsersService.html":{}}}],["userdata.email",{"_index":1525,"title":{},"body":{"injectables/UsersService.html":{}}}],["useremailcachekey",{"_index":1497,"title":{},"body":{"injectables/UsersService.html":{}}}],["userid",{"_index":1480,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["useridcachekey",{"_index":1498,"title":{},"body":{"injectables/UsersService.html":{}}}],["usernamefield",{"_index":1043,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["userrepository",{"_index":1500,"title":{},"body":{"injectables/UsersService.html":{}}}],["userrole",{"_index":1267,"title":{},"body":{"guards/RoleGuard.html":{}}}],["userroleenum",{"_index":757,"title":{},"body":{"injectables/CreateUserCommand.html":{},"classes/CreateUserDto.html":{},"entities/User.html":{},"miscellaneous/enumerations.html":{}}}],["userroleenum.admin",{"_index":845,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["userroleenum.user",{"_index":1429,"title":{},"body":{"entities/User.html":{}}}],["userroleenum})@isenum(userroleenum",{"_index":825,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["users",{"_index":146,"title":{},"body":{"modules/AppModule.html":{},"classes/Migration20250730220636.html":{},"entities/User.html":{},"controllers/UsersController.html":{}}}],["users\".\"address",{"_index":1092,"title":{},"body":{"classes/Migration20250730220636.html":{}}}],["users\".\"avatar",{"_index":1089,"title":{},"body":{"classes/Migration20250730220636.html":{}}}],["users\".\"change_password",{"_index":1106,"title":{},"body":{"classes/Migration20250730220636.html":{}}}],["users\".\"city",{"_index":1094,"title":{},"body":{"classes/Migration20250730220636.html":{}}}],["users\".\"country",{"_index":1099,"title":{},"body":{"classes/Migration20250730220636.html":{}}}],["users\".\"country_code",{"_index":1100,"title":{},"body":{"classes/Migration20250730220636.html":{}}}],["users\".\"created_at",{"_index":1085,"title":{},"body":{"classes/Migration20250730220636.html":{}}}],["users\".\"deleted_at",{"_index":1084,"title":{},"body":{"classes/Migration20250730220636.html":{}}}],["users\".\"email",{"_index":1088,"title":{},"body":{"classes/Migration20250730220636.html":{}}}],["users\".\"first_name",{"_index":1090,"title":{},"body":{"classes/Migration20250730220636.html":{}}}],["users\".\"last_logged_in",{"_index":1110,"title":{},"body":{"classes/Migration20250730220636.html":{}}}],["users\".\"last_name",{"_index":1091,"title":{},"body":{"classes/Migration20250730220636.html":{}}}],["users\".\"password",{"_index":1103,"title":{},"body":{"classes/Migration20250730220636.html":{}}}],["users\".\"password_reset_requested",{"_index":1109,"title":{},"body":{"classes/Migration20250730220636.html":{}}}],["users\".\"phone_number",{"_index":1102,"title":{},"body":{"classes/Migration20250730220636.html":{}}}],["users\".\"postal_code",{"_index":1095,"title":{},"body":{"classes/Migration20250730220636.html":{}}}],["users\".\"role",{"_index":1105,"title":{},"body":{"classes/Migration20250730220636.html":{}}}],["users\".\"state",{"_index":1097,"title":{},"body":{"classes/Migration20250730220636.html":{}}}],["users\".\"updated_at",{"_index":1086,"title":{},"body":{"classes/Migration20250730220636.html":{}}}],["users.controller",{"_index":1493,"title":{},"body":{"modules/UsersModule.html":{}}}],["users.service",{"_index":1464,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["users/entities/user.entity",{"_index":449,"title":{},"body":{"injectables/AuthService.html":{}}}],["users/users.module",{"_index":365,"title":{},"body":{"modules/AuthModule.html":{}}}],["users/users.service",{"_index":446,"title":{},"body":{"injectables/AuthService.html":{}}}],["users:email",{"_index":1523,"title":{},"body":{"injectables/UsersService.html":{}}}],["users:id",{"_index":1521,"title":{},"body":{"injectables/UsersService.html":{}}}],["users_deleted_at_index",{"_index":1115,"title":{},"body":{"classes/Migration20250730220636.html":{}}}],["users_email_index",{"_index":1117,"title":{},"body":{"classes/Migration20250730220636.html":{}}}],["users_email_unique",{"_index":1113,"title":{},"body":{"classes/Migration20250730220636.html":{}}}],["users_pkey",{"_index":1081,"title":{},"body":{"classes/Migration20250730220636.html":{}}}],["userscontroller",{"_index":1442,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["usersmodule",{"_index":64,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersservice",{"_index":420,"title":{"injectables/UsersService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/CreateUserCommand.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["userssubscriber",{"_index":1491,"title":{"injectables/UsersSubscriber.html":{}},"body":{"modules/UsersModule.html":{},"injectables/UsersSubscriber.html":{},"coverage.html":{},"overview.html":{}}}],["using",{"_index":240,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["util",{"_index":1712,"title":{},"body":{"dependencies.html":{}}}],["uuid",{"_index":558,"title":{},"body":{"classes/BaseEntity.html":{},"classes/Migration20250730220636.html":{},"dependencies.html":{}}}],["uuidv7",{"_index":556,"title":{},"body":{"classes/BaseEntity.html":{}}}],["v2",{"_index":686,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["v7",{"_index":568,"title":{},"body":{"classes/BaseEntity.html":{}}}],["val",{"_index":745,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["validate",{"_index":992,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["validate(email",{"_index":1039,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["validate(req",{"_index":994,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validateuser",{"_index":418,"title":{},"body":{"injectables/AuthService.html":{}}}],["validateuser(email",{"_index":433,"title":{},"body":{"injectables/AuthService.html":{}}}],["validator",{"_index":675,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/ForgotPasswordDto.html":{},"classes/LoginDto.html":{},"classes/RefreshTokenDto.html":{},"classes/ResetPasswordDto.html":{},"dependencies.html":{}}}],["value",{"_index":214,"title":{},"body":{"injectables/AppRedisService.html":{},"classes/BaseEntity.html":{},"classes/CatchEverythingFilter.html":{},"injectables/CreateUserCommand.html":{},"classes/CreateUserDto.html":{},"injectables/HttpClientService.html":{},"injectables/S3Service.html":{},"injectables/SchemaService.html":{},"entities/User.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["value.replace(/\\+/g",{"_index":843,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["varchar",{"_index":1410,"title":{},"body":{"entities/User.html":{}}}],["varchar(100",{"_index":1067,"title":{},"body":{"classes/Migration20250730220636.html":{}}}],["varchar(20",{"_index":1071,"title":{},"body":{"classes/Migration20250730220636.html":{}}}],["varchar(255",{"_index":1063,"title":{},"body":{"classes/Migration20250730220636.html":{}}}],["varchar(3",{"_index":1073,"title":{},"body":{"classes/Migration20250730220636.html":{}}}],["varchar(500",{"_index":1065,"title":{},"body":{"classes/Migration20250730220636.html":{}}}],["variable",{"_index":1591,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":1785,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["vars",{"_index":485,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["version",{"_index":1131,"title":{},"body":{"injectables/MorganMiddleware.html":{},"properties.html":{}}}],["void",{"_index":80,"title":{},"body":{"modules/AppModule.html":{},"classes/CatchEverythingFilter.html":{},"injectables/MorganMiddleware.html":{},"injectables/RequestContextMiddleware.html":{},"injectables/UsersSubscriber.html":{},"miscellaneous/functions.html":{}}}],["w3cbaggagepropagator",{"_index":1800,"title":{},"body":{"miscellaneous/variables.html":{}}}],["w3ctracecontextpropagator",{"_index":1799,"title":{},"body":{"miscellaneous/variables.html":{}}}],["watch",{"_index":1756,"title":{},"body":{"index.html":{}}}],["webhookconfig",{"_index":1188,"title":{},"body":{"modules/PaymentModule.html":{}}}],["webhooks",{"_index":105,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["welcome",{"_index":32,"title":{},"body":{"controllers/AppController.html":{}}}],["welcomemessage",{"_index":29,"title":{},"body":{"controllers/AppController.html":{}}}],["whether",{"_index":1107,"title":{},"body":{"classes/Migration20250730220636.html":{},"entities/User.html":{}}}],["winston",{"_index":1697,"title":{},"body":{"dependencies.html":{}}}],["without",{"_index":241,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["word",{"_index":1258,"title":{},"body":{"classes/ResetPasswordDto.html":{}}}],["word.'})@isstring()@isnotempty()@matches(/^(?=.*[a",{"_index":1252,"title":{},"body":{"classes/ResetPasswordDto.html":{}}}],["workerhost",{"_index":1155,"title":{},"body":{"classes/PasswordResetEmailConsumer.html":{}}}],["world",{"_index":275,"title":{},"body":{"injectables/AppService.html":{}}}],["write",{"_index":1139,"title":{},"body":{"injectables/MorganMiddleware.html":{}}}],["wrong",{"_index":1023,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["yarn",{"_index":1752,"title":{},"body":{"index.html":{}}}],["yes",{"_index":212,"title":{},"body":{"injectables/AppRedisService.html":{},"interfaces/IPaymentService.html":{},"interfaces/IStrorageService.html":{},"injectables/S3Service.html":{},"injectables/StripeService.html":{},"injectables/UsersService.html":{}}}],["z\\d!@#$%^&*()_",{"_index":658,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/ResetPasswordDto.html":{}}}],["z])(?=.*[!@#$%^&*()_",{"_index":656,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/ResetPasswordDto.html":{}}}],["z])(?=.*[a",{"_index":655,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/ResetPasswordDto.html":{}}}],["za",{"_index":657,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/ResetPasswordDto.html":{}}}],["zoom",{"_index":68,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRedisModule.html":{},"modules/AuthModule.html":{},"modules/EmailModule.html":{},"modules/HttpClientModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"interfaces/ApiResponse.html":{"url":"interfaces/ApiResponse.html","title":"interface - ApiResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ApiResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/interfaces/api-response.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            data\n                                        \n                                \n                                \n                                        \n                                            message\n                                        \n                                \n                                \n                                        \n                                            statusCode\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        data:     T\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     T\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        message\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        message:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        statusCode\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        statusCode:     HttpStatus\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     HttpStatus\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { HttpStatus } from '@nestjs/common';\n\nexport interface ApiResponse {\n  statusCode: HttpStatus;\n  message: string;\n  data?: T;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                welcomeMessage\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        welcomeMessage\n                        \n                    \n                \n            \n            \n                \n                        \n                    welcomeMessage()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@HttpCode(HttpStatus.OK)@Public()@ApiOperation({summary: 'Welcome message for nest-js-boilerplate'})\n                \n            \n\n                    \n                        \n                            Defined in src/app.controller.ts:12\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     literal type\n\n                        \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, HttpCode, HttpStatus } from '@nestjs/common';\nimport { Public } from './modules/auth/decorators/public.decorator';\nimport { ApiOperation, ApiTags } from '@nestjs/swagger';\n\n@ApiTags('app')\n@Controller()\nexport class AppController {\n  @Get()\n  @HttpCode(HttpStatus.OK)\n  @Public()\n  @ApiOperation({ summary: 'Welcome message for nest-js-boilerplate' })\n  welcomeMessage(): { data: string } {\n    return { data: 'Welcome to nest-js-boilerplate! :)' };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nCreateUserCommand\n\nCreateUserCommand\n\nAppModule -->\n\nCreateUserCommand->AppModule\n\n\n\n\n\nSchemaService\n\nSchemaService\n\nAppModule -->\n\nSchemaService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                        \n                            CreateUserCommand\n                        \n                        \n                            SchemaService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        configure\n                        \n                    \n                \n            \n            \n                \nconfigure(consumer: MiddlewareConsumer)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app.module.ts:58\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                consumer\n                                            \n                                                        MiddlewareConsumer\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n    \n\n\n    \n        import {\n  Logger,\n  MiddlewareConsumer,\n  Module,\n  NestModule,\n  RequestMethod,\n} from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport configuration from './config/index.';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { UsersModule } from './modules/users/users.module';\nimport { AuthModule } from './modules/auth/auth.module';\nimport { MorganMiddleware } from './common/middlewares/morgan.middleware';\nimport { MikroOrmModule } from '@mikro-orm/nestjs';\nimport { SchemaService } from './schema.service';\nimport basicAuth from 'express-basic-auth';\nimport { applyRawBodyOnlyTo } from '@golevelup/nestjs-webhooks';\nimport { BullModule } from '@nestjs/bullmq';\nimport { BullBoardModule } from '@bull-board/nestjs';\nimport { ExpressAdapter } from '@bull-board/express';\nimport { CreateUserCommand } from './commands/create-user.command';\nimport { RequestContextMiddleware } from './common/middlewares/request-context.middleware';\nimport mikroOrmConfig from '@config/mikro-orm.config';\n\n@Module({\n  imports: [\n    ConfigModule.forRoot({\n      isGlobal: true,\n      load: [configuration],\n      cache: true,\n    }),\n    MikroOrmModule.forRootAsync({\n      imports: [ConfigModule],\n      useFactory: () => mikroOrmConfig,\n    }),\n    UsersModule,\n    AuthModule,\n    BullModule.forRootAsync({\n      inject: [ConfigService],\n      useFactory: (configService: ConfigService) => ({\n        connection: {\n          url: configService.getOrThrow('redis.url'),\n        },\n      }),\n    }),\n    BullBoardModule.forRoot({\n      adapter: ExpressAdapter,\n      route: '/queues',\n    }),\n  ],\n  controllers: [AppController],\n  providers: [AppService, Logger, SchemaService, CreateUserCommand],\n})\nexport class AppModule implements NestModule {\n  constructor(private readonly configService: ConfigService) {}\n\n  configure(consumer: MiddlewareConsumer) {\n    applyRawBodyOnlyTo(consumer, {\n      method: RequestMethod.ALL,\n      path: '*path/webhook',\n    });\n\n    consumer\n      .apply(\n        basicAuth({\n          users: {\n            [this.configService.getOrThrow('redis.bullBoard.username')]:\n              this.configService.getOrThrow('redis.bullBoard.password'),\n          },\n          challenge: true,\n          unauthorizedResponse: 'Unauthorized',\n        }),\n      )\n      .forRoutes({ path: 'queues', method: RequestMethod.ALL });\n\n    consumer.apply(MorganMiddleware).forRoutes('*');\n\n    consumer.apply(RequestContextMiddleware).forRoutes('*');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppRedisModule.html":{"url":"modules/AppRedisModule.html","title":"module - AppRedisModule","body":"\n                   \n\n\n\n\n    Modules\n    AppRedisModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppRedisModule\n\n\n\ncluster_AppRedisModule_exports\n\n\n\ncluster_AppRedisModule_providers\n\n\n\n\nAppRedisService \n\nAppRedisService \n\n\n\nAppRedisModule\n\nAppRedisModule\n\nAppRedisService  -->\n\nAppRedisModule->AppRedisService \n\n\n\n\n\nAppRedisService\n\nAppRedisService\n\nAppRedisModule -->\n\nAppRedisService->AppRedisModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/services/redis/redis.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppRedisService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AppRedisService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Logger, Module } from '@nestjs/common';\nimport { AppRedisService } from './redis.service';\nimport { RedisModule } from '@liaoliaots/nestjs-redis';\nimport { ConfigService } from '@nestjs/config';\n\n@Module({\n  imports: [\n    RedisModule.forRootAsync({\n      inject: [ConfigService],\n      useFactory: async (configService: ConfigService) => {\n        return {\n          readyLog: true,\n          errorLog: true,\n          config: [\n            {\n              namespace: configService.getOrThrow('redis.namespace'),\n              url: configService.getOrThrow('redis.url'),\n            },\n          ],\n        };\n      },\n    }),\n  ],\n  providers: [AppRedisService, Logger],\n  exports: [AppRedisService],\n})\nexport class AppRedisModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppRedisService.html":{"url":"injectables/AppRedisService.html","title":"injectable - AppRedisService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppRedisService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/redis/redis.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                appRedis\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                decrement\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                deleteMany\n                            \n                            \n                                    Async\n                                exists\n                            \n                            \n                                    Async\n                                get\n                            \n                            \n                                    Async\n                                increment\n                            \n                            \n                                    Async\n                                set\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(loggerService: LoggerService, configService: ConfigService, redisService: RedisService)\n                    \n                \n                        \n                            \n                                Defined in src/services/redis/redis.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        loggerService\n                                                  \n                                                        \n                                                                    LoggerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        redisService\n                                                  \n                                                        \n                                                                    RedisService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        decrement\n                        \n                    \n                \n            \n            \n                \n                        \n                    decrement(key: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/redis/redis.service.ts:72\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(key: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/redis/redis.service.ts:90\n                        \n                    \n\n\n            \n                \n                        Delete a Redis key\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Redis key to delete\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                Number of keys deleted (0 or 1)\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        deleteMany\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteMany(keys: string[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/redis/redis.service.ts:106\n                        \n                    \n\n\n            \n                \n                        Delete multiple Redis keys\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                keys\n                                            \n                                                        string[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Array of Redis keys to delete\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                Number of keys deleted\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        exists\n                        \n                    \n                \n            \n            \n                \n                        \n                    exists(key: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/redis/redis.service.ts:76\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        get\n                        \n                    \n                \n            \n            \n                \n                        \n                    get(key: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/redis/redis.service.ts:46\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        increment\n                        \n                    \n                \n            \n            \n                \n                        \n                    increment(key: string, ttl?: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/redis/redis.service.ts:57\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                ttl\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        set\n                        \n                    \n                \n            \n            \n                \n                        \n                    set(key: string, value: any, ttl?: number, nx: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/redis/redis.service.ts:29\n                        \n                    \n\n\n            \n                \n                        Set a Redis key\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    Redis key\n\n                                            \n                                        \n                                        \n                                                value\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    Value to store\n\n                                            \n                                        \n                                        \n                                                ttl\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    Time-to-live in seconds\n\n                                            \n                                        \n                                        \n                                                nx\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    false\n                                            \n\n                                            \n                                                    Set to true to use NX (only set if key does not exist)\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                'OK' if set successfully, null if not (when NX is used)\n\n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        appRedis\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Redis\n\n                    \n                \n                    \n                        \n                                Defined in src/services/redis/redis.service.ts:8\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable, Logger, LoggerService } from '@nestjs/common';\nimport { RedisService } from '@liaoliaots/nestjs-redis';\nimport Redis from 'ioredis';\nimport { ConfigService } from '@nestjs/config';\n\n@Injectable()\nexport class AppRedisService {\n  private readonly appRedis: Redis;\n\n  constructor(\n    @Inject(Logger)\n    private readonly loggerService: LoggerService,\n    private readonly configService: ConfigService,\n    private readonly redisService: RedisService,\n  ) {\n    this.appRedis = this.redisService.getOrThrow(\n      this.configService.getOrThrow('redis.namespace'),\n    );\n  }\n\n  /**\n   * Set a Redis key\n   * @param key Redis key\n   * @param value Value to store\n   * @param ttl Time-to-live in seconds\n   * @param nx Set to true to use NX (only set if key does not exist)\n   * @returns 'OK' if set successfully, null if not (when NX is used)\n   */\n  async set(key: string, value: any, ttl?: number, nx: boolean = false) {\n    const ttlInfo = ttl ? `TTL: ${ttl}s` : 'no TTL';\n    const nxInfo = nx ? 'using NX' : 'without NX';\n\n    this.loggerService.log(\n      `Setting key \"${key}\" (${ttlInfo}, ${nxInfo})`,\n      AppRedisService.name,\n    );\n\n    const args: (string | number)[] = [key, value];\n\n    if (nx) args.push('NX');\n    if (ttl) args.push('EX', ttl);\n\n    return this.appRedis.set(...(args as Parameters));\n  }\n\n  async get(key: string) {\n    const value = await this.appRedis.get(key);\n\n    this.loggerService.log(\n      `Getting key \"${key}\" - ${value ? 'Found' : 'Not Found'}`,\n      AppRedisService.name,\n    );\n\n    return value;\n  }\n\n  async increment(key: string, ttl?: number): Promise {\n    const pipeline = this.appRedis.pipeline();\n\n    if (ttl) {\n      pipeline.set(key, 0, 'EX', ttl, 'NX');\n    }\n\n    pipeline.incr(key);\n\n    const results = await pipeline.exec();\n    const incrResult = results[ttl ? 1 : 0];\n\n    return incrResult[1];\n  }\n\n  async decrement(key: string) {\n    return this.appRedis.decr(key);\n  }\n\n  async exists(key: string): Promise {\n    const exists = await this.appRedis.exists(key);\n    this.loggerService.log(\n      `Checking existence of key \"${key}\" - ${exists ? 'Exists' : 'Does not exist'}`,\n      AppRedisService.name,\n    );\n    return exists > 0;\n  }\n\n  /**\n   * Delete a Redis key\n   * @param key Redis key to delete\n   * @returns Number of keys deleted (0 or 1)\n   */\n  async delete(key: string): Promise {\n    const result = await this.appRedis.del(key);\n\n    this.loggerService.log(\n      `Deleting key \"${key}\" - ${result > 0 ? 'Deleted' : 'Key not found'}`,\n      AppRedisService.name,\n    );\n\n    return result;\n  }\n\n  /**\n   * Delete multiple Redis keys\n   * @param keys Array of Redis keys to delete\n   * @returns Number of keys deleted\n   */\n  async deleteMany(keys: string[]): Promise {\n    if (keys.length === 0) return 0;\n\n    const result = await this.appRedis.del(...keys);\n\n    this.loggerService.log(\n      `Deleting ${keys.length} keys - ${result} deleted`,\n      AppRedisService.name,\n    );\n\n    return result;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app.service.ts:5\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello World!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                forgotPassword\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                login\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                refresh\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                resetPassword\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        forgotPassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    forgotPassword(body: ForgotPasswordDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Post('forgot-password')@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Request password reset'})@ApiBody({type: ForgotPasswordDto})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/auth/auth.controller.ts:63\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            ForgotPasswordDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(req: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(LocalAuthGuard)@Public()@Post('login')@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'User login'})@ApiBody({type: LoginDto})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/auth/auth.controller.ts:31\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        refresh\n                        \n                    \n                \n            \n            \n                \n                        \n                    refresh(body: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Post('refresh')@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Refresh access token'})@ApiBody({type: RefreshTokenDto})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/auth/auth.controller.ts:47\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        resetPassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    resetPassword(body: ResetPasswordDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Post('reset-password')@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Reset user password'})@ApiBody({type: ResetPasswordDto, description: 'Reset password data'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/auth/auth.controller.ts:79\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            ResetPasswordDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Request,\n  Post,\n  UseGuards,\n  Body,\n  HttpStatus,\n  HttpCode,\n} from '@nestjs/common';\nimport { ApiTags, ApiOperation, ApiBody } from '@nestjs/swagger';\nimport { LocalAuthGuard } from './guards/local-auth.guard';\nimport { AuthService } from './auth.service';\nimport { Public } from './decorators/public.decorator';\nimport { LoginDto } from './dto/login.dto';\nimport { RefreshTokenDto } from './dto/refresh-token-dto';\nimport { ForgotPasswordDto } from './dto/forgot-password.dto';\nimport { ResetPasswordDto } from './dto/reset-password.dto';\nimport { ApiResponse } from '@common/interfaces/api-response.interface';\n\n@ApiTags('auth')\n@Controller('auth')\nexport class AuthController {\n  constructor(private readonly authService: AuthService) {}\n\n  @UseGuards(LocalAuthGuard)\n  @Public()\n  @Post('login')\n  @HttpCode(HttpStatus.OK)\n  @ApiOperation({ summary: 'User login' })\n  @ApiBody({ type: LoginDto })\n  async login(@Request() req: any): Promise> {\n    const { access_token, refresh_token } = await this.authService.login(\n      req.user,\n    );\n    return {\n      statusCode: HttpStatus.OK,\n      message: 'Login Successful',\n      data: { accessToken: access_token, refreshToken: refresh_token },\n    };\n  }\n\n  @Public()\n  @Post('refresh')\n  @HttpCode(HttpStatus.OK)\n  @ApiOperation({ summary: 'Refresh access token' })\n  @ApiBody({ type: RefreshTokenDto })\n  async refresh(@Body() body: any): Promise> {\n    const { refreshToken } = body;\n    const { access_token, refresh_token } =\n      await this.authService.refresh(refreshToken);\n    return {\n      statusCode: HttpStatus.OK,\n      message: 'Tokens refreshed',\n      data: { accessToken: access_token, refreshToken: refresh_token },\n    };\n  }\n\n  @Public()\n  @Post('forgot-password')\n  @HttpCode(HttpStatus.OK)\n  @ApiOperation({ summary: 'Request password reset' })\n  @ApiBody({ type: ForgotPasswordDto })\n  async forgotPassword(\n    @Body() body: ForgotPasswordDto,\n  ): Promise> {\n    const { email } = body;\n    await this.authService.forgotPassword(email);\n    return {\n      statusCode: HttpStatus.OK,\n      message: 'Password reset email sent',\n    };\n  }\n\n  @Public()\n  @Post('reset-password')\n  @HttpCode(HttpStatus.OK)\n  @ApiOperation({ summary: 'Reset user password' })\n  @ApiBody({ type: ResetPasswordDto, description: 'Reset password data' })\n  async resetPassword(\n    @Body() body: ResetPasswordDto,\n  ): Promise> {\n    const { resetToken, newPassword, confirmPassword } = body;\n    await this.authService.resetPassword(\n      resetToken,\n      newPassword,\n      confirmPassword,\n    );\n    return {\n      statusCode: HttpStatus.OK,\n      message: 'Password reset successful',\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_AuthModule_exports\n\n\n\n\nAppRedisModule\n\nAppRedisModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nAppRedisModule->AuthModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAuthModule -->\n\nUsersModule->AuthModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthModule -->\n\nLocalStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            JwtStrategy\n                        \n                        \n                            LocalStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AppRedisModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { APP_GUARD } from '@nestjs/core';\nimport { AuthController } from './auth.controller';\nimport { AuthService } from './auth.service';\nimport { UsersModule } from '../users/users.module';\nimport { JwtModule } from '@nestjs/jwt';\nimport { PassportModule } from '@nestjs/passport';\nimport { LocalStrategy } from './strategies/local.strategy';\nimport { JwtStrategy } from './strategies/jwt.strategy';\nimport { JwtAuthGuard } from './guards/jwt-auth.guard';\nimport { ConfigService } from '@nestjs/config';\nimport { AppRedisModule } from '@services/redis/redis.module';\nimport { BullModule } from '@nestjs/bullmq';\nimport { BullBoardModule } from '@bull-board/nestjs';\nimport { PASSWORD_RESET_EMAIL_QUEUE_NAME } from '@common/constants';\nimport { BullMQAdapter } from '@bull-board/api/bullMQAdapter';\n\n@Module({\n  imports: [\n    UsersModule,\n    PassportModule,\n    JwtModule.registerAsync({\n      useFactory: (configService: ConfigService) => ({\n        global: true,\n        secret: configService.get('auth.jwt.secret'),\n        signOptions: {\n          expiresIn: configService.get('auth.jwt.expiresIn'),\n        },\n      }),\n      inject: [ConfigService],\n    }),\n    BullModule.registerQueue({\n      name: PASSWORD_RESET_EMAIL_QUEUE_NAME,\n      defaultJobOptions: {\n        attempts: 5,\n        backoff: { type: 'exponential', delay: 2000 },\n      },\n    }),\n    BullBoardModule.forFeature({\n      name: PASSWORD_RESET_EMAIL_QUEUE_NAME,\n      adapter: BullMQAdapter,\n    }),\n    AppRedisModule,\n  ],\n  controllers: [AuthController],\n  providers: [\n    AuthService,\n    LocalStrategy,\n    JwtStrategy,\n    {\n      provide: APP_GUARD,\n      useClass: JwtAuthGuard,\n    },\n  ],\n  exports: [AuthService],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AuthResponseDto.html":{"url":"classes/AuthResponseDto.html","title":"class - AuthResponseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AuthResponseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/dto/auth-response.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                accessToken\n                            \n                            \n                                    \n                                message\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        accessToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Access token for authenticated user', example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/dto/auth-response.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        message\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Message indicating the success of the operation', example: 'Login Successful'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/dto/auth-response.dto.ts:14\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\n\nexport class AuthResponseDto {\n  @ApiProperty({\n    description: 'Access token for authenticated user',\n    example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...',\n  })\n  accessToken: string;\n\n  @ApiProperty({\n    description: 'Message indicating the success of the operation',\n    example: 'Login Successful',\n  })\n  message: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                jwtExpiresIn\n                            \n                            \n                                    Private\n                                    Readonly\n                                jwtNotBefore\n                            \n                            \n                                    Private\n                                    Readonly\n                                jwtRefreshExpriresIn\n                            \n                            \n                                    Private\n                                    Readonly\n                                jwtRefreshSecret\n                            \n                            \n                                    Private\n                                    Readonly\n                                passwordResetUrl\n                            \n                            \n                                    Private\n                                    Readonly\n                                saltRounds\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                forgotPassword\n                            \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                refresh\n                            \n                            \n                                    Async\n                                resetPassword\n                            \n                            \n                                    Async\n                                validateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(appRedisService: AppRedisService, usersService: UsersService, jwtService: JwtService, configService: ConfigService, passwordResetEmailQueue: Queue)\n                    \n                \n                        \n                            \n                                Defined in src/modules/auth/auth.service.ts:26\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        appRedisService\n                                                  \n                                                        \n                                                                        AppRedisService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        passwordResetEmailQueue\n                                                  \n                                                        \n                                                                    Queue\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        forgotPassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    forgotPassword(email: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/auth/auth.service.ts:135\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(user: User)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/auth/auth.service.ts:68\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            User\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        refresh\n                        \n                    \n                \n            \n            \n                \n                        \n                    refresh(refreshToken: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/auth/auth.service.ts:83\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                refreshToken\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        resetPassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    resetPassword(resetToken: string, newPassword: string, confirmPassword: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/auth/auth.service.ts:160\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                resetToken\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                newPassword\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                confirmPassword\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validateUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    validateUser(email: string, pass: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/auth/auth.service.ts:50\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                pass\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        jwtExpiresIn\n                        \n                    \n                \n            \n                \n                    \n                        Type :     StringValue\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/auth.service.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        jwtNotBefore\n                        \n                    \n                \n            \n                \n                    \n                        Type :     StringValue\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/auth.service.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        jwtRefreshExpriresIn\n                        \n                    \n                \n            \n                \n                    \n                        Type :     StringValue\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/auth.service.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        jwtRefreshSecret\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/auth.service.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        passwordResetUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/auth.service.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        saltRounds\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/auth.service.ts:26\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import bcrypt from 'bcrypt';\nimport {\n  BadRequestException,\n  Injectable,\n  NotFoundException,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { UsersService } from '../users/users.service';\nimport { JsonWebTokenError, JwtService, NotBeforeError } from '@nestjs/jwt';\nimport { User } from '../users/entities/user.entity';\nimport { ConfigService } from '@nestjs/config';\nimport { InjectQueue } from '@nestjs/bullmq';\nimport { PASSWORD_RESET_EMAIL_QUEUE_NAME } from '@common/constants';\nimport { Queue } from 'bullmq';\nimport { AuthTokens } from './types/auth-tokens';\nimport { AppRedisService } from '@services/redis/redis.service';\nimport ms, { StringValue } from 'ms';\n\n@Injectable()\nexport class AuthService {\n  private readonly passwordResetUrl: string;\n  private readonly jwtExpiresIn: StringValue;\n  private readonly jwtNotBefore: StringValue;\n  private readonly jwtRefreshSecret: string;\n  private readonly jwtRefreshExpriresIn: StringValue;\n  private readonly saltRounds: number;\n\n  constructor(\n    private readonly appRedisService: AppRedisService,\n    private readonly usersService: UsersService,\n    private readonly jwtService: JwtService,\n    private readonly configService: ConfigService,\n    @InjectQueue(PASSWORD_RESET_EMAIL_QUEUE_NAME)\n    private readonly passwordResetEmailQueue: Queue,\n  ) {\n    this.passwordResetUrl =\n      this.configService.getOrThrow('url.passwordReset');\n    this.jwtExpiresIn =\n      this.configService.getOrThrow('auth.jwt.expiresIn');\n    this.jwtNotBefore = `${(ms(this.jwtExpiresIn) - ms('1m')) / ms('1m')}m`;\n    this.jwtRefreshExpriresIn = this.configService.getOrThrow(\n      'auth.jwt.refreshExpiresIn',\n    );\n    this.jwtRefreshSecret = this.configService.getOrThrow(\n      'auth.jwt.refreshSecret',\n    );\n    this.saltRounds = this.configService.getOrThrow('auth.saltRounds');\n  }\n\n  async validateUser(\n    email: string,\n    pass: string,\n  ): Promise | null> {\n    const user = await this.usersService.findOne(\n      { email },\n      { failHandler: () => new NotFoundException('User not found') },\n    );\n\n    if (user && (await bcrypt.compare(pass, user.password))) {\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      const { password, ...result } = user;\n      return result;\n    }\n\n    return null;\n  }\n\n  async login(user: User): Promise {\n    const payload = {\n      sub: user.id,\n    };\n\n    return {\n      access_token: this.jwtService.sign(payload),\n      refresh_token: this.jwtService.sign(payload, {\n        secret: this.jwtRefreshSecret,\n        expiresIn: this.jwtRefreshExpriresIn,\n        notBefore: this.jwtNotBefore,\n      }),\n    };\n  }\n\n  async refresh(refreshToken: string): Promise {\n    let payload: any;\n\n    const cacheKey = `tokens:refresh:blacklisted:${refreshToken}`;\n    const isBlacklisted = await this.appRedisService.exists(cacheKey);\n    if (isBlacklisted) {\n      throw new BadRequestException('Refresh token is blacklisted');\n    }\n\n    try {\n      payload = this.jwtService.verify(refreshToken, {\n        secret: this.jwtRefreshSecret,\n      });\n    } catch (error) {\n      if (\n        error instanceof JsonWebTokenError &&\n        error.message === 'jwt malformed'\n      ) {\n        throw new BadRequestException('Malformed refresh token');\n      } else if (error instanceof NotBeforeError) {\n        throw new UnauthorizedException('Refresh token not active yet');\n      }\n      throw new UnauthorizedException('Invalid refresh token');\n    }\n\n    const user = await this.usersService.findOne(\n      {\n        id: payload.sub,\n      },\n      { failHandler: () => new NotFoundException('User not found') },\n    );\n\n    const newPayload = {\n      sub: user.id,\n    };\n\n    await this.appRedisService.set(\n      cacheKey,\n      '1',\n      (ms(this.jwtRefreshExpriresIn) + ms('1m')) / ms('1s'),\n    );\n\n    return {\n      access_token: this.jwtService.sign(newPayload),\n      refresh_token: this.jwtService.sign(newPayload, {\n        secret: this.jwtRefreshSecret,\n        expiresIn: this.jwtRefreshExpriresIn,\n        notBefore: this.jwtNotBefore,\n      }),\n    };\n  }\n\n  async forgotPassword(email: string): Promise {\n    const user = await this.usersService.findOne(\n      { email },\n      { failHandler: () => new NotFoundException('User not found') },\n    );\n\n    const token = this.jwtService.sign({\n      email: user.email,\n      sub: user.id,\n    });\n\n    const resetUrl = `${this.passwordResetUrl}?reset-token=${token}`;\n\n    await this.passwordResetEmailQueue.add('send-password-reset-email', {\n      email: user.email,\n      firstName: user.firstName,\n      resetUrl,\n    });\n\n    await this.usersService.update({\n      id: user.id,\n      passwordResetRequested: true,\n    });\n  }\n\n  async resetPassword(\n    resetToken: string,\n    newPassword: string,\n    confirmPassword: string,\n  ): Promise {\n    if (newPassword !== confirmPassword) {\n      throw new BadRequestException('Passwords do not match');\n    }\n\n    const payload = this.jwtService.verify(resetToken);\n    const user = await this.usersService.findOne(\n      {\n        email: payload.email,\n      },\n      { failHandler: () => new NotFoundException('User not found') },\n    );\n\n    if (!user.passwordResetRequested) {\n      throw new NotFoundException('Password reset not requested');\n    }\n\n    const salt = await bcrypt.genSalt(this.saltRounds);\n    const hashedPassword = await bcrypt.hash(newPassword, salt);\n    await this.usersService.update({\n      id: user.id,\n      password: hashedPassword,\n      passwordResetRequested: false,\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/BaseEntity.html":{"url":"classes/BaseEntity.html","title":"class - BaseEntity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  BaseEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/entities/base.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                    Optional\n                                deletedAt\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Default value : new Date()\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Property({type: 'timestamptz', defaultRaw: 'CURRENT_TIMESTAMP', comment: 'Record creation timestamp'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/entities/base.entity.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        deletedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Property({type: 'timestamptz', nullable: true, comment: 'Soft delete timestamp'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/entities/base.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : uuidv7()\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryKey({type: 'uuid'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/entities/base.entity.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Default value : new Date()\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Property({type: 'timestamptz', defaultRaw: 'CURRENT_TIMESTAMP', onUpdate: () => , comment: 'Record last update timestamp'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/entities/base.entity.ts:30\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Filter, Index, PrimaryKey, Property } from '@mikro-orm/core';\nimport { v7 as uuidv7 } from 'uuid';\n\n@Index({ properties: ['deletedAt'] })\n@Filter({ name: 'softDelete', cond: { deletedAt: null }, default: true })\nexport abstract class BaseEntity {\n  @PrimaryKey({ type: 'uuid' })\n  id: string = uuidv7();\n\n  @Property({\n    type: 'timestamptz',\n    nullable: true,\n    comment: 'Soft delete timestamp',\n  })\n  deletedAt?: Date;\n\n  @Property({\n    type: 'timestamptz',\n    defaultRaw: 'CURRENT_TIMESTAMP',\n    comment: 'Record creation timestamp',\n  })\n  createdAt: Date = new Date();\n\n  @Property({\n    type: 'timestamptz',\n    defaultRaw: 'CURRENT_TIMESTAMP',\n    onUpdate: () => new Date(),\n    comment: 'Record last update timestamp',\n  })\n  updatedAt: Date = new Date();\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CatchEverythingFilter.html":{"url":"classes/CatchEverythingFilter.html","title":"class - CatchEverythingFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CatchEverythingFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/filters/exception.filter.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                loggerContext\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                            \n                                    Private\n                                getErrorCode\n                            \n                            \n                                    Private\n                                getErrorMessage\n                            \n                            \n                                    Private\n                                getErrorName\n                            \n                            \n                                    Private\n                                getHttpStatus\n                            \n                            \n                                    Private\n                                sanitizeBody\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(httpAdapterHost: HttpAdapterHost, loggerService: LoggerService)\n                    \n                \n                        \n                            \n                                Defined in src/common/filters/exception.filter.ts:20\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        httpAdapterHost\n                                                  \n                                                        \n                                                                    HttpAdapterHost\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        loggerService\n                                                  \n                                                        \n                                                                    LoggerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        loggerContext\n                        \n                    \n                \n            \n                \n                    \n                        Default value : CatchEverythingFilter.name\n                    \n                \n                    \n                        \n                                Defined in src/common/filters/exception.filter.ts:20\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        catch\n                        \n                    \n                \n            \n            \n                \ncatch(exception: HandledException, host: ArgumentsHost)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/filters/exception.filter.ts:27\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                exception\n                                            \n                                                            HandledException\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                host\n                                            \n                                                        ArgumentsHost\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        getErrorCode\n                        \n                    \n                \n            \n            \n                \n                        \n                    getErrorCode(exception: HandledException)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/filters/exception.filter.ts:119\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                exception\n                                            \n                                                            HandledException\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     string | undefined\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        getErrorMessage\n                        \n                    \n                \n            \n            \n                \n                        \n                    getErrorMessage(exception: HandledException)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/filters/exception.filter.ts:92\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                exception\n                                            \n                                                            HandledException\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        getErrorName\n                        \n                    \n                \n            \n            \n                \n                        \n                    getErrorName(exception: HandledException)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/filters/exception.filter.ts:108\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                exception\n                                            \n                                                            HandledException\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        getHttpStatus\n                        \n                    \n                \n            \n            \n                \n                        \n                    getHttpStatus(exception: HandledException)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/filters/exception.filter.ts:78\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                exception\n                                            \n                                                            HandledException\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         number\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        sanitizeBody\n                        \n                    \n                \n            \n            \n                \n                        \n                    sanitizeBody(body: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/filters/exception.filter.ts:123\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  ExceptionFilter,\n  Catch,\n  ArgumentsHost,\n  HttpException,\n  HttpStatus,\n  ForbiddenException,\n  Logger,\n  LoggerService,\n  Inject,\n  NotFoundException,\n} from '@nestjs/common';\nimport { HttpAdapterHost } from '@nestjs/core';\nimport { AxiosError } from 'axios';\nimport { HandledException } from '../types';\nimport { ErrorResponse } from '../interfaces/error-response.interface';\n\n@Catch()\nexport class CatchEverythingFilter implements ExceptionFilter {\n  private readonly loggerContext = CatchEverythingFilter.name;\n\n  constructor(\n    private readonly httpAdapterHost: HttpAdapterHost,\n    @Inject(Logger) private readonly loggerService: LoggerService,\n  ) {}\n\n  catch(exception: HandledException, host: ArgumentsHost): void {\n    const { httpAdapter } = this.httpAdapterHost;\n    const ctx = host.switchToHttp();\n    const request = ctx.getRequest();\n    const response = ctx.getResponse();\n    const requestUrl = httpAdapter.getRequestUrl(request);\n\n    if (exception instanceof NotFoundException) {\n      const exceptionResponse = exception.getResponse() as any;\n      const message = exceptionResponse?.message || exception.message;\n\n      const isRoutingError =\n        typeof message === 'string' &&\n        (message.startsWith('Cannot ') ||\n          message.includes('Cannot find') ||\n          (message === 'Not Found' && !exceptionResponse?.error));\n\n      if (isRoutingError) {\n        const responseBody = {\n          statusCode: HttpStatus.NOT_FOUND,\n          message: `Route ${request.method} ${request.url} does not exist ¯\\\\_(ツ)_/¯`,\n        };\n\n        httpAdapter.reply(response, responseBody, HttpStatus.NOT_FOUND);\n        return;\n      }\n    }\n\n    const httpStatus = this.getHttpStatus(exception);\n    const errorMessage = this.getErrorMessage(exception);\n    const name = this.getErrorName(exception);\n    const errorCode = this.getErrorCode(exception);\n\n    const responseBody: ErrorResponse = {\n      statusCode: httpStatus,\n      message: errorMessage,\n      errorCode,\n      timestamp: new Date().toISOString(),\n      path: `${request.method} - ${requestUrl}`,\n      name,\n    };\n\n    this.loggerService.error(\n      `Exception caught: ${name} - ${errorMessage}`,\n      exception,\n      this.loggerContext,\n    );\n\n    httpAdapter.reply(response, responseBody, httpStatus);\n  }\n\n  private getHttpStatus(exception: HandledException): number {\n    if (exception instanceof HttpException) return exception.getStatus();\n    if (exception instanceof AxiosError) {\n      const status = exception.response?.status || HttpStatus.BAD_GATEWAY;\n      return status >= 500 && status \n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ChangePasswordDto.html":{"url":"classes/ChangePasswordDto.html","title":"class - ChangePasswordDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ChangePasswordDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/dto/change-password.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                confirmPassword\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                newPassword\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        confirmPassword\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The confirmation of the new password', example: 'Strong.Pass-1'})@IsString()@IsNotEmpty()@Matches(/^(?=.*[a-z])(?=.*[A-Z])(?=.*[!@#$%^&*()_\\-+=\\[\\]{};':\"\\\\|,.<>\\/?])[A-Za-z\\d!@#$%^&*()_\\-+=\\[\\]{};':\"\\\\|,.<>\\/?]{10,}$/, {message: 'Password must be at least 10 characters long and include uppercase, lowercase, and a symbol (e.g. @, #, ., -)'})@MinLength(10)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dto/change-password.dto.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        newPassword\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The new password for the user. Minimum of 10 characters.', example: 'Strong.Pass-1'})@IsString()@IsNotEmpty()@Matches(/^(?=.*[a-z])(?=.*[A-Z])(?=.*[!@#$%^&*()_\\-+=\\[\\]{};':\"\\\\|,.<>\\/?])[A-Za-z\\d!@#$%^&*()_\\-+=\\[\\]{};':\"\\\\|,.<>\\/?]{10,}$/, {message: 'Password must be at least 10 characters long and include uppercase, lowercase, and a symbol (e.g. @, #, ., -)'})@MinLength(10)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dto/change-password.dto.ts:19\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsNotEmpty, IsString, Matches, MinLength } from 'class-validator';\n\nexport class ChangePasswordDto {\n  @ApiProperty({\n    description: 'The new password for the user. Minimum of 10 characters.',\n    example: 'Strong.Pass-1',\n  })\n  @IsString()\n  @IsNotEmpty()\n  @Matches(\n    /^(?=.*[a-z])(?=.*[A-Z])(?=.*[!@#$%^&*()_\\-+=\\[\\]{};':\"\\\\|,.<>\\/?])[A-Za-z\\d!@#$%^&*()_\\-+=\\[\\]{};':\"\\\\|,.<>\\/?]{10,}$/,\n    {\n      message:\n        'Password must be at least 10 characters long and include uppercase, lowercase, and a symbol (e.g. @, #, ., -)',\n    },\n  )\n  @MinLength(10)\n  newPassword: string;\n\n  @ApiProperty({\n    description: 'The confirmation of the new password',\n    example: 'Strong.Pass-1',\n  })\n  @IsString()\n  @IsNotEmpty()\n  @Matches(\n    /^(?=.*[a-z])(?=.*[A-Z])(?=.*[!@#$%^&*()_\\-+=\\[\\]{};':\"\\\\|,.<>\\/?])[A-Za-z\\d!@#$%^&*()_\\-+=\\[\\]{};':\"\\\\|,.<>\\/?]{10,}$/,\n    {\n      message:\n        'Password must be at least 10 characters long and include uppercase, lowercase, and a symbol (e.g. @, #, ., -)',\n    },\n  )\n  @MinLength(10)\n  confirmPassword: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CloudinaryService.html":{"url":"injectables/CloudinaryService.html","title":"injectable - CloudinaryService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CloudinaryService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/storage/cloudinary.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                upload\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, loggerService: LoggerService)\n                    \n                \n                        \n                            \n                                Defined in src/services/storage/cloudinary.service.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        loggerService\n                                                  \n                                                        \n                                                                    LoggerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        upload\n                        \n                    \n                \n            \n            \n                \n                        \n                    upload(file: MemoryStoredFile, fileCategory: UploadFileCategoryEnum)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/storage/cloudinary.service.ts:26\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                file\n                                            \n                                                        MemoryStoredFile\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                fileCategory\n                                            \n                                                            UploadFileCategoryEnum\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable, Logger, LoggerService } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport {\n  v2 as cloudinary,\n  UploadApiResponse,\n  UploadApiErrorResponse,\n} from 'cloudinary';\nimport toStream = require('buffer-to-stream');\nimport { IStrorageService } from './interfaces/storage.interface';\nimport { UploadFileCategoryEnum } from '@common/enums';\nimport { MemoryStoredFile } from 'nestjs-form-data';\n\n@Injectable()\nexport class CloudinaryService implements IStrorageService {\n  constructor(\n    private readonly configService: ConfigService,\n    @Inject(Logger) private readonly loggerService: LoggerService,\n  ) {\n    cloudinary.config({\n      cloud_name: this.configService.getOrThrow('cloudinary.cloudName'),\n      api_key: this.configService.getOrThrow('cloudinary.apiKey'),\n      api_secret: this.configService.getOrThrow('cloudinary.apiSecret'),\n    });\n  }\n\n  async upload(\n    file: MemoryStoredFile,\n    fileCategory: UploadFileCategoryEnum,\n  ): Promise {\n    this.loggerService.log(\n      `Starting upload: filename=\"${file.originalName}\", size=${file.size} bytes, category=${fileCategory}`,\n      CloudinaryService.name,\n    );\n\n    return new Promise((resolve, reject) => {\n      const upload = cloudinary.uploader.upload_stream(\n        {\n          folder: `${this.configService.getOrThrow('cloudinary.folder')}/${fileCategory}`,\n          resource_type: 'auto',\n        },\n        (error: UploadApiErrorResponse, result: UploadApiResponse) => {\n          if (error) {\n            this.loggerService.error(\n              `Upload failed: filename=\"${file.originalName}\", error=${error.message}`,\n              error.stack,\n              CloudinaryService.name,\n            );\n            return reject(error);\n          }\n\n          this.loggerService.log(\n            `Upload successful: filename=\"${file.originalName}\", public_id=${result.public_id}, url=${result.secure_url}`,\n            CloudinaryService.name,\n          );\n          return resolve(result);\n        },\n      );\n\n      toStream(file.buffer).pipe(upload);\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CreateUserCommand.html":{"url":"injectables/CreateUserCommand.html","title":"injectable - CreateUserCommand","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CreateUserCommand\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/commands/create-user.command.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        CommandRunner\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                nanoid\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                parseEmail\n                            \n                            \n                                    \n                                parseFirstName\n                            \n                            \n                                    \n                                parseLastName\n                            \n                            \n                                    \n                                parseRole\n                            \n                            \n                                    Async\n                                run\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(em: EntityManager, usersService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/commands/create-user.command.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        em\n                                                  \n                                                        \n                                                                    EntityManager\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        parseEmail\n                        \n                    \n                \n            \n            \n                \n                        \n                    parseEmail(val: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Option({flags: '-e, --email ', required: true})\n                \n            \n\n                    \n                        \n                            Defined in src/commands/create-user.command.ts:50\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                val\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        parseFirstName\n                        \n                    \n                \n            \n            \n                \n                        \n                    parseFirstName(val: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Option({flags: '-f, --first-name ', required: true})\n                \n            \n\n                    \n                        \n                            Defined in src/commands/create-user.command.ts:56\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                val\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        parseLastName\n                        \n                    \n                \n            \n            \n                \n                        \n                    parseLastName(val: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Option({flags: '-l, --last-name ', required: true})\n                \n            \n\n                    \n                        \n                            Defined in src/commands/create-user.command.ts:62\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                val\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        parseRole\n                        \n                    \n                \n            \n            \n                \n                        \n                    parseRole(val: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Option({flags: '-r, --role ', required: true})\n                \n            \n\n                    \n                        \n                            Defined in src/commands/create-user.command.ts:68\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                val\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         UserRoleEnum\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        run\n                        \n                    \n                \n            \n            \n                \n                        \n                    run(inputs: string[], options: Record)\n                \n            \n\n\n                    \n                        \n                            Defined in src/commands/create-user.command.ts:23\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                inputs\n                                            \n                                                        string[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                options\n                                            \n                                                        Record\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        nanoid\n                        \n                    \n                \n            \n                \n                    \n                        Default value : customAlphabet(PASSWORD_CHARACTER_SET, 10)\n                    \n                \n                    \n                        \n                                Defined in src/commands/create-user.command.ts:14\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { Command, CommandRunner } from 'nest-commander';\nimport { UsersService } from '@modules/users/users.service';\nimport { Option } from 'nest-commander';\nimport chalk from 'chalk';\nimport { UserRoleEnum } from '@common/enums';\nimport { customAlphabet } from 'nanoid';\nimport { PASSWORD_CHARACTER_SET } from '@common/constants';\nimport { EntityManager } from '@mikro-orm/core';\n\n@Command({ name: 'create:user', description: 'Create a new user' })\n@Injectable()\nexport class CreateUserCommand extends CommandRunner {\n  private readonly nanoid = customAlphabet(PASSWORD_CHARACTER_SET, 10);\n\n  constructor(\n    private readonly em: EntityManager,\n    private readonly usersService: UsersService,\n  ) {\n    super();\n  }\n\n  async run(inputs: string[], options: Record): Promise {\n    const { email, firstName, lastName, role } = options;\n\n    try {\n      const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]{2,}$/i;\n\n      if (!emailRegex.test(email)) {\n        throw new Error('Invalid email format');\n      }\n\n      await this.em.transactional(async () => {\n        await this.usersService.create({\n          email,\n          firstName,\n          lastName,\n          password: this.nanoid(),\n          role,\n        });\n      });\n      console.log(chalk.green.bold(`✅ Created user with email: ${email}`));\n    } catch (error) {\n      console.error(\n        chalk.red.bold(`❌ Failed to create user: ${error.message}`),\n      );\n    }\n  }\n\n  @Option({ flags: '-e, --email ', required: true }) parseEmail(\n    val: string,\n  ) {\n    return val;\n  }\n\n  @Option({ flags: '-f, --first-name ', required: true }) parseFirstName(\n    val: string,\n  ) {\n    return val;\n  }\n\n  @Option({ flags: '-l, --last-name ', required: true }) parseLastName(\n    val: string,\n  ) {\n    return val;\n  }\n\n  @Option({ flags: '-r, --role ', required: true }) parseRole(\n    val: string,\n  ) {\n    return val as UserRoleEnum;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/dto/create-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                address\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                changePassword\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                city\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                country\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                countryCode\n                            \n                            \n                                    \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                firstName\n                            \n                            \n                                    \n                                    \n                                    \n                                lastName\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                password\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                phoneNumber\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                postalCode\n                            \n                            \n                                    \n                                    \n                                role\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                state\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The address of the user', example: '123 Main St, Springfield'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dto/create-user.dto.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        changePassword\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsBoolean()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dto/create-user.dto.ts:129\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        city\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The city of the user', example: 'Springfield'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dto/create-user.dto.ts:54\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        country\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The country of the user', example: 'USA'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dto/create-user.dto.ts:78\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        countryCode\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The country code of the user', example: '+1'})@IsString()@IsOptional()@Transform( => )\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dto/create-user.dto.ts:91\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The email of the user', example: 'user@example.com'})@IsEmail()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dto/create-user.dto.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The first name of the user', example: 'John'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dto/create-user.dto.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The last name of the user', example: 'Doe'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dto/create-user.dto.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The password of the user', example: 'Strong.Pass-1'})@IsString()@IsNotEmpty()@Matches(/^(?=.*[a-z])(?=.*[A-Z])(?=.*[!@#$%^&*()_\\-+=\\[\\]{};':\"\\\\|,.<>\\/?])[A-Za-z\\d!@#$%^&*()_\\-+=\\[\\]{};':\"\\\\|,.<>\\/?]{10,}$/, {message: 'Password must be at least 10 characters long and include uppercase, lowercase, and a symbol (e.g. @, #, ., -)'})@MinLength(10)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dto/create-user.dto.ts:115\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        phoneNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The phone number of the user', example: '234567890'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dto/create-user.dto.ts:99\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        postalCode\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The postal code of the user', example: '12345'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dto/create-user.dto.ts:62\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserRoleEnum\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Role of the user', example: undefined, enum: UserRoleEnum})@IsEnum(UserRoleEnum, {message: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dto/create-user.dto.ts:125\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        state\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The state of the user', example: 'Illinois'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dto/create-user.dto.ts:70\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsBoolean,\n  IsEmail,\n  IsEnum,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  Matches,\n  MinLength,\n} from 'class-validator';\nimport { ApiProperty } from '@nestjs/swagger';\nimport { UserRoleEnum } from '@common/enums';\nimport { Transform } from 'class-transformer';\n\nexport class CreateUserDto {\n  @ApiProperty({\n    description: 'The email of the user',\n    example: 'user@example.com',\n  })\n  @IsEmail()\n  @IsNotEmpty()\n  email: string;\n\n  @ApiProperty({\n    description: 'The first name of the user',\n    example: 'John',\n  })\n  @IsString()\n  @IsNotEmpty()\n  firstName: string;\n\n  @ApiProperty({\n    description: 'The last name of the user',\n    example: 'Doe',\n  })\n  @IsString()\n  @IsNotEmpty()\n  lastName: string;\n\n  @ApiProperty({\n    description: 'The address of the user',\n    example: '123 Main St, Springfield',\n  })\n  @IsString()\n  @IsOptional()\n  address?: string;\n\n  @ApiProperty({\n    description: 'The city of the user',\n    example: 'Springfield',\n  })\n  @IsString()\n  @IsOptional()\n  city?: string;\n\n  @ApiProperty({\n    description: 'The postal code of the user',\n    example: '12345',\n  })\n  @IsString()\n  @IsOptional()\n  postalCode?: string;\n\n  @ApiProperty({\n    description: 'The state of the user',\n    example: 'Illinois',\n  })\n  @IsString()\n  @IsOptional()\n  state?: string;\n\n  @ApiProperty({\n    description: 'The country of the user',\n    example: 'USA',\n  })\n  @IsString()\n  @IsOptional()\n  country?: string;\n\n  @ApiProperty({\n    description: 'The country code of the user',\n    example: '+1',\n  })\n  @IsString()\n  @IsOptional()\n  @Transform(({ value }) => {\n    if (typeof value !== 'string') return value;\n    const cleaned = value.replace(/\\+/g, '');\n    return cleaned ? `+${cleaned}` : '';\n  })\n  countryCode?: string;\n\n  @ApiProperty({\n    description: 'The phone number of the user',\n    example: '234567890',\n  })\n  @IsString()\n  @IsOptional()\n  phoneNumber?: string;\n\n  @ApiProperty({\n    description: 'The password of the user',\n    example: 'Strong.Pass-1',\n  })\n  @IsString()\n  @IsNotEmpty()\n  @Matches(\n    /^(?=.*[a-z])(?=.*[A-Z])(?=.*[!@#$%^&*()_\\-+=\\[\\]{};':\"\\\\|,.<>\\/?])[A-Za-z\\d!@#$%^&*()_\\-+=\\[\\]{};':\"\\\\|,.<>\\/?]{10,}$/,\n    {\n      message:\n        'Password must be at least 10 characters long and include uppercase, lowercase, and a symbol (e.g. @, #, ., -)',\n    },\n  )\n  @MinLength(10)\n  password: string;\n\n  @ApiProperty({\n    description: 'Role of the user',\n    example: UserRoleEnum.ADMIN,\n    enum: UserRoleEnum,\n  })\n  @IsEnum(UserRoleEnum, {\n    message: `role must be one of: ${Object.values(UserRoleEnum).join(', ')}`,\n  })\n  role: UserRoleEnum;\n\n  @IsBoolean()\n  @IsOptional()\n  changePassword?: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserResponseDto.html":{"url":"classes/CreateUserResponseDto.html","title":"class - CreateUserResponseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserResponseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/dto/responses.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                data\n                            \n                            \n                                    \n                                message\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        data\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The newly created user', type: User})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dto/responses.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        message\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Message indicating the success of the operation', example: 'User created successfully'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dto/responses.dto.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { User } from '../entities/user.entity';\n\nexport class CreateUserResponseDto {\n  @ApiProperty({\n    description: 'Message indicating the success of the operation',\n    example: 'User created successfully',\n  })\n  message: string;\n\n  @ApiProperty({\n    description: 'The newly created user',\n    type: User,\n  })\n  data: User;\n}\n\nexport class GetProfileResponseDto {\n  @ApiProperty({\n    description: 'Message indicating the success of the operation',\n    example: 'Profile fetched successfully',\n  })\n  message: string;\n\n  @ApiProperty({\n    description: 'The profile of the user',\n    type: User,\n  })\n  data: User;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/EmailModule.html":{"url":"modules/EmailModule.html","title":"module - EmailModule","body":"\n                   \n\n\n\n\n    Modules\n    EmailModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_EmailModule\n\n\n\ncluster_EmailModule_exports\n\n\n\n\nEmailService \n\nEmailService \n\n\n\nEmailModule\n\nEmailModule\n\nEmailService  -->\n\nEmailModule->EmailService \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/services/email/email.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Exports\n                    \n                        \n                            EmailService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Logger, Module } from '@nestjs/common';\nimport { EmailService } from './email.service';\nimport { MailerModule } from '@nestjs-modules/mailer';\nimport { ConfigService } from '@nestjs/config';\nimport { EMAIL_FROM_NAME } from '@common/constants';\nimport { PugAdapter } from '@nestjs-modules/mailer/dist/adapters/pug.adapter';\nimport { join } from 'path';\n\n@Module({\n  imports: [\n    MailerModule.forRootAsync({\n      useFactory: (configService: ConfigService) => ({\n        transport: {\n          host: configService.getOrThrow('smtp.host'),\n          port: configService.getOrThrow('smtp.port'),\n          secure: configService.getOrThrow('smtp.secure'),\n          auth: {\n            user: configService.getOrThrow('smtp.auth.user'),\n            pass: configService.getOrThrow('smtp.auth.pass'),\n          },\n        },\n        defaults: {\n          from: `\"${EMAIL_FROM_NAME}\" ('smtp.auth.user')}>`,\n        },\n        template: {\n          dir: join(process.cwd(), 'src/templates/email'),\n          adapter: new PugAdapter(),\n          options: {\n            strict: true,\n          },\n        },\n      }),\n      inject: [ConfigService],\n    }),\n  ],\n  providers: [EmailService, Logger],\n  controllers: [],\n  exports: [EmailService],\n})\nexport class EmailModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/EmailService.html":{"url":"classes/EmailService.html","title":"class - EmailService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  EmailService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/email/email.service.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                sendEmail\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(mailerService: MailerService, loggerService: LoggerService)\n                    \n                \n                        \n                            \n                                Defined in src/services/email/email.service.ts:4\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        mailerService\n                                                  \n                                                        \n                                                                    MailerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        loggerService\n                                                  \n                                                        \n                                                                    LoggerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        sendEmail\n                        \n                    \n                \n            \n            \n                \n                        \n                    sendEmail(to: string | string[], subject: string, template: string, context: Record)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/email/email.service.ts:11\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                to\n                                            \n                                                        string | string[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                subject\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                template\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                context\n                                            \n                                                        Record\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MailerService } from '@nestjs-modules/mailer';\nimport { Inject, Logger, LoggerService } from '@nestjs/common';\n\nexport class EmailService {\n  constructor(\n    @Inject(MailerService)\n    private readonly mailerService: MailerService,\n    @Inject(Logger) private readonly loggerService: LoggerService,\n  ) {}\n\n  async sendEmail(\n    to: string | string[],\n    subject: string,\n    template: string,\n    context: Record,\n  ): Promise {\n    this.loggerService.log(\n      `Sending email to: ${to} with subject: ${subject}`,\n      'EmailService',\n    );\n\n    await this.mailerService.sendMail({\n      to,\n      subject,\n      template,\n      context,\n    });\n\n    this.loggerService.log(`Email sent successfully to: ${to}`, 'EmailService');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ErrorResponse.html":{"url":"interfaces/ErrorResponse.html","title":"interface - ErrorResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ErrorResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/interfaces/error-response.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            errorCode\n                                        \n                                \n                                \n                                        \n                                            message\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                                \n                                        \n                                            path\n                                        \n                                \n                                \n                                        \n                                            statusCode\n                                        \n                                \n                                \n                                        \n                                            timestamp\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        errorCode\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        errorCode:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        message\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        message:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        path\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        path:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        statusCode\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        statusCode:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        timestamp\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        timestamp:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface ErrorResponse {\n  statusCode: number;\n  message: string;\n  errorCode?: string;\n  timestamp: string;\n  path: string;\n  name: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ForgotPasswordDto.html":{"url":"classes/ForgotPasswordDto.html","title":"class - ForgotPasswordDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ForgotPasswordDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/dto/forgot-password.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                email\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'user@example.com'})@IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/dto/forgot-password.dto.ts:7\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail } from 'class-validator';\nimport { ApiProperty } from '@nestjs/swagger';\n\nexport class ForgotPasswordDto {\n  @ApiProperty({ example: 'user@example.com' })\n  @IsEmail()\n  email: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetProfileResponseDto.html":{"url":"classes/GetProfileResponseDto.html","title":"class - GetProfileResponseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetProfileResponseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/dto/responses.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                data\n                            \n                            \n                                    \n                                message\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        data\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The profile of the user', type: User})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dto/responses.dto.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        message\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Message indicating the success of the operation', example: 'Profile fetched successfully'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dto/responses.dto.ts:23\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { User } from '../entities/user.entity';\n\nexport class CreateUserResponseDto {\n  @ApiProperty({\n    description: 'Message indicating the success of the operation',\n    example: 'User created successfully',\n  })\n  message: string;\n\n  @ApiProperty({\n    description: 'The newly created user',\n    type: User,\n  })\n  data: User;\n}\n\nexport class GetProfileResponseDto {\n  @ApiProperty({\n    description: 'Message indicating the success of the operation',\n    example: 'Profile fetched successfully',\n  })\n  message: string;\n\n  @ApiProperty({\n    description: 'The profile of the user',\n    type: User,\n  })\n  data: User;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/HttpClientModule.html":{"url":"modules/HttpClientModule.html","title":"module - HttpClientModule","body":"\n                   \n\n\n\n\n    Modules\n    HttpClientModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_HttpClientModule\n\n\n\ncluster_HttpClientModule_exports\n\n\n\ncluster_HttpClientModule_providers\n\n\n\n\nHttpClientService \n\nHttpClientService \n\n\n\nHttpClientModule\n\nHttpClientModule\n\nHttpClientService  -->\n\nHttpClientModule->HttpClientService \n\n\n\n\n\nHttpClientService\n\nHttpClientService\n\nHttpClientModule -->\n\nHttpClientService->HttpClientModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/services/http-client/http-client.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            HttpClientService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            HttpClientService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Logger, Module } from '@nestjs/common';\nimport { HttpModule } from '@nestjs/axios';\nimport { HttpClientService } from './http-client.service';\n\n@Module({\n  imports: [HttpModule],\n  providers: [HttpClientService, Logger],\n  exports: [HttpClientService],\n})\nexport class HttpClientModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/HttpClientService.html":{"url":"injectables/HttpClientService.html","title":"injectable - HttpClientService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  HttpClientService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/http-client/http-client.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                httpAgent\n                            \n                            \n                                    Private\n                                    Readonly\n                                httpsAgent\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                makeHttpRequest\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(httpService: HttpService, loggerService: LoggerService)\n                    \n                \n                        \n                            \n                                Defined in src/services/http-client/http-client.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        httpService\n                                                  \n                                                        \n                                                                    HttpService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        loggerService\n                                                  \n                                                        \n                                                                    LoggerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        makeHttpRequest\n                        \n                    \n                \n            \n            \n                \n                        \n                    makeHttpRequest(url: string, options: AxiosRequestConfig)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/http-client/http-client.service.ts:21\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                url\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                options\n                                            \n                                                        AxiosRequestConfig\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        httpAgent\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new http.Agent({ keepAlive: false })\n                    \n                \n                    \n                        \n                                Defined in src/services/http-client/http-client.service.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        httpsAgent\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new https.Agent({ keepAlive: false })\n                    \n                \n                    \n                        \n                                Defined in src/services/http-client/http-client.service.ts:11\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { HttpService } from '@nestjs/axios';\nimport { Inject, Injectable, Logger, LoggerService } from '@nestjs/common';\nimport { AxiosRequestConfig } from 'axios';\nimport http from 'http';\nimport https from 'https';\nimport { lastValueFrom } from 'rxjs';\n\n@Injectable()\nexport class HttpClientService {\n  private readonly httpAgent = new http.Agent({ keepAlive: false });\n  private readonly httpsAgent = new https.Agent({ keepAlive: false });\n\n  constructor(\n    private readonly httpService: HttpService,\n    @Inject(Logger) private readonly loggerService: LoggerService,\n  ) {\n    this.httpService.axiosRef.defaults.httpAgent = this.httpAgent;\n    this.httpService.axiosRef.defaults.httpsAgent = this.httpsAgent;\n  }\n\n  async makeHttpRequest(\n    url: string,\n    options: AxiosRequestConfig,\n  ): Promise {\n    this.loggerService.log(\n      `Making HTTP request to ${url}`,\n      HttpClientService.name,\n    );\n\n    const data =\n      (await lastValueFrom(this.httpService.request({ url, ...options }))) ||\n      {};\n\n    this.loggerService.log(\n      `HTTP request to ${url} successful`,\n      HttpClientService.name,\n    );\n\n    return data;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IPaymentService.html":{"url":"interfaces/IPaymentService.html","title":"interface - IPaymentService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IPaymentService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/payment/interfaces/payment.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        createCheckoutSession\n                                    \n                                \n                                \n                                    \n                                        createPaymentIntent\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        createCheckoutSession\n                        \n                    \n                \n            \n            \n                \ncreateCheckoutSession(params: Stripe.Checkout.SessionCreateParams, options?: Stripe.RequestOptions)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/payment/interfaces/payment.interface.ts:4\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                params\n                                            \n                                                            Stripe.Checkout.SessionCreateParams\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                options\n                                            \n                                                        Stripe.RequestOptions\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createPaymentIntent\n                        \n                    \n                \n            \n            \n                \ncreatePaymentIntent(params: Stripe.PaymentIntentCreateParams, options?: Stripe.RequestOptions)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/payment/interfaces/payment.interface.ts:9\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                params\n                                            \n                                                            Stripe.PaymentIntentCreateParams\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                options\n                                            \n                                                        Stripe.RequestOptions\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import Stripe from 'stripe';\n\nexport interface IPaymentService {\n  createCheckoutSession(\n    params: Stripe.Checkout.SessionCreateParams,\n    options?: Stripe.RequestOptions,\n  ): Promise>;\n\n  createPaymentIntent(\n    params: Stripe.PaymentIntentCreateParams,\n    options?: Stripe.RequestOptions,\n  ): Promise>;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IStrorageService.html":{"url":"interfaces/IStrorageService.html","title":"interface - IStrorageService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IStrorageService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/storage/interfaces/storage.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                        Optional\n                                    \n                                        createPresignedUrlWithoutClient\n                                    \n                                \n                                \n                                    \n                                        upload\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        createPresignedUrlWithoutClient\n                        \n                    \n                \n            \n            \n                \ncreatePresignedUrlWithoutClient(key: string, method?: HttpRequestMethodEnum, ttl?: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/storage/interfaces/storage.interface.ts:12\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                method\n                                            \n                                                            HttpRequestMethodEnum\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                        \n                                                ttl\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        upload\n                        \n                    \n                \n            \n            \n                \nupload(file: MemoryStoredFile, fileCategory: UploadFileCategoryEnum)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/storage/interfaces/storage.interface.ts:7\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                file\n                                            \n                                                        MemoryStoredFile\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                fileCategory\n                                            \n                                                            UploadFileCategoryEnum\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { UploadApiResponse } from 'cloudinary';\nimport { MemoryStoredFile } from 'nestjs-form-data';\nimport { HttpRequestMethodEnum, UploadFileCategoryEnum } from '@common/enums';\nimport { S3PutObjectResponse } from '../types/s3-put-object-response';\n\nexport interface IStrorageService {\n  upload(\n    file: MemoryStoredFile,\n    fileCategory: UploadFileCategoryEnum,\n  ): Promise;\n\n  createPresignedUrlWithoutClient?(\n    key: string,\n    method?: HttpRequestMethodEnum,\n    ttl?: number,\n  ): Promise;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtAuthGuard.html":{"url":"injectables/JwtAuthGuard.html","title":"injectable - JwtAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/guards/jwt-auth.guard.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        AuthGuard('jwt')\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                            \n                                handleRequest\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/modules/auth/guards/jwt-auth.guard.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/auth/guards/jwt-auth.guard.ts:16\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        handleRequest\n                        \n                    \n                \n            \n            \n                \nhandleRequest(err: Error, user: any, info: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/auth/guards/jwt-auth.guard.ts:27\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                err\n                                            \n                                                        Error\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                info\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  ExecutionContext,\n  Injectable,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { AuthGuard } from '@nestjs/passport';\nimport { IS_PUBLIC_KEY } from '../decorators/public.decorator';\n\n@Injectable()\nexport class JwtAuthGuard extends AuthGuard('jwt') {\n  constructor(private reflector: Reflector) {\n    super();\n  }\n\n  canActivate(context: ExecutionContext) {\n    const isPublic = this.reflector.getAllAndOverride(IS_PUBLIC_KEY, [\n      context.getHandler(),\n      context.getClass(),\n    ]);\n    if (isPublic) {\n      return true;\n    }\n    return super.canActivate(context);\n  }\n\n  handleRequest(err: Error, user: any, info: any) {\n    if (err || !user) {\n      let errorObject: Error = {\n        name: info?.name || 'UnauthorizedException',\n        message: info?.message || 'Unauthorized',\n      };\n\n      throw new UnauthorizedException(errorObject);\n    }\n\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/strategies/jwt.strategy.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PassportStrategy(Strategy)\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, usersService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/auth/strategies/jwt.strategy.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                        \n                    validate(req: Request, payload: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/auth/strategies/jwt.strategy.ts:34\n                        \n                    \n\n\n            \n                \n                        NOTE: req is available here and can be used to extract the raw JWT.\nThis can support enforcing a single active session per user:\n\nCompare the JWT in the request with the token stored in the user document.\nReject the request if they don't match (i.e., user is logged in elsewhere).\n\nImplementation details:\n\nStore or update the token in the user document during login and token refresh.\nThis logic should be implemented in the\nlogin() (needs to be implemented as login currently stops at the controller level and no it's not wrong)\n and refresh() methods of the AuthService class.\n\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                payload\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ExtractJwt, Strategy } from 'passport-jwt';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Injectable, NotFoundException } from '@nestjs/common';\nimport { UsersService } from '@modules/users/users.service';\nimport { ConfigService } from '@nestjs/config';\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  constructor(\n    configService: ConfigService,\n    private usersService: UsersService,\n  ) {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      ignoreExpiration: false,\n      secretOrKey: configService.getOrThrow('auth.jwt.secret'),\n      passReqToCallback: true,\n    });\n  }\n\n  /**\n   * NOTE: `req` is available here and can be used to extract the raw JWT.\n   *\n   * This can support enforcing a single active session per user:\n   * - Compare the JWT in the request with the token stored in the user document.\n   * - Reject the request if they don't match (i.e., user is logged in elsewhere).\n   *\n   * Implementation details:\n   * - Store or update the token in the user document during login and token refresh.\n   * - This logic should be implemented in the\n   * `login()` (needs to be implemented as login currently stops at the controller level and no it's not wrong)\n   *  and `refresh()` methods of the `AuthService` class.\n   */\n  async validate(req: Request, payload: any) {\n    const user = await this.usersService.findOne(\n      {\n        id: payload.sub,\n      },\n      { failHandler: () => new NotFoundException('User not found') },\n    );\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalAuthGuard.html":{"url":"injectables/LocalAuthGuard.html","title":"injectable - LocalAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LocalAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/guards/local-auth.guard.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        AuthGuard('local')\n            \n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class LocalAuthGuard extends AuthGuard('local') {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalStrategy.html":{"url":"injectables/LocalStrategy.html","title":"injectable - LocalStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LocalStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/strategies/local.strategy.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PassportStrategy(Strategy)\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService, usersService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/auth/strategies/local.strategy.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                        \n                    validate(email: string, password: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/auth/strategies/local.strategy.ts:17\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                password\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Strategy } from 'passport-local';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { AuthService } from '../auth.service';\nimport { UsersService } from '@modules/users/users.service';\nimport moment from 'moment';\n\n@Injectable()\nexport class LocalStrategy extends PassportStrategy(Strategy) {\n  constructor(\n    private authService: AuthService,\n    private usersService: UsersService,\n  ) {\n    super({ usernameField: 'email' });\n  }\n\n  async validate(email: string, password: string): Promise {\n    const user = await this.authService.validateUser(email, password);\n    if (!user) {\n      throw new UnauthorizedException('Invalid credentials');\n    }\n    await this.usersService.update({\n      id: user.id,\n      lastLoggedIn: moment().utc().toDate(),\n    });\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginDto.html":{"url":"classes/LoginDto.html","title":"class - LoginDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/dto/login.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The email of the user', example: 'user@example.com'})@IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/dto/login.dto.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The password of the user', example: 'Strong.Pass-1'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/dto/login.dto.ts:16\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsEmail } from 'class-validator';\n\nexport class LoginDto {\n  @ApiProperty({\n    description: 'The email of the user',\n    example: 'user@example.com',\n  })\n  @IsEmail()\n  email: string;\n\n  @ApiProperty({\n    description: 'The password of the user',\n    example: 'Strong.Pass-1',\n  })\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Migration20250730220636.html":{"url":"classes/Migration20250730220636.html","title":"class - Migration20250730220636","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Migration20250730220636\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/migrations/Migration20250730220636.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        Migration\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        up\n                        \n                    \n                \n            \n            \n                \n                        \n                    up()\n                \n            \n\n\n                    \n                        \n                            Defined in src/migrations/Migration20250730220636.ts:4\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     Promise\n\n                        \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Migration } from '@mikro-orm/migrations';\n\nexport class Migration20250730220636 extends Migration {\n  override async up(): Promise {\n    this.addSql(\n      `create table \"users\" (\"id\" uuid not null, \"deleted_at\" timestamptz null, \"created_at\" timestamptz not null default CURRENT_TIMESTAMP, \"updated_at\" timestamptz not null default CURRENT_TIMESTAMP, \"email\" varchar(255) not null, \"avatar\" varchar(500) null, \"first_name\" varchar(100) not null, \"last_name\" varchar(100) not null, \"address\" text null, \"city\" varchar(100) null, \"postal_code\" varchar(20) null, \"state\" varchar(100) null, \"country\" varchar(100) null, \"country_code\" varchar(3) null, \"phone_number\" varchar(20) null, \"password\" varchar(255) not null, \"role\" text check (\"role\" in ('admin', 'user')) not null default 'user', \"change_password\" boolean not null default false, \"password_reset_requested\" boolean not null default false, \"last_logged_in\" timestamptz null, constraint \"users_pkey\" primary key (\"id\"));`,\n    );\n    this.addSql(\n      `comment on column \"users\".\"deleted_at\" is 'Soft delete timestamp';`,\n    );\n    this.addSql(\n      `comment on column \"users\".\"created_at\" is 'Record creation timestamp';`,\n    );\n    this.addSql(\n      `comment on column \"users\".\"updated_at\" is 'Record last update timestamp';`,\n    );\n    this.addSql(`comment on column \"users\".\"email\" is 'User email address';`);\n    this.addSql(`comment on column \"users\".\"avatar\" is 'Avatar URL or path';`);\n    this.addSql(`comment on column \"users\".\"first_name\" is 'User first name';`);\n    this.addSql(`comment on column \"users\".\"last_name\" is 'User last name';`);\n    this.addSql(`comment on column \"users\".\"address\" is 'Street address';`);\n    this.addSql(`comment on column \"users\".\"city\" is 'City name';`);\n    this.addSql(\n      `comment on column \"users\".\"postal_code\" is 'Postal/ZIP code';`,\n    );\n    this.addSql(`comment on column \"users\".\"state\" is 'State/Province';`);\n    this.addSql(`comment on column \"users\".\"country\" is 'Country name';`);\n    this.addSql(\n      `comment on column \"users\".\"country_code\" is 'ISO country code';`,\n    );\n    this.addSql(`comment on column \"users\".\"phone_number\" is 'Phone number';`);\n    this.addSql(`comment on column \"users\".\"password\" is 'Hashed password';`);\n    this.addSql(`comment on column \"users\".\"role\" is 'User role';`);\n    this.addSql(\n      `comment on column \"users\".\"change_password\" is 'Whether user needs to change password';`,\n    );\n    this.addSql(\n      `comment on column \"users\".\"password_reset_requested\" is 'Whether password reset was requested';`,\n    );\n    this.addSql(\n      `comment on column \"users\".\"last_logged_in\" is 'Last login timestamp';`,\n    );\n    this.addSql(\n      `alter table \"users\" add constraint \"users_email_unique\" unique (\"email\");`,\n    );\n    this.addSql(\n      `create index \"users_deleted_at_index\" on \"users\" (\"deleted_at\");`,\n    );\n    this.addSql(`create index \"users_email_index\" on \"users\" (\"email\");`);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MorganMiddleware.html":{"url":"injectables/MorganMiddleware.html","title":"injectable - MorganMiddleware","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  MorganMiddleware\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/middlewares/morgan.middleware.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                use\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(loggerService: LoggerService)\n                    \n                \n                        \n                            \n                                Defined in src/common/middlewares/morgan.middleware.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        loggerService\n                                                  \n                                                        \n                                                                    LoggerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        use\n                        \n                    \n                \n            \n            \n                \nuse(req: any, res: any, next: () => void)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/middlewares/morgan.middleware.ts:14\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                res\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                next\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  Inject,\n  Injectable,\n  Logger,\n  LoggerService,\n  NestMiddleware,\n} from '@nestjs/common';\nimport morgan from 'morgan';\n\n@Injectable()\nexport class MorganMiddleware implements NestMiddleware {\n  constructor(@Inject(Logger) private readonly loggerService: LoggerService) {}\n\n  use(req: any, res: any, next: () => void) {\n    if (req.url === '/' || req.url.match(/\\/v1\\/queues\\/.*$/)) {\n      return next();\n    }\n\n    morgan(\n      ':remote-addr :remote-user :method :url :http-version :status :res[content-length] :response-time ms :total-time ms :referrer :user-agent :req[header] :req[body]',\n      {\n        stream: {\n          write: (message: string) => {\n            const status = res.statusCode;\n            if (status === 404) {\n              this.loggerService.warn(message.trim(), MorganMiddleware.name);\n            } else {\n              this.loggerService.log(message.trim(), MorganMiddleware.name);\n            }\n          },\n        },\n      },\n    )(req, res, next);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PasswordResetEmailConsumer.html":{"url":"classes/PasswordResetEmailConsumer.html","title":"class - PasswordResetEmailConsumer","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PasswordResetEmailConsumer\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/consumers/auth.consumer.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                process\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(emailService: EmailService, loggerService: LoggerService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/auth/consumers/auth.consumer.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        emailService\n                                                  \n                                                        \n                                                                        EmailService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        loggerService\n                                                  \n                                                        \n                                                                    LoggerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        process\n                        \n                    \n                \n            \n            \n                \n                        \n                    process(job: Job)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/auth/consumers/auth.consumer.ts:20\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                job\n                                            \n                                                        Job\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { PASSWORD_RESET_EMAIL_QUEUE_NAME } from '@common/constants';\nimport os from 'os';\nimport { Processor, WorkerHost } from '@nestjs/bullmq';\nimport { Job } from 'bullmq';\nimport { EmailService } from '@services/email/email.service';\nimport { Inject, Logger, LoggerService } from '@nestjs/common';\nimport { EmailSubjectEnum, EmailTemplateEnum } from '@common/enums';\n\n@Processor(PASSWORD_RESET_EMAIL_QUEUE_NAME, {\n  concurrency: os.cpus().length,\n})\nexport class PasswordResetEmailConsumer extends WorkerHost {\n  constructor(\n    private readonly emailService: EmailService,\n    @Inject(Logger) private readonly loggerService: LoggerService,\n  ) {\n    super();\n  }\n\n  async process(job: Job) {\n    const { data } = job;\n\n    this.loggerService.log(\n      `Processing job: ${job.id} for email: ${data?.email}`,\n      'PasswordResetEmailConsumer',\n    );\n\n    await this.emailService.sendEmail(\n      data?.email,\n      EmailSubjectEnum.PASSWORD_RESET,\n      EmailTemplateEnum.PASSWORD_RESET,\n      { resetUrl: data?.resetUrl, firstName: data?.firstName },\n    );\n\n    this.loggerService.log(\n      `Job: ${job.id} processed successfully for email: ${data?.email}`,\n      'PasswordResetEmailConsumer',\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PaymentModule.html":{"url":"modules/PaymentModule.html","title":"module - PaymentModule","body":"\n                   \n\n\n\n\n    Modules\n    PaymentModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/services/payment/payment.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        register\n                        \n                    \n                \n            \n            \n                \n                        \n                    register()\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/payment/payment.module.ts:16\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     DynamicModule\n\n                        \n                \n            \n        \n    \n\n    \n\n\n    \n        import { STRIPE_CLIENT_TOKEN, StripeModule } from '@golevelup/nestjs-stripe';\nimport { DynamicModule, Logger, LoggerService, Module } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { TEMPLATE_QUEUE_NAME, PAYMENT_PROVIDER } from '@common/constants';\nimport { PaymentDriverEnum } from '@common/enums';\nimport Stripe from 'stripe';\nimport { Public } from '@modules/auth/decorators/public.decorator';\nimport { StripeService } from './stripe.service';\nimport { BullModule, getQueueToken } from '@nestjs/bullmq';\nimport { BullBoardModule } from '@bull-board/nestjs';\nimport { BullMQAdapter } from '@bull-board/api/bullMQAdapter';\nimport { Queue } from 'bullmq';\n\n@Module({})\nexport class PaymentModule {\n  static register(): DynamicModule {\n    return {\n      module: PaymentModule,\n      imports: [\n        StripeModule.forRootAsync({\n          useFactory: (configService: ConfigService) => ({\n            apiKey: configService.getOrThrow('stripe.secretKey'),\n            webhookConfig: {\n              stripeSecrets: {\n                account: configService.getOrThrow(\n                  'stripe.webhookSecret.account',\n                ),\n                accountTest: configService.getOrThrow(\n                  'stripe.webhookSecret.accountTest',\n                ),\n              },\n              loggingConfiguration: {\n                logMatchingEventHandlers: true,\n              },\n              decorators: [Public()],\n            },\n          }),\n          inject: [ConfigService],\n        }),\n        BullModule.registerQueue({\n          name: TEMPLATE_QUEUE_NAME,\n          defaultJobOptions: {\n            attempts: 5,\n            backoff: { type: 'exponential', delay: 2000 },\n          },\n        }),\n        BullBoardModule.forFeature({\n          name: TEMPLATE_QUEUE_NAME,\n          adapter: BullMQAdapter,\n        }),\n      ],\n      providers: [\n        {\n          provide: PAYMENT_PROVIDER,\n          useFactory: (\n            configService: ConfigService,\n            loggerService: LoggerService,\n            stripeClient: Stripe,\n            templateQueue: Queue,\n          ) => {\n            const driver = configService.getOrThrow('driver.payment');\n            if (driver === PaymentDriverEnum.STRIPE)\n              return new StripeService(\n                configService,\n                loggerService,\n                stripeClient,\n                templateQueue,\n              );\n          },\n          inject: [\n            ConfigService,\n            Logger,\n            STRIPE_CLIENT_TOKEN,\n            getQueueToken(TEMPLATE_QUEUE_NAME),\n          ],\n        },\n        Logger,\n      ],\n      exports: [PAYMENT_PROVIDER],\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RefreshTokenDto.html":{"url":"classes/RefreshTokenDto.html","title":"class - RefreshTokenDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RefreshTokenDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/dto/refresh-token-dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                refreshToken\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        refreshToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Refresh token provided during login', example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/dto/refresh-token-dto.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsNotEmpty, IsString } from 'class-validator';\n\nexport class RefreshTokenDto {\n  @ApiProperty({\n    description: 'Refresh token provided during login',\n    example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9',\n  })\n  @IsString()\n  @IsNotEmpty()\n  refreshToken: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RequestBodyAndResponseInterceptor.html":{"url":"injectables/RequestBodyAndResponseInterceptor.html","title":"injectable - RequestBodyAndResponseInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RequestBodyAndResponseInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/interceptors/response.interceptor.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(loggerService: LoggerService)\n                    \n                \n                        \n                            \n                                Defined in src/common/interceptors/response.interceptor.ts:53\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        loggerService\n                                                  \n                                                        \n                                                                    LoggerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/interceptors/response.interceptor.ts:56\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                next\n                                            \n                                                        CallHandler\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { STRIPE_WEBHOOK_CONTEXT_TYPE } from '@golevelup/nestjs-stripe';\nimport {\n  CallHandler,\n  ExecutionContext,\n  Inject,\n  Injectable,\n  Logger,\n  LoggerService,\n  NestInterceptor,\n} from '@nestjs/common';\nimport { Observable } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\n\n@Injectable()\nexport class SuccessResponseInterceptor implements NestInterceptor {\n  intercept(context: ExecutionContext, next: CallHandler): Observable {\n    const contextType = context.getType();\n    if (contextType === STRIPE_WEBHOOK_CONTEXT_TYPE) {\n      return next.handle();\n    }\n\n    return next.handle().pipe(\n      map((response) => {\n        const httpResponse = context.switchToHttp().getResponse();\n\n        const statusCode =\n          response?.statusCode && Number.isInteger(response.statusCode)\n            ? response.statusCode\n            : httpResponse.statusCode;\n\n        const message =\n          response?.message && typeof response.message === 'string'\n            ? response.message\n            : 'Operation successful';\n\n        const responseData =\n          response?.data !== undefined ? response?.data : response?.message;\n\n        return {\n          statusCode,\n          success: true,\n          message,\n          data: responseData,\n        };\n      }),\n    );\n  }\n}\n\n@Injectable()\nexport class RequestBodyAndResponseInterceptor implements NestInterceptor {\n  constructor(@Inject(Logger) private readonly loggerService: LoggerService) {}\n\n  intercept(context: ExecutionContext, next: CallHandler): Observable {\n    const request = context.switchToHttp().getRequest();\n    const method = request.method;\n    const url = request.url;\n\n    return next.handle().pipe(\n      tap((response) => {\n        this.loggerService.log(`[${method}] ${url} - Response:`, response);\n      }),\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RequestContextMiddleware.html":{"url":"injectables/RequestContextMiddleware.html","title":"injectable - RequestContextMiddleware","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RequestContextMiddleware\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/middlewares/request-context.middleware.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                use\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(orm: MikroORM)\n                    \n                \n                        \n                            \n                                Defined in src/common/middlewares/request-context.middleware.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        orm\n                                                  \n                                                        \n                                                                    MikroORM\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        use\n                        \n                    \n                \n            \n            \n                \nuse(req: Request, res: Response, next: NextFunction)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/middlewares/request-context.middleware.ts:9\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                res\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                next\n                                            \n                                                        NextFunction\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NestMiddleware } from '@nestjs/common';\nimport { Request, Response, NextFunction } from 'express';\nimport { MikroORM, RequestContext } from '@mikro-orm/core';\n\n@Injectable()\nexport class RequestContextMiddleware implements NestMiddleware {\n  constructor(private readonly orm: MikroORM) {}\n\n  use(req: Request, res: Response, next: NextFunction): void {\n    RequestContext.create(this.orm.em, next);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ResetPasswordDto.html":{"url":"classes/ResetPasswordDto.html","title":"class - ResetPasswordDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ResetPasswordDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/dto/reset-password.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                confirmPassword\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                newPassword\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                resetToken\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        confirmPassword\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The confirmation of the new password', example: 'Asecure-Word.'})@IsString()@IsNotEmpty()@Matches(/^(?=.*[a-z])(?=.*[A-Z])(?=.*[!@#$%^&*()_\\-+=\\[\\]{};':\"\\\\|,.<>\\/?])[A-Za-z\\d!@#$%^&*()_\\-+=\\[\\]{};':\"\\\\|,.<>\\/?]{10,}$/, {message: 'Password must be at least 10 characters long and include uppercase, lowercase, and a symbol (e.g. @, #, ., -)'})@MinLength(10)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/dto/reset-password.dto.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        newPassword\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The new password for the user', example: 'Asecure-Word.'})@IsString()@IsNotEmpty()@Matches(/^(?=.*[a-z])(?=.*[A-Z])(?=.*[!@#$%^&*()_\\-+=\\[\\]{};':\"\\\\|,.<>\\/?])[A-Za-z\\d!@#$%^&*()_\\-+=\\[\\]{};':\"\\\\|,.<>\\/?]{10,}$/, {message: 'Password must be at least 10 characters long and include uppercase, lowercase, and a symbol (e.g. @, #, ., -)'})@MinLength(10)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/dto/reset-password.dto.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        resetToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The reset token sent to the user', example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...'})@IsString()@IsJWT()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/dto/reset-password.dto.ts:50\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport {\n  IsJWT,\n  IsNotEmpty,\n  IsString,\n  Matches,\n  MinLength,\n} from 'class-validator';\n\nexport class ResetPasswordDto {\n  @ApiProperty({\n    description: 'The new password for the user',\n    example: 'Asecure-Word.',\n  })\n  @IsString()\n  @IsNotEmpty()\n  @Matches(\n    /^(?=.*[a-z])(?=.*[A-Z])(?=.*[!@#$%^&*()_\\-+=\\[\\]{};':\"\\\\|,.<>\\/?])[A-Za-z\\d!@#$%^&*()_\\-+=\\[\\]{};':\"\\\\|,.<>\\/?]{10,}$/,\n    {\n      message:\n        'Password must be at least 10 characters long and include uppercase, lowercase, and a symbol (e.g. @, #, ., -)',\n    },\n  )\n  @MinLength(10)\n  newPassword: string;\n\n  @ApiProperty({\n    description: 'The confirmation of the new password',\n    example: 'Asecure-Word.',\n  })\n  @IsString()\n  @IsNotEmpty()\n  @Matches(\n    /^(?=.*[a-z])(?=.*[A-Z])(?=.*[!@#$%^&*()_\\-+=\\[\\]{};':\"\\\\|,.<>\\/?])[A-Za-z\\d!@#$%^&*()_\\-+=\\[\\]{};':\"\\\\|,.<>\\/?]{10,}$/,\n    {\n      message:\n        'Password must be at least 10 characters long and include uppercase, lowercase, and a symbol (e.g. @, #, ., -)',\n    },\n  )\n  @MinLength(10)\n  confirmPassword: string;\n\n  @ApiProperty({\n    description: 'The reset token sent to the user',\n    example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...',\n  })\n  @IsString()\n  @IsJWT()\n  @IsNotEmpty()\n  resetToken: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/RoleGuard.html":{"url":"guards/RoleGuard.html","title":"guard - RoleGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    RoleGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/common/guards/role.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/common/guards/role.guard.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/guards/role.guard.ts:16\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     boolean | Promise | Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import {\n  Injectable,\n  CanActivate,\n  ExecutionContext,\n  ForbiddenException,\n} from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { Role } from '../decorators';\nimport { Observable } from 'rxjs';\nimport { STRIPE_WEBHOOK_CONTEXT_TYPE } from '@golevelup/nestjs-stripe';\n\n@Injectable()\nexport class RoleGuard implements CanActivate {\n  constructor(private readonly reflector: Reflector) {}\n\n  canActivate(\n    context: ExecutionContext,\n  ): boolean | Promise | Observable {\n    const contextType = context.getType();\n\n    if (contextType === STRIPE_WEBHOOK_CONTEXT_TYPE) {\n      return true;\n    }\n\n    const requiredRole = this.reflector.get(Role, context.getHandler());\n\n    if (!requiredRole) {\n      return true;\n    }\n\n    const request = context.switchToHttp().getRequest();\n    const userRole: string = request?.user?.role;\n\n    if (userRole !== requiredRole) {\n      throw new ForbiddenException(\n        'You do not have the necessary permission to access this route!',\n      );\n    }\n\n    return true;\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/S3Service.html":{"url":"injectables/S3Service.html","title":"injectable - S3Service","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  S3Service\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/storage/s3.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                nanoid\n                            \n                            \n                                    Private\n                                s3Bucket\n                            \n                            \n                                    Private\n                                s3Region\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createPresignedUrlWithoutClient\n                            \n                            \n                                    Async\n                                upload\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, loggerService: LoggerService, s3Client: S3)\n                    \n                \n                        \n                            \n                                Defined in src/services/storage/s3.service.ts:21\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        loggerService\n                                                  \n                                                        \n                                                                    LoggerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        s3Client\n                                                  \n                                                        \n                                                                    S3\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createPresignedUrlWithoutClient\n                        \n                    \n                \n            \n            \n                \n                        \n                    createPresignedUrlWithoutClient(key: string, method?: HttpRequestMethodEnum, ttl?: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/storage/s3.service.ts:62\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                method\n                                            \n                                                            HttpRequestMethodEnum\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                        \n                                                ttl\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        upload\n                        \n                    \n                \n            \n            \n                \n                        \n                    upload(file: MemoryStoredFile, fileCategory: UploadFileCategoryEnum)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/storage/s3.service.ts:32\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                file\n                                            \n                                                        MemoryStoredFile\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                fileCategory\n                                            \n                                                            UploadFileCategoryEnum\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        nanoid\n                        \n                    \n                \n            \n                \n                    \n                        Default value : customAlphabet(hexadecimalLowercase, 10)\n                    \n                \n                    \n                        \n                                Defined in src/services/storage/s3.service.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        s3Bucket\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/services/storage/s3.service.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        s3Region\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/services/storage/s3.service.ts:20\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable, Logger, LoggerService } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { IStrorageService } from './interfaces/storage.interface';\nimport { HttpRequestMethodEnum, UploadFileCategoryEnum } from '@common/enums';\nimport { MemoryStoredFile } from 'nestjs-form-data';\nimport { InjectS3, S3 } from 'nestjs-s3';\nimport { customAlphabet } from 'nanoid';\nimport { hexadecimalLowercase } from 'nanoid-dictionary';\nimport { S3PutObjectResponse } from './types/s3-put-object-response';\nimport { parseUrl } from '@smithy/url-parser';\nimport { S3RequestPresigner } from '@aws-sdk/s3-request-presigner';\nimport { fromEnv } from '@aws-sdk/credential-providers';\nimport { Hash } from '@smithy/hash-node';\nimport { HttpRequest } from '@smithy/protocol-http';\nimport { formatUrl } from '@aws-sdk/util-format-url';\n\n@Injectable()\nexport class S3Service implements IStrorageService {\n  private s3Bucket: string;\n  private s3Region: string;\n  private readonly nanoid = customAlphabet(hexadecimalLowercase, 10);\n\n  constructor(\n    private readonly configService: ConfigService,\n    @Inject(Logger) private readonly loggerService: LoggerService,\n    @InjectS3() private readonly s3Client: S3,\n  ) {\n    this.s3Bucket = this.configService.getOrThrow('aws.s3.bucket');\n    this.s3Region = this.configService.getOrThrow('aws.s3.region');\n  }\n\n  async upload(\n    file: MemoryStoredFile,\n    fileCategory: UploadFileCategoryEnum,\n  ): Promise {\n    this.s3Bucket = this.configService.getOrThrow('aws.s3.bucket');\n\n    const key = `${fileCategory}/${this.nanoid()}_${file.originalName}`;\n\n    this.loggerService.log(\n      `Starting upload: filename=\"${file.originalName}\", size=${file.size} bytes, category=${fileCategory}`,\n      S3Service.name,\n    );\n\n    await this.s3Client.putObject({\n      Bucket: this.s3Bucket,\n      Key: key,\n      Body: file.buffer,\n      ContentType: file.mimetype,\n    });\n\n    const url = `https://${this.s3Bucket}.s3.${this.s3Region}.amazonaws.com/${key}`;\n\n    this.loggerService.log(\n      `Upload successful: filename=\"${file.originalName}\", key=${key}`,\n      S3Service.name,\n    );\n\n    return { key, url };\n  }\n\n  async createPresignedUrlWithoutClient(\n    key: string,\n    method?: HttpRequestMethodEnum,\n    ttl?: number,\n  ): Promise {\n    const httpMethod = method ?? HttpRequestMethodEnum.GET;\n    const expiresIn = ttl ?? 30 * 60 * 60;\n\n    const url = parseUrl(\n      `https://${this.s3Bucket}.s3.${this.s3Region}.amazonaws.com/${key}`,\n    );\n    const presigner = new S3RequestPresigner({\n      credentials: fromEnv(),\n      region: this.s3Region,\n      sha256: Hash.bind(null, 'sha256'),\n    });\n\n    const signedUrlObject = await presigner.presign(\n      new HttpRequest({ ...url, method: httpMethod }),\n      { expiresIn },\n    );\n    return formatUrl(signedUrlObject);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SchemaService.html":{"url":"injectables/SchemaService.html","title":"injectable - SchemaService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SchemaService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/schema.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                onModuleInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(orm: MikroORM, configService: ConfigService, loggerService: LoggerService)\n                    \n                \n                        \n                            \n                                Defined in src/schema.service.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        orm\n                                                  \n                                                        \n                                                                    MikroORM\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        loggerService\n                                                  \n                                                        \n                                                                    LoggerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \n                        \n                    onModuleInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/schema.service.ts:22\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(SchemaService.name)\n                    \n                \n                    \n                        \n                                Defined in src/schema.service.ts:14\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import {\n  Injectable,\n  OnModuleInit,\n  Logger,\n  LoggerService,\n  Inject,\n} from '@nestjs/common';\nimport { MikroORM } from '@mikro-orm/core';\nimport { ConfigService } from '@nestjs/config';\nimport { PRODUCTION } from './common/constants';\n\n@Injectable()\nexport class SchemaService implements OnModuleInit {\n  private readonly logger = new Logger(SchemaService.name);\n\n  constructor(\n    private readonly orm: MikroORM,\n    private readonly configService: ConfigService,\n    @Inject(Logger) private readonly loggerService: LoggerService,\n  ) {}\n\n  async onModuleInit() {\n    const nodeEnv = this.configService.getOrThrow('nodeEnv');\n\n    if (nodeEnv !== PRODUCTION) {\n      const generator = this.orm.getSchemaGenerator();\n      await generator.updateSchema();\n      this.loggerService.log(\n        '✅ Database schema synchronized',\n        SchemaService.name,\n      );\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/StorageModule.html":{"url":"modules/StorageModule.html","title":"module - StorageModule","body":"\n                   \n\n\n\n\n    Modules\n    StorageModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/services/storage/storage.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        register\n                        \n                    \n                \n            \n            \n                \n                        \n                    register()\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/storage/storage.module.ts:11\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     DynamicModule\n\n                        \n                \n            \n        \n    \n\n    \n\n\n    \n        import { Module, DynamicModule, Logger, LoggerService } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { CloudinaryService } from './cloudinary.service';\nimport { STORAGE_PROVIDER } from '@common/constants';\nimport { StorageDriverEnum } from '@common/enums';\nimport { S3Service } from './s3.service';\nimport { getS3ConnectionToken, S3, S3Module } from 'nestjs-s3';\n\n@Module({})\nexport class StorageModule {\n  static register(): DynamicModule {\n    return {\n      module: StorageModule,\n      imports: [\n        S3Module.forRootAsync({\n          inject: [ConfigService],\n          useFactory: (configService: ConfigService) => ({\n            config: {\n              credentials: {\n                accessKeyId: configService.get('aws.s3.accessKeyId'),\n                secretAccessKey: configService.get(\n                  'aws.s3.secretAccessKey',\n                ),\n              },\n              region: configService.get('aws.s3.region'),\n            },\n          }),\n        }),\n      ],\n      providers: [\n        {\n          provide: STORAGE_PROVIDER,\n          useFactory: (\n            configService: ConfigService,\n            loggerService: LoggerService,\n            s3Client: S3,\n          ) => {\n            const driver = configService.getOrThrow('driver.storage');\n            if (driver === StorageDriverEnum.CLOUDINARY) {\n              return new CloudinaryService(configService, loggerService);\n            } else if (driver === StorageDriverEnum.S3) {\n              return new S3Service(configService, loggerService, s3Client);\n            }\n\n            throw new Error(`Unsupported storage driver: ${driver}`);\n          },\n          inject: [ConfigService, Logger, getS3ConnectionToken('')],\n        },\n        Logger,\n      ],\n      exports: [STORAGE_PROVIDER],\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/StripeService.html":{"url":"injectables/StripeService.html","title":"injectable - StripeService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  StripeService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/payment/stripe.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createCheckoutSession\n                            \n                            \n                                    Async\n                                createPaymentIntent\n                            \n                            \n                                    \n                                    Async\n                                handlePaymentIntentSucceeded\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, loggerService: LoggerService, stripeClient: Stripe, templateQueue: Queue)\n                    \n                \n                        \n                            \n                                Defined in src/services/payment/stripe.service.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        loggerService\n                                                  \n                                                        \n                                                                    LoggerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        stripeClient\n                                                  \n                                                        \n                                                                    Stripe\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        templateQueue\n                                                  \n                                                        \n                                                                    Queue\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createCheckoutSession\n                        \n                    \n                \n            \n            \n                \n                        \n                    createCheckoutSession(params: Stripe.Checkout.SessionCreateParams, options?: Stripe.RequestOptions)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/payment/stripe.service.ts:23\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                params\n                                            \n                                                            Stripe.Checkout.SessionCreateParams\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                options\n                                            \n                                                        Stripe.RequestOptions\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createPaymentIntent\n                        \n                    \n                \n            \n            \n                \n                        \n                    createPaymentIntent(params: Stripe.PaymentIntentCreateParams, options?: Stripe.RequestOptions)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/payment/stripe.service.ts:45\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                params\n                                            \n                                                            Stripe.PaymentIntentCreateParams\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                options\n                                            \n                                                        Stripe.RequestOptions\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        handlePaymentIntentSucceeded\n                        \n                    \n                \n            \n            \n                \n                        \n                    handlePaymentIntentSucceeded(evt: Stripe.PaymentIntentSucceededEvent)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @StripeWebhookHandler('payment_intent.succeeded')\n                \n            \n\n                    \n                        \n                            Defined in src/services/payment/stripe.service.ts:60\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                evt\n                                            \n                                                            Stripe.PaymentIntentSucceededEvent\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  InjectStripeClient,\n  StripeWebhookHandler,\n} from '@golevelup/nestjs-stripe';\nimport { Inject, Injectable, Logger, LoggerService } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport Stripe from 'stripe';\nimport { TEMPLATE_QUEUE_NAME } from '@common/constants';\nimport { IPaymentService } from './interfaces/payment.interface';\nimport { InjectQueue } from '@nestjs/bullmq';\nimport { Queue } from 'bullmq';\n\n@Injectable()\nexport class StripeService implements IPaymentService {\n  constructor(\n    private readonly configService: ConfigService,\n    @Inject(Logger) private readonly loggerService: LoggerService,\n    @InjectStripeClient() private readonly stripeClient: Stripe,\n    @InjectQueue(TEMPLATE_QUEUE_NAME)\n    private readonly templateQueue: Queue,\n  ) {}\n\n  async createCheckoutSession(\n    params: Stripe.Checkout.SessionCreateParams,\n    options?: Stripe.RequestOptions,\n  ): Promise> {\n    this.loggerService.log(\n      `Creating Stripe checkout session`,\n      StripeService.name,\n    );\n\n    const session = await this.stripeClient.checkout.sessions.create(\n      params,\n      options,\n    );\n\n    this.loggerService.log(\n      `Checkout session created successfully with ID: ${session.id}`,\n      StripeService.name,\n    );\n\n    return session;\n  }\n\n  async createPaymentIntent(\n    params: Stripe.PaymentIntentCreateParams,\n    options?: Stripe.RequestOptions,\n  ): Promise> {\n    this.loggerService.log(`Creating Payment Intent`, StripeService.name);\n\n    const paymentIntent = await this.stripeClient.paymentIntents.create(\n      params,\n      options,\n    );\n\n    return paymentIntent;\n  }\n\n  @StripeWebhookHandler('payment_intent.succeeded')\n  async handlePaymentIntentSucceeded(evt: Stripe.PaymentIntentSucceededEvent) {\n    const { data }: { data: Stripe.PaymentIntentSucceededEvent.Data } = evt;\n    const intent = data.object as Stripe.PaymentIntent;\n\n    await this.templateQueue.add(TEMPLATE_QUEUE_NAME, {\n      intent,\n      eventId: evt?.id,\n    });\n\n    this.loggerService.log(\n      `Received Stripe payment_intent.succeeded event: intent id=\"${intent.id}\" and queued into: \"${TEMPLATE_QUEUE_NAME}\"`,\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SuccessResponseInterceptor.html":{"url":"injectables/SuccessResponseInterceptor.html","title":"injectable - SuccessResponseInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SuccessResponseInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/interceptors/response.interceptor.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/interceptors/response.interceptor.ts:16\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                next\n                                            \n                                                        CallHandler\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { STRIPE_WEBHOOK_CONTEXT_TYPE } from '@golevelup/nestjs-stripe';\nimport {\n  CallHandler,\n  ExecutionContext,\n  Inject,\n  Injectable,\n  Logger,\n  LoggerService,\n  NestInterceptor,\n} from '@nestjs/common';\nimport { Observable } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\n\n@Injectable()\nexport class SuccessResponseInterceptor implements NestInterceptor {\n  intercept(context: ExecutionContext, next: CallHandler): Observable {\n    const contextType = context.getType();\n    if (contextType === STRIPE_WEBHOOK_CONTEXT_TYPE) {\n      return next.handle();\n    }\n\n    return next.handle().pipe(\n      map((response) => {\n        const httpResponse = context.switchToHttp().getResponse();\n\n        const statusCode =\n          response?.statusCode && Number.isInteger(response.statusCode)\n            ? response.statusCode\n            : httpResponse.statusCode;\n\n        const message =\n          response?.message && typeof response.message === 'string'\n            ? response.message\n            : 'Operation successful';\n\n        const responseData =\n          response?.data !== undefined ? response?.data : response?.message;\n\n        return {\n          statusCode,\n          success: true,\n          message,\n          data: responseData,\n        };\n      }),\n    );\n  }\n}\n\n@Injectable()\nexport class RequestBodyAndResponseInterceptor implements NestInterceptor {\n  constructor(@Inject(Logger) private readonly loggerService: LoggerService) {}\n\n  intercept(context: ExecutionContext, next: CallHandler): Observable {\n    const request = context.switchToHttp().getRequest();\n    const method = request.method;\n    const url = request.url;\n\n    return next.handle().pipe(\n      tap((response) => {\n        this.loggerService.log(`[${method}] ${url} - Response:`, response);\n      }),\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateProfileDto.html":{"url":"classes/UpdateProfileDto.html","title":"class - UpdateProfileDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateProfileDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/dto/update-profile.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(\n  OmitType(CreateUserDto, [\n    'role',\n    'email',\n    'password',\n    'phoneNumber',\n    'countryCode',\n  ] as const),\n)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { OmitType, PartialType } from '@nestjs/swagger';\nimport { CreateUserDto } from './create-user.dto';\n\nexport class UpdateProfileDto extends PartialType(\n  OmitType(CreateUserDto, [\n    'role',\n    'email',\n    'password',\n    'phoneNumber',\n    'countryCode',\n  ] as const),\n) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/User.html":{"url":"entities/User.html","title":"entity - User","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/entities/user.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Optional\n                                address\n                            \n                            \n                                    \n                                    Optional\n                                avatar\n                            \n                            \n                                    \n                                changePassword\n                            \n                            \n                                    \n                                    Optional\n                                city\n                            \n                            \n                                    \n                                    Optional\n                                country\n                            \n                            \n                                    \n                                    Optional\n                                countryCode\n                            \n                            \n                                    \n                                email\n                            \n                            \n                                    \n                                firstName\n                            \n                            \n                                    \n                                    Optional\n                                lastLoggedIn\n                            \n                            \n                                    \n                                lastName\n                            \n                            \n                                    \n                                password\n                            \n                            \n                                    \n                                passwordResetRequested\n                            \n                            \n                                    \n                                    Optional\n                                phoneNumber\n                            \n                            \n                                    \n                                    Optional\n                                postalCode\n                            \n                            \n                                    \n                                role\n                            \n                            \n                                    \n                                    Optional\n                                state\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Property({type: 'text', nullable: true, comment: 'Street address'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/entities/user.entity.ts:51\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        avatar\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Property({type: 'varchar', length: 500, nullable: true, comment: 'Avatar URL or path'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/entities/user.entity.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        changePassword\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Property({type: 'boolean', default: false, comment: 'Whether user needs to change password'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/entities/user.entity.ts:122\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        city\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Property({type: 'varchar', length: 100, nullable: true, comment: 'City name'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/entities/user.entity.ts:59\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        country\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Property({type: 'varchar', length: 100, nullable: true, comment: 'Country name'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/entities/user.entity.ts:83\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        countryCode\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Property({type: 'varchar', length: 3, nullable: true, comment: 'ISO country code'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/entities/user.entity.ts:91\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Property({unique: true, type: 'varchar', length: 255, comment: 'User email address'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/entities/user.entity.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Property({type: 'varchar', length: 100, comment: 'User first name'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/entities/user.entity.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        lastLoggedIn\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Property({type: 'timestamptz', nullable: true, comment: 'Last login timestamp'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/entities/user.entity.ts:136\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Property({type: 'varchar', length: 100, comment: 'User last name'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/entities/user.entity.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Property({type: 'varchar', length: 255, comment: 'Hashed password'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/entities/user.entity.ts:106\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        passwordResetRequested\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Property({type: 'boolean', default: false, comment: 'Whether password reset was requested'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/entities/user.entity.ts:129\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        phoneNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Property({type: 'varchar', length: 20, nullable: true, comment: 'Phone number'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/entities/user.entity.ts:99\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        postalCode\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Property({type: 'varchar', length: 20, nullable: true, comment: 'Postal/ZIP code'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/entities/user.entity.ts:67\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserRoleEnum\n\n                    \n                \n                \n                    \n                        Default value : UserRoleEnum.USER\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Enum({items: () => UserRoleEnum, type: 'varchar', length: 20, default: undefined, comment: 'User role'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/entities/user.entity.ts:115\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        state\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Property({type: 'varchar', length: 100, nullable: true, comment: 'State/Province'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/entities/user.entity.ts:75\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  Property,\n  Enum,\n  BeforeCreate,\n  BeforeUpdate,\n  Index,\n} from '@mikro-orm/core';\nimport { BaseEntity } from '@common/entities/base.entity';\nimport { UserRoleEnum } from '@common/enums';\nimport { normalizeUserFields } from '@common/utils/user.util';\n\n@Entity({ tableName: 'users' })\n@Index({ properties: ['email'] })\nexport class User extends BaseEntity {\n  @Property({\n    unique: true,\n    type: 'varchar',\n    length: 255,\n    comment: 'User email address',\n  })\n  email!: string;\n\n  @Property({\n    type: 'varchar',\n    length: 500,\n    nullable: true,\n    comment: 'Avatar URL or path',\n  })\n  avatar?: string;\n\n  @Property({\n    type: 'varchar',\n    length: 100,\n    comment: 'User first name',\n  })\n  firstName!: string;\n\n  @Property({\n    type: 'varchar',\n    length: 100,\n    comment: 'User last name',\n  })\n  lastName!: string;\n\n  @Property({\n    type: 'text',\n    nullable: true,\n    comment: 'Street address',\n  })\n  address?: string;\n\n  @Property({\n    type: 'varchar',\n    length: 100,\n    nullable: true,\n    comment: 'City name',\n  })\n  city?: string;\n\n  @Property({\n    type: 'varchar',\n    length: 20,\n    nullable: true,\n    comment: 'Postal/ZIP code',\n  })\n  postalCode?: string;\n\n  @Property({\n    type: 'varchar',\n    length: 100,\n    nullable: true,\n    comment: 'State/Province',\n  })\n  state?: string;\n\n  @Property({\n    type: 'varchar',\n    length: 100,\n    nullable: true,\n    comment: 'Country name',\n  })\n  country?: string;\n\n  @Property({\n    type: 'varchar',\n    length: 3,\n    nullable: true,\n    comment: 'ISO country code',\n  })\n  countryCode?: string;\n\n  @Property({\n    type: 'varchar',\n    length: 20,\n    nullable: true,\n    comment: 'Phone number',\n  })\n  phoneNumber?: string;\n\n  @Property({\n    type: 'varchar',\n    length: 255,\n    comment: 'Hashed password',\n  })\n  password!: string;\n\n  @Enum({\n    items: () => UserRoleEnum,\n    type: 'varchar',\n    length: 20,\n    default: UserRoleEnum.USER,\n    comment: 'User role',\n  })\n  role: UserRoleEnum = UserRoleEnum.USER;\n\n  @Property({\n    type: 'boolean',\n    default: false,\n    comment: 'Whether user needs to change password',\n  })\n  changePassword: boolean = false;\n\n  @Property({\n    type: 'boolean',\n    default: false,\n    comment: 'Whether password reset was requested',\n  })\n  passwordResetRequested: boolean = false;\n\n  @Property({\n    type: 'timestamptz',\n    nullable: true,\n    comment: 'Last login timestamp',\n  })\n  lastLoggedIn?: Date;\n\n  @BeforeCreate()\n  @BeforeUpdate()\n  private normalizeFields() {\n    normalizeUserFields(this);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                changePassword\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                create\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                getProfile\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                updateProfile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        changePassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    changePassword(data: ChangePasswordDto, req: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('change-password')@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Change user password'})@ApiBody({type: ChangePasswordDto})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/users/users.controller.ts:72\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                            ChangePasswordDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                req\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(user: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Post('sign-up')@ApiOperation({summary: 'Sign up a new user'})@ApiBody({type: CreateUserDto})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/users/users.controller.ts:28\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        getProfile\n                        \n                    \n                \n            \n            \n                \n                        \n                    getProfile(req: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('profile')@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Get user profile'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/users/users.controller.ts:40\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        updateProfile\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateProfile(req: any, body: UpdateProfileDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch('update-profile')@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Update user profile'})@ApiBody({type: UpdateProfileDto})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/users/users.controller.ts:55\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                body\n                                            \n                                                            UpdateProfileDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Get,\n  HttpCode,\n  HttpStatus,\n  Patch,\n  Post,\n  Request,\n} from '@nestjs/common';\nimport { ApiTags, ApiOperation, ApiBody } from '@nestjs/swagger';\nimport { UsersService } from './users.service';\nimport { Public } from '../auth/decorators/public.decorator';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport { ApiResponse } from '@common/interfaces/api-response.interface';\nimport { ChangePasswordDto } from './dto/change-password.dto';\nimport { UpdateProfileDto } from './dto/update-profile.dto';\n\n@ApiTags('users')\n@Controller('users')\nexport class UsersController {\n  constructor(private readonly usersService: UsersService) {}\n\n  @Public()\n  @Post('sign-up')\n  @ApiOperation({ summary: 'Sign up a new user' })\n  @ApiBody({ type: CreateUserDto })\n  async create(@Body() user: CreateUserDto): Promise> {\n    const newUser = await this.usersService.create(user);\n    return {\n      statusCode: HttpStatus.CREATED,\n      message: 'User created successfully',\n      data: newUser,\n    };\n  }\n\n  @Get('profile')\n  @HttpCode(HttpStatus.OK)\n  @ApiOperation({ summary: 'Get user profile' })\n  async getProfile(@Request() req: any): Promise> {\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const { password, ...safeUser } = req.user;\n\n    return {\n      statusCode: HttpStatus.OK,\n      message: 'Profile fetched successfully',\n      data: { user: safeUser },\n    };\n  }\n\n  @Patch('update-profile')\n  @HttpCode(HttpStatus.OK)\n  @ApiOperation({ summary: 'Update user profile' })\n  @ApiBody({ type: UpdateProfileDto })\n  async updateProfile(\n    @Request() req: any,\n    @Body() body: UpdateProfileDto,\n  ): Promise> {\n    const userId = req?.user?.id;\n    const updatedUser = await this.usersService.update({ id: userId, ...body });\n    return {\n      statusCode: HttpStatus.OK,\n      message: 'Profile updated successfully',\n      data: updatedUser,\n    };\n  }\n\n  @Post('change-password')\n  @HttpCode(HttpStatus.OK)\n  @ApiOperation({ summary: 'Change user password' })\n  @ApiBody({ type: ChangePasswordDto })\n  async changePassword(\n    @Body() data: ChangePasswordDto,\n    @Request() req: any,\n  ): Promise> {\n    const userId = req.user.id;\n    await this.usersService.changePassword(userId, data);\n    return {\n      statusCode: HttpStatus.OK,\n      message: 'Password Changed Successfully',\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_imports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nAppRedisModule\n\nAppRedisModule\n\n\n\nUsersModule\n\nUsersModule\n\nUsersModule -->\n\nAppRedisModule->UsersModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\nUsersSubscriber\n\nUsersSubscriber\n\nUsersModule -->\n\nUsersSubscriber->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UsersService\n                        \n                        \n                            UsersSubscriber\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AppRedisModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UsersService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { UsersService } from './users.service';\nimport { UsersController } from './users.controller';\nimport { MikroOrmModule } from '@mikro-orm/nestjs';\nimport { User } from './entities/user.entity';\nimport { UsersSubscriber } from './subscribers/user.subscriber';\nimport { AppRedisModule } from '@services/redis/redis.module';\n\n@Module({\n  imports: [MikroOrmModule.forFeature([User]), AppRedisModule],\n  controllers: [UsersController],\n  providers: [UsersService, UsersSubscriber],\n  exports: [UsersService],\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/users.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                userEmailCacheKey\n                            \n                            \n                                    Private\n                                    Readonly\n                                userIdCacheKey\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                changePassword\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(appRedisService: AppRedisService, userRepository: EntityRepository)\n                    \n                \n                        \n                            \n                                Defined in src/modules/users/users.service.ts:21\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        appRedisService\n                                                  \n                                                        \n                                                                        AppRedisService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        EntityRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        changePassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    changePassword(userId: string, data: ChangePasswordDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/users/users.service.ts:127\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                data\n                                            \n                                                            ChangePasswordDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(userData: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/users/users.service.ts:32\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userData\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(query: FilterQuery, options?: FindOneOrFailOptions)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/users/users.service.ts:49\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                query\n                                            \n                                                            FilterQuery\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                options\n                                            \n                                                            FindOneOrFailOptions\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(data: EntityData)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/users/users.service.ts:97\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                            EntityData\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        userEmailCacheKey\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/users/users.service.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        userIdCacheKey\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/users/users.service.ts:20\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  ConflictException,\n  Injectable,\n  NotFoundException,\n} from '@nestjs/common';\nimport { InjectRepository } from '@mikro-orm/nestjs';\nimport {\n  EntityData,\n  EntityRepository,\n  FilterQuery,\n  FindOneOrFailOptions,\n} from '@mikro-orm/core';\nimport { User } from './entities/user.entity';\nimport { ChangePasswordDto } from './dto/change-password.dto';\nimport { AppRedisService } from '@services/redis/redis.service';\n\n@Injectable()\nexport class UsersService {\n  private readonly userIdCacheKey: string;\n  private readonly userEmailCacheKey: string;\n\n  constructor(\n    private readonly appRedisService: AppRedisService,\n    @InjectRepository(User)\n    private readonly userRepository: EntityRepository,\n  ) {\n    this.userIdCacheKey = `users:id`;\n    this.userEmailCacheKey = `users:email`;\n  }\n\n  async create(userData: any): Promise> {\n    const user = await this.userRepository.findOne({\n      email: userData.email,\n    });\n\n    if (user) {\n      throw new ConflictException('User already exists in the system.');\n    }\n\n    const newUser = this.userRepository.create(userData);\n    await this.userRepository.getEntityManager().persistAndFlush(newUser);\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const { password, ...result } = newUser;\n    return result;\n  }\n\n  async findOne(\n    query: FilterQuery,\n    options?: FindOneOrFailOptions,\n  ): Promise {\n    let cacheKey: string | undefined;\n\n    if (typeof query === 'string') {\n      cacheKey = `${this.userIdCacheKey}:${query}`;\n    } else if (typeof query === 'object' && query !== null) {\n      if ('id' in query && query?.id) {\n        cacheKey = `${this.userIdCacheKey}:${query?.id}`;\n      } else if ('email' in query && query?.email) {\n        cacheKey = `${this.userEmailCacheKey}:${query?.email}`;\n      }\n    }\n\n    if (cacheKey) {\n      const cached = await this.appRedisService.get(cacheKey);\n\n      if (cached) {\n        const parsed = JSON.parse(cached);\n        const user = this.userRepository.create(parsed);\n        return this.userRepository.getEntityManager().merge(user);\n      }\n    }\n\n    const user = await this.userRepository.findOneOrFail(query, options);\n\n    if (cacheKey) {\n      const serializable = { ...user };\n\n      await Promise.all([\n        this.appRedisService.set(\n          `${this.userIdCacheKey}:${user?.id}`,\n          JSON.stringify(serializable),\n          5 * 60,\n        ),\n        this.appRedisService.set(\n          `${this.userEmailCacheKey}:${user?.email}`,\n          JSON.stringify(serializable),\n          5 * 60,\n        ),\n      ]);\n    }\n\n    return user;\n  }\n\n  async update(data: EntityData): Promise> {\n    const user = await this.userRepository.findOneOrFail(\n      { id: data.id },\n      { failHandler: () => new NotFoundException('User not found') },\n    );\n\n    this.userRepository.assign(user, data);\n\n    await this.userRepository.getEntityManager().persistAndFlush(user);\n\n    if (user) {\n      await Promise.all([\n        this.appRedisService.set(\n          `${this.userIdCacheKey}:${user?.id}`,\n          JSON.stringify(user),\n          5 * 60,\n        ),\n        this.appRedisService.set(\n          `${this.userEmailCacheKey}:${user?.email}`,\n          JSON.stringify(user),\n          5 * 60,\n        ),\n      ]);\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const { password, ...result } = user;\n    return result;\n  }\n\n  async changePassword(\n    userId: string,\n    data: ChangePasswordDto,\n  ): Promise> {\n    const { newPassword, confirmPassword } = data;\n\n    if (newPassword !== confirmPassword) {\n      throw new BadRequestException('Passwords do not match');\n    }\n\n    const updatedUser = await this.update({\n      id: userId,\n      password: newPassword,\n      changePassword: false,\n    });\n\n    return updatedUser;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersSubscriber.html":{"url":"injectables/UsersSubscriber.html","title":"injectable - UsersSubscriber","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersSubscriber\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/subscribers/user.subscriber.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                beforeCreate\n                            \n                            \n                                    Async\n                                beforeUpdate\n                            \n                            \n                                getSubscribedEntities\n                            \n                            \n                                    Private\n                                    Async\n                                hashPassword\n                            \n                            \n                                    Private\n                                isPasswordModified\n                            \n                            \n                                    Private\n                                normalizeFields\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(em: EntityManager, configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/users/subscribers/user.subscriber.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        em\n                                                  \n                                                        \n                                                                    EntityManager\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        beforeCreate\n                        \n                    \n                \n            \n            \n                \n                        \n                    beforeCreate(args: EventArgs)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/users/subscribers/user.subscriber.ts:26\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                args\n                                            \n                                                            EventArgs\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        beforeUpdate\n                        \n                    \n                \n            \n            \n                \n                        \n                    beforeUpdate(args: EventArgs)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/users/subscribers/user.subscriber.ts:34\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                args\n                                            \n                                                            EventArgs\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getSubscribedEntities\n                        \n                    \n                \n            \n            \n                \ngetSubscribedEntities()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/users/subscribers/user.subscriber.ts:22\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     EntityName[]\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        hashPassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    hashPassword(user: User)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/users/subscribers/user.subscriber.ts:56\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            User\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        isPasswordModified\n                        \n                    \n                \n            \n            \n                \n                        \n                    isPasswordModified(user: User)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/users/subscribers/user.subscriber.ts:48\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            User\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        normalizeFields\n                        \n                    \n                \n            \n            \n                \n                        \n                    normalizeFields(user: User)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/users/subscribers/user.subscriber.ts:44\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            User\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  EventSubscriber,\n  EntityName,\n  EventArgs,\n  EntityManager,\n} from '@mikro-orm/core';\nimport { Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { User } from '../entities/user.entity';\nimport * as bcrypt from 'bcrypt';\nimport { normalizeUserFields } from '@common/utils/user.util';\n\n@Injectable()\nexport class UsersSubscriber implements EventSubscriber {\n  constructor(\n    em: EntityManager,\n    private readonly configService: ConfigService,\n  ) {\n    em.getEventManager().registerSubscriber(this);\n  }\n\n  getSubscribedEntities(): EntityName[] {\n    return [User];\n  }\n\n  async beforeCreate(args: EventArgs) {\n    const user = args.entity;\n\n    this.normalizeFields(user);\n\n    await this.hashPassword(user);\n  }\n\n  async beforeUpdate(args: EventArgs) {\n    const user = args.entity;\n\n    this.normalizeFields(user);\n\n    if (this.isPasswordModified(user)) {\n      await this.hashPassword(user);\n    }\n  }\n\n  private normalizeFields(user: User) {\n    normalizeUserFields(user);\n  }\n\n  private isPasswordModified(user: User): boolean {\n    const originalData = (user as any).__helper?.__originalEntityData;\n\n    if (!originalData) return true;\n\n    return user.password !== originalData.password;\n  }\n\n  private async hashPassword(user: User) {\n    const saltRounds = this.configService.get('auth.saltRounds');\n    user.password = await bcrypt.hash(user.password, saltRounds);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/commands/create-user.command.ts\n            \n            injectable\n            CreateUserCommand\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                        src/common/constants/index.ts\n            \n            variable\n            APP_NAME\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/common/constants/index.ts\n            \n            variable\n            EMAIL_FROM_NAME\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/common/constants/index.ts\n            \n            variable\n            PASSWORD_CHARACTER_SET\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/common/constants/index.ts\n            \n            variable\n            PASSWORD_RESET_EMAIL_QUEUE_NAME\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/common/constants/index.ts\n            \n            variable\n            PAYMENT_PROVIDER\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/common/constants/index.ts\n            \n            variable\n            PRODUCTION\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/common/constants/index.ts\n            \n            variable\n            STORAGE_PROVIDER\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/common/constants/index.ts\n            \n            variable\n            TEMPLATE_QUEUE_NAME\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/common/decorators/index.ts\n            \n            variable\n            Role\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/entities/base.entity.ts\n            \n            class\n            BaseEntity\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/common/filters/exception.filter.ts\n            \n            class\n            CatchEverythingFilter\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/common/guards/role.guard.ts\n            \n            guard\n            RoleGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/common/interceptors/response.interceptor.ts\n            \n            injectable\n            RequestBodyAndResponseInterceptor\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/common/interceptors/response.interceptor.ts\n            \n            injectable\n            SuccessResponseInterceptor\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/common/interfaces/api-response.interface.ts\n            \n            interface\n            ApiResponse\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/common/interfaces/error-response.interface.ts\n            \n            interface\n            ErrorResponse\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/common/middlewares/morgan.middleware.ts\n            \n            injectable\n            MorganMiddleware\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/common/middlewares/request-context.middleware.ts\n            \n            injectable\n            RequestContextMiddleware\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                        src/common/types/index.ts\n            \n            type alias\n            HandledException\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/common/utils/common.utils.ts\n            \n            function\n            generateSlug\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/common/utils/time.util.ts\n            \n            function\n            parseTimeString\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/common/utils/user.util.ts\n            \n            function\n            normalizeUserFields\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/config/mikro-orm.config.ts\n            \n            variable\n            PRODUCTION\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/config/swagger.config.ts\n            \n            function\n            setupSwagger\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/main.cli.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/migrations/Migration20250730220636.ts\n            \n            class\n            Migration20250730220636\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/modules/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/modules/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/13)\n            \n        \n        \n            \n                \n                src/modules/auth/consumers/auth.consumer.ts\n            \n            class\n            PasswordResetEmailConsumer\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                        src/modules/auth/decorators/public.decorator.ts\n            \n            variable\n            IS_PUBLIC_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/modules/auth/decorators/public.decorator.ts\n            \n            variable\n            Public\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/auth/dto/auth-response.dto.ts\n            \n            class\n            AuthResponseDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/auth/dto/forgot-password.dto.ts\n            \n            class\n            ForgotPasswordDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/modules/auth/dto/login.dto.ts\n            \n            class\n            LoginDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/auth/dto/refresh-token-dto.ts\n            \n            class\n            RefreshTokenDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/modules/auth/dto/reset-password.dto.ts\n            \n            class\n            ResetPasswordDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/modules/auth/guards/jwt-auth.guard.ts\n            \n            injectable\n            JwtAuthGuard\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/modules/auth/guards/local-auth.guard.ts\n            \n            injectable\n            LocalAuthGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/auth/strategies/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                src/modules/auth/strategies/local.strategy.ts\n            \n            injectable\n            LocalStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                        src/modules/auth/types/auth-tokens.ts\n            \n            type alias\n            AuthTokens\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/users/dto/change-password.dto.ts\n            \n            class\n            ChangePasswordDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/users/dto/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/14)\n            \n        \n        \n            \n                \n                src/modules/users/dto/responses.dto.ts\n            \n            class\n            CreateUserResponseDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/users/dto/responses.dto.ts\n            \n            class\n            GetProfileResponseDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/users/dto/update-profile.dto.ts\n            \n            class\n            UpdateProfileDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/users/entities/user.entity.ts\n            \n            entity\n            User\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/users/entities/user.entity.ts\n            \n            class\n            User\n            \n                0 %\n                (0/18)\n            \n        \n        \n            \n                \n                src/modules/users/subscribers/user.subscriber.ts\n            \n            injectable\n            UsersSubscriber\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/modules/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/modules/users/users.service.ts\n            \n            injectable\n            UsersService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/schema.service.ts\n            \n            injectable\n            SchemaService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/services/email/email.service.ts\n            \n            class\n            EmailService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/services/http-client/http-client.service.ts\n            \n            injectable\n            HttpClientService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/services/payment/interfaces/payment.interface.ts\n            \n            interface\n            IPaymentService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/services/payment/stripe.service.ts\n            \n            injectable\n            StripeService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                        src/services/payment/types/checkout.ts\n            \n            type alias\n            Checkout\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/services/payment/types/payment-intent.ts\n            \n            type alias\n            PaymentIntent\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/services/redis/redis.service.ts\n            \n            injectable\n            AppRedisService\n            \n                30 %\n                (3/10)\n            \n        \n        \n            \n                \n                src/services/storage/cloudinary.service.ts\n            \n            injectable\n            CloudinaryService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/services/storage/interfaces/storage.interface.ts\n            \n            interface\n            IStrorageService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/services/storage/s3.service.ts\n            \n            injectable\n            S3Service\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                        src/services/storage/types/s3-put-object-response.ts\n            \n            type alias\n            S3PutObjectResponse\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/tracing.ts\n            \n            variable\n            otelSDK\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/tracing.ts\n            \n            variable\n            prometheusExporter\n            \n                0 %\n                (0/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @aws-sdk/credential-providers : ^3.848.0\n        \n            @aws-sdk/s3-request-presigner : ^3.850.0\n        \n            @aws-sdk/util-format-url : ^3.840.0\n        \n            @bull-board/api : ^6.12.0\n        \n            @bull-board/express : ^6.12.0\n        \n            @bull-board/nestjs : ^6.12.0\n        \n            @compodoc/compodoc : ^1.1.26\n        \n            @golevelup/nestjs-stripe : ^0.9.3\n        \n            @golevelup/nestjs-webhooks : ^0.2.21\n        \n            @liaoliaots/nestjs-redis : ^10.0.0\n        \n            @mikro-orm/cli : ^6.4.16\n        \n            @mikro-orm/core : ^6.4.16\n        \n            @mikro-orm/migrations : ^6.4.16\n        \n            @mikro-orm/nestjs : ^6.1.1\n        \n            @mikro-orm/postgresql : ^6.4.16\n        \n            @nestjs-modules/mailer : ^2.0.2\n        \n            @nestjs/axios : ^4.0.0\n        \n            @nestjs/bullmq : ^11.0.3\n        \n            @nestjs/common : ^10.0.0\n        \n            @nestjs/config : ^3.2.2\n        \n            @nestjs/core : ^10.0.0\n        \n            @nestjs/jwt : ^10.2.0\n        \n            @nestjs/mapped-types : *\n        \n            @nestjs/passport : ^10.0.3\n        \n            @nestjs/platform-express : ^10.0.0\n        \n            @nestjs/swagger : ^7.3.1\n        \n            @opentelemetry/auto-instrumentations-node : ^0.62.0\n        \n            @opentelemetry/context-async-hooks : ^2.0.1\n        \n            @opentelemetry/core : ^2.0.1\n        \n            @opentelemetry/exporter-prometheus : ^0.203.0\n        \n            @opentelemetry/propagator-b3 : ^2.0.1\n        \n            @opentelemetry/propagator-jaeger : ^2.0.1\n        \n            @opentelemetry/sdk-node : ^0.203.0\n        \n            @smithy/hash-node : ^4.0.4\n        \n            @smithy/protocol-http : ^5.1.2\n        \n            @types/bcrypt : ^5.0.2\n        \n            @types/chalk : ^2.2.4\n        \n            @types/morgan : ^1.9.10\n        \n            @types/ms : ^2.1.0\n        \n            axios : ^1.10.0\n        \n            bcrypt : ^5.1.1\n        \n            buffer-to-stream : ^1.0.0\n        \n            bullmq : ^5.56.8\n        \n            chalk : ^4.1.2\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.1\n        \n            cloudinary : ^2.7.0\n        \n            express-basic-auth : ^1.2.1\n        \n            helmet : ^8.1.0\n        \n            moment-timezone : ^0.6.0\n        \n            morgan : ^1.10.0\n        \n            ms : ^2.1.3\n        \n            nanoid : ^3.0.0\n        \n            nanoid-dictionary : ^5.0.0\n        \n            nest-commander : ^3.18.0\n        \n            nest-winston : ^1.10.2\n        \n            nestjs-form-data : ^1.9.93\n        \n            nestjs-s3 : ^3.0.1\n        \n            nodemailer : ^7.0.5\n        \n            passport : ^0.7.0\n        \n            passport-jwt : ^4.0.1\n        \n            passport-local : ^1.0.0\n        \n            pug : ^3.0.3\n        \n            reflect-metadata : ^0.1.13\n        \n            rxjs : ^7.8.1\n        \n            stripe : ^18.3.0\n        \n            util : ^0.12.5\n        \n            uuid : ^11.1.0\n        \n            winston : ^3.17.0\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            EmailSubjectEnum   (src/.../index.ts)\n                        \n                        \n                            EmailTemplateEnum   (src/.../index.ts)\n                        \n                        \n                            HttpRequestMethodEnum   (src/.../index.ts)\n                        \n                        \n                            IANATimeZoneDatabaseEnum   (src/.../index.ts)\n                        \n                        \n                            PaymentDriverEnum   (src/.../index.ts)\n                        \n                        \n                            StorageDriverEnum   (src/.../index.ts)\n                        \n                        \n                            StripeCurrencyEnum   (src/.../index.ts)\n                        \n                        \n                            UploadFileCategoryEnum   (src/.../index.ts)\n                        \n                        \n                            UserRoleEnum   (src/.../index.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/common/enums/index.ts\n    \n        \n            \n                \n                    \n                        \n                        EmailSubjectEnum\n                    \n                \n                        \n                            \n                                 PASSWORD_RESET\n                            \n                        \n                        \n                            \n                                Value : 🔐 Reset Your Password Quickly & Securely\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        EmailTemplateEnum\n                    \n                \n                        \n                            \n                                 PASSWORD_RESET\n                            \n                        \n                        \n                            \n                                Value : password-reset\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        HttpRequestMethodEnum\n                    \n                \n                        \n                            \n                                 GET\n                            \n                        \n                        \n                            \n                                Value : GET\n                            \n                        \n                        \n                            \n                                 POST\n                            \n                        \n                        \n                            \n                                Value : POST\n                            \n                        \n                        \n                            \n                                 PUT\n                            \n                        \n                        \n                            \n                                Value : PUT\n                            \n                        \n                        \n                            \n                                 DELETE\n                            \n                        \n                        \n                            \n                                Value : DELETE\n                            \n                        \n                        \n                            \n                                 PATCH\n                            \n                        \n                        \n                            \n                                Value : PATCH\n                            \n                        \n                        \n                            \n                                 HEAD\n                            \n                        \n                        \n                            \n                                Value : HEAD\n                            \n                        \n                        \n                            \n                                 OPTIONS\n                            \n                        \n                        \n                            \n                                Value : OPTIONS\n                            \n                        \n                        \n                            \n                                 TRACE\n                            \n                        \n                        \n                            \n                                Value : TRACE\n                            \n                        \n                        \n                            \n                                 CONNECT\n                            \n                        \n                        \n                            \n                                Value : CONNECT\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        IANATimeZoneDatabaseEnum\n                    \n                \n                        \n                            \n                                 LAGOS\n                            \n                        \n                        \n                            \n                                Value : Africa/lagos\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        PaymentDriverEnum\n                    \n                \n                        \n                            \n                                 STRIPE\n                            \n                        \n                        \n                            \n                                Value : stripe\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        StorageDriverEnum\n                    \n                \n                        \n                            \n                                 CLOUDINARY\n                            \n                        \n                        \n                            \n                                Value : cloudinary\n                            \n                        \n                        \n                            \n                                 S3\n                            \n                        \n                        \n                            \n                                Value : s3\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        StripeCurrencyEnum\n                    \n                \n                        \n                            \n                                 USD\n                            \n                        \n                        \n                            \n                                Value : usd\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        UploadFileCategoryEnum\n                    \n                \n                        \n                            \n                                 AVATAR\n                            \n                        \n                        \n                            \n                                Value : avatars\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        UserRoleEnum\n                    \n                \n                        \n                            \n                                 ADMIN\n                            \n                        \n                        \n                            \n                                Value : admin\n                            \n                        \n                        \n                            \n                                 USER\n                            \n                        \n                        \n                            \n                                Value : user\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.cli.ts)\n                        \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            generateSlug   (src/.../common.utils.ts)\n                        \n                        \n                            normalizeUserFields   (src/.../user.util.ts)\n                        \n                        \n                            parseTimeString   (src/.../time.util.ts)\n                        \n                        \n                            setupSwagger   (src/.../swagger.config.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.cli.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n    src/common/utils/common.utils.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        generateSlug\n                        \n                    \n                \n            \n            \n                \ngenerateSlug(text: string, limit: number)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                text\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    src/common/utils/user.util.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        normalizeUserFields\n                        \n                    \n                \n            \n            \n                \nnormalizeUserFields(user: User)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            User\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    src/common/utils/time.util.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        parseTimeString\n                        \n                    \n                \n            \n            \n                \nparseTimeString(timeString: string)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                timeString\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     literal type\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    src/config/swagger.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        setupSwagger\n                        \n                    \n                \n            \n            \n                \nsetupSwagger(app: INestApplication)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                app\n                                            \n                                                        INestApplication\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nDocumentation\nDescription\n\nNest framework TypeScript starter repository.\nProject setup\nExample :$ yarn installCompile and run the project\nExample :# development\n$ yarn run start\n\n# watch mode\n$ yarn run start:dev\n\n# production mode\n$ yarn run start:prodRun tests\nExample :# unit tests\n$ yarn run test\n\n# e2e tests\n$ yarn run test:e2e\n\n# test coverage\n$ yarn run test:cov\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AppRedisModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        EmailModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        HttpClientModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PaymentModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        StorageModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AppRedisModule\n\n\n\ncluster_AppRedisModule_exports\n\n\n\ncluster_AppRedisModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_EmailModule\n\n\n\ncluster_EmailModule_exports\n\n\n\ncluster_HttpClientModule\n\n\n\ncluster_HttpClientModule_exports\n\n\n\ncluster_HttpClientModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAuthModule -->\n\nUsersModule->AuthModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nCreateUserCommand\n\nCreateUserCommand\n\nAppModule -->\n\nCreateUserCommand->AppModule\n\n\n\n\n\nSchemaService\n\nSchemaService\n\nAppModule -->\n\nSchemaService->AppModule\n\n\n\n\n\nAppRedisService \n\nAppRedisService \n\n\n\nAppRedisModule\n\nAppRedisModule\n\nAuthModule -->\n\nAppRedisModule->AuthModule\n\n\n\nUsersModule -->\n\nAppRedisModule->UsersModule\n\n\n\nAppRedisService  -->\n\nAppRedisModule->AppRedisService \n\n\n\n\n\nAppRedisService\n\nAppRedisService\n\nAppRedisModule -->\n\nAppRedisService->AppRedisModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthModule -->\n\nLocalStrategy->AuthModule\n\n\n\n\n\nEmailService \n\nEmailService \n\n\n\nEmailModule\n\nEmailModule\n\nEmailService  -->\n\nEmailModule->EmailService \n\n\n\n\n\nHttpClientService \n\nHttpClientService \n\n\n\nHttpClientModule\n\nHttpClientModule\n\nHttpClientService  -->\n\nHttpClientModule->HttpClientService \n\n\n\n\n\nHttpClientService\n\nHttpClientService\n\nHttpClientModule -->\n\nHttpClientService->HttpClientModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\nUsersSubscriber\n\nUsersSubscriber\n\nUsersModule -->\n\nUsersSubscriber->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        8 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    3 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    1 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    19 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    16 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Guard\n                \n            \n        \n        \n            \n                \n                    \n                    4 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            AuthTokens   (src/.../auth-tokens.ts)\n                        \n                        \n                            Checkout   (src/.../checkout.ts)\n                        \n                        \n                            HandledException   (src/.../index.ts)\n                        \n                        \n                            PaymentIntent   (src/.../payment-intent.ts)\n                        \n                        \n                            S3PutObjectResponse   (src/.../s3-put-object-response.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/modules/auth/types/auth-tokens.ts\n    \n    \n        \n            \n                \n                    \n                    AuthTokens\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    src/services/payment/types/checkout.ts\n    \n    \n        \n            \n                \n                    \n                    Checkout\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    src/common/types/index.ts\n    \n    \n        \n            \n                \n                    \n                    HandledException\n                \n            \n            \n                \n                        HttpException | AxiosError | ForbiddenException | Error\n\n                \n            \n        \n    \n    src/services/payment/types/payment-intent.ts\n    \n    \n        \n            \n                \n                    \n                    PaymentIntent\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    src/services/storage/types/s3-put-object-response.ts\n    \n    \n        \n            \n                \n                    \n                    S3PutObjectResponse\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            APP_NAME   (src/.../index.ts)\n                        \n                        \n                            EMAIL_FROM_NAME   (src/.../index.ts)\n                        \n                        \n                            IS_PUBLIC_KEY   (src/.../public.decorator.ts)\n                        \n                        \n                            otelSDK   (src/.../tracing.ts)\n                        \n                        \n                            PASSWORD_CHARACTER_SET   (src/.../index.ts)\n                        \n                        \n                            PASSWORD_RESET_EMAIL_QUEUE_NAME   (src/.../index.ts)\n                        \n                        \n                            PAYMENT_PROVIDER   (src/.../index.ts)\n                        \n                        \n                            PRODUCTION   (src/.../mikro-orm.config.ts)\n                        \n                        \n                            PRODUCTION   (src/.../index.ts)\n                        \n                        \n                            prometheusExporter   (src/.../tracing.ts)\n                        \n                        \n                            Public   (src/.../public.decorator.ts)\n                        \n                        \n                            Role   (src/.../index.ts)\n                        \n                        \n                            STORAGE_PROVIDER   (src/.../index.ts)\n                        \n                        \n                            TEMPLATE_QUEUE_NAME   (src/.../index.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/common/constants/index.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        APP_NAME\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'nestjs-boilerplate'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        EMAIL_FROM_NAME\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'nestjs'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        PASSWORD_CHARACTER_SET\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!@#$%^&*()_+-=[]{}|;:,.<>?'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        PASSWORD_RESET_EMAIL_QUEUE_NAME\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'password-reset-email-queue'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        PAYMENT_PROVIDER\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'PAYMENT_PROVIDER'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        PRODUCTION\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'production'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        STORAGE_PROVIDER\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'STORAGE_PROVIDER'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        TEMPLATE_QUEUE_NAME\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'template-queue-name'\n                    \n                \n\n\n        \n    \n\n    src/modules/auth/decorators/public.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        IS_PUBLIC_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'isPublic'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => SetMetadata(IS_PUBLIC_KEY, true)\n                    \n                \n\n\n        \n    \n\n    src/tracing.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        otelSDK\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new NodeSDK({\n  metricReader: prometheusExporter,\n  contextManager: new AsyncLocalStorageContextManager(),\n  textMapPropagator: new CompositePropagator({\n    propagators: [\n      new JaegerPropagator(),\n      new W3CTraceContextPropagator(),\n      new W3CBaggagePropagator(),\n      new B3Propagator(),\n    ],\n  }),\n  instrumentations: [getNodeAutoInstrumentations()],\n})\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        prometheusExporter\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new PrometheusExporter(\n  { preventServerStart: true },\n  () => {\n    console.log('Prometheus exporter initialized');\n  },\n)\n                    \n                \n\n\n        \n    \n\n    src/config/mikro-orm.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        PRODUCTION\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'production'\n                    \n                \n\n\n        \n    \n\n    src/common/decorators/index.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Role\n                        \n                    \n                \n            \n                \n                    \n                        Default value : Reflector.createDecorator()\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
