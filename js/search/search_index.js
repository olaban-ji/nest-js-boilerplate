var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/interfaces/ApiResponse.html",[0,1.853,1,2.413]],["body/interfaces/ApiResponse.html",[0,2.575,1,4.072,2,3.353,3,0.284,4,0.284,5,0.255,6,3.639,7,3.996,8,0.409,9,1.637,10,1.111,11,2.434,12,2.434,13,3.96,14,6.804,15,0.493,16,0.018,17,1.136,18,4.56,19,0.315,20,0.699,21,0.284,22,0.015,23,0.015]],["title/controllers/AppController.html",[24,1.967,25,2.618]],["body/controllers/AppController.html",[3,0.263,4,0.263,5,0.236,8,0.379,11,2.071,12,2.071,15,0.349,16,0.018,17,0.804,18,3.102,19,0.397,20,0.646,21,0.263,22,0.014,23,0.014,24,3.164,25,4.212,26,2.529,27,4.14,28,1.114,29,6.886,30,1.578,31,4.813,32,6.572,33,5.048,34,5.653,35,5.048,36,0.506,37,4.813,38,0.846,39,4.14,40,3.697,41,3.606,42,4.813,43,4.626,44,3.697,45,1.92,46,4.813,47,0.011,48,3.697,49,3.697,50,0.983]],["title/modules/AppModule.html",[51,1.227,52,2.618]],["body/modules/AppModule.html",[3,0.16,4,0.16,5,0.143,10,0.515,15,0.212,16,0.019,19,0.445,20,0.393,21,0.16,22,0.01,23,0.01,25,3.554,26,2.255,28,0.541,36,0.308,38,0.515,47,0.007,50,0.598,51,1.666,52,5,53,1.296,54,1.449,55,1.638,56,1.638,57,1.449,58,2.25,59,1.449,60,2.518,61,2.518,62,2.518,63,4.014,64,3.729,65,4.014,66,4.014,67,4.014,68,2.402,69,1.167,70,1.638,71,2.927,72,2.255,73,2.927,74,4.292,75,5.597,76,2.927,77,0.627,78,0.464,79,4.292,80,1.887,81,1.342,82,4.292,83,2.927,84,2.927,85,2.927,86,4.292,87,2.927,88,2.927,89,2.431,90,1.007,91,2.927,92,2.927,93,2.047,94,2.927,95,2.518,96,2.255,97,2.047,98,4.292,99,2.518,100,3.002,101,2.518,102,2.927,103,4.292,104,2.518,105,2.518,106,2.047,107,2.927,108,1.638,109,2.518,110,1.753,111,2.927,112,2.249,113,1.638,114,2.249,115,3.002,116,2.047,117,4.292,118,2.518,119,2.927,120,2.927,121,2.927,122,2.927,123,2.213,124,2.927,125,2.927,126,2.927,127,2.57,128,0.873,129,2.249,130,2.927,131,2.927,132,2.249,133,2.927,134,2.518,135,2.927,136,0.69,137,2.927,138,1.11,139,2.927,140,2.927,141,2.927,142,2.927,143,2.927,144,2.927,145,2.927,146,2.927,147,2.927,148,2.927,149,2.249,150,2.518,151,2.927,152,2.927,153,2.927,154,0.758,155,2.927,156,1.342,157,2.927,158,2.927,159,1.449,160,2.518,161,2.927,162,2.047,163,2.249,164,4.292,165,1.296,166,1.753,167,0.833,168,2.927,169,2.57,170,4.292,171,2.766,172,2.927,173,2.927,174,2.249,175,2.927,176,2.927,177,2.927,178,2.927,179,2.518,180,2.927,181,2.927]],["title/modules/AppRedisModule.html",[51,1.227,182,2.242]],["body/modules/AppRedisModule.html",[3,0.247,4,0.247,5,0.221,16,0.018,19,0.407,20,0.607,21,0.247,22,0.014,23,0.014,47,0.011,50,0.923,51,2.093,53,2.002,54,2.239,55,2.531,56,2.531,57,2.239,58,2.827,59,3.161,68,3.24,69,1.804,70,2.531,72,2.376,81,1.81,89,2.43,90,1.556,123,1.991,127,2.708,128,1.349,156,1.414,159,2.239,160,3.891,182,4.333,183,3.891,184,3.891,185,3.891,186,4.226,187,4.523,188,4.523,189,4.523,190,3.474,191,3.474,192,4.523,193,4.523,194,4.523,195,3.891,196,4.523,197,4.523]],["title/injectables/AppRedisService.html",[186,2.095,198,0.42]],["body/injectables/AppRedisService.html",[3,0.114,4,0.114,5,0.102,8,0.164,9,0.858,10,1.042,15,0.443,16,0.019,17,1.189,19,0.284,20,0.28,21,0.114,22,0.01,23,0.008,28,0.613,36,0.642,38,1.1,47,0.005,50,1.21,77,1.308,78,0.939,81,0.652,89,2.062,90,0.717,123,1.139,128,2.111,156,0.652,167,1.55,186,1.854,190,1.602,191,5.242,198,0.371,199,0.622,200,1.794,201,1.625,202,4.12,203,3.313,204,4.805,205,3.313,206,5.449,207,3.313,208,6.255,209,0.988,210,1.602,211,2.067,212,5.712,213,3.313,214,3.313,215,2.086,216,5.605,217,3.544,218,3.313,219,2.086,220,1.73,221,2.14,222,2.985,223,6.384,224,5.449,225,5.098,226,2.467,227,3.313,228,2.086,229,3.313,230,3.313,231,3.313,232,2.086,233,3.313,234,2.086,235,3.313,236,5.131,237,2.086,238,1.984,239,3.313,240,2.681,241,6.593,242,2.656,243,2.086,244,1.096,245,2.85,246,2.545,247,3.313,248,3.313,249,1.984,250,2.85,251,3.544,252,3.313,253,1.854,254,2.545,255,2.85,256,2.086,257,1.033,258,2.086,259,2.086,260,2.086,261,5.449,262,1.341,263,3.313,264,2.086,265,3.313,266,2.086,267,2.086,268,2.689,269,2.086,270,5.119,271,1.794,272,2.086,273,2.086,274,2.086,275,1.848,276,2.086,277,1.794,278,2.882,279,2.086,280,2.086,281,2.086,282,2.086,283,2.086,284,2.086,285,2.086,286,2.086,287,2.086,288,2.086,289,2.086,290,2.086,291,2.086,292,3.811,293,2.086,294,3.313,295,3.313,296,2.086]],["title/injectables/AppService.html",[65,2.413,198,0.42]],["body/injectables/AppService.html",[3,0.296,4,0.296,5,0.265,8,0.427,16,0.018,17,1.082,19,0.328,20,0.728,21,0.296,22,0.015,23,0.015,28,1.198,36,0.57,38,0.953,47,0.013,50,1.107,65,4.174,198,0.726,199,1.617,297,4.664,298,7.174,299,5.422,300,5.422,301,5.422]],["title/controllers/AuthController.html",[24,1.967,302,2.618]],["body/controllers/AuthController.html",[1,1.737,3,0.147,4,0.147,5,0.132,6,1.885,8,0.212,10,0.945,11,1.849,12,1.849,13,3.008,15,0.467,16,0.019,18,1.737,19,0.406,20,0.362,21,0.147,22,0.01,23,0.01,24,1.416,26,1.416,28,0.747,30,1.762,36,0.565,38,0.945,40,2.07,41,3.447,43,4.422,44,2.07,45,1.075,47,0.006,48,4.129,49,4.129,50,1.097,69,2.499,77,1.152,78,0.852,106,1.885,128,2.058,136,1.267,138,2.499,166,1.614,167,0.767,220,1.695,221,2.326,262,1.234,275,1.941,302,2.823,303,2.318,304,2.318,305,4.164,306,3.219,307,3.759,308,4.164,309,2.695,310,4.227,311,2.695,312,4.037,313,2.263,314,2.695,315,2.695,316,4.826,317,2.695,318,2.695,319,2.695,320,3.385,321,2.695,322,2.823,323,2.695,324,2.695,325,3.101,326,2.695,327,3.385,328,2.695,329,2.695,330,4.227,331,2.695,332,2.695,333,2.695,334,2.07,335,2.695,336,4.952,337,1.885,338,2.695,339,2.318,340,2.543,341,2.07,342,2.318,343,2.695,344,2.695,345,2.259,346,2.695,347,2.695,348,3.473,349,2.695,350,2.07,351,2.695,352,2.695,353,2.695,354,2.695,355,2.695,356,4.624,357,4.624,358,2.695,359,2.318,360,4.624,361,2.259,362,3.473,363,3.718,364,2.695,365,2.695,366,2.695,367,2.318,368,2.695,369,2.695,370,1.61,371,2.695,372,2.07,373,2.695,374,3.101,375,2.602,376,2.602,377,2.695]],["title/modules/AuthModule.html",[51,1.227,63,2.413]],["body/modules/AuthModule.html",[3,0.19,4,0.19,5,0.17,15,0.251,16,0.019,19,0.449,20,0.466,21,0.19,22,0.011,23,0.011,26,2.546,47,0.008,51,1.831,53,1.536,54,1.717,55,1.941,56,1.941,57,1.717,58,2.473,59,2.765,63,4.764,64,3.948,68,2.712,69,1.383,70,1.941,72,2.546,78,0.768,89,2.183,90,1.193,112,2.664,113,1.941,114,2.664,115,3.39,116,2.426,123,1.193,127,2.077,156,1.084,162,2.426,182,3.948,302,3.907,339,2.984,340,3.807,341,2.664,378,2.984,379,3.468,380,2.984,381,2.984,382,4.249,383,4.249,384,3.468,385,4.846,386,2.235,387,3.468,388,3.468,389,3.468,390,2.664,391,4.846,392,2.077,393,3.468,394,3.468,395,3.39,396,3.468,397,2.984,398,3.6,399,1.822,400,4.169,401,2.984,402,3.468,403,3.468,404,2.984,405,3.468,406,3.468,407,2.664,408,3.468,409,2.984,410,2.984,411,2.984,412,2.984,413,2.984,414,2.984,415,2.984,416,2.984,417,2.984,418,2.664,419,3.468]],["title/classes/AuthResponseDto.html",[47,0.009,420,2.876]],["body/classes/AuthResponseDto.html",[3,0.262,4,0.262,5,0.235,8,0.378,9,1.557,12,2.437,15,0.436,16,0.018,17,1.149,19,0.29,21,0.262,22,0.014,23,0.014,30,1.971,36,0.632,45,1.914,47,0.011,136,1.417,220,2.524,306,3.6,325,4.618,345,3.364,361,3.364,362,5.646,420,4.618,421,1.914,422,5.646,423,4.129,424,3.159,425,6.012,426,3.405,427,4.618,428,4.8,429,4.618,430,3.875,431,3.875,432,4.8,433,3.249]],["title/injectables/AuthService.html",[198,0.42,340,1.967]],["body/injectables/AuthService.html",[3,0.101,4,0.101,5,0.091,8,0.146,9,0.78,10,0.908,15,0.456,16,0.019,17,1.212,19,0.387,20,0.249,21,0.101,22,0.007,23,0.007,28,0.557,36,0.661,38,0.848,47,0.004,50,0.895,69,1.201,77,1.107,78,0.818,89,1.965,90,0.637,113,1.037,123,0.637,128,1.961,136,1.55,138,1.443,154,1.561,167,1.998,186,2.89,198,0.338,199,0.552,201,2.094,209,0.898,221,2.176,222,1.408,226,1.109,240,0.778,249,1.109,254,2.313,262,1.409,275,2.271,278,3.064,292,2.106,305,2.59,306,1.803,307,3.064,308,3.272,340,1.582,345,2.697,356,2.59,357,2.59,363,1.423,367,1.593,370,2.339,374,2.313,375,2.824,376,2.824,390,1.423,398,1.194,399,0.973,404,3.272,407,2.313,434,1.593,435,3.804,436,3.804,437,3.804,438,3.804,439,3.804,440,2.922,441,3.804,442,1.593,443,2.545,444,5.443,445,3.804,446,3.064,447,3.011,448,3.011,449,1.852,450,3.011,451,1.852,452,3.011,453,1.852,454,1.852,455,1.852,456,1.852,457,3.272,458,1.852,459,1.852,460,1.852,461,1.852,462,1.852,463,1.852,464,2.106,465,1.593,466,1.423,467,1.423,468,1.852,469,3.011,470,3.011,471,1.852,472,1.593,473,1.194,474,1.423,475,1.852,476,1.593,477,2.313,478,1.423,479,1.852,480,1.852,481,1.852,482,1.852,483,1.852,484,1.852,485,3.804,486,1.852,487,1.852,488,3.804,489,3.011,490,1.852,491,4.381,492,1.852,493,1.593,494,1.593,495,3.769,496,2.818,497,3.769,498,1.852,499,1.593,500,1.423,501,1.423,502,1.109,503,1.423,504,1.423,505,1.423,506,1.423,507,1.423,508,3.769,509,3.804,510,4.146,511,3.011,512,3.011,513,2.59,514,1.852,515,3.011,516,1.852,517,1.852,518,1.852,519,1.423,520,1.852,521,1.295,522,2.129,523,2.313,524,1.593,525,1.423,526,1.852,527,1.852,528,1.852,529,1.593,530,1.593,531,2.278,532,1.593,533,1.852,534,1.593,535,1.852,536,1.593,537,1.852,538,1.852,539,1.423,540,3.011,541,1.852,542,2.59,543,2.59,544,1.852,545,1.852,546,1.852,547,1.109,548,1.852,549,2.59,550,2.59,551,1.593,552,1.423,553,1.852,554,1.852,555,1.852,556,1.852,557,1.593,558,2.59,559,1.593,560,2.59,561,1.593]],["title/classes/CatchEverythingFilter.html",[47,0.009,562,2.876]],["body/classes/CatchEverythingFilter.html",[3,0.149,4,0.149,5,0.133,8,0.215,9,1.055,10,1.106,12,1.99,13,2.28,15,0.456,16,0.019,17,0.903,18,3.485,19,0.35,20,0.366,21,0.149,22,0.01,23,0.01,28,0.753,36,0.68,38,1.067,47,0.006,50,0.995,77,1.348,78,1.066,80,2.625,81,0.853,132,3.745,154,0.707,156,0.853,163,2.095,165,1.803,167,1.647,171,1.758,201,2.138,209,1.215,211,2.386,222,1.905,240,1.145,244,1.433,251,2.346,257,1.35,262,1.525,278,1.908,313,1.275,316,1.908,350,2.095,386,1.758,421,1.088,466,3.129,521,3.782,523,3.745,562,3.129,563,2.346,564,4.875,565,4.875,566,4.073,567,4.073,568,4.073,569,4.073,570,4.073,571,2.728,572,6.07,573,4.073,574,4.073,575,4.073,576,5.372,577,5.407,578,2.728,579,6.73,580,2.728,581,2.728,582,1.633,583,2.728,584,2.728,585,2.728,586,2.728,587,4.073,588,2.728,589,2.728,590,2.728,591,3.504,592,2.095,593,3.504,594,2.095,595,2.346,596,2.849,597,2.728,598,2.728,599,2.728,600,2.728,601,2.728,602,2.728,603,1.633,604,2.728,605,4.073,606,2.728,607,2.728,608,2.728,609,2.728,610,2.728,611,4.073,612,1.526,613,2.728,614,2.728,615,2.728,616,2.728,617,5.407,618,4.073,619,3.129,620,2.095,621,2.728,622,4.073,623,2.728,624,4.875,625,2.728,626,2.728,627,3.504,628,2.728,629,2.095,630,2.728,631,2.346,632,2.728,633,2.728,634,2.728,635,4.194,636,2.728,637,2.728,638,2.346]],["title/classes/ChangePasswordDto.html",[47,0.009,639,2.618]],["body/classes/ChangePasswordDto.html",[3,0.206,4,0.206,5,0.184,8,0.296,9,1.329,12,2.154,15,0.372,16,0.018,17,1.046,19,0.31,21,0.206,22,0.012,23,0.012,30,1.682,36,0.539,45,1.502,47,0.012,136,1.209,138,2.671,154,1.623,220,2.154,226,3.072,375,3.76,376,3.76,421,1.502,424,2.695,426,3.1,433,2.888,639,3.588,640,5.018,641,2.634,642,4.413,643,4.811,644,4.413,645,4.811,646,4.811,647,4.811,648,4.811,649,4.654,650,5.194,651,4.811,652,4.811,653,4.811,654,4.811,655,4.811,656,4.811,657,4.811,658,3.766,659,5.129,660,3.766,661,4.08,662,4.08,663,4.481,664,2.893,665,2.108]],["title/injectables/CloudinaryService.html",[198,0.42,666,2.618]],["body/injectables/CloudinaryService.html",[3,0.203,4,0.203,5,0.284,8,0.293,10,0.894,11,1.279,15,0.369,16,0.019,19,0.417,20,0.5,21,0.203,22,0.012,23,0.012,28,0.941,36,0.535,38,0.654,47,0.009,50,1.183,77,1.09,78,0.806,81,1.163,89,2.432,90,1.279,128,1.729,154,0.964,156,1.163,165,1.647,167,1.447,198,0.57,199,1.109,201,1.517,209,1.517,211,2.616,221,1.836,257,1.841,262,0.797,268,2.672,292,2.601,361,2.081,522,2.846,631,3.199,666,3.557,667,3.199,668,5.298,669,2.397,670,3.719,671,2.857,672,4.786,673,4.452,674,4.358,675,3.719,676,3.719,677,3.557,678,4.375,679,5.086,680,3.719,681,3.719,682,2.857,683,3.278,684,3.199,685,1.739,686,1.954,687,2.601,688,3.719,689,3.719,690,3.719,691,3.719,692,3.719,693,3.719,694,3.719,695,3.199,696,4.986,697,3.199,698,3.199,699,3.199,700,5.796,701,3.719,702,3.199,703,3.719,704,3.719,705,3.719,706,3.719,707,3.719,708,3.199,709,3.719,710,3.719,711,3.719,712,3.719,713,3.719,714,3.719,715,3.719]],["title/injectables/CreateUserCommand.html",[66,2.413,198,0.42]],["body/injectables/CreateUserCommand.html",[3,0.142,4,0.142,5,0.128,8,0.205,9,1.02,10,1.049,15,0.432,16,0.019,17,1.203,19,0.395,20,0.35,21,0.142,22,0.009,23,0.009,28,0.728,30,1.732,33,3.023,36,0.651,38,0.998,47,0.006,50,1.079,66,2.536,77,1.279,78,1.071,96,1.369,123,2.193,128,1.414,136,1.118,138,0.988,154,1.02,167,1.614,198,0.441,199,0.777,201,1.692,209,1.174,220,1.094,221,1.421,240,1.094,244,1.369,262,1.016,275,1.421,370,2.471,399,1.369,443,2.897,496,1.218,519,2.001,521,1.822,522,1.458,524,2.241,547,2.357,649,2.536,685,1.218,708,2.241,716,5.486,717,2.241,718,2.357,719,4.743,720,4.059,721,4.743,722,4.743,723,4.743,724,4.743,725,3.935,726,2.605,727,5.284,728,3.935,729,3.935,730,2.605,731,5.284,732,3.935,733,6.378,734,2.605,735,6.85,736,2.605,737,3.935,738,3.023,739,2.605,740,2.605,741,3.935,742,3.023,743,2.605,744,2.605,745,3.935,746,3.164,747,2.605,748,3.057,749,3.935,750,2.957,751,3.643,752,2.605,753,2.605,754,3.935,755,3.935,756,3.385,757,2.001,758,5.673,759,3.385,760,2.241,761,2.001,762,1.56,763,2.605,764,3.023,765,1.679,766,2.752,767,2.605,768,2.605,769,2.001,770,2.605,771,2.605,772,2.001,773,1.56,774,2.605,775,2.605,776,2.605,777,2.605,778,1.679,779,2.605,780,2.605,781,5.284]],["title/classes/CreateUserDto.html",[47,0.009,782,2.618]],["body/classes/CreateUserDto.html",[3,0.126,4,0.126,5,0.113,8,0.181,9,0.927,10,1.223,12,1.704,15,0.489,16,0.018,17,1.212,19,0.3,21,0.126,22,0.008,23,0.008,30,2.212,36,0.709,45,0.918,47,0.01,50,0.731,78,0.785,136,1.717,138,2.249,220,2.796,222,1.674,226,2.143,240,1.844,242,2.307,262,0.493,370,2.14,421,0.918,424,3.498,426,3.606,433,3.34,547,2.63,582,2.143,612,1.288,643,2.75,644,1.98,645,2.75,646,2.75,647,2.75,648,2.75,649,3.193,650,2.75,651,2.75,652,2.75,653,2.75,654,2.75,655,2.75,656,2.75,657,2.75,661,3.753,662,4.585,663,2.75,664,1.768,665,1.288,685,1.076,738,2.75,742,2.75,746,3.402,748,3.193,766,3.072,782,2.503,783,5.872,784,1.98,785,4.122,786,3.374,787,4.122,788,4.555,789,3.374,790,3.374,791,3.374,792,4.122,793,3.579,794,3.579,795,3.579,796,3.579,797,2.302,798,2.302,799,2.302,800,2.302,801,2.302,802,2.302,803,4.261,804,2.302,805,2.302,806,2.302,807,2.302,808,2.302,809,2.302,810,2.302,811,2.302,812,2.302,813,3.079,814,2.302,815,2.302,816,3.579,817,2.302,818,2.302,819,3.079,820,2.302,821,2.302,822,2.302,823,2.302,824,3.579,825,2.75,826,2.302,827,6.297,828,3.579,829,1.98,830,1.768,831,2.302,832,2.302,833,3.579,834,2.302,835,2.302,836,2.302,837,4.392,838,2.302,839,2.302,840,2.302,841,2.302,842,2.302,843,2.302]],["title/classes/CreateUserResponseDto.html",[47,0.009,844,2.618]],["body/classes/CreateUserResponseDto.html",[3,0.243,4,0.243,5,0.218,8,0.351,9,1.486,11,2.302,12,2.48,15,0.502,16,0.018,17,1.059,19,0.347,21,0.313,22,0.014,23,0.014,30,1.88,36,0.603,45,1.777,47,0.014,136,1.777,220,2.811,253,3.548,421,1.777,424,3.013,426,3.138,429,4.87,430,4.086,431,4.086,433,3.428,778,4.315,844,4.01,845,3.423,846,4.933,847,4.456,848,4.456,849,2.872,850,3.116,851,4.405,852,3.423]],["title/modules/EmailModule.html",[51,1.227,853,2.618]],["body/modules/EmailModule.html",[3,0.231,4,0.231,5,0.207,16,0.019,19,0.431,20,0.569,21,0.231,22,0.013,23,0.013,26,2.225,47,0.01,51,2.029,53,1.875,54,2.096,55,2.37,56,2.37,57,2.096,58,2.456,59,3.063,68,3.105,69,1.689,70,2.37,72,2.225,81,1.735,89,2.371,90,1.457,106,2.962,123,1.457,127,2.536,132,3.254,134,3.644,136,0.999,150,3.644,154,1.097,156,1.324,162,2.962,171,2.73,399,2.225,457,3.644,686,2.915,750,2.37,853,4.767,854,3.644,855,3.644,856,4.329,857,4.235,858,4.235,859,4.235,860,3.254,861,4.262,862,5.548,863,4.235,864,4.235,865,4.235,866,4.235,867,4.235,868,4.235,869,4.235,870,4.235,871,4.235,872,4.235,873,4.235,874,4.235,875,3.254,876,4.235,877,4.235,878,4.235]],["title/classes/EmailService.html",[47,0.009,856,2.242]],["body/classes/EmailService.html",[3,0.235,4,0.235,5,0.211,8,0.339,10,0.986,15,0.407,16,0.018,17,1.252,19,0.339,20,0.578,21,0.235,22,0.013,23,0.013,28,1.037,36,0.589,38,0.757,47,0.01,77,1.202,78,0.889,81,1.346,128,1.86,156,1.346,167,1.596,201,1.673,209,1.673,211,2.714,221,2.025,253,2.41,257,2.132,268,2.263,275,1.555,370,1.718,372,3.308,421,1.718,686,2.263,751,4.792,856,3.957,860,3.308,875,5.076,879,3.705,880,6.238,881,4.306,882,7.026,883,4.306,884,4.306,885,7.026,886,4.259,887,4.306,888,4.306,889,4.306,890,4.306,891,4.306]],["title/interfaces/ErrorResponse.html",[0,1.853,596,2.618]],["body/interfaces/ErrorResponse.html",[0,2.421,2,3.153,3,0.267,4,0.267,5,0.239,7,3.757,8,0.385,9,1.576,10,1.07,12,2.382,13,3.876,15,0.526,16,0.018,17,1.288,21,0.267,22,0.014,23,0.014,78,1.098,171,4.464,222,3.096,596,4.254,627,5.958,629,5.32,892,4.208]],["title/classes/ForgotPasswordDto.html",[47,0.009,310,2.618]],["body/classes/ForgotPasswordDto.html",[3,0.288,4,0.288,5,0.258,8,0.414,9,1.648,15,0.382,16,0.018,17,1.063,19,0.385,21,0.288,22,0.015,23,0.015,30,1.725,36,0.553,45,2.099,47,0.015,310,4.45,370,2.727,421,2.099,426,2.605,433,3.149,641,3.681,665,2.946,825,4.887,830,4.043,893,5.473,894,5.263,895,4.528,896,5.263]],["title/classes/GetProfileResponseDto.html",[47,0.009,850,2.618]],["body/classes/GetProfileResponseDto.html",[3,0.244,4,0.244,5,0.219,8,0.352,9,1.488,11,2.305,12,2.482,15,0.502,16,0.018,17,1.06,19,0.347,21,0.314,22,0.014,23,0.014,30,1.883,36,0.604,45,1.781,47,0.014,136,1.767,220,2.814,253,3.553,421,1.781,424,3.017,426,3.142,429,4.876,430,4.091,431,4.091,433,3.431,778,3.702,844,3.124,845,3.431,846,3.842,849,2.879,850,4.017,851,5.147,852,4.412,897,4.467,898,4.467]],["title/modules/HttpClientModule.html",[51,1.227,899,2.618]],["body/modules/HttpClientModule.html",[3,0.268,4,0.268,5,0.24,16,0.018,19,0.401,20,0.659,21,0.268,22,0.014,23,0.014,47,0.012,51,2.173,53,2.171,54,2.428,55,2.745,56,2.745,57,2.428,58,2.934,59,3.281,68,3.41,69,1.956,70,2.745,72,2.577,81,1.905,899,5.153,900,4.219,901,4.219,902,4.219,903,4.92,904,3.768,905,3.768,906,4.905,907,6.093,908,3.768,909,3.161,910,4.905]],["title/injectables/HttpClientService.html",[198,0.42,903,2.413]],["body/injectables/HttpClientService.html",[3,0.198,4,0.198,5,0.178,8,0.286,9,1.296,10,0.879,11,1.72,15,0.363,16,0.018,17,0.956,19,0.404,20,0.487,21,0.198,22,0.012,23,0.012,28,0.925,36,0.648,38,0.638,47,0.009,50,0.741,77,1.072,78,0.793,81,1.135,128,1.707,154,1.598,156,1.135,159,3.202,167,1.986,198,0.561,199,1.082,201,2.082,209,1.492,211,2.599,221,1.806,240,2.1,244,2.628,249,3.693,257,1.796,262,0.778,268,2.628,275,1.31,313,2.339,361,2.031,594,2.788,750,3.451,903,3.223,904,4.969,905,4.969,908,2.788,909,3.975,911,3.122,912,5.722,913,5.722,914,5.722,915,3.629,916,6.686,917,5.001,918,3.629,919,6.167,920,3.629,921,5.001,922,6.167,923,3.629,924,5.001,925,5.001,926,3.629,927,2.339,928,3.629,929,3.629,930,3.629,931,3.629,932,3.629,933,5.001,934,3.629]],["title/interfaces/IPaymentService.html",[0,1.853,935,2.618]],["body/interfaces/IPaymentService.html",[0,2.408,2,3.136,3,0.266,4,0.266,5,0.238,8,0.383,10,1.066,15,0.439,16,0.018,19,0.294,21,0.266,22,0.014,23,0.014,28,1.121,36,0.637,38,1.066,77,1.299,78,0.961,221,2.496,238,3.63,750,4.059,935,4.24,936,4.185,937,5.681,938,5.681,939,4.185,940,5.681,941,6.238,942,4.865,943,5.947,944,4.185,945,5.681,946,4.865,947,3.185]],["title/interfaces/IStrorageService.html",[0,1.853,683,2.413]],["body/interfaces/IStrorageService.html",[0,2.222,2,2.893,3,0.245,4,0.245,5,0.311,8,0.353,10,1.18,11,1.544,15,0.418,16,0.018,17,1.063,19,0.406,21,0.245,22,0.014,23,0.014,28,1.066,36,0.606,38,1.013,77,1.235,78,0.913,169,3.81,216,4.426,221,2.424,222,2.975,236,4.888,238,3.45,603,2.688,668,4.888,671,3.448,672,5.157,673,4.888,674,4.695,677,3.14,678,3.862,683,3.713,685,2.099,686,2.359,687,3.14,948,3.862,949,5.473,950,3.862,951,5.157,952,4.489,953,4.489,954,3.14,955,3.862,956,2.893,957,2.893]],["title/injectables/JwtAuthGuard.html",[198,0.42,395,2.618]],["body/injectables/JwtAuthGuard.html",[3,0.353,4,0.223,5,0.199,8,0.321,10,1.067,12,1.401,15,0.44,16,0.019,19,0.391,20,0.547,21,0.223,22,0.013,23,0.013,28,1,36,0.638,38,0.951,47,0.01,50,1.239,77,1.301,78,1.025,123,1.401,136,1.587,154,1.055,166,2.439,179,3.503,198,0.606,199,1.215,209,1.215,262,0.873,342,3.503,386,2.625,392,2.439,395,3.782,467,4.153,496,1.904,522,3.619,718,3.238,765,2.625,886,2.625,958,5.562,959,3.128,960,5.407,961,4.651,962,5.407,963,3.503,964,5.951,965,4.073,966,4.651,967,4.522,968,4.073,969,5.407,970,4.073,971,5.407,972,3.503,973,3.128,974,4.651,975,4.073,976,3.503,977,4.073,978,4.073,979,4.073,980,4.073,981,4.073,982,4.073]],["title/injectables/JwtStrategy.html",[198,0.42,382,2.413]],["body/injectables/JwtStrategy.html",[3,0.182,4,0.182,5,0.163,8,0.262,10,0.828,15,0.341,16,0.018,19,0.379,20,0.447,21,0.182,22,0.011,23,0.011,24,2.473,28,1.098,36,0.495,38,0.585,47,0.013,50,0.679,77,1.009,78,0.746,89,2.349,90,1.144,123,1.144,128,1.629,136,1.661,149,3.616,198,0.528,199,0.992,201,0.992,209,1.404,217,2.862,245,4.049,249,1.992,255,4.049,262,0.713,275,1.201,306,3.895,307,4.153,313,3.127,322,3.82,340,2.473,345,3.641,382,3.034,392,1.992,443,3.127,495,2.862,508,4.699,525,4.813,529,4.049,531,1.992,532,2.862,552,3.616,669,2.145,702,4.049,718,2.819,757,2.556,765,2.145,983,2.862,984,4.049,985,3.327,986,4.707,987,3.327,988,4.707,989,4.049,990,4.707,991,4.707,992,4.707,993,4.049,994,4.707,995,4.707,996,4.049,997,4.707,998,4.707,999,4.707,1000,5.938,1001,4.707,1002,4.707,1003,4.707,1004,4.707,1005,4.707,1006,4.707,1007,3.616,1008,4.049,1009,4.707,1010,5.938,1011,4.049,1012,4.707,1013,4.707,1014,4.707,1015,4.707,1016,4.707,1017,3.327,1018,2.862,1019,2.556,1020,2.862,1021,3.327,1022,3.327,1023,3.327,1024,3.327,1025,3.327,1026,3.327]],["title/injectables/LocalAuthGuard.html",[198,0.42,337,2.618]],["body/injectables/LocalAuthGuard.html",[3,0.304,4,0.304,5,0.273,16,0.018,19,0.398,20,0.748,21,0.304,22,0.016,23,0.016,47,0.013,198,0.738,199,1.662,337,4.604,392,3.337,718,3.942,959,4.281,972,4.794,1027,4.794,1028,6.583]],["title/injectables/LocalStrategy.html",[198,0.42,383,2.413]],["body/injectables/LocalStrategy.html",[3,0.23,4,0.23,5,0.206,8,0.331,10,0.971,15,0.4,16,0.018,17,1.166,19,0.422,20,0.565,21,0.23,22,0.013,23,0.013,28,1.022,36,0.58,38,0.74,47,0.01,50,0.859,77,1.184,78,0.875,128,1.839,136,1.454,138,2.484,149,4.243,154,1.09,198,0.619,199,1.254,201,1.647,209,1.647,221,1.994,262,0.901,275,1.994,340,3.667,341,3.231,370,2.203,383,3.56,392,2.518,443,3.327,467,3.231,477,4.243,496,1.967,510,3.618,530,3.618,531,2.518,549,3.618,718,3.307,757,3.231,765,2.711,984,4.751,1018,3.618,1019,3.231,1020,3.618,1029,3.618,1030,4.206,1031,4.206,1032,5.523,1033,4.206,1034,3.618,1035,4.206,1036,4.206,1037,3.231,1038,3.618,1039,4.206]],["title/classes/LoginDto.html",[47,0.009,320,2.618]],["body/classes/LoginDto.html",[3,0.265,4,0.265,5,0.237,8,0.382,9,1.568,15,0.439,16,0.018,17,1.153,19,0.366,21,0.265,22,0.014,23,0.014,30,1.984,36,0.636,45,1.935,47,0.014,136,1.628,138,2.695,220,2.541,226,3.624,320,4.233,370,2.834,421,1.935,424,3.18,426,3.418,433,3.265,643,4.649,665,2.715,825,4.649,830,3.727,895,4.174,1040,4.174,1041,4.852,1042,4.852]],["title/injectables/MorganMiddleware.html",[93,2.618,198,0.42]],["body/injectables/MorganMiddleware.html",[3,0.226,4,0.226,5,0.203,8,0.326,10,0.961,12,1.423,15,0.396,16,0.019,17,0.691,19,0.33,20,0.556,21,0.226,22,0.013,23,0.013,28,1.011,36,0.574,38,0.728,47,0.01,50,0.845,77,1.171,78,0.866,80,3.943,81,1.294,93,3.822,136,1.288,156,1.294,159,2.048,165,1.832,167,1.177,169,2.478,198,0.613,199,1.234,201,1.234,209,1.234,210,3.179,211,2.636,246,4.197,250,4.701,262,0.887,322,3.822,502,4.051,603,2.478,635,5.263,682,3.179,909,2.667,1043,3.56,1044,4.138,1045,5.464,1046,6.507,1047,4.138,1048,3.56,1049,5.464,1050,5.263,1051,3.179,1052,4.138,1053,4.138,1054,5.464,1055,4.138,1056,3.56,1057,4.138,1058,3.56,1059,5.464,1060,4.138,1061,4.138,1062,4.138,1063,4.138,1064,4.138,1065,4.138,1066,4.138,1067,4.138,1068,4.138,1069,5.464,1070,4.138]],["title/classes/PasswordResetEmailConsumer.html",[47,0.009,1071,2.876]],["body/classes/PasswordResetEmailConsumer.html",[3,0.223,4,0.223,5,0.199,8,0.321,10,0.951,11,1.401,15,0.392,16,0.019,19,0.427,20,0.547,21,0.223,22,0.013,23,0.013,28,1,36,0.568,38,0.716,47,0.01,77,1.159,78,0.857,81,1.273,113,2.279,128,1.81,156,1.273,167,1.538,201,1.612,209,1.612,211,2.677,253,2.279,257,2.016,262,0.873,268,2.841,275,1.47,370,2.156,398,2.625,399,2.14,421,1.624,473,2.625,543,3.503,547,2.439,685,1.904,718,2.439,765,2.625,856,4.142,1071,4.967,1072,3.503,1073,5.407,1074,4.073,1075,4.073,1076,5.407,1077,7.168,1078,4.073,1079,5.407,1080,4.073,1081,5.407,1082,4.073,1083,3.503,1084,3.503,1085,4.073,1086,4.073,1087,4.073,1088,4.073,1089,5.407,1090,6.07,1091,4.073,1092,4.073,1093,4.073,1094,4.073,1095,4.073,1096,4.073]],["title/modules/PaymentModule.html",[51,1.227,1097,2.876]],["body/modules/PaymentModule.html",[3,0.197,4,0.197,5,0.177,15,0.262,16,0.019,19,0.441,20,0.485,21,0.197,22,0.012,23,0.012,28,0.667,30,1.183,36,0.379,38,0.634,41,2.982,47,0.009,50,1.017,51,1.87,53,1.597,58,1.597,59,1.786,72,1.895,78,0.789,81,1.783,89,2.517,90,1.241,108,2.019,112,2.771,113,2.019,114,2.771,115,3.483,116,2.523,123,1.241,127,2.982,129,3.826,154,0.935,156,1.557,162,2.523,211,2.333,262,0.773,399,1.895,400,4.284,401,3.103,409,3.103,410,3.103,411,3.103,412,3.103,413,3.103,414,3.103,415,3.103,416,3.103,417,3.103,418,2.771,446,3.483,473,2.325,685,1.687,947,3.232,1097,4.382,1098,3.607,1099,4.284,1100,4.907,1101,3.607,1102,4.907,1103,4.98,1104,3.607,1105,3.99,1106,4.382,1107,3.103,1108,3.607,1109,3.483,1110,3.607,1111,3.607,1112,3.607,1113,3.607,1114,3.607,1115,3.607,1116,3.607,1117,3.607,1118,4.98,1119,3.607,1120,3.607,1121,3.607,1122,3.607,1123,3.607,1124,4.284,1125,4.284,1126,3.607,1127,3.607,1128,3.607]],["title/classes/RefreshTokenDto.html",[47,0.009,327,2.618]],["body/classes/RefreshTokenDto.html",[3,0.275,4,0.275,5,0.246,8,0.396,9,1.603,15,0.364,16,0.018,17,1.033,19,0.374,21,0.275,22,0.015,23,0.015,30,1.648,36,0.528,45,2.005,47,0.015,220,2.111,306,3.705,307,4.327,327,4.327,345,3.914,363,5.148,421,2.005,424,2.642,426,3.063,427,3.862,433,3.063,661,4.327,662,4.327,665,2.814,1008,5.322,1129,5.322,1130,4.325,1131,6.187,1132,5.028,1133,5.028]],["title/injectables/RequestBodyAndResponseInterceptor.html",[198,0.42,1134,2.618]],["body/injectables/RequestBodyAndResponseInterceptor.html",[3,0.201,4,0.201,5,0.18,8,0.289,10,0.887,11,1.264,12,1.735,13,2.823,15,0.366,16,0.019,17,0.614,19,0.375,20,0.493,21,0.276,22,0.012,23,0.012,28,0.933,36,0.53,38,0.646,47,0.012,50,1.266,77,1.081,78,0.799,81,1.149,108,2.056,123,1.264,156,1.149,159,2.496,165,2.233,167,1.045,169,2.2,198,0.646,199,1.096,201,1.096,209,1.096,210,2.822,211,2.546,262,1.5,313,1.718,361,2.056,430,2.368,431,2.368,502,3.712,582,2.2,603,3.02,612,2.056,619,2.822,620,2.822,886,2.368,927,2.368,947,1.93,967,4.544,1051,2.822,1134,3.527,1135,2.822,1136,4.338,1137,3.674,1138,4.954,1139,5.588,1140,3.674,1141,4.762,1142,3.874,1143,4.954,1144,3.16,1145,3.16,1146,3.16,1147,2.569,1148,3.874,1149,2.822,1150,3.16,1151,4.338,1152,3.16,1153,3.16,1154,3.16,1155,3.16,1156,3.16,1157,3.16,1158,3.16,1159,4.338,1160,4.338,1161,4.338,1162,4.338,1163,2.822,1164,3.16,1165,3.16]],["title/classes/ResetPasswordDto.html",[47,0.009,330,2.618]],["body/classes/ResetPasswordDto.html",[3,0.195,4,0.195,5,0.175,8,0.281,9,1.281,12,2.107,15,0.411,16,0.018,17,1.111,19,0.299,21,0.195,22,0.012,23,0.012,30,1.86,36,0.596,45,1.425,47,0.012,69,1.973,136,1.444,138,2.637,154,1.587,220,2.383,330,3.46,345,2.768,372,3.8,374,4.359,375,3.657,376,3.657,421,1.425,424,2.981,426,3.293,427,2.744,433,3.032,641,2.498,642,4.255,645,4.705,646,4.705,647,4.705,648,4.705,649,4.482,650,4.705,651,4.705,652,4.705,653,4.705,654,4.705,655,4.705,656,4.705,657,4.705,661,4.284,662,4.284,663,4.359,664,2.744,665,1.999,1166,5.269,1167,6.125,1168,4.946,1169,3.572,1170,3.572,1171,3.572,1172,3.572,1173,4.946,1174,4.946]],["title/guards/RoleGuard.html",[1175,2.876,1176,2.876]],["body/guards/RoleGuard.html",[3,0.226,4,0.226,5,0.202,8,0.325,10,0.959,15,0.396,16,0.019,17,0.69,19,0.409,20,0.555,21,0.226,22,0.013,23,0.013,28,1.009,30,1.354,36,0.573,38,0.726,47,0.01,50,1.248,77,1.169,78,0.865,108,2.311,123,2.102,154,1.07,163,3.172,165,1.828,166,2.472,167,1.175,198,0.612,209,1.231,221,1.97,242,3.516,262,1.393,313,1.931,325,3.172,386,2.661,496,1.931,592,4.191,746,2.472,886,3.516,927,2.661,947,2.169,961,5.815,963,3.552,964,5.974,966,3.552,967,4.547,976,3.552,1141,4.694,1142,4.191,1148,4.191,1149,3.172,1163,3.172,1176,4.191,1177,4.129,1178,3.552,1179,4.129,1180,4.129,1181,6.111,1182,4.129,1183,5.456,1184,4.129,1185,4.129,1186,4.129]],["title/injectables/S3Service.html",[198,0.42,1187,2.618]],["body/injectables/S3Service.html",[3,0.147,4,0.147,5,0.237,8,0.212,9,1.046,10,0.851,11,0.927,15,0.417,16,0.019,17,1.046,19,0.429,20,0.362,21,0.147,22,0.01,23,0.01,28,0.747,36,0.635,38,0.71,47,0.006,50,0.824,58,1.193,77,1.037,78,0.767,81,0.843,89,2.182,90,0.927,128,1.802,154,1.046,156,0.843,159,2.85,165,1.193,167,1.72,169,3.447,198,0.453,199,0.804,201,2.058,209,1.204,211,2.376,216,4.642,221,1.941,222,2.263,236,4.129,238,2.417,240,1.132,244,1.416,257,1.334,262,1.343,268,2.121,275,1.457,313,1.26,316,1.885,361,1.508,407,3.101,539,3.101,603,1.614,649,2.602,668,4.422,669,1.737,671,2.07,672,4.129,673,3.718,674,3.759,683,2.602,684,2.318,685,1.26,686,2.121,687,1.885,695,2.318,696,3.473,697,2.318,698,2.318,699,2.318,720,4.422,760,2.318,773,1.614,909,1.737,949,4.164,950,2.318,951,4.129,954,1.885,955,2.318,956,1.737,957,1.737,1037,2.07,1187,2.823,1188,2.318,1189,4.84,1190,4.84,1191,4.164,1192,4.026,1193,4.037,1194,2.695,1195,2.695,1196,4.037,1197,2.695,1198,2.695,1199,4.037,1200,2.695,1201,2.318,1202,4.037,1203,2.695,1204,2.695,1205,4.037,1206,4.164,1207,2.318,1208,3.473,1209,4.037,1210,2.318,1211,2.695,1212,2.318,1213,2.318,1214,4.037,1215,2.318,1216,2.695,1217,2.318,1218,4.84,1219,4.037,1220,4.037,1221,2.695,1222,2.695,1223,4.037,1224,2.695,1225,2.695,1226,2.695,1227,2.695,1228,2.695,1229,4.037,1230,2.695,1231,4.037,1232,2.695,1233,2.318,1234,2.318,1235,4.037,1236,2.695,1237,2.695,1238,2.695,1239,2.695]],["title/injectables/SchemaService.html",[67,2.413,198,0.42]],["body/injectables/SchemaService.html",[3,0.228,4,0.228,5,0.204,8,0.329,9,1.424,10,0.734,15,0.303,16,0.018,19,0.395,20,0.561,21,0.228,22,0.013,23,0.013,28,1.017,36,0.646,38,0.734,47,0.01,67,3.543,77,0.895,78,0.662,81,2.042,89,2.564,90,1.436,96,2.194,100,3.845,101,3.593,128,1.833,154,1.424,156,1.306,165,1.849,167,1.982,198,0.616,199,1.246,201,2.078,209,1.64,211,2.694,240,1.754,244,2.194,257,2.067,262,1.178,268,2.194,275,1.508,762,2.501,1240,3.593,1241,6.967,1242,4.177,1243,6.53,1244,5.498,1245,5.498,1246,4.177,1247,5.498,1248,5.498,1249,4.177,1250,4.177,1251,4.177,1252,4.177,1253,4.177,1254,4.177,1255,4.177,1256,4.177]],["title/modules/StorageModule.html",[51,1.227,1257,2.876]],["body/modules/StorageModule.html",[3,0.218,4,0.218,5,0.195,16,0.019,19,0.425,20,0.536,21,0.218,22,0.013,23,0.013,28,0.738,36,0.419,38,0.702,47,0.009,50,1.227,51,1.97,53,1.767,58,1.767,59,1.976,72,2.097,81,1.879,89,2.536,90,1.373,127,3.194,129,5.135,154,1.557,156,1.668,195,3.433,211,2.535,262,0.855,399,2.097,418,3.066,496,1.866,666,2.792,685,1.866,686,2.097,1037,3.066,1099,4.589,1100,5.169,1102,5.169,1187,2.792,1191,4.589,1192,4.203,1234,3.433,1257,4.616,1258,3.991,1259,3.991,1260,3.991,1261,4.616,1262,3.433,1263,3.991,1264,5.335,1265,3.991,1266,3.991,1267,3.991,1268,3.991,1269,3.991,1270,3.991,1271,3.991,1272,3.991,1273,3.991,1274,3.991,1275,3.991,1276,3.991,1277,3.991,1278,3.991,1279,3.991]],["title/injectables/StripeService.html",[198,0.42,1109,2.618]],["body/injectables/StripeService.html",[3,0.173,4,0.173,5,0.155,8,0.25,10,1.022,11,1.566,15,0.421,16,0.018,19,0.408,20,0.426,21,0.173,22,0.011,23,0.011,28,0.842,30,1.041,36,0.611,38,0.936,47,0.008,50,0.929,77,1.246,78,0.921,81,0.993,89,2.312,90,1.092,108,1.777,113,1.777,128,2.049,156,0.993,165,1.406,167,1.654,198,0.51,199,0.947,201,1.734,209,1.358,211,2.502,221,2.099,238,2.726,253,1.777,257,1.571,262,1.246,268,2.796,275,1.921,399,1.668,446,4.066,472,2.731,473,2.046,531,1.901,669,2.046,750,3.777,778,2.046,935,3.184,937,4.578,938,4.578,939,2.731,940,4.578,941,5.51,943,5.51,944,2.731,945,4.578,947,3.546,996,5.001,1105,3.184,1109,3.184,1124,4.578,1125,4.578,1280,2.731,1281,4.552,1282,3.175,1283,3.175,1284,3.175,1285,4.552,1286,5.322,1287,4.552,1288,3.175,1289,4.552,1290,4.552,1291,3.175,1292,3.175,1293,3.175,1294,3.175,1295,3.497,1296,5.322,1297,3.175,1298,3.175,1299,3.175,1300,3.175,1301,5.813,1302,3.497,1303,3.175,1304,3.175,1305,3.175,1306,3.175,1307,3.175,1308,3.175,1309,3.175,1310,3.175,1311,3.175,1312,3.175,1313,3.175,1314,3.175]],["title/injectables/SuccessResponseInterceptor.html",[198,0.42,1147,2.618]],["body/injectables/SuccessResponseInterceptor.html",[3,0.206,4,0.206,5,0.184,8,0.296,10,0.662,11,1.295,12,1.764,13,2.871,15,0.273,16,0.019,17,0.629,19,0.379,20,0.506,21,0.28,22,0.012,23,0.012,28,0.949,36,0.396,38,0.662,47,0.012,50,1.279,77,0.807,78,0.597,81,1.177,108,2.108,123,1.295,156,1.177,159,2.539,165,2.271,167,1.072,169,2.255,198,0.654,199,1.123,201,1.123,211,2.213,262,1.509,313,1.761,361,2.108,430,2.427,431,2.427,502,3.751,582,2.255,603,3.072,612,2.108,619,2.893,620,2.893,886,2.427,927,2.427,947,1.979,967,4.583,1051,2.893,1134,2.634,1135,2.893,1136,4.413,1138,5.018,1139,5.637,1141,4.811,1142,3.94,1143,5.018,1144,3.24,1145,3.24,1146,3.24,1147,3.588,1148,3.94,1149,2.893,1150,3.24,1151,4.413,1152,3.24,1153,3.24,1154,3.24,1155,3.24,1156,3.24,1157,3.24,1158,3.24,1159,4.413,1160,4.413,1161,4.413,1162,4.413,1163,2.893,1164,3.24,1165,3.24,1315,3.766]],["title/entities/User.html",[136,0.883,1316,2.876]],["body/entities/User.html",[3,0.09,4,0.09,5,0.081,8,0.322,9,1.061,10,1.185,15,0.534,16,0.018,17,1.18,19,0.213,21,0.09,22,0.007,23,0.007,30,2.21,36,0.709,47,0.004,69,1.095,78,0.86,96,0.87,123,2.353,136,1.435,138,2.135,154,1.268,159,1.36,171,1.77,174,1.272,201,0.494,204,2.11,222,1.284,240,2.056,242,3.497,244,3.198,249,3.249,262,0.589,306,1.645,370,2.068,496,0.774,531,2.107,547,2.452,550,3.027,557,2.363,582,0.992,612,0.927,629,4.168,638,2.363,685,0.774,738,2.11,742,3.761,746,2.719,748,3.155,751,3.145,762,0.992,766,2.864,769,1.272,772,1.272,773,0.992,785,4.168,786,2.703,787,3.761,788,4.168,789,3.145,790,3.145,791,3.145,792,3.145,803,3.522,813,2.363,819,2.363,1007,2.11,1011,2.363,1038,3.027,1058,5.96,1316,2.11,1317,1.425,1318,1.425,1319,3.761,1320,3.519,1321,4.095,1322,3.519,1323,6.555,1324,2.363,1325,6.741,1326,7.3,1327,2.747,1328,1.656,1329,6.928,1330,1.656,1331,4.095,1332,2.747,1333,1.656,1334,5.804,1335,1.656,1336,1.656,1337,2.363,1338,2.747,1339,1.656,1340,6.202,1341,5.426,1342,4.095,1343,4.095,1344,2.747,1345,1.656,1346,2.747,1347,1.656,1348,1.656,1349,4.095,1350,1.656,1351,1.656,1352,3.519,1353,1.656,1354,3.027,1355,1.656,1356,1.656,1357,1.656,1358,2.747,1359,1.656,1360,1.656,1361,4.895,1362,1.656,1363,2.747,1364,1.656,1365,3.519,1366,1.656,1367,1.656,1368,2.747,1369,1.656,1370,2.747,1371,1.656,1372,2.747,1373,6.685,1374,2.363,1375,2.363,1376,1.656,1377,1.656,1378,1.656,1379,1.656,1380,1.425,1381,2.747,1382,1.656,1383,1.425,1384,1.656,1385,1.425,1386,1.425,1387,4.095,1388,3.522,1389,1.656,1390,2.747,1391,1.656]],["title/controllers/UsersController.html",[24,1.967,1392,2.618]],["body/controllers/UsersController.html",[1,2.382,3,0.202,4,0.202,5,0.181,6,2.585,8,0.291,10,0.891,11,1.742,12,1.742,13,2.834,15,0.419,16,0.019,18,2.382,19,0.407,20,0.496,21,0.202,22,0.012,23,0.012,24,1.942,26,1.942,28,0.937,30,1.66,36,0.532,38,0.891,40,2.839,41,3.033,43,4.438,44,2.839,45,1.474,47,0.009,48,2.839,49,3.89,50,1.034,77,1.085,78,0.803,128,2.005,136,1.623,138,1.402,154,1.312,166,2.213,167,1.052,174,2.839,221,2.244,253,2.834,262,1.085,275,1.335,304,3.18,313,1.728,316,2.585,322,3.542,334,2.839,336,4.357,350,2.839,359,3.18,360,3.18,443,2.702,500,2.839,501,2.839,502,2.213,503,2.839,504,2.839,505,2.839,506,2.839,507,2.839,764,3.89,778,2.382,782,4.703,851,4.438,852,2.839,1392,3.542,1393,3.18,1394,5.065,1395,3.696,1396,3.696,1397,3.696,1398,5.065,1399,5.777,1400,3.696,1401,3.696,1402,3.696,1403,3.696,1404,3.696,1405,3.18,1406,3.696,1407,3.696,1408,3.696,1409,3.696,1410,3.696,1411,3.696,1412,3.696,1413,5.065,1414,3.696,1415,3.696,1416,3.696,1417,3.696,1418,5.065]],["title/modules/UsersModule.html",[51,1.227,64,2.242]],["body/modules/UsersModule.html",[3,0.243,4,0.243,5,0.218,16,0.018,19,0.436,20,0.597,21,0.243,22,0.014,23,0.014,26,3.008,47,0.011,51,2.076,53,1.968,54,2.2,55,2.487,56,2.487,57,2.2,58,2.804,59,3.135,64,4.485,68,3.204,69,1.773,70,2.487,72,3.008,95,3.823,96,2.335,97,3.109,110,4.243,136,1.048,182,4.243,397,3.823,443,3.522,849,2.865,1392,4.429,1405,3.823,1419,3.823,1420,3.823,1421,3.823,1422,4.445,1423,4.445,1424,4.445,1425,4.445,1426,4.445]],["title/injectables/UsersService.html",[198,0.42,443,1.75]],["body/injectables/UsersService.html",[3,0.122,4,0.122,5,0.109,8,0.175,9,0.904,10,0.929,11,1.927,15,0.44,16,0.019,17,1.041,19,0.367,20,0.299,21,0.122,22,0.008,23,0.008,28,0.645,36,0.637,38,0.856,47,0.005,50,1.079,77,1.132,78,0.837,89,2.115,90,0.766,96,1.833,97,1.558,128,1.97,136,1.504,138,1.631,154,0.904,167,1.879,186,3.136,198,0.391,199,0.664,201,1.97,209,1.041,221,2.189,222,1.632,238,1.334,249,1.334,254,1.711,262,1.435,275,2.347,278,1.558,292,3.404,348,1.917,370,1.392,375,2.249,376,2.249,440,3.304,442,1.917,443,1.632,464,2.44,465,1.917,466,1.711,476,1.917,493,1.917,494,1.917,496,1.042,497,1.917,500,2.68,501,2.68,502,2.089,503,2.68,504,2.68,505,2.68,506,2.68,507,2.68,513,4.821,519,1.711,521,1.558,522,1.953,523,1.711,531,2.575,536,4.186,539,4.658,551,1.917,552,1.711,558,3.002,559,1.917,560,3.002,561,1.917,582,1.334,612,1.953,639,3.404,750,2.724,762,1.334,764,2.68,786,3.738,849,1.436,957,1.436,1007,2.68,1427,1.917,1428,4.301,1429,4.301,1430,4.301,1431,4.301,1432,4.867,1433,3.489,1434,2.228,1435,2.228,1436,4.301,1437,3.489,1438,2.228,1439,2.228,1440,2.228,1441,4.867,1442,4.867,1443,2.228,1444,5.858,1445,3.489,1446,4.867,1447,2.228,1448,2.228,1449,2.228,1450,2.228,1451,3.489,1452,2.228,1453,2.228,1454,2.228,1455,2.228,1456,2.228,1457,2.228,1458,3.489,1459,2.228,1460,2.228,1461,2.228,1462,2.228,1463,2.228,1464,2.228,1465,2.228,1466,2.228,1467,3.489,1468,2.228,1469,1.917,1470,2.228,1471,2.228,1472,2.228,1473,2.228,1474,2.228,1475,3.489,1476,2.228,1477,3.489,1478,4.867,1479,2.228,1480,2.228,1481,2.228,1482,2.228,1483,2.228,1484,2.228,1485,3.489,1486,2.228,1487,3.489,1488,2.228]],["title/injectables/UsersSubscriber.html",[110,2.242,198,0.42]],["body/injectables/UsersSubscriber.html",[3,0.166,4,0.166,5,0.149,8,0.239,10,1.11,15,0.458,16,0.019,17,0.508,19,0.382,20,0.408,21,0.166,22,0.01,23,0.01,28,0.816,36,0.684,38,1.11,47,0.007,50,1.06,77,1.353,78,1,80,1.96,89,2.279,90,1.046,96,1.598,110,2.642,123,1.046,128,2.028,136,1.737,154,0.788,165,1.346,166,1.821,167,0.865,198,0.495,199,0.907,201,2.028,209,0.907,240,2.181,242,2.844,262,1.395,271,3.796,275,1.875,370,1.213,440,3.39,464,3.086,496,1.422,499,3.796,542,3.796,547,1.821,612,1.702,669,1.96,685,1.422,748,2.844,762,1.821,766,2.127,769,2.336,772,2.336,773,1.821,785,2.336,787,2.336,788,2.336,789,2.336,790,2.336,791,2.336,792,2.336,849,1.96,1319,2.336,1374,3.796,1375,3.796,1380,3.796,1383,2.616,1385,2.616,1386,2.616,1388,2.616,1489,2.616,1490,5.698,1491,4.413,1492,4.413,1493,3.041,1494,4.413,1495,6.511,1496,3.041,1497,4.413,1498,3.041,1499,3.041,1500,5.194,1501,4.413,1502,3.041,1503,4.413,1504,3.041,1505,4.413,1506,3.041,1507,4.413,1508,4.413,1509,4.413,1510,4.413,1511,3.041,1512,3.041,1513,3.041,1514,4.413,1515,3.041,1516,4.413,1517,3.041,1518,4.413,1519,3.041,1520,3.041,1521,3.041,1522,3.041]],["title/coverage.html",[1523,4.395]],["body/coverage.html",[0,2.582,1,1.636,5,0.124,6,1.776,7,2.965,15,0.428,16,0.018,22,0.009,23,0.009,24,2.453,25,1.776,27,2.184,41,1.52,47,0.016,57,1.91,65,1.636,66,1.636,67,1.636,93,1.776,100,1.776,110,1.52,136,0.91,154,0.658,186,1.421,198,0.805,200,2.184,225,6.68,297,2.184,302,1.776,303,2.184,310,1.776,320,1.776,327,1.776,330,1.776,337,1.776,340,1.334,345,1.421,382,1.636,383,1.636,395,1.776,398,1.636,420,1.95,422,2.184,423,2.184,434,2.184,443,1.187,474,1.95,478,1.95,562,1.95,563,2.184,576,1.95,596,1.776,639,1.776,640,2.184,641,3.265,666,1.776,667,2.184,683,1.636,716,2.184,717,2.184,746,1.52,761,1.95,782,1.776,783,2.184,784,2.184,844,1.776,845,2.965,850,1.776,856,1.52,861,1.95,879,2.184,892,2.184,893,2.184,903,1.636,904,1.95,905,1.95,911,2.184,935,1.776,936,2.184,948,2.184,954,1.776,956,1.636,957,1.636,958,2.184,959,2.965,973,1.95,983,2.184,1027,2.184,1029,2.184,1040,2.184,1043,2.184,1048,4.487,1071,1.95,1072,2.184,1105,1.776,1106,1.95,1109,1.776,1129,2.184,1130,2.184,1134,1.776,1135,2.965,1147,1.776,1166,2.184,1175,1.95,1176,1.95,1178,2.184,1187,1.776,1188,2.184,1233,2.184,1240,2.184,1261,1.95,1280,2.184,1295,1.95,1302,1.95,1316,1.95,1318,3.32,1392,1.776,1393,2.184,1427,2.184,1489,2.184,1523,2.184,1524,2.539,1525,2.539,1526,2.539,1527,5.61,1528,3.859,1529,5.443,1530,6.963,1531,2.184,1532,7.4,1533,2.184,1534,3.859,1535,7.026,1536,5.216,1537,3.859,1538,2.184,1539,5.61,1540,2.184,1541,2.184,1542,2.184,1543,2.184,1544,2.184,1545,2.184,1546,2.184,1547,2.184,1548,4.669,1549,2.539,1550,3.32,1551,2.539,1552,2.539,1553,2.184,1554,2.184,1555,2.539,1556,2.539,1557,2.184,1558,2.184,1559,2.184,1560,2.539,1561,2.184,1562,2.184,1563,3.32,1564,2.184,1565,2.184,1566,2.539,1567,2.539]],["title/dependencies.html",[54,2.229,1568,2.69]],["body/dependencies.html",[11,1.151,16,0.019,20,0.449,22,0.011,23,0.011,33,3.63,45,1.335,47,0.011,54,1.656,58,1.481,90,1.151,96,2.878,97,2.34,99,2.878,104,4.065,105,2.878,106,2.34,108,2.645,109,2.878,113,1.873,115,3.832,116,2.34,118,2.878,128,0.998,159,1.656,190,2.57,191,2.57,313,1.565,386,2.157,390,2.57,392,2.004,464,2.34,473,2.157,477,2.57,525,2.57,594,2.57,595,2.878,665,1.873,677,2.34,682,2.57,686,2.878,687,2.34,720,3.63,756,2.878,759,2.878,762,2.004,773,2.004,829,2.878,860,2.57,908,2.57,909,2.157,927,2.157,947,2.483,1019,4.208,1034,2.878,1050,2.878,1192,2.34,1201,2.878,1206,4.713,1207,2.878,1208,2.878,1210,2.878,1212,2.878,1213,4.713,1215,2.878,1217,2.878,1354,2.878,1569,3.346,1570,3.346,1571,3.346,1572,3.346,1573,5.479,1574,3.346,1575,3.346,1576,3.346,1577,3.346,1578,5.953,1579,4.726,1580,3.346,1581,3.346,1582,3.346,1583,3.346,1584,3.346,1585,3.346,1586,3.346,1587,3.346,1588,3.346,1589,3.346,1590,3.346,1591,2.878,1592,3.346,1593,3.346,1594,3.346,1595,5.953,1596,3.346,1597,3.346,1598,3.346,1599,4.726,1600,4.726,1601,3.346,1602,3.346,1603,3.346,1604,3.346,1605,3.346,1606,3.346,1607,3.346,1608,3.346,1609,3.346,1610,3.346,1611,3.346,1612,4.726,1613,3.346,1614,3.346,1615,4.726,1616,3.346,1617,3.346,1618,3.346,1619,3.346,1620,3.346,1621,3.346,1622,3.346,1623,3.346,1624,3.346,1625,3.346,1626,3.346,1627,3.346,1628,3.346,1629,4.726,1630,3.346,1631,3.346,1632,3.346,1633,3.346,1634,3.346,1635,3.346,1636,3.346,1637,3.346,1638,3.346,1639,3.346,1640,3.346,1641,3.346,1642,3.346,1643,3.346,1644,3.346,1645,3.346,1646,3.346,1647,3.346]],["title/miscellaneous/enumerations.html",[1648,1.643,1649,3.873]],["body/miscellaneous/enumerations.html",[8,0.347,16,0.018,22,0.013,23,0.013,69,2.272,136,1.343,138,2.161,204,4.377,240,3.236,334,4.377,674,3.985,677,3.985,748,3.672,750,3.189,947,2.994,951,4.377,956,3.672,1083,4.901,1084,4.901,1107,4.901,1192,3.985,1262,4.901,1319,3.389,1648,2.318,1649,3.795,1650,5.66,1651,5.698,1652,5.698,1653,4.412,1654,5.698,1655,4.412,1656,4.412,1657,5.698,1658,5.698,1659,5.698,1660,5.698,1661,4.412,1662,4.412,1663,5.698,1664,4.412,1665,5.698]],["title/miscellaneous/functions.html",[1648,1.643,1666,3.873]],["body/miscellaneous/functions.html",[8,0.407,10,1.107,15,0.456,16,0.017,17,1.133,22,0.015,23,0.015,38,1.107,57,3.643,77,1.349,78,0.998,80,3.334,222,2.944,1324,4.45,1540,4.45,1541,5.415,1542,5.415,1544,4.45,1545,5.415,1546,4.45,1547,4.45,1648,2.718,1666,4.45,1667,5.172,1668,5.172,1669,5.172,1670,5.172,1671,5.172,1672,6.295,1673,5.172,1674,6.295,1675,5.172]],["title/index.html",[8,0.246,277,2.69,1676,3.126]],["body/index.html",[16,0.016,22,0.016,23,0.016,34,5.144,35,4.594,1677,5.98,1678,5.98]],["title/modules.html",[53,2.262]],["body/modules.html",[16,0.015,22,0.015,23,0.015,52,3.747,53,2.372,63,3.453,64,3.208,182,3.208,853,3.747,899,3.747,989,5.532,993,6.384,1097,4.115,1257,4.115,1679,7.421,1680,7.421,1681,7.567,1682,6.43]],["title/overview.html",[1683,4.395]],["body/overview.html",[2,2.511,16,0.018,22,0.012,23,0.012,26,2.047,51,1.277,52,5.166,53,1.725,54,1.929,55,2.181,56,2.181,57,1.929,58,1.725,59,1.929,60,3.352,61,3.352,62,3.352,63,4.817,64,4.39,65,3.826,66,3.826,67,3.826,68,2.938,69,1.554,70,2.181,110,3.555,182,4.18,183,3.352,184,3.352,185,3.352,186,3.907,199,1.162,226,3.143,340,3.668,378,3.352,380,3.352,381,3.352,382,3.826,383,3.826,421,1.554,443,3.264,853,4.152,854,3.352,855,3.352,856,3.804,899,4.637,900,3.352,901,3.352,902,3.352,903,4.499,1175,2.993,1317,3.352,1337,3.352,1419,3.352,1420,3.352,1421,3.352,1683,3.352,1684,3.896,1685,3.896,1686,3.896,1687,3.896]],["title/properties.html",[9,1.166,1568,2.69]],["body/properties.html",[9,1.514,16,0.018,22,0.016,23,0.016,220,2.454,1056,5.027,1688,5.844,1689,5.844,1690,5.844,1691,5.844]],["title/miscellaneous/typealiases.html",[1648,1.643,1692,4.502]],["body/miscellaneous/typealiases.html",[8,0.409,15,0.526,16,0.017,22,0.015,23,0.015,39,6.087,474,4.853,522,2.912,576,4.853,591,4.475,592,3.996,593,4.475,954,4.419,956,4.072,957,4.072,1295,4.853,1302,4.853,1538,4.475,1553,4.475,1554,5.434,1557,4.475,1558,4.475,1559,5.434,1561,4.475,1562,5.434,1648,2.733,1650,3.996,1693,5.202,1694,5.202,1695,5.202,1696,5.202,1697,5.202]],["title/miscellaneous/variables.html",[1648,1.643,1698,3.873]],["body/miscellaneous/variables.html",[8,0.271,15,0.508,16,0.019,17,1.198,22,0.011,23,0.011,35,2.644,41,2.887,50,0.703,69,1.373,78,0.545,100,3.891,123,1.658,138,1.305,154,1.814,240,3.13,244,3.857,246,2.644,262,1.192,370,1.373,398,3.107,446,3.372,478,3.703,496,1.609,522,1.926,534,4.786,686,2.533,746,2.887,761,3.703,773,2.887,861,3.703,875,2.644,973,3.703,974,2.961,1105,3.372,1106,4.274,1261,4.274,1469,4.147,1529,2.961,1531,4.147,1533,2.961,1543,2.961,1550,2.961,1563,2.961,1564,4.147,1565,5.185,1591,2.961,1648,1.808,1650,5.378,1698,2.961,1699,4.82,1700,4.82,1701,3.442,1702,3.442,1703,3.442,1704,3.442,1705,3.442,1706,3.442,1707,3.442,1708,3.442,1709,3.442,1710,3.442,1711,3.442,1712,3.442,1713,3.442,1714,3.442,1715,3.442,1716,3.442,1717,3.442,1718,3.442,1719,3.442,1720,4.82,1721,4.82,1722,3.442,1723,3.442,1724,3.442,1725,3.442,1726,3.442,1727,3.442,1728,3.442,1729,3.442,1730,3.442]]],"invertedIndex":[["",{"_index":16,"title":{},"body":{"interfaces/ApiResponse.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AppRedisModule.html":{},"injectables/AppRedisService.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/AuthResponseDto.html":{},"injectables/AuthService.html":{},"classes/CatchEverythingFilter.html":{},"classes/ChangePasswordDto.html":{},"injectables/CloudinaryService.html":{},"injectables/CreateUserCommand.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserResponseDto.html":{},"modules/EmailModule.html":{},"classes/EmailService.html":{},"interfaces/ErrorResponse.html":{},"classes/ForgotPasswordDto.html":{},"classes/GetProfileResponseDto.html":{},"modules/HttpClientModule.html":{},"injectables/HttpClientService.html":{},"interfaces/IPaymentService.html":{},"interfaces/IStrorageService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"injectables/MorganMiddleware.html":{},"classes/PasswordResetEmailConsumer.html":{},"modules/PaymentModule.html":{},"classes/RefreshTokenDto.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"classes/ResetPasswordDto.html":{},"guards/RoleGuard.html":{},"injectables/S3Service.html":{},"injectables/SchemaService.html":{},"modules/StorageModule.html":{},"injectables/StripeService.html":{},"injectables/SuccessResponseInterceptor.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/UsersSubscriber.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":225,"title":{},"body":{"injectables/AppRedisService.html":{},"coverage.html":{}}}],["0.0.1",{"_index":1688,"title":{},"body":{"properties.html":{}}}],["0.1.13",{"_index":1641,"title":{},"body":{"dependencies.html":{}}}],["0.12.5",{"_index":1645,"title":{},"body":{"dependencies.html":{}}}],["0.14.1",{"_index":1619,"title":{},"body":{"dependencies.html":{}}}],["0.2.21",{"_index":1577,"title":{},"body":{"dependencies.html":{}}}],["0.203.0",{"_index":1599,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":1618,"title":{},"body":{"dependencies.html":{}}}],["0.6.0",{"_index":1625,"title":{},"body":{"dependencies.html":{}}}],["0.62.0",{"_index":1592,"title":{},"body":{"dependencies.html":{}}}],["0.7.0",{"_index":1635,"title":{},"body":{"dependencies.html":{}}}],["0.9.3",{"_index":1576,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":1532,"title":{},"body":{"coverage.html":{}}}],["0/13",{"_index":1549,"title":{},"body":{"coverage.html":{}}}],["0/14",{"_index":1555,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":1527,"title":{},"body":{"coverage.html":{}}}],["0/22",{"_index":1556,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":1535,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":1536,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":1548,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":1537,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":1528,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":1534,"title":{},"body":{"coverage.html":{}}}],["0123456789abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz!@#$%^&*()_",{"_index":1702,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1",{"_index":226,"title":{},"body":{"injectables/AppRedisService.html":{},"injectables/AuthService.html":{},"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginDto.html":{},"overview.html":{}}}],["1'})@isstring()@isnotempty()@matches(/^(?=.*[a",{"_index":644,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{}}}],["1'})@isstring()@isoptional()@transform",{"_index":804,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["1.0.0",{"_index":1615,"title":{},"body":{"dependencies.html":{}}}],["1.1.26",{"_index":1575,"title":{},"body":{"dependencies.html":{}}}],["1.10.0",{"_index":1612,"title":{},"body":{"dependencies.html":{}}}],["1.10.2",{"_index":1630,"title":{},"body":{"dependencies.html":{}}}],["1.2.1",{"_index":1621,"title":{},"body":{"dependencies.html":{}}}],["1.9.10",{"_index":1611,"title":{},"body":{"dependencies.html":{}}}],["1.9.93",{"_index":1631,"title":{},"body":{"dependencies.html":{}}}],["1/3",{"_index":1552,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":649,"title":{},"body":{"classes/ChangePasswordDto.html":{},"injectables/CreateUserCommand.html":{},"classes/CreateUserDto.html":{},"classes/ResetPasswordDto.html":{},"injectables/S3Service.html":{}}}],["10.0.0",{"_index":1578,"title":{},"body":{"dependencies.html":{}}}],["10.0.3",{"_index":1587,"title":{},"body":{"dependencies.html":{}}}],["10.2.0",{"_index":1585,"title":{},"body":{"dependencies.html":{}}}],["100",{"_index":1334,"title":{},"body":{"entities/User.html":{}}}],["11.0.3",{"_index":1583,"title":{},"body":{"dependencies.html":{}}}],["11.1.0",{"_index":1646,"title":{},"body":{"dependencies.html":{}}}],["123",{"_index":793,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["12345",{"_index":834,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["12345'})@isstring()@isoptional",{"_index":817,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["13",{"_index":1686,"title":{},"body":{"overview.html":{}}}],["18",{"_index":1685,"title":{},"body":{"overview.html":{}}}],["18.3.0",{"_index":1643,"title":{},"body":{"dependencies.html":{}}}],["1h",{"_index":1725,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1}m",{"_index":487,"title":{},"body":{"injectables/AuthService.html":{}}}],["2.0.1",{"_index":1595,"title":{},"body":{"dependencies.html":{}}}],["2.0.2",{"_index":1581,"title":{},"body":{"dependencies.html":{}}}],["2.2.4",{"_index":1609,"title":{},"body":{"dependencies.html":{}}}],["2.7.0",{"_index":1620,"title":{},"body":{"dependencies.html":{}}}],["20",{"_index":1361,"title":{},"body":{"entities/User.html":{}}}],["2000",{"_index":416,"title":{},"body":{"modules/AuthModule.html":{},"modules/PaymentModule.html":{}}}],["234567890",{"_index":839,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["234567890'})@isstring()@isoptional",{"_index":814,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["24",{"_index":1478,"title":{},"body":{"injectables/UsersService.html":{}}}],["255",{"_index":1349,"title":{},"body":{"entities/User.html":{}}}],["3",{"_index":1337,"title":{},"body":{"entities/User.html":{},"overview.html":{}}}],["3.0.0",{"_index":1626,"title":{},"body":{"dependencies.html":{}}}],["3.0.1",{"_index":1632,"title":{},"body":{"dependencies.html":{}}}],["3.0.3",{"_index":1638,"title":{},"body":{"dependencies.html":{}}}],["3.17.0",{"_index":1647,"title":{},"body":{"dependencies.html":{}}}],["3.18.0",{"_index":1628,"title":{},"body":{"dependencies.html":{}}}],["3.2.2",{"_index":1584,"title":{},"body":{"dependencies.html":{}}}],["3.840.0",{"_index":1571,"title":{},"body":{"dependencies.html":{}}}],["3.848.0",{"_index":1569,"title":{},"body":{"dependencies.html":{}}}],["3.850.0",{"_index":1570,"title":{},"body":{"dependencies.html":{}}}],["3/10",{"_index":1560,"title":{},"body":{"coverage.html":{}}}],["30",{"_index":1233,"title":{},"body":{"injectables/S3Service.html":{},"coverage.html":{}}}],["30m",{"_index":1726,"title":{},"body":{"miscellaneous/variables.html":{}}}],["33",{"_index":1551,"title":{},"body":{"coverage.html":{}}}],["4",{"_index":1687,"title":{},"body":{"overview.html":{}}}],["4.0.0",{"_index":1582,"title":{},"body":{"dependencies.html":{}}}],["4.0.1",{"_index":1636,"title":{},"body":{"dependencies.html":{}}}],["4.0.4",{"_index":1604,"title":{},"body":{"dependencies.html":{}}}],["4.1.2",{"_index":1617,"title":{},"body":{"dependencies.html":{}}}],["404",{"_index":1067,"title":{},"body":{"injectables/MorganMiddleware.html":{}}}],["5",{"_index":412,"title":{},"body":{"modules/AuthModule.html":{},"modules/PaymentModule.html":{}}}],["5.0.0",{"_index":1627,"title":{},"body":{"dependencies.html":{}}}],["5.0.2",{"_index":1607,"title":{},"body":{"dependencies.html":{}}}],["5.1.1",{"_index":1613,"title":{},"body":{"dependencies.html":{}}}],["5.1.2",{"_index":1605,"title":{},"body":{"dependencies.html":{}}}],["5.56.8",{"_index":1616,"title":{},"body":{"dependencies.html":{}}}],["500",{"_index":638,"title":{},"body":{"classes/CatchEverythingFilter.html":{},"entities/User.html":{}}}],["6.1.1",{"_index":1580,"title":{},"body":{"dependencies.html":{}}}],["6.12.0",{"_index":1573,"title":{},"body":{"dependencies.html":{}}}],["6.4.16",{"_index":1579,"title":{},"body":{"dependencies.html":{}}}],["60",{"_index":539,"title":{},"body":{"injectables/AuthService.html":{},"injectables/S3Service.html":{},"injectables/UsersService.html":{}}}],["7.0.5",{"_index":1634,"title":{},"body":{"dependencies.html":{}}}],["7.3.1",{"_index":1589,"title":{},"body":{"dependencies.html":{}}}],["7.8.1",{"_index":1642,"title":{},"body":{"dependencies.html":{}}}],["7d",{"_index":1727,"title":{},"body":{"miscellaneous/variables.html":{}}}],["8",{"_index":1684,"title":{},"body":{"overview.html":{}}}],["8.1.0",{"_index":1623,"title":{},"body":{"dependencies.html":{}}}],["_(ツ)_",{"_index":621,"title":{},"body":{"classes/CatchEverythingFilter.html":{}}}],["access",{"_index":325,"title":{},"body":{"controllers/AuthController.html":{},"classes/AuthResponseDto.html":{},"guards/RoleGuard.html":{}}}],["access_token",{"_index":356,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["accesskeyid",{"_index":1267,"title":{},"body":{"modules/StorageModule.html":{}}}],["accesstoken",{"_index":362,"title":{},"body":{"controllers/AuthController.html":{},"classes/AuthResponseDto.html":{}}}],["account",{"_index":1117,"title":{},"body":{"modules/PaymentModule.html":{}}}],["accounttest",{"_index":1120,"title":{},"body":{"modules/PaymentModule.html":{}}}],["active",{"_index":529,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["adapter",{"_index":162,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/EmailModule.html":{},"modules/PaymentModule.html":{}}}],["addr",{"_index":1055,"title":{},"body":{"injectables/MorganMiddleware.html":{}}}],["address",{"_index":785,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/User.html":{},"injectables/UsersSubscriber.html":{}}}],["admin",{"_index":1665,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["africa/lagos",{"_index":1662,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["agent",{"_index":1062,"title":{},"body":{"injectables/MorganMiddleware.html":{}}}],["alias",{"_index":1539,"title":{},"body":{"coverage.html":{}}}],["aliases",{"_index":1693,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["any).__helper?.__originalentitydata",{"_index":1519,"title":{},"body":{"injectables/UsersSubscriber.html":{}}}],["api_key",{"_index":691,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["api_secret",{"_index":693,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["apibody",{"_index":336,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["apikey",{"_index":1113,"title":{},"body":{"modules/PaymentModule.html":{}}}],["apioperation",{"_index":43,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["apiproperty",{"_index":433,"title":{},"body":{"classes/AuthResponseDto.html":{},"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserResponseDto.html":{},"classes/ForgotPasswordDto.html":{},"classes/GetProfileResponseDto.html":{},"classes/LoginDto.html":{},"classes/RefreshTokenDto.html":{},"classes/ResetPasswordDto.html":{}}}],["apiproperty({description",{"_index":424,"title":{},"body":{"classes/AuthResponseDto.html":{},"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserResponseDto.html":{},"classes/GetProfileResponseDto.html":{},"classes/LoginDto.html":{},"classes/RefreshTokenDto.html":{},"classes/ResetPasswordDto.html":{}}}],["apiproperty({example",{"_index":894,"title":{},"body":{"classes/ForgotPasswordDto.html":{}}}],["apiresponse",{"_index":1,"title":{"interfaces/ApiResponse.html":{}},"body":{"interfaces/ApiResponse.html":{},"controllers/AuthController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["apitags",{"_index":44,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["apitags('app",{"_index":46,"title":{},"body":{"controllers/AppController.html":{}}}],["apitags('auth",{"_index":351,"title":{},"body":{"controllers/AuthController.html":{}}}],["apitags('users",{"_index":1409,"title":{},"body":{"controllers/UsersController.html":{}}}],["app",{"_index":1675,"title":{},"body":{"miscellaneous/functions.html":{}}}],["app.controller",{"_index":84,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":85,"title":{},"body":{"modules/AppModule.html":{}}}],["app_guard",{"_index":385,"title":{},"body":{"modules/AuthModule.html":{}}}],["app_name",{"_index":1531,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["appcontroller",{"_index":25,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["apply",{"_index":173,"title":{},"body":{"modules/AppModule.html":{}}}],["applyrawbodyonlyto",{"_index":107,"title":{},"body":{"modules/AppModule.html":{}}}],["applyrawbodyonlyto(consumer",{"_index":168,"title":{},"body":{"modules/AppModule.html":{}}}],["appmodule",{"_index":52,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appredis",{"_index":202,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["appredismodule",{"_index":182,"title":{"modules/AppRedisModule.html":{}},"body":{"modules/AppRedisModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["appredisservice",{"_index":186,"title":{"injectables/AppRedisService.html":{}},"body":{"modules/AppRedisModule.html":{},"injectables/AppRedisService.html":{},"injectables/AuthService.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["appredisservice.name",{"_index":270,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["appservice",{"_index":65,"title":{"injectables/AppService.html":{}},"body":{"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["args",{"_index":271,"title":{},"body":{"injectables/AppRedisService.html":{},"injectables/UsersSubscriber.html":{}}}],["args.entity",{"_index":1508,"title":{},"body":{"injectables/UsersSubscriber.html":{}}}],["args.push('ex",{"_index":273,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["args.push('nx",{"_index":272,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["argumentshost",{"_index":577,"title":{},"body":{"classes/CatchEverythingFilter.html":{}}}],["array",{"_index":230,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["asecure",{"_index":1167,"title":{},"body":{"classes/ResetPasswordDto.html":{}}}],["async",{"_index":128,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRedisModule.html":{},"injectables/AppRedisService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CloudinaryService.html":{},"injectables/CreateUserCommand.html":{},"classes/EmailService.html":{},"injectables/HttpClientService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/PasswordResetEmailConsumer.html":{},"injectables/S3Service.html":{},"injectables/SchemaService.html":{},"injectables/StripeService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/UsersSubscriber.html":{},"dependencies.html":{}}}],["asynclocalstoragecontextmanager",{"_index":1707,"title":{},"body":{"miscellaneous/variables.html":{}}}],["attempts",{"_index":411,"title":{},"body":{"modules/AuthModule.html":{},"modules/PaymentModule.html":{}}}],["auth",{"_index":106,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/EmailModule.html":{},"dependencies.html":{}}}],["auth.controller",{"_index":387,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.guard",{"_index":339,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["auth.guard.ts",{"_index":959,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/LocalAuthGuard.html":{},"coverage.html":{}}}],["auth.guard.ts:11",{"_index":965,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["auth.guard.ts:16",{"_index":968,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["auth.guard.ts:27",{"_index":970,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["auth.jwt.refreshexpiresin",{"_index":490,"title":{},"body":{"injectables/AuthService.html":{}}}],["auth.jwt.refreshsecret",{"_index":492,"title":{},"body":{"injectables/AuthService.html":{}}}],["auth.service",{"_index":341,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/LocalStrategy.html":{}}}],["auth/decorators/public.decorator",{"_index":1406,"title":{},"body":{"controllers/UsersController.html":{}}}],["authcontroller",{"_index":302,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authenticated",{"_index":425,"title":{},"body":{"classes/AuthResponseDto.html":{}}}],["authguard",{"_index":972,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/LocalAuthGuard.html":{}}}],["authguard('jwt",{"_index":960,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authguard('local",{"_index":1028,"title":{},"body":{"injectables/LocalAuthGuard.html":{}}}],["authmodule",{"_index":63,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":1691,"title":{},"body":{"properties.html":{}}}],["authresponsedto",{"_index":420,"title":{"classes/AuthResponseDto.html":{}},"body":{"classes/AuthResponseDto.html":{},"coverage.html":{}}}],["authservice",{"_index":340,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["authtokens",{"_index":474,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["auto",{"_index":707,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["autoloadentities",{"_index":140,"title":{},"body":{"modules/AppModule.html":{}}}],["available",{"_index":989,"title":{},"body":{"injectables/JwtStrategy.html":{},"modules.html":{}}}],["avatar",{"_index":1319,"title":{},"body":{"entities/User.html":{},"injectables/UsersSubscriber.html":{},"miscellaneous/enumerations.html":{}}}],["avatars",{"_index":1664,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["await",{"_index":275,"title":{},"body":{"injectables/AppRedisService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CreateUserCommand.html":{},"classes/EmailService.html":{},"injectables/HttpClientService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/PasswordResetEmailConsumer.html":{},"injectables/S3Service.html":{},"injectables/SchemaService.html":{},"injectables/StripeService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/UsersSubscriber.html":{}}}],["aws",{"_index":1206,"title":{},"body":{"injectables/S3Service.html":{},"dependencies.html":{}}}],["aws.s3.secretaccesskey",{"_index":1271,"title":{},"body":{"modules/StorageModule.html":{}}}],["axios",{"_index":594,"title":{},"body":{"classes/CatchEverythingFilter.html":{},"injectables/HttpClientService.html":{},"dependencies.html":{}}}],["axioserror",{"_index":593,"title":{},"body":{"classes/CatchEverythingFilter.html":{},"miscellaneous/typealiases.html":{}}}],["axiosrequestconfig",{"_index":919,"title":{},"body":{"injectables/HttpClientService.html":{}}}],["b3",{"_index":1601,"title":{},"body":{"dependencies.html":{}}}],["b3propagator",{"_index":1714,"title":{},"body":{"miscellaneous/variables.html":{}}}],["backoff",{"_index":413,"title":{},"body":{"modules/AuthModule.html":{},"modules/PaymentModule.html":{}}}],["badrequestexception",{"_index":465,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["badrequestexception('malformed",{"_index":527,"title":{},"body":{"injectables/AuthService.html":{}}}],["badrequestexception('passwords",{"_index":551,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["badrequestexception('refresh",{"_index":517,"title":{},"body":{"injectables/AuthService.html":{}}}],["basic",{"_index":105,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["basicauth",{"_index":103,"title":{},"body":{"modules/AppModule.html":{}}}],["bcrypt",{"_index":464,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{},"injectables/UsersSubscriber.html":{},"dependencies.html":{}}}],["bcrypt.compare(pass",{"_index":498,"title":{},"body":{"injectables/AuthService.html":{}}}],["bcrypt.gensalt(this.saltrounds",{"_index":559,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["bcrypt.hash(newpassword",{"_index":561,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["bcrypt.hash(user.password",{"_index":1522,"title":{},"body":{"injectables/UsersSubscriber.html":{}}}],["beforecreate",{"_index":1374,"title":{},"body":{"entities/User.html":{},"injectables/UsersSubscriber.html":{}}}],["beforecreate(args",{"_index":1494,"title":{},"body":{"injectables/UsersSubscriber.html":{}}}],["beforeupdate",{"_index":1375,"title":{},"body":{"entities/User.html":{},"injectables/UsersSubscriber.html":{}}}],["beforeupdate(args",{"_index":1497,"title":{},"body":{"injectables/UsersSubscriber.html":{}}}],["blacklisted",{"_index":518,"title":{},"body":{"injectables/AuthService.html":{}}}],["board/api",{"_index":1572,"title":{},"body":{"dependencies.html":{}}}],["board/api/bullmqadapter",{"_index":401,"title":{},"body":{"modules/AuthModule.html":{},"modules/PaymentModule.html":{}}}],["board/express",{"_index":118,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["board/nestjs",{"_index":116,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PaymentModule.html":{},"dependencies.html":{}}}],["body",{"_index":316,"title":{},"body":{"controllers/AuthController.html":{},"classes/CatchEverythingFilter.html":{},"injectables/S3Service.html":{},"controllers/UsersController.html":{}}}],["boilerplate",{"_index":35,"title":{},"body":{"controllers/AppController.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["boolean",{"_index":242,"title":{},"body":{"injectables/AppRedisService.html":{},"classes/CreateUserDto.html":{},"guards/RoleGuard.html":{},"entities/User.html":{},"injectables/UsersSubscriber.html":{}}}],["bootstrap",{"_index":57,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRedisModule.html":{},"modules/AuthModule.html":{},"modules/EmailModule.html":{},"modules/HttpClientModule.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["browse",{"_index":1681,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1679,"title":{},"body":{"modules.html":{}}}],["bucket",{"_index":1225,"title":{},"body":{"injectables/S3Service.html":{}}}],["buffer",{"_index":1614,"title":{},"body":{"dependencies.html":{}}}],["bull",{"_index":115,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PaymentModule.html":{},"dependencies.html":{}}}],["bullboardmodule",{"_index":114,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PaymentModule.html":{}}}],["bullboardmodule.forfeature",{"_index":417,"title":{},"body":{"modules/AuthModule.html":{},"modules/PaymentModule.html":{}}}],["bullboardmodule.forroot",{"_index":161,"title":{},"body":{"modules/AppModule.html":{}}}],["bullmodule",{"_index":112,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PaymentModule.html":{}}}],["bullmodule.forrootasync",{"_index":157,"title":{},"body":{"modules/AppModule.html":{}}}],["bullmodule.registerqueue",{"_index":409,"title":{},"body":{"modules/AuthModule.html":{},"modules/PaymentModule.html":{}}}],["bullmq",{"_index":473,"title":{},"body":{"injectables/AuthService.html":{},"classes/PasswordResetEmailConsumer.html":{},"modules/PaymentModule.html":{},"injectables/StripeService.html":{},"dependencies.html":{}}}],["bullmqadapter",{"_index":400,"title":{},"body":{"modules/AuthModule.html":{},"modules/PaymentModule.html":{}}}],["bytes",{"_index":698,"title":{},"body":{"injectables/CloudinaryService.html":{},"injectables/S3Service.html":{}}}],["cache",{"_index":125,"title":{},"body":{"modules/AppModule.html":{}}}],["cached",{"_index":1467,"title":{},"body":{"injectables/UsersService.html":{}}}],["cachekey",{"_index":513,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["callhandler",{"_index":1139,"title":{},"body":{"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/SuccessResponseInterceptor.html":{}}}],["canactivate",{"_index":961,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/RoleGuard.html":{}}}],["canactivate(context",{"_index":966,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/RoleGuard.html":{}}}],["catch",{"_index":521,"title":{},"body":{"injectables/AuthService.html":{},"classes/CatchEverythingFilter.html":{},"injectables/CreateUserCommand.html":{},"injectables/UsersService.html":{}}}],["catch(exception",{"_index":575,"title":{},"body":{"classes/CatchEverythingFilter.html":{}}}],["catcheverythingfilter",{"_index":562,"title":{"classes/CatchEverythingFilter.html":{}},"body":{"classes/CatchEverythingFilter.html":{},"coverage.html":{}}}],["catcheverythingfilter.name",{"_index":574,"title":{},"body":{"classes/CatchEverythingFilter.html":{}}}],["category=${filecategory",{"_index":699,"title":{},"body":{"injectables/CloudinaryService.html":{},"injectables/S3Service.html":{}}}],["caught",{"_index":632,"title":{},"body":{"classes/CatchEverythingFilter.html":{}}}],["chalk",{"_index":759,"title":{},"body":{"injectables/CreateUserCommand.html":{},"dependencies.html":{}}}],["chalk.red.bold",{"_index":780,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["challenge",{"_index":177,"title":{},"body":{"modules/AppModule.html":{}}}],["change",{"_index":1332,"title":{},"body":{"entities/User.html":{}}}],["changepassword",{"_index":786,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/User.html":{},"injectables/UsersService.html":{}}}],["changepassword(userid",{"_index":1434,"title":{},"body":{"injectables/UsersService.html":{}}}],["changepassworddto",{"_index":639,"title":{"classes/ChangePasswordDto.html":{}},"body":{"classes/ChangePasswordDto.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["characters",{"_index":650,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/ResetPasswordDto.html":{}}}],["checking",{"_index":290,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["checkout",{"_index":1295,"title":{},"body":{"injectables/StripeService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["city",{"_index":787,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/User.html":{},"injectables/UsersSubscriber.html":{}}}],["class",{"_index":47,"title":{"classes/AuthResponseDto.html":{},"classes/CatchEverythingFilter.html":{},"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserResponseDto.html":{},"classes/EmailService.html":{},"classes/ForgotPasswordDto.html":{},"classes/GetProfileResponseDto.html":{},"classes/LoginDto.html":{},"classes/PasswordResetEmailConsumer.html":{},"classes/RefreshTokenDto.html":{},"classes/ResetPasswordDto.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AppRedisModule.html":{},"injectables/AppRedisService.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/AuthResponseDto.html":{},"injectables/AuthService.html":{},"classes/CatchEverythingFilter.html":{},"classes/ChangePasswordDto.html":{},"injectables/CloudinaryService.html":{},"injectables/CreateUserCommand.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserResponseDto.html":{},"modules/EmailModule.html":{},"classes/EmailService.html":{},"classes/ForgotPasswordDto.html":{},"classes/GetProfileResponseDto.html":{},"modules/HttpClientModule.html":{},"injectables/HttpClientService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"injectables/MorganMiddleware.html":{},"classes/PasswordResetEmailConsumer.html":{},"modules/PaymentModule.html":{},"classes/RefreshTokenDto.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"classes/ResetPasswordDto.html":{},"guards/RoleGuard.html":{},"injectables/S3Service.html":{},"injectables/SchemaService.html":{},"modules/StorageModule.html":{},"injectables/StripeService.html":{},"injectables/SuccessResponseInterceptor.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/UsersSubscriber.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":421,"title":{},"body":{"classes/AuthResponseDto.html":{},"classes/CatchEverythingFilter.html":{},"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserResponseDto.html":{},"classes/EmailService.html":{},"classes/ForgotPasswordDto.html":{},"classes/GetProfileResponseDto.html":{},"classes/LoginDto.html":{},"classes/PasswordResetEmailConsumer.html":{},"classes/RefreshTokenDto.html":{},"classes/ResetPasswordDto.html":{},"overview.html":{}}}],["cleaned",{"_index":837,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["client.module.ts",{"_index":906,"title":{},"body":{"modules/HttpClientModule.html":{}}}],["client.service",{"_index":910,"title":{},"body":{"modules/HttpClientModule.html":{}}}],["client.service.ts",{"_index":911,"title":{},"body":{"injectables/HttpClientService.html":{},"coverage.html":{}}}],["client.service.ts:10",{"_index":923,"title":{},"body":{"injectables/HttpClientService.html":{}}}],["client.service.ts:11",{"_index":917,"title":{},"body":{"injectables/HttpClientService.html":{}}}],["client.service.ts:21",{"_index":920,"title":{},"body":{"injectables/HttpClientService.html":{}}}],["client/http",{"_index":905,"title":{},"body":{"modules/HttpClientModule.html":{},"injectables/HttpClientService.html":{},"coverage.html":{}}}],["cloud_name",{"_index":689,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["cloudinary",{"_index":677,"title":{},"body":{"injectables/CloudinaryService.html":{},"interfaces/IStrorageService.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{}}}],["cloudinary.config",{"_index":688,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["cloudinary.service",{"_index":1260,"title":{},"body":{"modules/StorageModule.html":{}}}],["cloudinary.uploader.upload_stream",{"_index":703,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["cloudinaryservice",{"_index":666,"title":{"injectables/CloudinaryService.html":{}},"body":{"injectables/CloudinaryService.html":{},"modules/StorageModule.html":{},"coverage.html":{}}}],["cloudinaryservice(configservice",{"_index":1275,"title":{},"body":{"modules/StorageModule.html":{}}}],["cloudinaryservice.name",{"_index":700,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["cluster_appmodule",{"_index":60,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":62,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":61,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appredismodule",{"_index":183,"title":{},"body":{"modules/AppRedisModule.html":{},"overview.html":{}}}],["cluster_appredismodule_exports",{"_index":184,"title":{},"body":{"modules/AppRedisModule.html":{},"overview.html":{}}}],["cluster_appredismodule_providers",{"_index":185,"title":{},"body":{"modules/AppRedisModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":378,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":381,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":379,"title":{},"body":{"modules/AuthModule.html":{}}}],["cluster_authmodule_providers",{"_index":380,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_emailmodule",{"_index":854,"title":{},"body":{"modules/EmailModule.html":{},"overview.html":{}}}],["cluster_emailmodule_exports",{"_index":855,"title":{},"body":{"modules/EmailModule.html":{},"overview.html":{}}}],["cluster_httpclientmodule",{"_index":900,"title":{},"body":{"modules/HttpClientModule.html":{},"overview.html":{}}}],["cluster_httpclientmodule_exports",{"_index":901,"title":{},"body":{"modules/HttpClientModule.html":{},"overview.html":{}}}],["cluster_httpclientmodule_providers",{"_index":902,"title":{},"body":{"modules/HttpClientModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":1419,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_exports",{"_index":1421,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_imports",{"_index":1422,"title":{},"body":{"modules/UsersModule.html":{}}}],["cluster_usersmodule_providers",{"_index":1420,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["code",{"_index":803,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/User.html":{}}}],["command",{"_index":755,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["commander",{"_index":756,"title":{},"body":{"injectables/CreateUserCommand.html":{},"dependencies.html":{}}}],["commandrunner",{"_index":719,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["commands/create",{"_index":119,"title":{},"body":{"modules/AppModule.html":{}}}],["comment",{"_index":1326,"title":{},"body":{"entities/User.html":{}}}],["common/constants",{"_index":101,"title":{},"body":{"modules/AppModule.html":{},"injectables/SchemaService.html":{}}}],["common/middlewares/morgan.middleware",{"_index":94,"title":{},"body":{"modules/AppModule.html":{}}}],["compare",{"_index":998,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["compodoc/compodoc",{"_index":1574,"title":{},"body":{"dependencies.html":{}}}],["compositepropagator",{"_index":1709,"title":{},"body":{"miscellaneous/variables.html":{}}}],["concurrency",{"_index":1086,"title":{},"body":{"classes/PasswordResetEmailConsumer.html":{}}}],["config",{"_index":195,"title":{},"body":{"modules/AppRedisModule.html":{},"modules/StorageModule.html":{}}}],["config/index",{"_index":87,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule",{"_index":88,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule.forroot",{"_index":121,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":89,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRedisModule.html":{},"injectables/AppRedisService.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CloudinaryService.html":{},"modules/EmailModule.html":{},"injectables/JwtStrategy.html":{},"modules/PaymentModule.html":{},"injectables/S3Service.html":{},"injectables/SchemaService.html":{},"modules/StorageModule.html":{},"injectables/StripeService.html":{},"injectables/UsersService.html":{},"injectables/UsersSubscriber.html":{}}}],["configservice.get",{"_index":1270,"title":{},"body":{"modules/StorageModule.html":{}}}],["configservice.get('auth.jwt.expiresin",{"_index":408,"title":{},"body":{"modules/AuthModule.html":{}}}],["configservice.get('auth.jwt.secret",{"_index":405,"title":{},"body":{"modules/AuthModule.html":{}}}],["configservice.get('aws.s3.accesskeyid",{"_index":1268,"title":{},"body":{"modules/StorageModule.html":{}}}],["configservice.get('aws.s3.region",{"_index":1272,"title":{},"body":{"modules/StorageModule.html":{}}}],["configservice.getorthrow",{"_index":1118,"title":{},"body":{"modules/PaymentModule.html":{}}}],["configservice.getorthrow('auth.jwt.secret",{"_index":1025,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["configservice.getorthrow('db.host",{"_index":133,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.getorthrow('db.logging",{"_index":152,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.getorthrow('db.name",{"_index":131,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.getorthrow('db.password",{"_index":139,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.getorthrow('db.pool.max",{"_index":147,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.getorthrow('db.pool.min",{"_index":145,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.getorthrow('db.port",{"_index":135,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.getorthrow('db.username",{"_index":137,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.getorthrow('driver.payment",{"_index":1126,"title":{},"body":{"modules/PaymentModule.html":{}}}],["configservice.getorthrow('driver.storage",{"_index":1273,"title":{},"body":{"modules/StorageModule.html":{}}}],["configservice.getorthrow('nodeenv",{"_index":142,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.getorthrow('redis.namespace",{"_index":197,"title":{},"body":{"modules/AppRedisModule.html":{}}}],["configservice.getorthrow('redis.url",{"_index":160,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRedisModule.html":{}}}],["configservice.getorthrow('smtp.auth.pass",{"_index":872,"title":{},"body":{"modules/EmailModule.html":{}}}],["configservice.getorthrow('smtp.auth.user",{"_index":871,"title":{},"body":{"modules/EmailModule.html":{}}}],["configservice.getorthrow('smtp.host",{"_index":867,"title":{},"body":{"modules/EmailModule.html":{}}}],["configservice.getorthrow('smtp.port",{"_index":868,"title":{},"body":{"modules/EmailModule.html":{}}}],["configservice.getorthrow('smtp.secure",{"_index":870,"title":{},"body":{"modules/EmailModule.html":{}}}],["configservice.getorthrow('stripe.secretkey",{"_index":1114,"title":{},"body":{"modules/PaymentModule.html":{}}}],["configuration",{"_index":86,"title":{},"body":{"modules/AppModule.html":{}}}],["configure",{"_index":73,"title":{},"body":{"modules/AppModule.html":{}}}],["configure(consumer",{"_index":74,"title":{},"body":{"modules/AppModule.html":{}}}],["confirmation",{"_index":642,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/ResetPasswordDto.html":{}}}],["confirmpassword",{"_index":376,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ChangePasswordDto.html":{},"classes/ResetPasswordDto.html":{},"injectables/UsersService.html":{}}}],["connect",{"_index":1660,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["connection",{"_index":158,"title":{},"body":{"modules/AppModule.html":{}}}],["console.error",{"_index":779,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["console.log('prometheus",{"_index":1717,"title":{},"body":{"miscellaneous/variables.html":{}}}],["console.log(chalk.green.bold",{"_index":777,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["const",{"_index":262,"title":{},"body":{"injectables/AppRedisService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CatchEverythingFilter.html":{},"injectables/CloudinaryService.html":{},"injectables/CreateUserCommand.html":{},"classes/CreateUserDto.html":{},"injectables/HttpClientService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/MorganMiddleware.html":{},"classes/PasswordResetEmailConsumer.html":{},"modules/PaymentModule.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"guards/RoleGuard.html":{},"injectables/S3Service.html":{},"injectables/SchemaService.html":{},"modules/StorageModule.html":{},"injectables/StripeService.html":{},"injectables/SuccessResponseInterceptor.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/UsersSubscriber.html":{},"miscellaneous/variables.html":{}}}],["constructor",{"_index":209,"title":{},"body":{"injectables/AppRedisService.html":{},"injectables/AuthService.html":{},"classes/CatchEverythingFilter.html":{},"injectables/CloudinaryService.html":{},"injectables/CreateUserCommand.html":{},"classes/EmailService.html":{},"injectables/HttpClientService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/MorganMiddleware.html":{},"classes/PasswordResetEmailConsumer.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"guards/RoleGuard.html":{},"injectables/S3Service.html":{},"injectables/SchemaService.html":{},"injectables/StripeService.html":{},"injectables/UsersService.html":{},"injectables/UsersSubscriber.html":{}}}],["constructor(@inject(logger",{"_index":1051,"title":{},"body":{"injectables/MorganMiddleware.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/SuccessResponseInterceptor.html":{}}}],["constructor(appredisservice",{"_index":442,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["constructor(authservice",{"_index":1030,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["constructor(configservice",{"_index":669,"title":{},"body":{"injectables/CloudinaryService.html":{},"injectables/JwtStrategy.html":{},"injectables/S3Service.html":{},"injectables/StripeService.html":{},"injectables/UsersSubscriber.html":{}}}],["constructor(em",{"_index":726,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["constructor(emailservice",{"_index":1074,"title":{},"body":{"classes/PasswordResetEmailConsumer.html":{}}}],["constructor(httpadapterhost",{"_index":571,"title":{},"body":{"classes/CatchEverythingFilter.html":{}}}],["constructor(httpservice",{"_index":915,"title":{},"body":{"injectables/HttpClientService.html":{}}}],["constructor(loggerservice",{"_index":210,"title":{},"body":{"injectables/AppRedisService.html":{},"injectables/MorganMiddleware.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{}}}],["constructor(mailerservice",{"_index":881,"title":{},"body":{"classes/EmailService.html":{}}}],["constructor(orm",{"_index":1242,"title":{},"body":{"injectables/SchemaService.html":{}}}],["constructor(private",{"_index":166,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/JwtAuthGuard.html":{},"guards/RoleGuard.html":{},"controllers/UsersController.html":{},"injectables/UsersSubscriber.html":{}}}],["constructor(reflector",{"_index":963,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/RoleGuard.html":{}}}],["consumer",{"_index":79,"title":{},"body":{"modules/AppModule.html":{}}}],["consumer.apply(morganmiddleware).forroutes",{"_index":181,"title":{},"body":{"modules/AppModule.html":{}}}],["contenttype",{"_index":1227,"title":{},"body":{"injectables/S3Service.html":{}}}],["context",{"_index":886,"title":{},"body":{"classes/EmailService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"guards/RoleGuard.html":{},"injectables/SuccessResponseInterceptor.html":{}}}],["context.getclass",{"_index":977,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["context.gethandler",{"_index":976,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/RoleGuard.html":{}}}],["context.gettype",{"_index":1149,"title":{},"body":{"injectables/RequestBodyAndResponseInterceptor.html":{},"guards/RoleGuard.html":{},"injectables/SuccessResponseInterceptor.html":{}}}],["context.switchtohttp().getrequest",{"_index":1163,"title":{},"body":{"injectables/RequestBodyAndResponseInterceptor.html":{},"guards/RoleGuard.html":{},"injectables/SuccessResponseInterceptor.html":{}}}],["context.switchtohttp().getresponse",{"_index":1154,"title":{},"body":{"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/SuccessResponseInterceptor.html":{}}}],["contextmanager",{"_index":1706,"title":{},"body":{"miscellaneous/variables.html":{}}}],["contexttype",{"_index":1148,"title":{},"body":{"injectables/RequestBodyAndResponseInterceptor.html":{},"guards/RoleGuard.html":{},"injectables/SuccessResponseInterceptor.html":{}}}],["controller",{"_index":24,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/JwtStrategy.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":352,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('users",{"_index":1410,"title":{},"body":{"controllers/UsersController.html":{}}}],["controllers",{"_index":26,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"modules/EmailModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["country",{"_index":788,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/User.html":{},"injectables/UsersSubscriber.html":{}}}],["countrycode",{"_index":789,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/User.html":{},"injectables/UsersSubscriber.html":{}}}],["coverage",{"_index":1523,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":764,"title":{},"body":{"injectables/CreateUserCommand.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["create(@body",{"_index":1412,"title":{},"body":{"controllers/UsersController.html":{}}}],["create(user",{"_index":1395,"title":{},"body":{"controllers/UsersController.html":{}}}],["create(userdata",{"_index":1437,"title":{},"body":{"injectables/UsersService.html":{}}}],["create:user",{"_index":763,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["createcheckoutsession",{"_index":937,"title":{},"body":{"interfaces/IPaymentService.html":{},"injectables/StripeService.html":{}}}],["createcheckoutsession(params",{"_index":939,"title":{},"body":{"interfaces/IPaymentService.html":{},"injectables/StripeService.html":{}}}],["created",{"_index":778,"title":{},"body":{"injectables/CreateUserCommand.html":{},"classes/CreateUserResponseDto.html":{},"classes/GetProfileResponseDto.html":{},"injectables/StripeService.html":{},"controllers/UsersController.html":{}}}],["createdat",{"_index":1320,"title":{},"body":{"entities/User.html":{}}}],["createpaymentintent",{"_index":938,"title":{},"body":{"interfaces/IPaymentService.html":{},"injectables/StripeService.html":{}}}],["createpaymentintent(params",{"_index":944,"title":{},"body":{"interfaces/IPaymentService.html":{},"injectables/StripeService.html":{}}}],["createpresignedurlwithoutclient",{"_index":949,"title":{},"body":{"interfaces/IStrorageService.html":{},"injectables/S3Service.html":{}}}],["createpresignedurlwithoutclient(key",{"_index":950,"title":{},"body":{"interfaces/IStrorageService.html":{},"injectables/S3Service.html":{}}}],["createusercommand",{"_index":66,"title":{"injectables/CreateUserCommand.html":{}},"body":{"modules/AppModule.html":{},"injectables/CreateUserCommand.html":{},"coverage.html":{},"overview.html":{}}}],["createuserdto",{"_index":782,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/CreateUserDto.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["createuserresponsedto",{"_index":844,"title":{"classes/CreateUserResponseDto.html":{}},"body":{"classes/CreateUserResponseDto.html":{},"classes/GetProfileResponseDto.html":{},"coverage.html":{}}}],["creating",{"_index":1294,"title":{},"body":{"injectables/StripeService.html":{}}}],["creation",{"_index":1344,"title":{},"body":{"entities/User.html":{}}}],["credentials",{"_index":1037,"title":{},"body":{"injectables/LocalStrategy.html":{},"injectables/S3Service.html":{},"modules/StorageModule.html":{}}}],["ctx",{"_index":600,"title":{},"body":{"classes/CatchEverythingFilter.html":{}}}],["ctx.getrequest",{"_index":602,"title":{},"body":{"classes/CatchEverythingFilter.html":{}}}],["ctx.getresponse",{"_index":604,"title":{},"body":{"classes/CatchEverythingFilter.html":{}}}],["current_timestamp",{"_index":1343,"title":{},"body":{"entities/User.html":{}}}],["currently",{"_index":1012,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["customalphabet",{"_index":760,"title":{},"body":{"injectables/CreateUserCommand.html":{},"injectables/S3Service.html":{}}}],["customalphabet(hexadecimallowercase",{"_index":1196,"title":{},"body":{"injectables/S3Service.html":{}}}],["customalphabet(password_character_set",{"_index":754,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["data",{"_index":11,"title":{},"body":{"interfaces/ApiResponse.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/CloudinaryService.html":{},"classes/CreateUserResponseDto.html":{},"classes/GetProfileResponseDto.html":{},"injectables/HttpClientService.html":{},"interfaces/IStrorageService.html":{},"classes/PasswordResetEmailConsumer.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/S3Service.html":{},"injectables/StripeService.html":{},"injectables/SuccessResponseInterceptor.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["data.id",{"_index":1480,"title":{},"body":{"injectables/UsersService.html":{}}}],["data.object",{"_index":1305,"title":{},"body":{"injectables/StripeService.html":{}}}],["data?.email",{"_index":1090,"title":{},"body":{"classes/PasswordResetEmailConsumer.html":{}}}],["data?.firstname",{"_index":1095,"title":{},"body":{"classes/PasswordResetEmailConsumer.html":{}}}],["data?.reseturl",{"_index":1094,"title":{},"body":{"classes/PasswordResetEmailConsumer.html":{}}}],["database",{"_index":1253,"title":{},"body":{"injectables/SchemaService.html":{}}}],["date",{"_index":1340,"title":{},"body":{"entities/User.html":{}}}],["date().toisostring",{"_index":630,"title":{},"body":{"classes/CatchEverythingFilter.html":{}}}],["dbname",{"_index":130,"title":{},"body":{"modules/AppModule.html":{}}}],["debug",{"_index":151,"title":{},"body":{"modules/AppModule.html":{}}}],["declarations",{"_index":56,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRedisModule.html":{},"modules/AuthModule.html":{},"modules/EmailModule.html":{},"modules/HttpClientModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["decorators",{"_index":30,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/AuthResponseDto.html":{},"classes/ChangePasswordDto.html":{},"injectables/CreateUserCommand.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserResponseDto.html":{},"classes/ForgotPasswordDto.html":{},"classes/GetProfileResponseDto.html":{},"classes/LoginDto.html":{},"modules/PaymentModule.html":{},"classes/RefreshTokenDto.html":{},"classes/ResetPasswordDto.html":{},"guards/RoleGuard.html":{},"injectables/StripeService.html":{},"entities/User.html":{},"controllers/UsersController.html":{}}}],["decorators/public.decorator",{"_index":342,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtAuthGuard.html":{}}}],["decrement",{"_index":203,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["decrement(key",{"_index":214,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["default",{"_index":244,"title":{},"body":{"injectables/AppRedisService.html":{},"classes/CatchEverythingFilter.html":{},"injectables/CreateUserCommand.html":{},"injectables/HttpClientService.html":{},"injectables/S3Service.html":{},"injectables/SchemaService.html":{},"entities/User.html":{},"miscellaneous/variables.html":{}}}],["defaultjoboptions",{"_index":410,"title":{},"body":{"modules/AuthModule.html":{},"modules/PaymentModule.html":{}}}],["defaultraw",{"_index":1342,"title":{},"body":{"entities/User.html":{}}}],["defaults",{"_index":873,"title":{},"body":{"modules/EmailModule.html":{}}}],["defined",{"_index":36,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppRedisService.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthResponseDto.html":{},"injectables/AuthService.html":{},"classes/CatchEverythingFilter.html":{},"classes/ChangePasswordDto.html":{},"injectables/CloudinaryService.html":{},"injectables/CreateUserCommand.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserResponseDto.html":{},"classes/EmailService.html":{},"classes/ForgotPasswordDto.html":{},"classes/GetProfileResponseDto.html":{},"injectables/HttpClientService.html":{},"interfaces/IPaymentService.html":{},"interfaces/IStrorageService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"injectables/MorganMiddleware.html":{},"classes/PasswordResetEmailConsumer.html":{},"modules/PaymentModule.html":{},"classes/RefreshTokenDto.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"classes/ResetPasswordDto.html":{},"guards/RoleGuard.html":{},"injectables/S3Service.html":{},"injectables/SchemaService.html":{},"modules/StorageModule.html":{},"injectables/StripeService.html":{},"injectables/SuccessResponseInterceptor.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/UsersSubscriber.html":{}}}],["delay",{"_index":415,"title":{},"body":{"modules/AuthModule.html":{},"modules/PaymentModule.html":{}}}],["delete",{"_index":204,"title":{},"body":{"injectables/AppRedisService.html":{},"entities/User.html":{},"miscellaneous/enumerations.html":{}}}],["delete(key",{"_index":218,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["deleted",{"_index":224,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["deletedat",{"_index":1321,"title":{},"body":{"entities/User.html":{}}}],["deletemany",{"_index":205,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["deletemany(keys",{"_index":227,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["deleting",{"_index":294,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["dependencies",{"_index":54,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AppRedisModule.html":{},"modules/AuthModule.html":{},"modules/EmailModule.html":{},"modules/HttpClientModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":220,"title":{},"body":{"injectables/AppRedisService.html":{},"controllers/AuthController.html":{},"classes/AuthResponseDto.html":{},"classes/ChangePasswordDto.html":{},"injectables/CreateUserCommand.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserResponseDto.html":{},"classes/GetProfileResponseDto.html":{},"classes/LoginDto.html":{},"classes/RefreshTokenDto.html":{},"classes/ResetPasswordDto.html":{},"properties.html":{}}}],["details",{"_index":1006,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["dictionary",{"_index":1201,"title":{},"body":{"injectables/S3Service.html":{},"dependencies.html":{}}}],["dir",{"_index":876,"title":{},"body":{"modules/EmailModule.html":{}}}],["disable",{"_index":501,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["document",{"_index":1000,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["documentation",{"_index":1524,"title":{},"body":{"coverage.html":{}}}],["doe",{"_index":832,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["doe'})@isstring()@isnotempty",{"_index":810,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["don't",{"_index":1001,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["driver",{"_index":129,"title":{},"body":{"modules/AppModule.html":{},"modules/PaymentModule.html":{},"modules/StorageModule.html":{}}}],["dto",{"_index":346,"title":{},"body":{"controllers/AuthController.html":{}}}],["dto.ts",{"_index":1130,"title":{},"body":{"classes/RefreshTokenDto.html":{},"coverage.html":{}}}],["dto.ts:11",{"_index":1133,"title":{},"body":{"classes/RefreshTokenDto.html":{}}}],["dto/change",{"_index":1452,"title":{},"body":{"injectables/UsersService.html":{}}}],["dto/create",{"_index":1407,"title":{},"body":{"controllers/UsersController.html":{}}}],["dto/forgot",{"_index":347,"title":{},"body":{"controllers/AuthController.html":{}}}],["dto/login.dto",{"_index":343,"title":{},"body":{"controllers/AuthController.html":{}}}],["dto/refresh",{"_index":344,"title":{},"body":{"controllers/AuthController.html":{}}}],["dto/reset",{"_index":349,"title":{},"body":{"controllers/AuthController.html":{}}}],["during",{"_index":1008,"title":{},"body":{"injectables/JwtStrategy.html":{},"classes/RefreshTokenDto.html":{}}}],["dynamicmodule",{"_index":1102,"title":{},"body":{"modules/PaymentModule.html":{},"modules/StorageModule.html":{}}}],["e",{"_index":732,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["e.g",{"_index":656,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/ResetPasswordDto.html":{}}}],["elsewhere",{"_index":1004,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["em",{"_index":729,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["email",{"_index":370,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CreateUserCommand.html":{},"classes/CreateUserDto.html":{},"classes/EmailService.html":{},"classes/ForgotPasswordDto.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"classes/PasswordResetEmailConsumer.html":{},"entities/User.html":{},"injectables/UsersService.html":{},"injectables/UsersSubscriber.html":{},"miscellaneous/variables.html":{}}}],["email.service",{"_index":858,"title":{},"body":{"modules/EmailModule.html":{}}}],["email_from_name",{"_index":861,"title":{},"body":{"modules/EmailModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["emailmodule",{"_index":853,"title":{"modules/EmailModule.html":{}},"body":{"modules/EmailModule.html":{},"modules.html":{},"overview.html":{}}}],["emailregex",{"_index":769,"title":{},"body":{"injectables/CreateUserCommand.html":{},"entities/User.html":{},"injectables/UsersSubscriber.html":{}}}],["emailregex.test(email",{"_index":771,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["emailregex.test(this.email",{"_index":1384,"title":{},"body":{"entities/User.html":{}}}],["emailregex.test(user.email",{"_index":1513,"title":{},"body":{"injectables/UsersSubscriber.html":{}}}],["emailservice",{"_index":856,"title":{"classes/EmailService.html":{}},"body":{"modules/EmailModule.html":{},"classes/EmailService.html":{},"classes/PasswordResetEmailConsumer.html":{},"coverage.html":{},"overview.html":{}}}],["emailsubjectenum",{"_index":1083,"title":{},"body":{"classes/PasswordResetEmailConsumer.html":{},"miscellaneous/enumerations.html":{}}}],["emailsubjectenum.password_reset",{"_index":1092,"title":{},"body":{"classes/PasswordResetEmailConsumer.html":{}}}],["emailtemplateenum",{"_index":1084,"title":{},"body":{"classes/PasswordResetEmailConsumer.html":{},"miscellaneous/enumerations.html":{}}}],["emailtemplateenum.password_reset",{"_index":1093,"title":{},"body":{"classes/PasswordResetEmailConsumer.html":{}}}],["enforcing",{"_index":994,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["ensuredatabase",{"_index":141,"title":{},"body":{"modules/AppModule.html":{}}}],["entities",{"_index":1317,"title":{},"body":{"entities/User.html":{},"overview.html":{}}}],["entities/user.entity",{"_index":849,"title":{},"body":{"classes/CreateUserResponseDto.html":{},"classes/GetProfileResponseDto.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/UsersSubscriber.html":{}}}],["entity",{"_index":1316,"title":{"entities/User.html":{}},"body":{"entities/User.html":{},"coverage.html":{}}}],["entitydata",{"_index":1446,"title":{},"body":{"injectables/UsersService.html":{}}}],["entitymanager",{"_index":727,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["entityname",{"_index":1500,"title":{},"body":{"injectables/UsersSubscriber.html":{}}}],["entityrepository",{"_index":1432,"title":{},"body":{"injectables/UsersService.html":{}}}],["enum",{"_index":819,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/User.html":{}}}],["enum({items",{"_index":1366,"title":{},"body":{"entities/User.html":{}}}],["enumerations",{"_index":1649,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["err",{"_index":971,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["error",{"_index":522,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CloudinaryService.html":{},"injectables/CreateUserCommand.html":{},"injectables/JwtAuthGuard.html":{},"injectables/UsersService.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["error('invalid",{"_index":772,"title":{},"body":{"injectables/CreateUserCommand.html":{},"entities/User.html":{},"injectables/UsersSubscriber.html":{}}}],["error(`unsupported",{"_index":1278,"title":{},"body":{"modules/StorageModule.html":{}}}],["error.message",{"_index":524,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CreateUserCommand.html":{}}}],["error.stack",{"_index":710,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["error=${error.message",{"_index":709,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["errorcode",{"_index":627,"title":{},"body":{"classes/CatchEverythingFilter.html":{},"interfaces/ErrorResponse.html":{}}}],["errorlog",{"_index":194,"title":{},"body":{"modules/AppRedisModule.html":{}}}],["errormessage",{"_index":624,"title":{},"body":{"classes/CatchEverythingFilter.html":{}}}],["errorobject",{"_index":979,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["errorresponse",{"_index":596,"title":{"interfaces/ErrorResponse.html":{}},"body":{"classes/CatchEverythingFilter.html":{},"interfaces/ErrorResponse.html":{},"coverage.html":{}}}],["eslint",{"_index":500,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["eslint/no",{"_index":505,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["event",{"_index":1312,"title":{},"body":{"injectables/StripeService.html":{}}}],["eventargs",{"_index":1495,"title":{},"body":{"injectables/UsersSubscriber.html":{}}}],["eventid",{"_index":1308,"title":{},"body":{"injectables/StripeService.html":{}}}],["eventsubscriber",{"_index":1507,"title":{},"body":{"injectables/UsersSubscriber.html":{}}}],["evt",{"_index":1289,"title":{},"body":{"injectables/StripeService.html":{}}}],["evt?.id",{"_index":1309,"title":{},"body":{"injectables/StripeService.html":{}}}],["ex",{"_index":282,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["example",{"_index":426,"title":{},"body":{"classes/AuthResponseDto.html":{},"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserResponseDto.html":{},"classes/ForgotPasswordDto.html":{},"classes/GetProfileResponseDto.html":{},"classes/LoginDto.html":{},"classes/RefreshTokenDto.html":{},"classes/ResetPasswordDto.html":{}}}],["exception",{"_index":579,"title":{},"body":{"classes/CatchEverythingFilter.html":{}}}],["exception.getresponse",{"_index":608,"title":{},"body":{"classes/CatchEverythingFilter.html":{}}}],["exception.getstatus",{"_index":634,"title":{},"body":{"classes/CatchEverythingFilter.html":{}}}],["exception.message",{"_index":610,"title":{},"body":{"classes/CatchEverythingFilter.html":{}}}],["exception.response?.status",{"_index":636,"title":{},"body":{"classes/CatchEverythingFilter.html":{}}}],["exceptionfilter",{"_index":564,"title":{},"body":{"classes/CatchEverythingFilter.html":{}}}],["exceptionresponse",{"_index":607,"title":{},"body":{"classes/CatchEverythingFilter.html":{}}}],["exceptionresponse?.error",{"_index":616,"title":{},"body":{"classes/CatchEverythingFilter.html":{}}}],["exceptionresponse?.message",{"_index":609,"title":{},"body":{"classes/CatchEverythingFilter.html":{}}}],["executioncontext",{"_index":967,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"guards/RoleGuard.html":{},"injectables/SuccessResponseInterceptor.html":{}}}],["exist",{"_index":251,"title":{},"body":{"injectables/AppRedisService.html":{},"classes/CatchEverythingFilter.html":{}}}],["existence",{"_index":291,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["exists",{"_index":206,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["exists(key",{"_index":231,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["expected",{"_index":1724,"title":{},"body":{"miscellaneous/variables.html":{}}}],["expiresin",{"_index":407,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/S3Service.html":{}}}],["exponential",{"_index":414,"title":{},"body":{"modules/AuthModule.html":{},"modules/PaymentModule.html":{}}}],["export",{"_index":21,"title":{},"body":{"interfaces/ApiResponse.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AppRedisModule.html":{},"injectables/AppRedisService.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/AuthResponseDto.html":{},"injectables/AuthService.html":{},"classes/CatchEverythingFilter.html":{},"classes/ChangePasswordDto.html":{},"injectables/CloudinaryService.html":{},"injectables/CreateUserCommand.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserResponseDto.html":{},"modules/EmailModule.html":{},"classes/EmailService.html":{},"interfaces/ErrorResponse.html":{},"classes/ForgotPasswordDto.html":{},"classes/GetProfileResponseDto.html":{},"modules/HttpClientModule.html":{},"injectables/HttpClientService.html":{},"interfaces/IPaymentService.html":{},"interfaces/IStrorageService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"injectables/MorganMiddleware.html":{},"classes/PasswordResetEmailConsumer.html":{},"modules/PaymentModule.html":{},"classes/RefreshTokenDto.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"classes/ResetPasswordDto.html":{},"guards/RoleGuard.html":{},"injectables/S3Service.html":{},"injectables/SchemaService.html":{},"modules/StorageModule.html":{},"injectables/StripeService.html":{},"injectables/SuccessResponseInterceptor.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/UsersSubscriber.html":{}}}],["exporter",{"_index":1718,"title":{},"body":{"miscellaneous/variables.html":{}}}],["exports",{"_index":59,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRedisModule.html":{},"modules/AuthModule.html":{},"modules/EmailModule.html":{},"modules/HttpClientModule.html":{},"modules/PaymentModule.html":{},"modules/StorageModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["express",{"_index":104,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["expressadapter",{"_index":117,"title":{},"body":{"modules/AppModule.html":{}}}],["extends",{"_index":718,"title":{},"body":{"injectables/CreateUserCommand.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/PasswordResetEmailConsumer.html":{}}}],["extract",{"_index":991,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt",{"_index":1017,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":1022,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["eyjhbgcioijiuzi1niisinr5cci6ikpxvcj9",{"_index":427,"title":{},"body":{"classes/AuthResponseDto.html":{},"classes/RefreshTokenDto.html":{},"classes/ResetPasswordDto.html":{}}}],["eyjhbgcioijiuzi1niisinr5cci6ikpxvcj9'})@isstring()@isnotempty",{"_index":1132,"title":{},"body":{"classes/RefreshTokenDto.html":{}}}],["eyjhbgcioijiuzi1niisinr5cci6ikpxvcj9...'})@isstring()@isjwt()@isnotempty",{"_index":1171,"title":{},"body":{"classes/ResetPasswordDto.html":{}}}],["f",{"_index":737,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["failed",{"_index":708,"title":{},"body":{"injectables/CloudinaryService.html":{},"injectables/CreateUserCommand.html":{}}}],["failhandler",{"_index":1481,"title":{},"body":{"injectables/UsersService.html":{}}}],["false",{"_index":249,"title":{},"body":{"injectables/AppRedisService.html":{},"injectables/AuthService.html":{},"injectables/HttpClientService.html":{},"injectables/JwtStrategy.html":{},"entities/User.html":{},"injectables/UsersService.html":{}}}],["fetched",{"_index":852,"title":{},"body":{"classes/CreateUserResponseDto.html":{},"classes/GetProfileResponseDto.html":{},"controllers/UsersController.html":{}}}],["file",{"_index":5,"title":{},"body":{"interfaces/ApiResponse.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AppRedisModule.html":{},"injectables/AppRedisService.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/AuthResponseDto.html":{},"injectables/AuthService.html":{},"classes/CatchEverythingFilter.html":{},"classes/ChangePasswordDto.html":{},"injectables/CloudinaryService.html":{},"injectables/CreateUserCommand.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserResponseDto.html":{},"modules/EmailModule.html":{},"classes/EmailService.html":{},"interfaces/ErrorResponse.html":{},"classes/ForgotPasswordDto.html":{},"classes/GetProfileResponseDto.html":{},"modules/HttpClientModule.html":{},"injectables/HttpClientService.html":{},"interfaces/IPaymentService.html":{},"interfaces/IStrorageService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"injectables/MorganMiddleware.html":{},"classes/PasswordResetEmailConsumer.html":{},"modules/PaymentModule.html":{},"classes/RefreshTokenDto.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"classes/ResetPasswordDto.html":{},"guards/RoleGuard.html":{},"injectables/S3Service.html":{},"injectables/SchemaService.html":{},"modules/StorageModule.html":{},"injectables/StripeService.html":{},"injectables/SuccessResponseInterceptor.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/UsersSubscriber.html":{},"coverage.html":{}}}],["file.buffer",{"_index":1226,"title":{},"body":{"injectables/S3Service.html":{}}}],["file.mimetype",{"_index":1228,"title":{},"body":{"injectables/S3Service.html":{}}}],["filecategory",{"_index":673,"title":{},"body":{"injectables/CloudinaryService.html":{},"interfaces/IStrorageService.html":{},"injectables/S3Service.html":{}}}],["filecategory}/${this.nanoid()}_${file.originalname",{"_index":1222,"title":{},"body":{"injectables/S3Service.html":{}}}],["filename=\"${file.originalname",{"_index":696,"title":{},"body":{"injectables/CloudinaryService.html":{},"injectables/S3Service.html":{}}}],["filterquery",{"_index":1441,"title":{},"body":{"injectables/UsersService.html":{}}}],["find",{"_index":615,"title":{},"body":{"classes/CatchEverythingFilter.html":{}}}],["findone",{"_index":1430,"title":{},"body":{"injectables/UsersService.html":{}}}],["findone(query",{"_index":1440,"title":{},"body":{"injectables/UsersService.html":{}}}],["findoneorfailoptions",{"_index":1442,"title":{},"body":{"injectables/UsersService.html":{}}}],["first",{"_index":738,"title":{},"body":{"injectables/CreateUserCommand.html":{},"classes/CreateUserDto.html":{},"entities/User.html":{}}}],["firstname",{"_index":547,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CreateUserCommand.html":{},"classes/CreateUserDto.html":{},"classes/PasswordResetEmailConsumer.html":{},"entities/User.html":{},"injectables/UsersSubscriber.html":{}}}],["flags",{"_index":781,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["folder",{"_index":704,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["forbiddenexception",{"_index":592,"title":{},"body":{"classes/CatchEverythingFilter.html":{},"guards/RoleGuard.html":{},"miscellaneous/typealiases.html":{}}}],["forceutctimezone",{"_index":148,"title":{},"body":{"modules/AppModule.html":{}}}],["forgotpassword",{"_index":305,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["forgotpassword(body",{"_index":309,"title":{},"body":{"controllers/AuthController.html":{}}}],["forgotpassword(email",{"_index":448,"title":{},"body":{"injectables/AuthService.html":{}}}],["forgotpassworddto",{"_index":310,"title":{"classes/ForgotPasswordDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/ForgotPasswordDto.html":{},"coverage.html":{}}}],["forkedem",{"_index":767,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["forkedem.transactional(async",{"_index":774,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["form",{"_index":687,"title":{},"body":{"injectables/CloudinaryService.html":{},"interfaces/IStrorageService.html":{},"injectables/S3Service.html":{},"dependencies.html":{}}}],["format",{"_index":773,"title":{},"body":{"injectables/CreateUserCommand.html":{},"injectables/S3Service.html":{},"entities/User.html":{},"injectables/UsersSubscriber.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["formaturl",{"_index":1216,"title":{},"body":{"injectables/S3Service.html":{}}}],["formaturl(signedurlobject",{"_index":1239,"title":{},"body":{"injectables/S3Service.html":{}}}],["forroutes",{"_index":180,"title":{},"body":{"modules/AppModule.html":{}}}],["found",{"_index":278,"title":{},"body":{"injectables/AppRedisService.html":{},"injectables/AuthService.html":{},"classes/CatchEverythingFilter.html":{},"injectables/UsersService.html":{}}}],["fromenv",{"_index":1209,"title":{},"body":{"injectables/S3Service.html":{}}}],["function",{"_index":1048,"title":{},"body":{"injectables/MorganMiddleware.html":{},"coverage.html":{}}}],["functions",{"_index":1666,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["generateslug",{"_index":1542,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["generateslug(text",{"_index":1671,"title":{},"body":{"miscellaneous/functions.html":{}}}],["generator",{"_index":1250,"title":{},"body":{"injectables/SchemaService.html":{}}}],["generator.updateschema",{"_index":1252,"title":{},"body":{"injectables/SchemaService.html":{}}}],["get('profile",{"_index":1416,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('profile')@httpcode(httpstatus.ok)@apioperation({summary",{"_index":1403,"title":{},"body":{"controllers/UsersController.html":{}}}],["get()@httpcode(httpstatus.ok)@public()@apioperation({summary",{"_index":31,"title":{},"body":{"controllers/AppController.html":{}}}],["get(key",{"_index":233,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["geterrorcode",{"_index":566,"title":{},"body":{"classes/CatchEverythingFilter.html":{}}}],["geterrorcode(exception",{"_index":580,"title":{},"body":{"classes/CatchEverythingFilter.html":{}}}],["geterrormessage",{"_index":567,"title":{},"body":{"classes/CatchEverythingFilter.html":{}}}],["geterrormessage(exception",{"_index":583,"title":{},"body":{"classes/CatchEverythingFilter.html":{}}}],["geterrorname",{"_index":568,"title":{},"body":{"classes/CatchEverythingFilter.html":{}}}],["geterrorname(exception",{"_index":585,"title":{},"body":{"classes/CatchEverythingFilter.html":{}}}],["gethello",{"_index":298,"title":{},"body":{"injectables/AppService.html":{}}}],["gethttpstatus",{"_index":569,"title":{},"body":{"classes/CatchEverythingFilter.html":{}}}],["gethttpstatus(exception",{"_index":587,"title":{},"body":{"classes/CatchEverythingFilter.html":{}}}],["getnodeautoinstrumentations",{"_index":1715,"title":{},"body":{"miscellaneous/variables.html":{}}}],["getprofile",{"_index":1394,"title":{},"body":{"controllers/UsersController.html":{}}}],["getprofile(@request",{"_index":1417,"title":{},"body":{"controllers/UsersController.html":{}}}],["getprofile(req",{"_index":1402,"title":{},"body":{"controllers/UsersController.html":{}}}],["getprofileresponsedto",{"_index":850,"title":{"classes/GetProfileResponseDto.html":{}},"body":{"classes/CreateUserResponseDto.html":{},"classes/GetProfileResponseDto.html":{},"coverage.html":{}}}],["getqueuetoken",{"_index":1111,"title":{},"body":{"modules/PaymentModule.html":{}}}],["getqueuetoken(template_queue_name",{"_index":1128,"title":{},"body":{"modules/PaymentModule.html":{}}}],["gets3connectiontoken",{"_index":1264,"title":{},"body":{"modules/StorageModule.html":{}}}],["getsubscribedentities",{"_index":1490,"title":{},"body":{"injectables/UsersSubscriber.html":{}}}],["getting",{"_index":277,"title":{"index.html":{}},"body":{"injectables/AppRedisService.html":{}}}],["global",{"_index":403,"title":{},"body":{"modules/AuthModule.html":{}}}],["golevelup/nestjs",{"_index":108,"title":{},"body":{"modules/AppModule.html":{},"modules/PaymentModule.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"guards/RoleGuard.html":{},"injectables/StripeService.html":{},"injectables/SuccessResponseInterceptor.html":{},"dependencies.html":{}}}],["graph",{"_index":1682,"title":{},"body":{"modules.html":{}}}],["guard",{"_index":1175,"title":{"guards/RoleGuard.html":{}},"body":{"coverage.html":{},"overview.html":{}}}],["guards",{"_index":1177,"title":{},"body":{"guards/RoleGuard.html":{}}}],["guards/jwt",{"_index":396,"title":{},"body":{"modules/AuthModule.html":{}}}],["guards/local",{"_index":338,"title":{},"body":{"controllers/AuthController.html":{}}}],["handledexception",{"_index":576,"title":{},"body":{"classes/CatchEverythingFilter.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["handlepaymentintentsucceeded",{"_index":1281,"title":{},"body":{"injectables/StripeService.html":{}}}],["handlepaymentintentsucceeded(evt",{"_index":1285,"title":{},"body":{"injectables/StripeService.html":{}}}],["handlerequest",{"_index":962,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["handlerequest(err",{"_index":969,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["hash",{"_index":1211,"title":{},"body":{"injectables/S3Service.html":{}}}],["hash.bind(null",{"_index":1236,"title":{},"body":{"injectables/S3Service.html":{}}}],["hashed",{"_index":1358,"title":{},"body":{"entities/User.html":{}}}],["hashedpassword",{"_index":560,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["hashpassword",{"_index":1491,"title":{},"body":{"injectables/UsersSubscriber.html":{}}}],["hashpassword(user",{"_index":1501,"title":{},"body":{"injectables/UsersSubscriber.html":{}}}],["head",{"_index":1658,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["hello",{"_index":300,"title":{},"body":{"injectables/AppService.html":{}}}],["helmet",{"_index":1622,"title":{},"body":{"dependencies.html":{}}}],["here",{"_index":990,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["hexadecimallowercase",{"_index":1200,"title":{},"body":{"injectables/S3Service.html":{}}}],["hooks",{"_index":1594,"title":{},"body":{"dependencies.html":{}}}],["host",{"_index":132,"title":{},"body":{"modules/AppModule.html":{},"classes/CatchEverythingFilter.html":{},"modules/EmailModule.html":{}}}],["host.switchtohttp",{"_index":601,"title":{},"body":{"classes/CatchEverythingFilter.html":{}}}],["http",{"_index":909,"title":{},"body":{"modules/HttpClientModule.html":{},"injectables/HttpClientService.html":{},"injectables/MorganMiddleware.html":{},"injectables/S3Service.html":{},"dependencies.html":{}}}],["http.agent",{"_index":921,"title":{},"body":{"injectables/HttpClientService.html":{}}}],["httpadapter",{"_index":598,"title":{},"body":{"classes/CatchEverythingFilter.html":{}}}],["httpadapter.getrequesturl(request",{"_index":606,"title":{},"body":{"classes/CatchEverythingFilter.html":{}}}],["httpadapter.reply(response",{"_index":622,"title":{},"body":{"classes/CatchEverythingFilter.html":{}}}],["httpadapterhost",{"_index":572,"title":{},"body":{"classes/CatchEverythingFilter.html":{}}}],["httpagent",{"_index":912,"title":{},"body":{"injectables/HttpClientService.html":{}}}],["httpclientmodule",{"_index":899,"title":{"modules/HttpClientModule.html":{}},"body":{"modules/HttpClientModule.html":{},"modules.html":{},"overview.html":{}}}],["httpclientservice",{"_index":903,"title":{"injectables/HttpClientService.html":{}},"body":{"modules/HttpClientModule.html":{},"injectables/HttpClientService.html":{},"coverage.html":{},"overview.html":{}}}],["httpclientservice.name",{"_index":933,"title":{},"body":{"injectables/HttpClientService.html":{}}}],["httpcode",{"_index":40,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["httpcode(httpstatus.ok",{"_index":48,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["httpexception",{"_index":591,"title":{},"body":{"classes/CatchEverythingFilter.html":{},"miscellaneous/typealiases.html":{}}}],["httpmethod",{"_index":1231,"title":{},"body":{"injectables/S3Service.html":{}}}],["httpmodule",{"_index":907,"title":{},"body":{"modules/HttpClientModule.html":{}}}],["httprequest",{"_index":1214,"title":{},"body":{"injectables/S3Service.html":{}}}],["httprequestmethodenum",{"_index":951,"title":{},"body":{"interfaces/IStrorageService.html":{},"injectables/S3Service.html":{},"miscellaneous/enumerations.html":{}}}],["httprequestmethodenum.get",{"_index":1232,"title":{},"body":{"injectables/S3Service.html":{}}}],["httpresponse",{"_index":1153,"title":{},"body":{"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/SuccessResponseInterceptor.html":{}}}],["httpresponse.statuscode",{"_index":1158,"title":{},"body":{"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/SuccessResponseInterceptor.html":{}}}],["https",{"_index":925,"title":{},"body":{"injectables/HttpClientService.html":{}}}],["https.agent",{"_index":924,"title":{},"body":{"injectables/HttpClientService.html":{}}}],["https://${this.s3bucket}.s3.${this.s3region}.amazonaws.com/${key",{"_index":1229,"title":{},"body":{"injectables/S3Service.html":{}}}],["https://olaban",{"_index":1677,"title":{},"body":{"index.html":{}}}],["httpsagent",{"_index":913,"title":{},"body":{"injectables/HttpClientService.html":{}}}],["httpservice",{"_index":916,"title":{},"body":{"injectables/HttpClientService.html":{}}}],["httpstatus",{"_index":18,"title":{},"body":{"interfaces/ApiResponse.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/CatchEverythingFilter.html":{},"controllers/UsersController.html":{}}}],["httpstatus.bad_gateway",{"_index":637,"title":{},"body":{"classes/CatchEverythingFilter.html":{}}}],["httpstatus.created",{"_index":1415,"title":{},"body":{"controllers/UsersController.html":{}}}],["httpstatus.not_found",{"_index":618,"title":{},"body":{"classes/CatchEverythingFilter.html":{}}}],["httpstatus.ok",{"_index":360,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["i.e",{"_index":1002,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["ianatimezonedatabaseenum",{"_index":1651,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["id",{"_index":531,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/StripeService.html":{},"entities/User.html":{},"injectables/UsersService.html":{}}}],["id=\"${intent.id",{"_index":1313,"title":{},"body":{"injectables/StripeService.html":{}}}],["identifier",{"_index":1525,"title":{},"body":{"coverage.html":{}}}],["ignoreexpiration",{"_index":1023,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["illinois",{"_index":835,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["illinois'})@isstring()@isoptional",{"_index":822,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["implementation",{"_index":1005,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["implemented",{"_index":1010,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["implements",{"_index":165,"title":{},"body":{"modules/AppModule.html":{},"classes/CatchEverythingFilter.html":{},"injectables/CloudinaryService.html":{},"injectables/MorganMiddleware.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"guards/RoleGuard.html":{},"injectables/S3Service.html":{},"injectables/SchemaService.html":{},"injectables/StripeService.html":{},"injectables/SuccessResponseInterceptor.html":{},"injectables/UsersSubscriber.html":{}}}],["import",{"_index":19,"title":{},"body":{"interfaces/ApiResponse.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AppRedisModule.html":{},"injectables/AppRedisService.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/AuthResponseDto.html":{},"injectables/AuthService.html":{},"classes/CatchEverythingFilter.html":{},"classes/ChangePasswordDto.html":{},"injectables/CloudinaryService.html":{},"injectables/CreateUserCommand.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserResponseDto.html":{},"modules/EmailModule.html":{},"classes/EmailService.html":{},"classes/ForgotPasswordDto.html":{},"classes/GetProfileResponseDto.html":{},"modules/HttpClientModule.html":{},"injectables/HttpClientService.html":{},"interfaces/IPaymentService.html":{},"interfaces/IStrorageService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"injectables/MorganMiddleware.html":{},"classes/PasswordResetEmailConsumer.html":{},"modules/PaymentModule.html":{},"classes/RefreshTokenDto.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"classes/ResetPasswordDto.html":{},"guards/RoleGuard.html":{},"injectables/S3Service.html":{},"injectables/SchemaService.html":{},"modules/StorageModule.html":{},"injectables/StripeService.html":{},"injectables/SuccessResponseInterceptor.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/UsersSubscriber.html":{}}}],["imports",{"_index":72,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRedisModule.html":{},"modules/AuthModule.html":{},"modules/EmailModule.html":{},"modules/HttpClientModule.html":{},"modules/PaymentModule.html":{},"modules/StorageModule.html":{},"modules/UsersModule.html":{}}}],["include",{"_index":652,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/ResetPasswordDto.html":{}}}],["increment",{"_index":207,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["increment(key",{"_index":235,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["incrresult",{"_index":285,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["incrresult[1",{"_index":287,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["index",{"_index":8,"title":{"index.html":{}},"body":{"interfaces/ApiResponse.html":{},"controllers/AppController.html":{},"injectables/AppRedisService.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthResponseDto.html":{},"injectables/AuthService.html":{},"classes/CatchEverythingFilter.html":{},"classes/ChangePasswordDto.html":{},"injectables/CloudinaryService.html":{},"injectables/CreateUserCommand.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserResponseDto.html":{},"classes/EmailService.html":{},"interfaces/ErrorResponse.html":{},"classes/ForgotPasswordDto.html":{},"classes/GetProfileResponseDto.html":{},"injectables/HttpClientService.html":{},"interfaces/IPaymentService.html":{},"interfaces/IStrorageService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"injectables/MorganMiddleware.html":{},"classes/PasswordResetEmailConsumer.html":{},"classes/RefreshTokenDto.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"classes/ResetPasswordDto.html":{},"guards/RoleGuard.html":{},"injectables/S3Service.html":{},"injectables/SchemaService.html":{},"injectables/StripeService.html":{},"injectables/SuccessResponseInterceptor.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/UsersSubscriber.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["indicating",{"_index":429,"title":{},"body":{"classes/AuthResponseDto.html":{},"classes/CreateUserResponseDto.html":{},"classes/GetProfileResponseDto.html":{}}}],["inestapplication",{"_index":1674,"title":{},"body":{"miscellaneous/functions.html":{}}}],["info",{"_index":3,"title":{},"body":{"interfaces/ApiResponse.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AppRedisModule.html":{},"injectables/AppRedisService.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/AuthResponseDto.html":{},"injectables/AuthService.html":{},"classes/CatchEverythingFilter.html":{},"classes/ChangePasswordDto.html":{},"injectables/CloudinaryService.html":{},"injectables/CreateUserCommand.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserResponseDto.html":{},"modules/EmailModule.html":{},"classes/EmailService.html":{},"interfaces/ErrorResponse.html":{},"classes/ForgotPasswordDto.html":{},"classes/GetProfileResponseDto.html":{},"modules/HttpClientModule.html":{},"injectables/HttpClientService.html":{},"interfaces/IPaymentService.html":{},"interfaces/IStrorageService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"injectables/MorganMiddleware.html":{},"classes/PasswordResetEmailConsumer.html":{},"modules/PaymentModule.html":{},"classes/RefreshTokenDto.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"classes/ResetPasswordDto.html":{},"guards/RoleGuard.html":{},"injectables/S3Service.html":{},"injectables/SchemaService.html":{},"modules/StorageModule.html":{},"injectables/StripeService.html":{},"injectables/SuccessResponseInterceptor.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/UsersSubscriber.html":{}}}],["info?.message",{"_index":981,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["info?.name",{"_index":980,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["initialized",{"_index":1719,"title":{},"body":{"miscellaneous/variables.html":{}}}],["inject",{"_index":156,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRedisModule.html":{},"injectables/AppRedisService.html":{},"modules/AuthModule.html":{},"classes/CatchEverythingFilter.html":{},"injectables/CloudinaryService.html":{},"modules/EmailModule.html":{},"classes/EmailService.html":{},"injectables/HttpClientService.html":{},"injectables/MorganMiddleware.html":{},"classes/PasswordResetEmailConsumer.html":{},"modules/PaymentModule.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/S3Service.html":{},"injectables/SchemaService.html":{},"modules/StorageModule.html":{},"injectables/StripeService.html":{},"injectables/SuccessResponseInterceptor.html":{}}}],["inject(logger",{"_index":257,"title":{},"body":{"injectables/AppRedisService.html":{},"classes/CatchEverythingFilter.html":{},"injectables/CloudinaryService.html":{},"classes/EmailService.html":{},"injectables/HttpClientService.html":{},"classes/PasswordResetEmailConsumer.html":{},"injectables/S3Service.html":{},"injectables/SchemaService.html":{},"injectables/StripeService.html":{}}}],["inject(mailerservice",{"_index":888,"title":{},"body":{"classes/EmailService.html":{}}}],["injectable",{"_index":198,"title":{"injectables/AppRedisService.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/CloudinaryService.html":{},"injectables/CreateUserCommand.html":{},"injectables/HttpClientService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/MorganMiddleware.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/S3Service.html":{},"injectables/SchemaService.html":{},"injectables/StripeService.html":{},"injectables/SuccessResponseInterceptor.html":{},"injectables/UsersService.html":{},"injectables/UsersSubscriber.html":{}},"body":{"injectables/AppRedisService.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/CloudinaryService.html":{},"injectables/CreateUserCommand.html":{},"injectables/HttpClientService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/MorganMiddleware.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"guards/RoleGuard.html":{},"injectables/S3Service.html":{},"injectables/SchemaService.html":{},"injectables/StripeService.html":{},"injectables/SuccessResponseInterceptor.html":{},"injectables/UsersService.html":{},"injectables/UsersSubscriber.html":{},"coverage.html":{}}}],["injectables",{"_index":199,"title":{},"body":{"injectables/AppRedisService.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/CloudinaryService.html":{},"injectables/CreateUserCommand.html":{},"injectables/HttpClientService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/MorganMiddleware.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/S3Service.html":{},"injectables/SchemaService.html":{},"injectables/StripeService.html":{},"injectables/SuccessResponseInterceptor.html":{},"injectables/UsersService.html":{},"injectables/UsersSubscriber.html":{},"overview.html":{}}}],["injectqueue",{"_index":472,"title":{},"body":{"injectables/AuthService.html":{},"injectables/StripeService.html":{}}}],["injectqueue(password_reset_email_queue_name",{"_index":480,"title":{},"body":{"injectables/AuthService.html":{}}}],["injectqueue(template_queue_name",{"_index":1293,"title":{},"body":{"injectables/StripeService.html":{}}}],["injectrepository",{"_index":1450,"title":{},"body":{"injectables/UsersService.html":{}}}],["injectrepository(user",{"_index":1453,"title":{},"body":{"injectables/UsersService.html":{}}}],["injects3",{"_index":1199,"title":{},"body":{"injectables/S3Service.html":{}}}],["injectstripeclient",{"_index":1290,"title":{},"body":{"injectables/StripeService.html":{}}}],["inputs",{"_index":753,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["instanceof",{"_index":523,"title":{},"body":{"injectables/AuthService.html":{},"classes/CatchEverythingFilter.html":{},"injectables/UsersService.html":{}}}],["instrumentations",{"_index":1591,"title":{},"body":{"dependencies.html":{},"miscellaneous/variables.html":{}}}],["intent",{"_index":1301,"title":{},"body":{"injectables/StripeService.html":{}}}],["intent.ts",{"_index":1559,"title":{},"body":{"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["intercept",{"_index":1136,"title":{},"body":{"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/SuccessResponseInterceptor.html":{}}}],["intercept(context",{"_index":1138,"title":{},"body":{"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/SuccessResponseInterceptor.html":{}}}],["interface",{"_index":0,"title":{"interfaces/ApiResponse.html":{},"interfaces/ErrorResponse.html":{},"interfaces/IPaymentService.html":{},"interfaces/IStrorageService.html":{}},"body":{"interfaces/ApiResponse.html":{},"interfaces/ErrorResponse.html":{},"interfaces/IPaymentService.html":{},"interfaces/IStrorageService.html":{},"coverage.html":{}}}],["interfaces",{"_index":2,"title":{},"body":{"interfaces/ApiResponse.html":{},"interfaces/ErrorResponse.html":{},"interfaces/IPaymentService.html":{},"interfaces/IStrorageService.html":{},"overview.html":{}}}],["interfaces/error",{"_index":597,"title":{},"body":{"classes/CatchEverythingFilter.html":{}}}],["interfaces/payment.interface",{"_index":1292,"title":{},"body":{"injectables/StripeService.html":{}}}],["interfaces/storage.interface",{"_index":684,"title":{},"body":{"injectables/CloudinaryService.html":{},"injectables/S3Service.html":{}}}],["invalid",{"_index":1723,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ioredis",{"_index":256,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["ipaymentservice",{"_index":935,"title":{"interfaces/IPaymentService.html":{}},"body":{"interfaces/IPaymentService.html":{},"injectables/StripeService.html":{},"coverage.html":{}}}],["is_public_key",{"_index":973,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["isblacklisted",{"_index":515,"title":{},"body":{"injectables/AuthService.html":{}}}],["isboolean",{"_index":824,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isboolean()@isoptional",{"_index":798,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isemail",{"_index":825,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/ForgotPasswordDto.html":{},"classes/LoginDto.html":{}}}],["isenum",{"_index":826,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isenum(userroleenum",{"_index":841,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isglobal",{"_index":122,"title":{},"body":{"modules/AppModule.html":{}}}],["isjwt",{"_index":1173,"title":{},"body":{"classes/ResetPasswordDto.html":{}}}],["isnotempty",{"_index":661,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/RefreshTokenDto.html":{},"classes/ResetPasswordDto.html":{}}}],["iso",{"_index":1338,"title":{},"body":{"entities/User.html":{}}}],["isoptional",{"_index":827,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["ispasswordmodified",{"_index":1492,"title":{},"body":{"injectables/UsersSubscriber.html":{}}}],["ispasswordmodified(user",{"_index":1503,"title":{},"body":{"injectables/UsersSubscriber.html":{}}}],["ispublic",{"_index":974,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"miscellaneous/variables.html":{}}}],["isroutingerror",{"_index":611,"title":{},"body":{"classes/CatchEverythingFilter.html":{}}}],["isstring",{"_index":662,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/RefreshTokenDto.html":{},"classes/ResetPasswordDto.html":{}}}],["istrorageservice",{"_index":683,"title":{"interfaces/IStrorageService.html":{}},"body":{"injectables/CloudinaryService.html":{},"interfaces/IStrorageService.html":{},"injectables/S3Service.html":{},"coverage.html":{}}}],["it's",{"_index":1015,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["items",{"_index":1379,"title":{},"body":{"entities/User.html":{}}}],["jaeger",{"_index":1602,"title":{},"body":{"dependencies.html":{}}}],["jaegerpropagator",{"_index":1711,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ji.github.io/nest",{"_index":1678,"title":{},"body":{"index.html":{}}}],["job",{"_index":1077,"title":{},"body":{"classes/PasswordResetEmailConsumer.html":{}}}],["job.id",{"_index":1089,"title":{},"body":{"classes/PasswordResetEmailConsumer.html":{}}}],["john",{"_index":831,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["john'})@isstring()@isnotempty",{"_index":808,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["join",{"_index":864,"title":{},"body":{"modules/EmailModule.html":{}}}],["join(process.cwd",{"_index":877,"title":{},"body":{"modules/EmailModule.html":{}}}],["js",{"_index":34,"title":{},"body":{"controllers/AppController.html":{},"index.html":{}}}],["json.parse(cached",{"_index":1470,"title":{},"body":{"injectables/UsersService.html":{}}}],["json.stringify(serializable",{"_index":1477,"title":{},"body":{"injectables/UsersService.html":{}}}],["json.stringify(user",{"_index":1485,"title":{},"body":{"injectables/UsersService.html":{}}}],["jsonwebtokenerror",{"_index":469,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwt",{"_index":525,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["jwtauthguard",{"_index":395,"title":{"injectables/JwtAuthGuard.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["jwtexpiresin",{"_index":435,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtfromrequest",{"_index":1021,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtmodule",{"_index":389,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.registerasync",{"_index":402,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtnotbefore",{"_index":436,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtrefreshexpriresin",{"_index":437,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtrefreshsecret",{"_index":438,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtservice",{"_index":444,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtstrategy",{"_index":382,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["keepalive",{"_index":922,"title":{},"body":{"injectables/HttpClientService.html":{}}}],["key",{"_index":216,"title":{},"body":{"injectables/AppRedisService.html":{},"interfaces/IStrorageService.html":{},"injectables/S3Service.html":{}}}],["key=${key",{"_index":1230,"title":{},"body":{"injectables/S3Service.html":{}}}],["keyof",{"_index":1388,"title":{},"body":{"entities/User.html":{},"injectables/UsersSubscriber.html":{}}}],["keys",{"_index":223,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["keys.length",{"_index":295,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["l",{"_index":741,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["lagos",{"_index":1661,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["last",{"_index":742,"title":{},"body":{"injectables/CreateUserCommand.html":{},"classes/CreateUserDto.html":{},"entities/User.html":{}}}],["lastloggedin",{"_index":1038,"title":{},"body":{"injectables/LocalStrategy.html":{},"entities/User.html":{}}}],["lastname",{"_index":766,"title":{},"body":{"injectables/CreateUserCommand.html":{},"classes/CreateUserDto.html":{},"entities/User.html":{},"injectables/UsersSubscriber.html":{}}}],["lastvaluefrom",{"_index":926,"title":{},"body":{"injectables/HttpClientService.html":{}}}],["lastvaluefrom(this.httpservice.request",{"_index":934,"title":{},"body":{"injectables/HttpClientService.html":{}}}],["legend",{"_index":55,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRedisModule.html":{},"modules/AuthModule.html":{},"modules/EmailModule.html":{},"modules/HttpClientModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["length",{"_index":1058,"title":{},"body":{"injectables/MorganMiddleware.html":{},"entities/User.html":{}}}],["level",{"_index":1014,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["liaoliaots/nestjs",{"_index":190,"title":{},"body":{"modules/AppRedisModule.html":{},"injectables/AppRedisService.html":{},"dependencies.html":{}}}],["license",{"_index":1689,"title":{},"body":{"properties.html":{}}}],["limit",{"_index":1672,"title":{},"body":{"miscellaneous/functions.html":{}}}],["line",{"_index":503,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["literal",{"_index":39,"title":{},"body":{"controllers/AppController.html":{},"miscellaneous/typealiases.html":{}}}],["live",{"_index":247,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["load",{"_index":124,"title":{},"body":{"modules/AppModule.html":{}}}],["local",{"_index":1034,"title":{},"body":{"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["localauthguard",{"_index":337,"title":{"injectables/LocalAuthGuard.html":{}},"body":{"controllers/AuthController.html":{},"injectables/LocalAuthGuard.html":{},"coverage.html":{}}}],["localstrategy",{"_index":383,"title":{"injectables/LocalStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/LocalStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["logged",{"_index":1003,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["logger",{"_index":81,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRedisModule.html":{},"injectables/AppRedisService.html":{},"classes/CatchEverythingFilter.html":{},"injectables/CloudinaryService.html":{},"modules/EmailModule.html":{},"classes/EmailService.html":{},"modules/HttpClientModule.html":{},"injectables/HttpClientService.html":{},"injectables/MorganMiddleware.html":{},"classes/PasswordResetEmailConsumer.html":{},"modules/PaymentModule.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/S3Service.html":{},"injectables/SchemaService.html":{},"modules/StorageModule.html":{},"injectables/StripeService.html":{},"injectables/SuccessResponseInterceptor.html":{}}}],["logger(schemaservice.name",{"_index":1247,"title":{},"body":{"injectables/SchemaService.html":{}}}],["loggercontext",{"_index":565,"title":{},"body":{"classes/CatchEverythingFilter.html":{}}}],["loggerservice",{"_index":211,"title":{},"body":{"injectables/AppRedisService.html":{},"classes/CatchEverythingFilter.html":{},"injectables/CloudinaryService.html":{},"classes/EmailService.html":{},"injectables/HttpClientService.html":{},"injectables/MorganMiddleware.html":{},"classes/PasswordResetEmailConsumer.html":{},"modules/PaymentModule.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/S3Service.html":{},"injectables/SchemaService.html":{},"modules/StorageModule.html":{},"injectables/StripeService.html":{},"injectables/SuccessResponseInterceptor.html":{}}}],["loggingconfiguration",{"_index":1122,"title":{},"body":{"modules/PaymentModule.html":{}}}],["logic",{"_index":1009,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["login",{"_index":306,"title":{},"body":{"controllers/AuthController.html":{},"classes/AuthResponseDto.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/RefreshTokenDto.html":{},"entities/User.html":{}}}],["login'})@apibody({type",{"_index":319,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(@request",{"_index":355,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(req",{"_index":317,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(user",{"_index":450,"title":{},"body":{"injectables/AuthService.html":{}}}],["logindto",{"_index":320,"title":{"classes/LoginDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/LoginDto.html":{},"coverage.html":{}}}],["logmatchingeventhandlers",{"_index":1123,"title":{},"body":{"modules/PaymentModule.html":{}}}],["long",{"_index":651,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/ResetPasswordDto.html":{}}}],["lowercase",{"_index":654,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/ResetPasswordDto.html":{}}}],["mailermodule",{"_index":859,"title":{},"body":{"modules/EmailModule.html":{}}}],["mailermodule.forrootasync",{"_index":865,"title":{},"body":{"modules/EmailModule.html":{}}}],["mailerservice",{"_index":882,"title":{},"body":{"classes/EmailService.html":{}}}],["main",{"_index":794,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["makehttprequest",{"_index":914,"title":{},"body":{"injectables/HttpClientService.html":{}}}],["makehttprequest(url",{"_index":918,"title":{},"body":{"injectables/HttpClientService.html":{}}}],["making",{"_index":932,"title":{},"body":{"injectables/HttpClientService.html":{}}}],["malformed",{"_index":526,"title":{},"body":{"injectables/AuthService.html":{}}}],["map",{"_index":1144,"title":{},"body":{"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/SuccessResponseInterceptor.html":{}}}],["map((response",{"_index":1152,"title":{},"body":{"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/SuccessResponseInterceptor.html":{}}}],["match",{"_index":552,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/UsersService.html":{}}}],["matches",{"_index":663,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/ResetPasswordDto.html":{}}}],["matching",{"_index":23,"title":{},"body":{"interfaces/ApiResponse.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AppRedisModule.html":{},"injectables/AppRedisService.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/AuthResponseDto.html":{},"injectables/AuthService.html":{},"classes/CatchEverythingFilter.html":{},"classes/ChangePasswordDto.html":{},"injectables/CloudinaryService.html":{},"injectables/CreateUserCommand.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserResponseDto.html":{},"modules/EmailModule.html":{},"classes/EmailService.html":{},"interfaces/ErrorResponse.html":{},"classes/ForgotPasswordDto.html":{},"classes/GetProfileResponseDto.html":{},"modules/HttpClientModule.html":{},"injectables/HttpClientService.html":{},"interfaces/IPaymentService.html":{},"interfaces/IStrorageService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"injectables/MorganMiddleware.html":{},"classes/PasswordResetEmailConsumer.html":{},"modules/PaymentModule.html":{},"classes/RefreshTokenDto.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"classes/ResetPasswordDto.html":{},"guards/RoleGuard.html":{},"injectables/S3Service.html":{},"injectables/SchemaService.html":{},"modules/StorageModule.html":{},"injectables/StripeService.html":{},"injectables/SuccessResponseInterceptor.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/UsersSubscriber.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["max",{"_index":146,"title":{},"body":{"modules/AppModule.html":{}}}],["memorystoredfile",{"_index":672,"title":{},"body":{"injectables/CloudinaryService.html":{},"interfaces/IStrorageService.html":{},"injectables/S3Service.html":{}}}],["message",{"_index":12,"title":{},"body":{"interfaces/ApiResponse.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/AuthResponseDto.html":{},"classes/CatchEverythingFilter.html":{},"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserResponseDto.html":{},"interfaces/ErrorResponse.html":{},"classes/GetProfileResponseDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/MorganMiddleware.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"classes/ResetPasswordDto.html":{},"injectables/SuccessResponseInterceptor.html":{},"controllers/UsersController.html":{}}}],["message.includes('cannot",{"_index":614,"title":{},"body":{"classes/CatchEverythingFilter.html":{}}}],["message.startswith('cannot",{"_index":613,"title":{},"body":{"classes/CatchEverythingFilter.html":{}}}],["metadata",{"_index":1640,"title":{},"body":{"dependencies.html":{}}}],["method",{"_index":169,"title":{},"body":{"modules/AppModule.html":{},"interfaces/IStrorageService.html":{},"injectables/MorganMiddleware.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/S3Service.html":{},"injectables/SuccessResponseInterceptor.html":{}}}],["methods",{"_index":28,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppRedisService.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CatchEverythingFilter.html":{},"injectables/CloudinaryService.html":{},"injectables/CreateUserCommand.html":{},"classes/EmailService.html":{},"injectables/HttpClientService.html":{},"interfaces/IPaymentService.html":{},"interfaces/IStrorageService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/MorganMiddleware.html":{},"classes/PasswordResetEmailConsumer.html":{},"modules/PaymentModule.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"guards/RoleGuard.html":{},"injectables/S3Service.html":{},"injectables/SchemaService.html":{},"modules/StorageModule.html":{},"injectables/StripeService.html":{},"injectables/SuccessResponseInterceptor.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/UsersSubscriber.html":{}}}],["metricreader",{"_index":1705,"title":{},"body":{"miscellaneous/variables.html":{}}}],["middlewareconsumer",{"_index":75,"title":{},"body":{"modules/AppModule.html":{}}}],["mikro",{"_index":96,"title":{},"body":{"modules/AppModule.html":{},"injectables/CreateUserCommand.html":{},"injectables/SchemaService.html":{},"entities/User.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/UsersSubscriber.html":{},"dependencies.html":{}}}],["mikroorm",{"_index":1243,"title":{},"body":{"injectables/SchemaService.html":{}}}],["mikroormmodule",{"_index":95,"title":{},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{}}}],["mikroormmodule.forfeature([user",{"_index":1426,"title":{},"body":{"modules/UsersModule.html":{}}}],["mikroormmodule.forrootasync",{"_index":126,"title":{},"body":{"modules/AppModule.html":{}}}],["min",{"_index":144,"title":{},"body":{"modules/AppModule.html":{}}}],["minimum",{"_index":659,"title":{},"body":{"classes/ChangePasswordDto.html":{}}}],["minlength",{"_index":664,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/ResetPasswordDto.html":{}}}],["minlength(10",{"_index":657,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/ResetPasswordDto.html":{}}}],["miscellaneous",{"_index":1648,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["module",{"_index":51,"title":{"modules/AppModule.html":{},"modules/AppRedisModule.html":{},"modules/AuthModule.html":{},"modules/EmailModule.html":{},"modules/HttpClientModule.html":{},"modules/PaymentModule.html":{},"modules/StorageModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AppRedisModule.html":{},"modules/AuthModule.html":{},"modules/EmailModule.html":{},"modules/HttpClientModule.html":{},"modules/PaymentModule.html":{},"modules/StorageModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["modules",{"_index":53,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AppRedisModule.html":{},"modules/AuthModule.html":{},"modules/EmailModule.html":{},"modules/HttpClientModule.html":{},"modules/PaymentModule.html":{},"modules/StorageModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["modules/auth/auth.module",{"_index":92,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/auth/decorators/public.decorator",{"_index":42,"title":{},"body":{"controllers/AppController.html":{}}}],["modules/mailer",{"_index":860,"title":{},"body":{"modules/EmailModule.html":{},"classes/EmailService.html":{},"dependencies.html":{}}}],["modules/mailer/dist/adapters/pug.adapter",{"_index":863,"title":{},"body":{"modules/EmailModule.html":{}}}],["modules/users/subscribers/user.subscriber",{"_index":111,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/users/users.module",{"_index":91,"title":{},"body":{"modules/AppModule.html":{}}}],["moment",{"_index":477,"title":{},"body":{"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["moment().utc().todate",{"_index":1039,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["moment.duration(value",{"_index":537,"title":{},"body":{"injectables/AuthService.html":{}}}],["moment.durationinputarg2",{"_index":1721,"title":{},"body":{"miscellaneous/variables.html":{}}}],["morgan",{"_index":1050,"title":{},"body":{"injectables/MorganMiddleware.html":{},"dependencies.html":{}}}],["morganmiddleware",{"_index":93,"title":{"injectables/MorganMiddleware.html":{}},"body":{"modules/AppModule.html":{},"injectables/MorganMiddleware.html":{},"coverage.html":{}}}],["morganmiddleware.name",{"_index":1069,"title":{},"body":{"injectables/MorganMiddleware.html":{}}}],["ms",{"_index":1059,"title":{},"body":{"injectables/MorganMiddleware.html":{}}}],["multiple",{"_index":229,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["name",{"_index":78,"title":{},"body":{"modules/AppModule.html":{},"injectables/AppRedisService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CatchEverythingFilter.html":{},"injectables/CloudinaryService.html":{},"injectables/CreateUserCommand.html":{},"classes/CreateUserDto.html":{},"classes/EmailService.html":{},"interfaces/ErrorResponse.html":{},"injectables/HttpClientService.html":{},"interfaces/IPaymentService.html":{},"interfaces/IStrorageService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/MorganMiddleware.html":{},"classes/PasswordResetEmailConsumer.html":{},"modules/PaymentModule.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"guards/RoleGuard.html":{},"injectables/S3Service.html":{},"injectables/SchemaService.html":{},"injectables/StripeService.html":{},"injectables/SuccessResponseInterceptor.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/UsersSubscriber.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["namespace",{"_index":196,"title":{},"body":{"modules/AppRedisModule.html":{}}}],["nanoid",{"_index":720,"title":{},"body":{"injectables/CreateUserCommand.html":{},"injectables/S3Service.html":{},"dependencies.html":{}}}],["necessary",{"_index":1185,"title":{},"body":{"guards/RoleGuard.html":{}}}],["needs",{"_index":1011,"title":{},"body":{"injectables/JwtStrategy.html":{},"entities/User.html":{}}}],["nest",{"_index":33,"title":{},"body":{"controllers/AppController.html":{},"injectables/CreateUserCommand.html":{},"dependencies.html":{}}}],["nestinterceptor",{"_index":1143,"title":{},"body":{"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/SuccessResponseInterceptor.html":{}}}],["nestjs",{"_index":686,"title":{},"body":{"injectables/CloudinaryService.html":{},"modules/EmailModule.html":{},"classes/EmailService.html":{},"interfaces/IStrorageService.html":{},"injectables/S3Service.html":{},"modules/StorageModule.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["nestjs/axios",{"_index":908,"title":{},"body":{"modules/HttpClientModule.html":{},"injectables/HttpClientService.html":{},"dependencies.html":{}}}],["nestjs/bullmq",{"_index":113,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/PasswordResetEmailConsumer.html":{},"modules/PaymentModule.html":{},"injectables/StripeService.html":{},"dependencies.html":{}}}],["nestjs/common",{"_index":20,"title":{},"body":{"interfaces/ApiResponse.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AppRedisModule.html":{},"injectables/AppRedisService.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CatchEverythingFilter.html":{},"injectables/CloudinaryService.html":{},"injectables/CreateUserCommand.html":{},"modules/EmailModule.html":{},"classes/EmailService.html":{},"modules/HttpClientModule.html":{},"injectables/HttpClientService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/MorganMiddleware.html":{},"classes/PasswordResetEmailConsumer.html":{},"modules/PaymentModule.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"guards/RoleGuard.html":{},"injectables/S3Service.html":{},"injectables/SchemaService.html":{},"modules/StorageModule.html":{},"injectables/StripeService.html":{},"injectables/SuccessResponseInterceptor.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/UsersSubscriber.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":90,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRedisModule.html":{},"injectables/AppRedisService.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CloudinaryService.html":{},"modules/EmailModule.html":{},"injectables/JwtStrategy.html":{},"modules/PaymentModule.html":{},"injectables/S3Service.html":{},"injectables/SchemaService.html":{},"modules/StorageModule.html":{},"injectables/StripeService.html":{},"injectables/UsersService.html":{},"injectables/UsersSubscriber.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":386,"title":{},"body":{"modules/AuthModule.html":{},"classes/CatchEverythingFilter.html":{},"injectables/JwtAuthGuard.html":{},"guards/RoleGuard.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":390,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["nestjs/mapped",{"_index":1586,"title":{},"body":{"dependencies.html":{}}}],["nestjs/passport",{"_index":392,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":1588,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":45,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/AuthResponseDto.html":{},"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserResponseDto.html":{},"classes/ForgotPasswordDto.html":{},"classes/GetProfileResponseDto.html":{},"classes/LoginDto.html":{},"classes/RefreshTokenDto.html":{},"classes/ResetPasswordDto.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["nestmiddleware",{"_index":1049,"title":{},"body":{"injectables/MorganMiddleware.html":{}}}],["nestmodule",{"_index":82,"title":{},"body":{"modules/AppModule.html":{}}}],["new",{"_index":154,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"classes/CatchEverythingFilter.html":{},"classes/ChangePasswordDto.html":{},"injectables/CloudinaryService.html":{},"injectables/CreateUserCommand.html":{},"modules/EmailModule.html":{},"injectables/HttpClientService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/LocalStrategy.html":{},"modules/PaymentModule.html":{},"classes/ResetPasswordDto.html":{},"guards/RoleGuard.html":{},"injectables/S3Service.html":{},"injectables/SchemaService.html":{},"modules/StorageModule.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/UsersSubscriber.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["newly",{"_index":846,"title":{},"body":{"classes/CreateUserResponseDto.html":{},"classes/GetProfileResponseDto.html":{}}}],["newpassword",{"_index":375,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ChangePasswordDto.html":{},"classes/ResetPasswordDto.html":{},"injectables/UsersService.html":{}}}],["newpayload",{"_index":533,"title":{},"body":{"injectables/AuthService.html":{}}}],["newuser",{"_index":1413,"title":{},"body":{"controllers/UsersController.html":{}}}],["next",{"_index":502,"title":{},"body":{"injectables/AuthService.html":{},"injectables/MorganMiddleware.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/SuccessResponseInterceptor.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["next.handle",{"_index":1150,"title":{},"body":{"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/SuccessResponseInterceptor.html":{}}}],["next.handle().pipe",{"_index":1151,"title":{},"body":{"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/SuccessResponseInterceptor.html":{}}}],["node",{"_index":1213,"title":{},"body":{"injectables/S3Service.html":{},"dependencies.html":{}}}],["nodeenv",{"_index":1248,"title":{},"body":{"injectables/SchemaService.html":{}}}],["nodemailer",{"_index":1633,"title":{},"body":{"dependencies.html":{}}}],["nodesdk",{"_index":1704,"title":{},"body":{"miscellaneous/variables.html":{}}}],["normalizefields",{"_index":1380,"title":{},"body":{"entities/User.html":{},"injectables/UsersSubscriber.html":{}}}],["normalizefields(user",{"_index":1505,"title":{},"body":{"injectables/UsersSubscriber.html":{}}}],["notbefore",{"_index":512,"title":{},"body":{"injectables/AuthService.html":{}}}],["notbeforeerror",{"_index":470,"title":{},"body":{"injectables/AuthService.html":{}}}],["note",{"_index":988,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["notfounderror",{"_index":1451,"title":{},"body":{"injectables/UsersService.html":{}}}],["notfoundexception",{"_index":466,"title":{},"body":{"injectables/AuthService.html":{},"classes/CatchEverythingFilter.html":{},"injectables/UsersService.html":{}}}],["notfoundexception('password",{"_index":556,"title":{},"body":{"injectables/AuthService.html":{}}}],["notfoundexception('user",{"_index":497,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["null",{"_index":254,"title":{},"body":{"injectables/AppRedisService.html":{},"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["nullable",{"_index":1325,"title":{},"body":{"entities/User.html":{}}}],["number",{"_index":222,"title":{},"body":{"injectables/AppRedisService.html":{},"injectables/AuthService.html":{},"classes/CatchEverythingFilter.html":{},"classes/CreateUserDto.html":{},"interfaces/ErrorResponse.html":{},"interfaces/IStrorageService.html":{},"injectables/S3Service.html":{},"entities/User.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{}}}],["number.isinteger(response.statuscode",{"_index":1156,"title":{},"body":{"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/SuccessResponseInterceptor.html":{}}}],["nx",{"_index":241,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["nxinfo",{"_index":265,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["object",{"_index":957,"title":{},"body":{"interfaces/IStrorageService.html":{},"injectables/S3Service.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["object.assign(user",{"_index":1482,"title":{},"body":{"injectables/UsersService.html":{}}}],["object.values(userroleenum).join",{"_index":843,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["observable",{"_index":1141,"title":{},"body":{"injectables/RequestBodyAndResponseInterceptor.html":{},"guards/RoleGuard.html":{},"injectables/SuccessResponseInterceptor.html":{}}}],["ok",{"_index":252,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["one",{"_index":842,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["onmoduleinit",{"_index":1241,"title":{},"body":{"injectables/SchemaService.html":{}}}],["onupdate",{"_index":1370,"title":{},"body":{"entities/User.html":{}}}],["opentelemetry/auto",{"_index":1590,"title":{},"body":{"dependencies.html":{}}}],["opentelemetry/context",{"_index":1593,"title":{},"body":{"dependencies.html":{}}}],["opentelemetry/core",{"_index":1596,"title":{},"body":{"dependencies.html":{}}}],["opentelemetry/exporter",{"_index":1597,"title":{},"body":{"dependencies.html":{}}}],["opentelemetry/propagator",{"_index":1600,"title":{},"body":{"dependencies.html":{}}}],["opentelemetry/sdk",{"_index":1603,"title":{},"body":{"dependencies.html":{}}}],["operation",{"_index":431,"title":{},"body":{"classes/AuthResponseDto.html":{},"classes/CreateUserResponseDto.html":{},"classes/GetProfileResponseDto.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/SuccessResponseInterceptor.html":{}}}],["option",{"_index":758,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["option({flags",{"_index":731,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["optional",{"_index":10,"title":{},"body":{"interfaces/ApiResponse.html":{},"modules/AppModule.html":{},"injectables/AppRedisService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CatchEverythingFilter.html":{},"injectables/CloudinaryService.html":{},"injectables/CreateUserCommand.html":{},"classes/CreateUserDto.html":{},"classes/EmailService.html":{},"interfaces/ErrorResponse.html":{},"injectables/HttpClientService.html":{},"interfaces/IPaymentService.html":{},"interfaces/IStrorageService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/MorganMiddleware.html":{},"classes/PasswordResetEmailConsumer.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"guards/RoleGuard.html":{},"injectables/S3Service.html":{},"injectables/SchemaService.html":{},"injectables/StripeService.html":{},"injectables/SuccessResponseInterceptor.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/UsersSubscriber.html":{},"miscellaneous/functions.html":{}}}],["options",{"_index":750,"title":{},"body":{"injectables/CreateUserCommand.html":{},"modules/EmailModule.html":{},"injectables/HttpClientService.html":{},"interfaces/IPaymentService.html":{},"injectables/StripeService.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{}}}],["originaldata",{"_index":1518,"title":{},"body":{"injectables/UsersSubscriber.html":{}}}],["originaldata.password",{"_index":1520,"title":{},"body":{"injectables/UsersSubscriber.html":{}}}],["orm",{"_index":1245,"title":{},"body":{"injectables/SchemaService.html":{}}}],["orm/core",{"_index":762,"title":{},"body":{"injectables/CreateUserCommand.html":{},"injectables/SchemaService.html":{},"entities/User.html":{},"injectables/UsersService.html":{},"injectables/UsersSubscriber.html":{},"dependencies.html":{}}}],["orm/nestjs",{"_index":97,"title":{},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["orm/postgresql",{"_index":99,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["os",{"_index":1079,"title":{},"body":{"classes/PasswordResetEmailConsumer.html":{}}}],["os.cpus().length",{"_index":1087,"title":{},"body":{"classes/PasswordResetEmailConsumer.html":{}}}],["otelsdk",{"_index":1564,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["out",{"_index":70,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRedisModule.html":{},"modules/AuthModule.html":{},"modules/EmailModule.html":{},"modules/HttpClientModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["overview",{"_index":1683,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":1568,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["param",{"_index":261,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["parameters",{"_index":77,"title":{},"body":{"modules/AppModule.html":{},"injectables/AppRedisService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CatchEverythingFilter.html":{},"injectables/CloudinaryService.html":{},"injectables/CreateUserCommand.html":{},"classes/EmailService.html":{},"injectables/HttpClientService.html":{},"interfaces/IPaymentService.html":{},"interfaces/IStrorageService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/MorganMiddleware.html":{},"classes/PasswordResetEmailConsumer.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"guards/RoleGuard.html":{},"injectables/S3Service.html":{},"injectables/SchemaService.html":{},"injectables/StripeService.html":{},"injectables/SuccessResponseInterceptor.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/UsersSubscriber.html":{},"miscellaneous/functions.html":{}}}],["params",{"_index":943,"title":{},"body":{"interfaces/IPaymentService.html":{},"injectables/StripeService.html":{}}}],["parsed",{"_index":1469,"title":{},"body":{"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["parsed[1",{"_index":1728,"title":{},"body":{"miscellaneous/variables.html":{}}}],["parsed[2",{"_index":1729,"title":{},"body":{"miscellaneous/variables.html":{}}}],["parseemail",{"_index":721,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["parseemail(val",{"_index":730,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["parsefirstname",{"_index":722,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["parsefirstname(val",{"_index":736,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["parseint(this.jwtexpiresin",{"_index":486,"title":{},"body":{"injectables/AuthService.html":{}}}],["parselastname",{"_index":723,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["parselastname(val",{"_index":740,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["parser",{"_index":1204,"title":{},"body":{"injectables/S3Service.html":{}}}],["parserole",{"_index":724,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["parserole(val",{"_index":744,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["parsetimestring",{"_index":478,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["parsetimestring(this.jwtrefreshexpriresin",{"_index":535,"title":{},"body":{"injectables/AuthService.html":{}}}],["parseurl",{"_index":1202,"title":{},"body":{"injectables/S3Service.html":{}}}],["pass",{"_index":457,"title":{},"body":{"injectables/AuthService.html":{},"modules/EmailModule.html":{}}}],["passport",{"_index":1019,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["passportmodule",{"_index":391,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":1020,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["passportstrategy(strategy",{"_index":984,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["passreqtocallback",{"_index":1026,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["password",{"_index":138,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ChangePasswordDto.html":{},"injectables/CreateUserCommand.html":{},"classes/CreateUserDto.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"classes/ResetPasswordDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["password')@httpcode(httpstatus.ok)@apioperation({summary",{"_index":312,"title":{},"body":{"controllers/AuthController.html":{}}}],["password'})@apibody({type",{"_index":332,"title":{},"body":{"controllers/AuthController.html":{}}}],["password.dto",{"_index":348,"title":{},"body":{"controllers/AuthController.html":{},"injectables/UsersService.html":{}}}],["password.dto.ts",{"_index":641,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/ForgotPasswordDto.html":{},"classes/ResetPasswordDto.html":{},"coverage.html":{}}}],["password.dto.ts:19",{"_index":660,"title":{},"body":{"classes/ChangePasswordDto.html":{}}}],["password.dto.ts:25",{"_index":1170,"title":{},"body":{"classes/ResetPasswordDto.html":{}}}],["password.dto.ts:35",{"_index":658,"title":{},"body":{"classes/ChangePasswordDto.html":{}}}],["password.dto.ts:41",{"_index":1169,"title":{},"body":{"classes/ResetPasswordDto.html":{}}}],["password.dto.ts:50",{"_index":1172,"title":{},"body":{"classes/ResetPasswordDto.html":{}}}],["password.dto.ts:7",{"_index":896,"title":{},"body":{"classes/ForgotPasswordDto.html":{}}}],["password_character_set",{"_index":761,"title":{},"body":{"injectables/CreateUserCommand.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["password_reset",{"_index":1654,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["password_reset_email_queue_name",{"_index":398,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/PasswordResetEmailConsumer.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["passwordresetemailconsumer",{"_index":1071,"title":{"classes/PasswordResetEmailConsumer.html":{}},"body":{"classes/PasswordResetEmailConsumer.html":{},"coverage.html":{}}}],["passwordresetemailqueue",{"_index":445,"title":{},"body":{"injectables/AuthService.html":{}}}],["passwordresetrequested",{"_index":550,"title":{},"body":{"injectables/AuthService.html":{},"entities/User.html":{}}}],["passwordreseturl",{"_index":439,"title":{},"body":{"injectables/AuthService.html":{}}}],["patch",{"_index":1657,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["path",{"_index":171,"title":{},"body":{"modules/AppModule.html":{},"classes/CatchEverythingFilter.html":{},"modules/EmailModule.html":{},"interfaces/ErrorResponse.html":{},"entities/User.html":{}}}],["path/webhook",{"_index":172,"title":{},"body":{"modules/AppModule.html":{}}}],["payload",{"_index":508,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["payload.email",{"_index":554,"title":{},"body":{"injectables/AuthService.html":{}}}],["payload.sub",{"_index":532,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["payment",{"_index":1300,"title":{},"body":{"injectables/StripeService.html":{}}}],["payment_intent.succeeded",{"_index":1311,"title":{},"body":{"injectables/StripeService.html":{}}}],["payment_provider",{"_index":1106,"title":{},"body":{"modules/PaymentModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["paymentdriverenum",{"_index":1107,"title":{},"body":{"modules/PaymentModule.html":{},"miscellaneous/enumerations.html":{}}}],["paymentdriverenum.stripe",{"_index":1127,"title":{},"body":{"modules/PaymentModule.html":{}}}],["paymentintent",{"_index":1302,"title":{},"body":{"injectables/StripeService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["paymentmodule",{"_index":1097,"title":{"modules/PaymentModule.html":{}},"body":{"modules/PaymentModule.html":{},"modules.html":{}}}],["per",{"_index":997,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["permission",{"_index":1186,"title":{},"body":{"guards/RoleGuard.html":{}}}],["phone",{"_index":813,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/User.html":{}}}],["phonenumber",{"_index":790,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/User.html":{},"injectables/UsersSubscriber.html":{}}}],["pipeline",{"_index":279,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["pipeline.exec",{"_index":284,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["pipeline.incr(key",{"_index":283,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["pipeline.set(key",{"_index":281,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["pool",{"_index":143,"title":{},"body":{"modules/AppModule.html":{}}}],["port",{"_index":134,"title":{},"body":{"modules/AppModule.html":{},"modules/EmailModule.html":{}}}],["post",{"_index":334,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{},"miscellaneous/enumerations.html":{}}}],["post('forgot",{"_index":369,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('login",{"_index":354,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('refresh",{"_index":364,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('reset",{"_index":373,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('sign",{"_index":1411,"title":{},"body":{"controllers/UsersController.html":{}}}],["postal",{"_index":816,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["postal/zip",{"_index":1363,"title":{},"body":{"entities/User.html":{}}}],["postalcode",{"_index":791,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/User.html":{},"injectables/UsersSubscriber.html":{}}}],["postgresqldriver",{"_index":98,"title":{},"body":{"modules/AppModule.html":{}}}],["prefix",{"_index":304,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["presigner",{"_index":1208,"title":{},"body":{"injectables/S3Service.html":{},"dependencies.html":{}}}],["presigner.presign",{"_index":1238,"title":{},"body":{"injectables/S3Service.html":{}}}],["preventserverstart",{"_index":1716,"title":{},"body":{"miscellaneous/variables.html":{}}}],["primarykey",{"_index":1372,"title":{},"body":{"entities/User.html":{}}}],["primarykey({type",{"_index":1353,"title":{},"body":{"entities/User.html":{}}}],["private",{"_index":201,"title":{},"body":{"injectables/AppRedisService.html":{},"injectables/AuthService.html":{},"classes/CatchEverythingFilter.html":{},"injectables/CloudinaryService.html":{},"injectables/CreateUserCommand.html":{},"classes/EmailService.html":{},"injectables/HttpClientService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/MorganMiddleware.html":{},"classes/PasswordResetEmailConsumer.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/S3Service.html":{},"injectables/SchemaService.html":{},"injectables/StripeService.html":{},"injectables/SuccessResponseInterceptor.html":{},"entities/User.html":{},"injectables/UsersService.html":{},"injectables/UsersSubscriber.html":{}}}],["process",{"_index":1073,"title":{},"body":{"classes/PasswordResetEmailConsumer.html":{}}}],["process(job",{"_index":1076,"title":{},"body":{"classes/PasswordResetEmailConsumer.html":{}}}],["processed",{"_index":1096,"title":{},"body":{"classes/PasswordResetEmailConsumer.html":{}}}],["processing",{"_index":1088,"title":{},"body":{"classes/PasswordResetEmailConsumer.html":{}}}],["processor",{"_index":1080,"title":{},"body":{"classes/PasswordResetEmailConsumer.html":{}}}],["processor(password_reset_email_queue_name",{"_index":1085,"title":{},"body":{"classes/PasswordResetEmailConsumer.html":{}}}],["production",{"_index":100,"title":{},"body":{"modules/AppModule.html":{},"injectables/SchemaService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["profile",{"_index":851,"title":{},"body":{"classes/CreateUserResponseDto.html":{},"classes/GetProfileResponseDto.html":{},"controllers/UsersController.html":{}}}],["prometheus",{"_index":1598,"title":{},"body":{"dependencies.html":{}}}],["prometheusexporter",{"_index":1565,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["promise",{"_index":221,"title":{},"body":{"injectables/AppRedisService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CloudinaryService.html":{},"injectables/CreateUserCommand.html":{},"classes/EmailService.html":{},"injectables/HttpClientService.html":{},"interfaces/IPaymentService.html":{},"interfaces/IStrorageService.html":{},"injectables/LocalStrategy.html":{},"guards/RoleGuard.html":{},"injectables/S3Service.html":{},"injectables/StripeService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["promise((resolve",{"_index":701,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["promise.all",{"_index":1475,"title":{},"body":{"injectables/UsersService.html":{}}}],["propagators",{"_index":1710,"title":{},"body":{"miscellaneous/variables.html":{}}}],["properties",{"_index":9,"title":{"properties.html":{}},"body":{"interfaces/ApiResponse.html":{},"injectables/AppRedisService.html":{},"classes/AuthResponseDto.html":{},"injectables/AuthService.html":{},"classes/CatchEverythingFilter.html":{},"classes/ChangePasswordDto.html":{},"injectables/CreateUserCommand.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserResponseDto.html":{},"interfaces/ErrorResponse.html":{},"classes/ForgotPasswordDto.html":{},"classes/GetProfileResponseDto.html":{},"injectables/HttpClientService.html":{},"classes/LoginDto.html":{},"classes/RefreshTokenDto.html":{},"classes/ResetPasswordDto.html":{},"injectables/S3Service.html":{},"injectables/SchemaService.html":{},"entities/User.html":{},"injectables/UsersService.html":{},"properties.html":{}}}],["property",{"_index":1373,"title":{},"body":{"entities/User.html":{}}}],["property({type",{"_index":1323,"title":{},"body":{"entities/User.html":{}}}],["property({unique",{"_index":1348,"title":{},"body":{"entities/User.html":{}}}],["provide",{"_index":418,"title":{},"body":{"modules/AuthModule.html":{},"modules/PaymentModule.html":{},"modules/StorageModule.html":{}}}],["provided",{"_index":1131,"title":{},"body":{"classes/RefreshTokenDto.html":{}}}],["providers",{"_index":58,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRedisModule.html":{},"modules/AuthModule.html":{},"modules/EmailModule.html":{},"modules/HttpClientModule.html":{},"modules/PaymentModule.html":{},"injectables/S3Service.html":{},"modules/StorageModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"overview.html":{}}}],["public",{"_index":41,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"modules/PaymentModule.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["public()@post('forgot",{"_index":311,"title":{},"body":{"controllers/AuthController.html":{}}}],["public()@post('refresh')@httpcode(httpstatus.ok)@apioperation({summary",{"_index":324,"title":{},"body":{"controllers/AuthController.html":{}}}],["public()@post('reset",{"_index":331,"title":{},"body":{"controllers/AuthController.html":{}}}],["public()@post('sign",{"_index":1396,"title":{},"body":{"controllers/UsersController.html":{}}}],["public_id=${result.public_id",{"_index":712,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["pug",{"_index":1637,"title":{},"body":{"dependencies.html":{}}}],["pugadapter",{"_index":862,"title":{},"body":{"modules/EmailModule.html":{}}}],["put",{"_index":956,"title":{},"body":{"interfaces/IStrorageService.html":{},"injectables/S3Service.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["query",{"_index":1444,"title":{},"body":{"injectables/UsersService.html":{}}}],["query.email",{"_index":1465,"title":{},"body":{"injectables/UsersService.html":{}}}],["query.id",{"_index":1463,"title":{},"body":{"injectables/UsersService.html":{}}}],["queue",{"_index":446,"title":{},"body":{"injectables/AuthService.html":{},"modules/PaymentModule.html":{},"injectables/StripeService.html":{},"miscellaneous/variables.html":{}}}],["queued",{"_index":1314,"title":{},"body":{"injectables/StripeService.html":{}}}],["queues",{"_index":164,"title":{},"body":{"modules/AppModule.html":{}}}],["quickly",{"_index":1655,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["r",{"_index":745,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["raw",{"_index":992,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["readonly",{"_index":167,"title":{},"body":{"modules/AppModule.html":{},"injectables/AppRedisService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CatchEverythingFilter.html":{},"injectables/CloudinaryService.html":{},"injectables/CreateUserCommand.html":{},"classes/EmailService.html":{},"injectables/HttpClientService.html":{},"injectables/MorganMiddleware.html":{},"classes/PasswordResetEmailConsumer.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"guards/RoleGuard.html":{},"injectables/S3Service.html":{},"injectables/SchemaService.html":{},"injectables/StripeService.html":{},"injectables/SuccessResponseInterceptor.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/UsersSubscriber.html":{}}}],["readylog",{"_index":193,"title":{},"body":{"modules/AppRedisModule.html":{}}}],["received",{"_index":1310,"title":{},"body":{"injectables/StripeService.html":{}}}],["record",{"_index":751,"title":{},"body":{"injectables/CreateUserCommand.html":{},"classes/EmailService.html":{},"entities/User.html":{}}}],["redis",{"_index":191,"title":{},"body":{"modules/AppRedisModule.html":{},"injectables/AppRedisService.html":{},"dependencies.html":{}}}],["redis.service",{"_index":188,"title":{},"body":{"modules/AppRedisModule.html":{}}}],["redismodule",{"_index":189,"title":{},"body":{"modules/AppRedisModule.html":{}}}],["redismodule.forrootasync",{"_index":192,"title":{},"body":{"modules/AppRedisModule.html":{}}}],["redisservice",{"_index":212,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["referrer",{"_index":1061,"title":{},"body":{"injectables/MorganMiddleware.html":{}}}],["reflect",{"_index":1639,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":964,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/RoleGuard.html":{}}}],["reflector.createdecorator",{"_index":1730,"title":{},"body":{"miscellaneous/variables.html":{}}}],["refresh",{"_index":307,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/RefreshTokenDto.html":{}}}],["refresh(@body",{"_index":365,"title":{},"body":{"controllers/AuthController.html":{}}}],["refresh(body",{"_index":323,"title":{},"body":{"controllers/AuthController.html":{}}}],["refresh(refreshtoken",{"_index":452,"title":{},"body":{"injectables/AuthService.html":{}}}],["refresh_token",{"_index":357,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["refreshed",{"_index":368,"title":{},"body":{"controllers/AuthController.html":{}}}],["refreshtoken",{"_index":363,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/RefreshTokenDto.html":{}}}],["refreshtokendto",{"_index":327,"title":{"classes/RefreshTokenDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/RefreshTokenDto.html":{},"coverage.html":{}}}],["region",{"_index":1234,"title":{},"body":{"injectables/S3Service.html":{},"modules/StorageModule.html":{}}}],["register",{"_index":1100,"title":{},"body":{"modules/PaymentModule.html":{},"modules/StorageModule.html":{}}}],["reject",{"_index":702,"title":{},"body":{"injectables/CloudinaryService.html":{},"injectables/JwtStrategy.html":{}}}],["reject(error",{"_index":711,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["remote",{"_index":1054,"title":{},"body":{"injectables/MorganMiddleware.html":{}}}],["req",{"_index":322,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtStrategy.html":{},"injectables/MorganMiddleware.html":{},"controllers/UsersController.html":{}}}],["req.url",{"_index":1052,"title":{},"body":{"injectables/MorganMiddleware.html":{}}}],["req.url.match(/\\/v1\\/queues",{"_index":1053,"title":{},"body":{"injectables/MorganMiddleware.html":{}}}],["req.user",{"_index":359,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["req[body",{"_index":1064,"title":{},"body":{"injectables/MorganMiddleware.html":{}}}],["req[header",{"_index":1063,"title":{},"body":{"injectables/MorganMiddleware.html":{}}}],["request",{"_index":313,"title":{},"body":{"controllers/AuthController.html":{},"classes/CatchEverythingFilter.html":{},"injectables/HttpClientService.html":{},"injectables/JwtStrategy.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"guards/RoleGuard.html":{},"injectables/S3Service.html":{},"injectables/SuccessResponseInterceptor.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["request.method",{"_index":619,"title":{},"body":{"classes/CatchEverythingFilter.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/SuccessResponseInterceptor.html":{}}}],["request.url",{"_index":620,"title":{},"body":{"classes/CatchEverythingFilter.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/SuccessResponseInterceptor.html":{}}}],["request?.user?.role",{"_index":1184,"title":{},"body":{"guards/RoleGuard.html":{}}}],["requestbodyandresponseinterceptor",{"_index":1134,"title":{"injectables/RequestBodyAndResponseInterceptor.html":{}},"body":{"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/SuccessResponseInterceptor.html":{},"coverage.html":{}}}],["requested",{"_index":557,"title":{},"body":{"injectables/AuthService.html":{},"entities/User.html":{}}}],["requestmethod",{"_index":83,"title":{},"body":{"modules/AppModule.html":{}}}],["requestmethod.all",{"_index":170,"title":{},"body":{"modules/AppModule.html":{}}}],["requesturl",{"_index":605,"title":{},"body":{"classes/CatchEverythingFilter.html":{}}}],["require('buffer",{"_index":681,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["required",{"_index":733,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["requiredrole",{"_index":1181,"title":{},"body":{"guards/RoleGuard.html":{}}}],["res",{"_index":1046,"title":{},"body":{"injectables/MorganMiddleware.html":{}}}],["res.statuscode",{"_index":1066,"title":{},"body":{"injectables/MorganMiddleware.html":{}}}],["res[content",{"_index":1057,"title":{},"body":{"injectables/MorganMiddleware.html":{}}}],["reset",{"_index":69,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRedisModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/EmailModule.html":{},"modules/HttpClientModule.html":{},"classes/ResetPasswordDto.html":{},"entities/User.html":{},"modules/UsersModule.html":{},"miscellaneous/enumerations.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["reset'})@apibody({type",{"_index":314,"title":{},"body":{"controllers/AuthController.html":{}}}],["resetpassword",{"_index":308,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["resetpassword(body",{"_index":329,"title":{},"body":{"controllers/AuthController.html":{}}}],["resetpassword(resettoken",{"_index":454,"title":{},"body":{"injectables/AuthService.html":{}}}],["resetpassworddto",{"_index":330,"title":{"classes/ResetPasswordDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/ResetPasswordDto.html":{},"coverage.html":{}}}],["resettoken",{"_index":374,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ResetPasswordDto.html":{}}}],["reseturl",{"_index":543,"title":{},"body":{"injectables/AuthService.html":{},"classes/PasswordResetEmailConsumer.html":{}}}],["resolve(result",{"_index":714,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["resource_type",{"_index":706,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["response",{"_index":603,"title":{},"body":{"classes/CatchEverythingFilter.html":{},"interfaces/IStrorageService.html":{},"injectables/MorganMiddleware.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/S3Service.html":{},"injectables/SuccessResponseInterceptor.html":{}}}],["response.dto.ts",{"_index":423,"title":{},"body":{"classes/AuthResponseDto.html":{},"coverage.html":{}}}],["response.dto.ts:14",{"_index":432,"title":{},"body":{"classes/AuthResponseDto.html":{}}}],["response.dto.ts:8",{"_index":428,"title":{},"body":{"classes/AuthResponseDto.html":{}}}],["response.interface",{"_index":350,"title":{},"body":{"controllers/AuthController.html":{},"classes/CatchEverythingFilter.html":{},"controllers/UsersController.html":{}}}],["response.interface.ts",{"_index":7,"title":{},"body":{"interfaces/ApiResponse.html":{},"interfaces/ErrorResponse.html":{},"coverage.html":{}}}],["response.message",{"_index":1160,"title":{},"body":{"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/SuccessResponseInterceptor.html":{}}}],["response.statuscode",{"_index":1157,"title":{},"body":{"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/SuccessResponseInterceptor.html":{}}}],["response.ts",{"_index":1562,"title":{},"body":{"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["response?.data",{"_index":1162,"title":{},"body":{"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/SuccessResponseInterceptor.html":{}}}],["response?.message",{"_index":1159,"title":{},"body":{"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/SuccessResponseInterceptor.html":{}}}],["response?.statuscode",{"_index":1155,"title":{},"body":{"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/SuccessResponseInterceptor.html":{}}}],["responsebody",{"_index":617,"title":{},"body":{"classes/CatchEverythingFilter.html":{}}}],["responsedata",{"_index":1161,"title":{},"body":{"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/SuccessResponseInterceptor.html":{}}}],["result",{"_index":292,"title":{},"body":{"injectables/AppRedisService.html":{},"injectables/AuthService.html":{},"injectables/CloudinaryService.html":{},"injectables/UsersService.html":{}}}],["results",{"_index":22,"title":{},"body":{"interfaces/ApiResponse.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AppRedisModule.html":{},"injectables/AppRedisService.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/AuthResponseDto.html":{},"injectables/AuthService.html":{},"classes/CatchEverythingFilter.html":{},"classes/ChangePasswordDto.html":{},"injectables/CloudinaryService.html":{},"injectables/CreateUserCommand.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserResponseDto.html":{},"modules/EmailModule.html":{},"classes/EmailService.html":{},"interfaces/ErrorResponse.html":{},"classes/ForgotPasswordDto.html":{},"classes/GetProfileResponseDto.html":{},"modules/HttpClientModule.html":{},"injectables/HttpClientService.html":{},"interfaces/IPaymentService.html":{},"interfaces/IStrorageService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"injectables/MorganMiddleware.html":{},"classes/PasswordResetEmailConsumer.html":{},"modules/PaymentModule.html":{},"classes/RefreshTokenDto.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"classes/ResetPasswordDto.html":{},"guards/RoleGuard.html":{},"injectables/S3Service.html":{},"injectables/SchemaService.html":{},"modules/StorageModule.html":{},"injectables/StripeService.html":{},"injectables/SuccessResponseInterceptor.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/UsersSubscriber.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["results[ttl",{"_index":286,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["return",{"_index":50,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AppRedisModule.html":{},"injectables/AppRedisService.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CatchEverythingFilter.html":{},"injectables/CloudinaryService.html":{},"injectables/CreateUserCommand.html":{},"classes/CreateUserDto.html":{},"injectables/HttpClientService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/MorganMiddleware.html":{},"modules/PaymentModule.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"guards/RoleGuard.html":{},"injectables/S3Service.html":{},"modules/StorageModule.html":{},"injectables/StripeService.html":{},"injectables/SuccessResponseInterceptor.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/UsersSubscriber.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":38,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppRedisService.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CatchEverythingFilter.html":{},"injectables/CloudinaryService.html":{},"injectables/CreateUserCommand.html":{},"classes/EmailService.html":{},"injectables/HttpClientService.html":{},"interfaces/IPaymentService.html":{},"interfaces/IStrorageService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/MorganMiddleware.html":{},"classes/PasswordResetEmailConsumer.html":{},"modules/PaymentModule.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"guards/RoleGuard.html":{},"injectables/S3Service.html":{},"injectables/SchemaService.html":{},"modules/StorageModule.html":{},"injectables/StripeService.html":{},"injectables/SuccessResponseInterceptor.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/UsersSubscriber.html":{},"miscellaneous/functions.html":{}}}],["role",{"_index":746,"title":{},"body":{"injectables/CreateUserCommand.html":{},"classes/CreateUserDto.html":{},"guards/RoleGuard.html":{},"entities/User.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["roleguard",{"_index":1176,"title":{"guards/RoleGuard.html":{}},"body":{"guards/RoleGuard.html":{},"coverage.html":{}}}],["route",{"_index":163,"title":{},"body":{"modules/AppModule.html":{},"classes/CatchEverythingFilter.html":{},"guards/RoleGuard.html":{}}}],["run",{"_index":725,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["run(inputs",{"_index":749,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["rxjs",{"_index":927,"title":{},"body":{"injectables/HttpClientService.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"guards/RoleGuard.html":{},"injectables/SuccessResponseInterceptor.html":{},"dependencies.html":{}}}],["rxjs/operators",{"_index":1146,"title":{},"body":{"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/SuccessResponseInterceptor.html":{}}}],["s3",{"_index":1192,"title":{},"body":{"injectables/S3Service.html":{},"modules/StorageModule.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{}}}],["s3.service",{"_index":1263,"title":{},"body":{"modules/StorageModule.html":{}}}],["s3bucket",{"_index":1189,"title":{},"body":{"injectables/S3Service.html":{}}}],["s3client",{"_index":1191,"title":{},"body":{"injectables/S3Service.html":{},"modules/StorageModule.html":{}}}],["s3module",{"_index":1265,"title":{},"body":{"modules/StorageModule.html":{}}}],["s3module.forrootasync",{"_index":1266,"title":{},"body":{"modules/StorageModule.html":{}}}],["s3putobjectresponse",{"_index":954,"title":{},"body":{"interfaces/IStrorageService.html":{},"injectables/S3Service.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["s3region",{"_index":1190,"title":{},"body":{"injectables/S3Service.html":{}}}],["s3requestpresigner",{"_index":1205,"title":{},"body":{"injectables/S3Service.html":{}}}],["s3service",{"_index":1187,"title":{"injectables/S3Service.html":{}},"body":{"injectables/S3Service.html":{},"modules/StorageModule.html":{},"coverage.html":{}}}],["s3service(configservice",{"_index":1277,"title":{},"body":{"modules/StorageModule.html":{}}}],["s3service.name",{"_index":1223,"title":{},"body":{"injectables/S3Service.html":{}}}],["s@]+@[^\\s@]+\\.[^\\s",{"_index":1383,"title":{},"body":{"entities/User.html":{},"injectables/UsersSubscriber.html":{}}}],["s@]+@[^\\s@]+\\.[^\\s@]{2,}$/i",{"_index":770,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["safeuser",{"_index":1418,"title":{},"body":{"controllers/UsersController.html":{}}}],["salt",{"_index":558,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["saltrounds",{"_index":440,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{},"injectables/UsersSubscriber.html":{}}}],["sanitizebody",{"_index":570,"title":{},"body":{"classes/CatchEverythingFilter.html":{}}}],["sanitizebody(body",{"_index":589,"title":{},"body":{"classes/CatchEverythingFilter.html":{}}}],["schema",{"_index":1254,"title":{},"body":{"injectables/SchemaService.html":{}}}],["schema.service",{"_index":102,"title":{},"body":{"modules/AppModule.html":{}}}],["schemaservice",{"_index":67,"title":{"injectables/SchemaService.html":{}},"body":{"modules/AppModule.html":{},"injectables/SchemaService.html":{},"coverage.html":{},"overview.html":{}}}],["schemaservice.name",{"_index":1256,"title":{},"body":{"injectables/SchemaService.html":{}}}],["sdk/credential",{"_index":1210,"title":{},"body":{"injectables/S3Service.html":{},"dependencies.html":{}}}],["sdk/s3",{"_index":1207,"title":{},"body":{"injectables/S3Service.html":{},"dependencies.html":{}}}],["sdk/util",{"_index":1217,"title":{},"body":{"injectables/S3Service.html":{},"dependencies.html":{}}}],["seconds",{"_index":248,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["secret",{"_index":404,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{}}}],["secretaccesskey",{"_index":1269,"title":{},"body":{"modules/StorageModule.html":{}}}],["secretorkey",{"_index":1024,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["secure",{"_index":869,"title":{},"body":{"modules/EmailModule.html":{}}}],["securely",{"_index":1656,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["sendemail",{"_index":880,"title":{},"body":{"classes/EmailService.html":{}}}],["sendemail(to",{"_index":884,"title":{},"body":{"classes/EmailService.html":{}}}],["sending",{"_index":889,"title":{},"body":{"classes/EmailService.html":{}}}],["sent",{"_index":372,"title":{},"body":{"controllers/AuthController.html":{},"classes/EmailService.html":{},"classes/ResetPasswordDto.html":{}}}],["serializable",{"_index":1474,"title":{},"body":{"injectables/UsersService.html":{}}}],["session",{"_index":996,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/StripeService.html":{}}}],["session.id",{"_index":1298,"title":{},"body":{"injectables/StripeService.html":{}}}],["set",{"_index":208,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["set(key",{"_index":239,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["setmetadata(is_public_key",{"_index":1703,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setting",{"_index":269,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["setupswagger",{"_index":1545,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["setupswagger(app",{"_index":1673,"title":{},"body":{"miscellaneous/functions.html":{}}}],["sha256",{"_index":1235,"title":{},"body":{"injectables/S3Service.html":{}}}],["sign",{"_index":1398,"title":{},"body":{"controllers/UsersController.html":{}}}],["signedurlobject",{"_index":1237,"title":{},"body":{"injectables/S3Service.html":{}}}],["signoptions",{"_index":406,"title":{},"body":{"modules/AuthModule.html":{}}}],["single",{"_index":995,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["size=${file.size",{"_index":697,"title":{},"body":{"injectables/CloudinaryService.html":{},"injectables/S3Service.html":{}}}],["slug.ts",{"_index":1541,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["smithy/hash",{"_index":1212,"title":{},"body":{"injectables/S3Service.html":{},"dependencies.html":{}}}],["smithy/protocol",{"_index":1215,"title":{},"body":{"injectables/S3Service.html":{},"dependencies.html":{}}}],["smithy/url",{"_index":1203,"title":{},"body":{"injectables/S3Service.html":{}}}],["smtp.auth.user",{"_index":874,"title":{},"body":{"modules/EmailModule.html":{}}}],["soft",{"_index":1346,"title":{},"body":{"entities/User.html":{}}}],["source",{"_index":4,"title":{},"body":{"interfaces/ApiResponse.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AppRedisModule.html":{},"injectables/AppRedisService.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/AuthResponseDto.html":{},"injectables/AuthService.html":{},"classes/CatchEverythingFilter.html":{},"classes/ChangePasswordDto.html":{},"injectables/CloudinaryService.html":{},"injectables/CreateUserCommand.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserResponseDto.html":{},"modules/EmailModule.html":{},"classes/EmailService.html":{},"interfaces/ErrorResponse.html":{},"classes/ForgotPasswordDto.html":{},"classes/GetProfileResponseDto.html":{},"modules/HttpClientModule.html":{},"injectables/HttpClientService.html":{},"interfaces/IPaymentService.html":{},"interfaces/IStrorageService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"injectables/MorganMiddleware.html":{},"classes/PasswordResetEmailConsumer.html":{},"modules/PaymentModule.html":{},"classes/RefreshTokenDto.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"classes/ResetPasswordDto.html":{},"guards/RoleGuard.html":{},"injectables/S3Service.html":{},"injectables/SchemaService.html":{},"modules/StorageModule.html":{},"injectables/StripeService.html":{},"injectables/SuccessResponseInterceptor.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/UsersSubscriber.html":{}}}],["springfield",{"_index":833,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["springfield'})@isstring()@isoptional",{"_index":796,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["src/.../auth",{"_index":1694,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../checkout.ts",{"_index":1695,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../generate",{"_index":1669,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../index.ts",{"_index":1650,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../main.cli.ts",{"_index":1667,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../main.ts",{"_index":1668,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../payment",{"_index":1696,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../public.decorator.ts",{"_index":1699,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../s3",{"_index":1697,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../swagger.config.ts",{"_index":1670,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../time.utils.ts",{"_index":1701,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../tracing.ts",{"_index":1700,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app.controller.ts",{"_index":27,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:12",{"_index":37,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":71,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.module.ts:80",{"_index":76,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":297,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":299,"title":{},"body":{"injectables/AppService.html":{}}}],["src/commands/create",{"_index":716,"title":{},"body":{"injectables/CreateUserCommand.html":{},"coverage.html":{}}}],["src/common/constants",{"_index":399,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CreateUserCommand.html":{},"modules/EmailModule.html":{},"classes/PasswordResetEmailConsumer.html":{},"modules/PaymentModule.html":{},"modules/StorageModule.html":{},"injectables/StripeService.html":{}}}],["src/common/constants/index.ts",{"_index":1529,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/common/decorators/index.ts",{"_index":1533,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/common/enums",{"_index":685,"title":{},"body":{"injectables/CloudinaryService.html":{},"injectables/CreateUserCommand.html":{},"classes/CreateUserDto.html":{},"interfaces/IStrorageService.html":{},"classes/PasswordResetEmailConsumer.html":{},"modules/PaymentModule.html":{},"injectables/S3Service.html":{},"modules/StorageModule.html":{},"entities/User.html":{},"injectables/UsersSubscriber.html":{}}}],["src/common/enums/index.ts",{"_index":1653,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/common/filters/exception.filter.ts",{"_index":563,"title":{},"body":{"classes/CatchEverythingFilter.html":{},"coverage.html":{}}}],["src/common/filters/exception.filter.ts:108",{"_index":586,"title":{},"body":{"classes/CatchEverythingFilter.html":{}}}],["src/common/filters/exception.filter.ts:119",{"_index":581,"title":{},"body":{"classes/CatchEverythingFilter.html":{}}}],["src/common/filters/exception.filter.ts:123",{"_index":590,"title":{},"body":{"classes/CatchEverythingFilter.html":{}}}],["src/common/filters/exception.filter.ts:20",{"_index":573,"title":{},"body":{"classes/CatchEverythingFilter.html":{}}}],["src/common/filters/exception.filter.ts:27",{"_index":578,"title":{},"body":{"classes/CatchEverythingFilter.html":{}}}],["src/common/filters/exception.filter.ts:78",{"_index":588,"title":{},"body":{"classes/CatchEverythingFilter.html":{}}}],["src/common/filters/exception.filter.ts:92",{"_index":584,"title":{},"body":{"classes/CatchEverythingFilter.html":{}}}],["src/common/guards/index.ts",{"_index":1178,"title":{},"body":{"guards/RoleGuard.html":{},"coverage.html":{}}}],["src/common/guards/index.ts:13",{"_index":1179,"title":{},"body":{"guards/RoleGuard.html":{}}}],["src/common/guards/index.ts:16",{"_index":1180,"title":{},"body":{"guards/RoleGuard.html":{}}}],["src/common/interceptors/response.interceptor.ts",{"_index":1135,"title":{},"body":{"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/SuccessResponseInterceptor.html":{},"coverage.html":{}}}],["src/common/interceptors/response.interceptor.ts:16",{"_index":1315,"title":{},"body":{"injectables/SuccessResponseInterceptor.html":{}}}],["src/common/interceptors/response.interceptor.ts:53",{"_index":1137,"title":{},"body":{"injectables/RequestBodyAndResponseInterceptor.html":{}}}],["src/common/interceptors/response.interceptor.ts:56",{"_index":1140,"title":{},"body":{"injectables/RequestBodyAndResponseInterceptor.html":{}}}],["src/common/interfaces/api",{"_index":6,"title":{},"body":{"interfaces/ApiResponse.html":{},"controllers/AuthController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["src/common/interfaces/error",{"_index":892,"title":{},"body":{"interfaces/ErrorResponse.html":{},"coverage.html":{}}}],["src/common/middlewares/morgan.middleware.ts",{"_index":1043,"title":{},"body":{"injectables/MorganMiddleware.html":{},"coverage.html":{}}}],["src/common/middlewares/morgan.middleware.ts:11",{"_index":1044,"title":{},"body":{"injectables/MorganMiddleware.html":{}}}],["src/common/middlewares/morgan.middleware.ts:14",{"_index":1047,"title":{},"body":{"injectables/MorganMiddleware.html":{}}}],["src/common/types/index.ts",{"_index":1538,"title":{},"body":{"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/common/utils/generate",{"_index":1540,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/common/utils/time.utils",{"_index":479,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/common/utils/time.utils.ts",{"_index":1543,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/config/swagger.config.ts",{"_index":1544,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/main.cli.ts",{"_index":1546,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/main.ts",{"_index":1547,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/modules/auth/auth.controller.ts",{"_index":303,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/modules/auth/auth.controller.ts:31",{"_index":321,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/modules/auth/auth.controller.ts:47",{"_index":328,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/modules/auth/auth.controller.ts:63",{"_index":315,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/modules/auth/auth.controller.ts:79",{"_index":333,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/modules/auth/auth.module.ts",{"_index":384,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/modules/auth/auth.service.ts",{"_index":434,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/modules/auth/auth.service.ts:137",{"_index":449,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:163",{"_index":455,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:22",{"_index":463,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:23",{"_index":459,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:24",{"_index":460,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:25",{"_index":462,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:26",{"_index":461,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:27",{"_index":447,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:50",{"_index":458,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:69",{"_index":451,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:84",{"_index":453,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/consumers/auth.consumer.ts",{"_index":1072,"title":{},"body":{"classes/PasswordResetEmailConsumer.html":{},"coverage.html":{}}}],["src/modules/auth/consumers/auth.consumer.ts:12",{"_index":1075,"title":{},"body":{"classes/PasswordResetEmailConsumer.html":{}}}],["src/modules/auth/consumers/auth.consumer.ts:20",{"_index":1078,"title":{},"body":{"classes/PasswordResetEmailConsumer.html":{}}}],["src/modules/auth/decorators/public.decorator",{"_index":1108,"title":{},"body":{"modules/PaymentModule.html":{}}}],["src/modules/auth/decorators/public.decorator.ts",{"_index":1550,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/modules/auth/dto/auth",{"_index":422,"title":{},"body":{"classes/AuthResponseDto.html":{},"coverage.html":{}}}],["src/modules/auth/dto/forgot",{"_index":893,"title":{},"body":{"classes/ForgotPasswordDto.html":{},"coverage.html":{}}}],["src/modules/auth/dto/login.dto.ts",{"_index":1040,"title":{},"body":{"classes/LoginDto.html":{},"coverage.html":{}}}],["src/modules/auth/dto/login.dto.ts:10",{"_index":1041,"title":{},"body":{"classes/LoginDto.html":{}}}],["src/modules/auth/dto/login.dto.ts:16",{"_index":1042,"title":{},"body":{"classes/LoginDto.html":{}}}],["src/modules/auth/dto/refresh",{"_index":1129,"title":{},"body":{"classes/RefreshTokenDto.html":{},"coverage.html":{}}}],["src/modules/auth/dto/reset",{"_index":1166,"title":{},"body":{"classes/ResetPasswordDto.html":{},"coverage.html":{}}}],["src/modules/auth/guards/jwt",{"_index":958,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["src/modules/auth/guards/local",{"_index":1027,"title":{},"body":{"injectables/LocalAuthGuard.html":{},"coverage.html":{}}}],["src/modules/auth/strategies/jwt.strategy.ts",{"_index":983,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/modules/auth/strategies/jwt.strategy.ts:34",{"_index":987,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/modules/auth/strategies/jwt.strategy.ts:8",{"_index":985,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/modules/auth/strategies/local.strategy.ts",{"_index":1029,"title":{},"body":{"injectables/LocalStrategy.html":{},"coverage.html":{}}}],["src/modules/auth/strategies/local.strategy.ts:17",{"_index":1033,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/modules/auth/strategies/local.strategy.ts:9",{"_index":1031,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/modules/auth/types/auth",{"_index":1553,"title":{},"body":{"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/modules/users/dto/change",{"_index":640,"title":{},"body":{"classes/ChangePasswordDto.html":{},"coverage.html":{}}}],["src/modules/users/dto/create",{"_index":783,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/modules/users/dto/responses.dto.ts",{"_index":845,"title":{},"body":{"classes/CreateUserResponseDto.html":{},"classes/GetProfileResponseDto.html":{},"coverage.html":{}}}],["src/modules/users/dto/responses.dto.ts:15",{"_index":847,"title":{},"body":{"classes/CreateUserResponseDto.html":{}}}],["src/modules/users/dto/responses.dto.ts:23",{"_index":898,"title":{},"body":{"classes/GetProfileResponseDto.html":{}}}],["src/modules/users/dto/responses.dto.ts:29",{"_index":897,"title":{},"body":{"classes/GetProfileResponseDto.html":{}}}],["src/modules/users/dto/responses.dto.ts:9",{"_index":848,"title":{},"body":{"classes/CreateUserResponseDto.html":{}}}],["src/modules/users/entities/user.entity.ts",{"_index":1318,"title":{},"body":{"entities/User.html":{},"coverage.html":{}}}],["src/modules/users/entities/user.entity.ts:103",{"_index":1362,"title":{},"body":{"entities/User.html":{}}}],["src/modules/users/entities/user.entity.ts:110",{"_index":1359,"title":{},"body":{"entities/User.html":{}}}],["src/modules/users/entities/user.entity.ts:119",{"_index":1367,"title":{},"body":{"entities/User.html":{}}}],["src/modules/users/entities/user.entity.ts:126",{"_index":1333,"title":{},"body":{"entities/User.html":{}}}],["src/modules/users/entities/user.entity.ts:133",{"_index":1360,"title":{},"body":{"entities/User.html":{}}}],["src/modules/users/entities/user.entity.ts:140",{"_index":1356,"title":{},"body":{"entities/User.html":{}}}],["src/modules/users/entities/user.entity.ts:147",{"_index":1347,"title":{},"body":{"entities/User.html":{}}}],["src/modules/users/entities/user.entity.ts:154",{"_index":1345,"title":{},"body":{"entities/User.html":{}}}],["src/modules/users/entities/user.entity.ts:162",{"_index":1371,"title":{},"body":{"entities/User.html":{}}}],["src/modules/users/entities/user.entity.ts:18",{"_index":1355,"title":{},"body":{"entities/User.html":{}}}],["src/modules/users/entities/user.entity.ts:26",{"_index":1350,"title":{},"body":{"entities/User.html":{}}}],["src/modules/users/entities/user.entity.ts:34",{"_index":1330,"title":{},"body":{"entities/User.html":{}}}],["src/modules/users/entities/user.entity.ts:41",{"_index":1351,"title":{},"body":{"entities/User.html":{}}}],["src/modules/users/entities/user.entity.ts:48",{"_index":1357,"title":{},"body":{"entities/User.html":{}}}],["src/modules/users/entities/user.entity.ts:55",{"_index":1328,"title":{},"body":{"entities/User.html":{}}}],["src/modules/users/entities/user.entity.ts:63",{"_index":1335,"title":{},"body":{"entities/User.html":{}}}],["src/modules/users/entities/user.entity.ts:71",{"_index":1364,"title":{},"body":{"entities/User.html":{}}}],["src/modules/users/entities/user.entity.ts:79",{"_index":1369,"title":{},"body":{"entities/User.html":{}}}],["src/modules/users/entities/user.entity.ts:87",{"_index":1336,"title":{},"body":{"entities/User.html":{}}}],["src/modules/users/entities/user.entity.ts:95",{"_index":1339,"title":{},"body":{"entities/User.html":{}}}],["src/modules/users/subscribers/user.subscriber.ts",{"_index":1489,"title":{},"body":{"injectables/UsersSubscriber.html":{},"coverage.html":{}}}],["src/modules/users/subscribers/user.subscriber.ts:12",{"_index":1499,"title":{},"body":{"injectables/UsersSubscriber.html":{}}}],["src/modules/users/subscribers/user.subscriber.ts:16",{"_index":1496,"title":{},"body":{"injectables/UsersSubscriber.html":{}}}],["src/modules/users/subscribers/user.subscriber.ts:24",{"_index":1498,"title":{},"body":{"injectables/UsersSubscriber.html":{}}}],["src/modules/users/subscribers/user.subscriber.ts:34",{"_index":1506,"title":{},"body":{"injectables/UsersSubscriber.html":{}}}],["src/modules/users/subscribers/user.subscriber.ts:69",{"_index":1504,"title":{},"body":{"injectables/UsersSubscriber.html":{}}}],["src/modules/users/subscribers/user.subscriber.ts:77",{"_index":1502,"title":{},"body":{"injectables/UsersSubscriber.html":{}}}],["src/modules/users/subscribers/user.subscriber.ts:9",{"_index":1493,"title":{},"body":{"injectables/UsersSubscriber.html":{}}}],["src/modules/users/users.controller.ts",{"_index":1393,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/modules/users/users.controller.ts:25",{"_index":1401,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/modules/users/users.controller.ts:37",{"_index":1404,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/modules/users/users.module.ts",{"_index":1423,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/modules/users/users.service",{"_index":757,"title":{},"body":{"injectables/CreateUserCommand.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["src/modules/users/users.service.ts",{"_index":1427,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["src/modules/users/users.service.ts:103",{"_index":1447,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/modules/users/users.service.ts:133",{"_index":1435,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/modules/users/users.service.ts:22",{"_index":1448,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/modules/users/users.service.ts:23",{"_index":1449,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/modules/users/users.service.ts:24",{"_index":1433,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/modules/users/users.service.ts:37",{"_index":1438,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/modules/users/users.service.ts:55",{"_index":1443,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/schema.service.ts",{"_index":1240,"title":{},"body":{"injectables/SchemaService.html":{},"coverage.html":{}}}],["src/schema.service.ts:14",{"_index":1244,"title":{},"body":{"injectables/SchemaService.html":{}}}],["src/schema.service.ts:22",{"_index":1246,"title":{},"body":{"injectables/SchemaService.html":{}}}],["src/services/email/email.module.ts",{"_index":857,"title":{},"body":{"modules/EmailModule.html":{}}}],["src/services/email/email.service",{"_index":1082,"title":{},"body":{"classes/PasswordResetEmailConsumer.html":{}}}],["src/services/email/email.service.ts",{"_index":879,"title":{},"body":{"classes/EmailService.html":{},"coverage.html":{}}}],["src/services/email/email.service.ts:11",{"_index":887,"title":{},"body":{"classes/EmailService.html":{}}}],["src/services/email/email.service.ts:4",{"_index":883,"title":{},"body":{"classes/EmailService.html":{}}}],["src/services/http",{"_index":904,"title":{},"body":{"modules/HttpClientModule.html":{},"injectables/HttpClientService.html":{},"coverage.html":{}}}],["src/services/payment/interfaces/payment.interface.ts",{"_index":936,"title":{},"body":{"interfaces/IPaymentService.html":{},"coverage.html":{}}}],["src/services/payment/interfaces/payment.interface.ts:4",{"_index":942,"title":{},"body":{"interfaces/IPaymentService.html":{}}}],["src/services/payment/interfaces/payment.interface.ts:9",{"_index":946,"title":{},"body":{"interfaces/IPaymentService.html":{}}}],["src/services/payment/payment.module.ts",{"_index":1098,"title":{},"body":{"modules/PaymentModule.html":{}}}],["src/services/payment/payment.module.ts:16",{"_index":1101,"title":{},"body":{"modules/PaymentModule.html":{}}}],["src/services/payment/stripe.service.ts",{"_index":1280,"title":{},"body":{"injectables/StripeService.html":{},"coverage.html":{}}}],["src/services/payment/stripe.service.ts:14",{"_index":1282,"title":{},"body":{"injectables/StripeService.html":{}}}],["src/services/payment/stripe.service.ts:23",{"_index":1283,"title":{},"body":{"injectables/StripeService.html":{}}}],["src/services/payment/stripe.service.ts:45",{"_index":1284,"title":{},"body":{"injectables/StripeService.html":{}}}],["src/services/payment/stripe.service.ts:60",{"_index":1288,"title":{},"body":{"injectables/StripeService.html":{}}}],["src/services/payment/types/checkout.ts",{"_index":1557,"title":{},"body":{"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/services/payment/types/payment",{"_index":1558,"title":{},"body":{"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/services/redis/redis.module",{"_index":397,"title":{},"body":{"modules/AuthModule.html":{},"modules/UsersModule.html":{}}}],["src/services/redis/redis.module.ts",{"_index":187,"title":{},"body":{"modules/AppRedisModule.html":{}}}],["src/services/redis/redis.service",{"_index":476,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["src/services/redis/redis.service.ts",{"_index":200,"title":{},"body":{"injectables/AppRedisService.html":{},"coverage.html":{}}}],["src/services/redis/redis.service.ts:106",{"_index":228,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["src/services/redis/redis.service.ts:29",{"_index":243,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["src/services/redis/redis.service.ts:46",{"_index":234,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["src/services/redis/redis.service.ts:57",{"_index":237,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["src/services/redis/redis.service.ts:72",{"_index":215,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["src/services/redis/redis.service.ts:76",{"_index":232,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["src/services/redis/redis.service.ts:8",{"_index":213,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["src/services/redis/redis.service.ts:90",{"_index":219,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["src/services/storage/cloudinary.service.ts",{"_index":667,"title":{},"body":{"injectables/CloudinaryService.html":{},"coverage.html":{}}}],["src/services/storage/cloudinary.service.ts:14",{"_index":670,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["src/services/storage/cloudinary.service.ts:26",{"_index":675,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["src/services/storage/interfaces/storage.interface.ts",{"_index":948,"title":{},"body":{"interfaces/IStrorageService.html":{},"coverage.html":{}}}],["src/services/storage/interfaces/storage.interface.ts:10",{"_index":953,"title":{},"body":{"interfaces/IStrorageService.html":{}}}],["src/services/storage/interfaces/storage.interface.ts:15",{"_index":952,"title":{},"body":{"interfaces/IStrorageService.html":{}}}],["src/services/storage/s3.service.ts",{"_index":1188,"title":{},"body":{"injectables/S3Service.html":{},"coverage.html":{}}}],["src/services/storage/s3.service.ts:22",{"_index":1197,"title":{},"body":{"injectables/S3Service.html":{}}}],["src/services/storage/s3.service.ts:23",{"_index":1198,"title":{},"body":{"injectables/S3Service.html":{}}}],["src/services/storage/s3.service.ts:24",{"_index":1193,"title":{},"body":{"injectables/S3Service.html":{}}}],["src/services/storage/s3.service.ts:35",{"_index":1195,"title":{},"body":{"injectables/S3Service.html":{}}}],["src/services/storage/s3.service.ts:65",{"_index":1194,"title":{},"body":{"injectables/S3Service.html":{}}}],["src/services/storage/storage.module.ts",{"_index":1258,"title":{},"body":{"modules/StorageModule.html":{}}}],["src/services/storage/storage.module.ts:11",{"_index":1259,"title":{},"body":{"modules/StorageModule.html":{}}}],["src/services/storage/types/s3",{"_index":1561,"title":{},"body":{"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/templates/email",{"_index":878,"title":{},"body":{"modules/EmailModule.html":{}}}],["src/tracing.ts",{"_index":1563,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["st",{"_index":795,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["started",{"_index":1676,"title":{"index.html":{}},"body":{}}],["starting",{"_index":695,"title":{},"body":{"injectables/CloudinaryService.html":{},"injectables/S3Service.html":{}}}],["state",{"_index":792,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/User.html":{},"injectables/UsersSubscriber.html":{}}}],["state/province",{"_index":1368,"title":{},"body":{"entities/User.html":{}}}],["statements",{"_index":1526,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":1099,"title":{},"body":{"modules/PaymentModule.html":{},"modules/StorageModule.html":{}}}],["status",{"_index":635,"title":{},"body":{"classes/CatchEverythingFilter.html":{},"injectables/MorganMiddleware.html":{}}}],["statuscode",{"_index":13,"title":{},"body":{"interfaces/ApiResponse.html":{},"controllers/AuthController.html":{},"classes/CatchEverythingFilter.html":{},"interfaces/ErrorResponse.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/SuccessResponseInterceptor.html":{},"controllers/UsersController.html":{}}}],["stops",{"_index":1013,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["storage",{"_index":1279,"title":{},"body":{"modules/StorageModule.html":{}}}],["storage_provider",{"_index":1261,"title":{},"body":{"modules/StorageModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["storagedriverenum",{"_index":1262,"title":{},"body":{"modules/StorageModule.html":{},"miscellaneous/enumerations.html":{}}}],["storagedriverenum.cloudinary",{"_index":1274,"title":{},"body":{"modules/StorageModule.html":{}}}],["storagedriverenum.s3",{"_index":1276,"title":{},"body":{"modules/StorageModule.html":{}}}],["storagemodule",{"_index":1257,"title":{"modules/StorageModule.html":{}},"body":{"modules/StorageModule.html":{},"modules.html":{}}}],["store",{"_index":245,"title":{},"body":{"injectables/AppRedisService.html":{},"injectables/JwtStrategy.html":{}}}],["stored",{"_index":999,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["strategies/jwt.strategy",{"_index":394,"title":{},"body":{"modules/AuthModule.html":{}}}],["strategies/local.strategy",{"_index":393,"title":{},"body":{"modules/AuthModule.html":{}}}],["strategy",{"_index":1018,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["stream",{"_index":682,"title":{},"body":{"injectables/CloudinaryService.html":{},"injectables/MorganMiddleware.html":{},"dependencies.html":{}}}],["street",{"_index":1327,"title":{},"body":{"entities/User.html":{}}}],["strict",{"_index":150,"title":{},"body":{"modules/AppModule.html":{},"modules/EmailModule.html":{}}}],["string",{"_index":17,"title":{},"body":{"interfaces/ApiResponse.html":{},"controllers/AppController.html":{},"injectables/AppRedisService.html":{},"injectables/AppService.html":{},"classes/AuthResponseDto.html":{},"injectables/AuthService.html":{},"classes/CatchEverythingFilter.html":{},"classes/ChangePasswordDto.html":{},"injectables/CreateUserCommand.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserResponseDto.html":{},"classes/EmailService.html":{},"interfaces/ErrorResponse.html":{},"classes/ForgotPasswordDto.html":{},"classes/GetProfileResponseDto.html":{},"injectables/HttpClientService.html":{},"interfaces/IStrorageService.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"injectables/MorganMiddleware.html":{},"classes/RefreshTokenDto.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"classes/ResetPasswordDto.html":{},"guards/RoleGuard.html":{},"injectables/S3Service.html":{},"injectables/SuccessResponseInterceptor.html":{},"entities/User.html":{},"injectables/UsersService.html":{},"injectables/UsersSubscriber.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["stripe",{"_index":947,"title":{},"body":{"interfaces/IPaymentService.html":{},"modules/PaymentModule.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"guards/RoleGuard.html":{},"injectables/StripeService.html":{},"injectables/SuccessResponseInterceptor.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{}}}],["stripe.checkout.sessioncreateparams",{"_index":940,"title":{},"body":{"interfaces/IPaymentService.html":{},"injectables/StripeService.html":{}}}],["stripe.paymentintent",{"_index":1306,"title":{},"body":{"injectables/StripeService.html":{}}}],["stripe.paymentintentcreateparams",{"_index":945,"title":{},"body":{"interfaces/IPaymentService.html":{},"injectables/StripeService.html":{}}}],["stripe.paymentintentsucceededevent",{"_index":1286,"title":{},"body":{"injectables/StripeService.html":{}}}],["stripe.paymentintentsucceededevent.data",{"_index":1304,"title":{},"body":{"injectables/StripeService.html":{}}}],["stripe.requestoptions",{"_index":941,"title":{},"body":{"interfaces/IPaymentService.html":{},"injectables/StripeService.html":{}}}],["stripe.service",{"_index":1110,"title":{},"body":{"modules/PaymentModule.html":{}}}],["stripe.webhooksecret.account",{"_index":1119,"title":{},"body":{"modules/PaymentModule.html":{}}}],["stripe.webhooksecret.accounttest",{"_index":1121,"title":{},"body":{"modules/PaymentModule.html":{}}}],["stripe_client_token",{"_index":1103,"title":{},"body":{"modules/PaymentModule.html":{}}}],["stripe_webhook_context_type",{"_index":1142,"title":{},"body":{"injectables/RequestBodyAndResponseInterceptor.html":{},"guards/RoleGuard.html":{},"injectables/SuccessResponseInterceptor.html":{}}}],["stripeclient",{"_index":1124,"title":{},"body":{"modules/PaymentModule.html":{},"injectables/StripeService.html":{}}}],["stripecurrencyenum",{"_index":1652,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["stripemodule",{"_index":1104,"title":{},"body":{"modules/PaymentModule.html":{}}}],["stripemodule.forrootasync",{"_index":1112,"title":{},"body":{"modules/PaymentModule.html":{}}}],["stripesecrets",{"_index":1116,"title":{},"body":{"modules/PaymentModule.html":{}}}],["stripeservice",{"_index":1109,"title":{"injectables/StripeService.html":{}},"body":{"modules/PaymentModule.html":{},"injectables/StripeService.html":{},"coverage.html":{}}}],["stripeservice.name",{"_index":1296,"title":{},"body":{"injectables/StripeService.html":{}}}],["stripewebhookhandler",{"_index":1291,"title":{},"body":{"injectables/StripeService.html":{}}}],["stripewebhookhandler('payment_intent.succeeded",{"_index":1287,"title":{},"body":{"injectables/StripeService.html":{}}}],["strong.pass",{"_index":643,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginDto.html":{}}}],["sub",{"_index":509,"title":{},"body":{"injectables/AuthService.html":{}}}],["subject",{"_index":885,"title":{},"body":{"classes/EmailService.html":{}}}],["subscribers",{"_index":153,"title":{},"body":{"modules/AppModule.html":{}}}],["subscribers/user.subscriber",{"_index":1425,"title":{},"body":{"modules/UsersModule.html":{}}}],["success",{"_index":430,"title":{},"body":{"classes/AuthResponseDto.html":{},"classes/CreateUserResponseDto.html":{},"classes/GetProfileResponseDto.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/SuccessResponseInterceptor.html":{}}}],["successful",{"_index":361,"title":{},"body":{"controllers/AuthController.html":{},"classes/AuthResponseDto.html":{},"injectables/CloudinaryService.html":{},"injectables/HttpClientService.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/S3Service.html":{},"injectables/SuccessResponseInterceptor.html":{}}}],["successfully",{"_index":253,"title":{},"body":{"injectables/AppRedisService.html":{},"classes/CreateUserResponseDto.html":{},"classes/EmailService.html":{},"classes/GetProfileResponseDto.html":{},"classes/PasswordResetEmailConsumer.html":{},"injectables/StripeService.html":{},"controllers/UsersController.html":{}}}],["successresponseinterceptor",{"_index":1147,"title":{"injectables/SuccessResponseInterceptor.html":{}},"body":{"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/SuccessResponseInterceptor.html":{},"coverage.html":{}}}],["summary",{"_index":49,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["super",{"_index":765,"title":{},"body":{"injectables/CreateUserCommand.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/PasswordResetEmailConsumer.html":{}}}],["super.canactivate(context",{"_index":978,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["support",{"_index":993,"title":{},"body":{"injectables/JwtStrategy.html":{},"modules.html":{}}}],["svg",{"_index":1680,"title":{},"body":{"modules.html":{}}}],["symbol",{"_index":655,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/ResetPasswordDto.html":{}}}],["synchronized",{"_index":1255,"title":{},"body":{"injectables/SchemaService.html":{}}}],["t",{"_index":14,"title":{},"body":{"interfaces/ApiResponse.html":{}}}],["table",{"_index":1567,"title":{},"body":{"coverage.html":{}}}],["tablename",{"_index":1377,"title":{},"body":{"entities/User.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":1566,"title":{},"body":{"coverage.html":{}}}],["tap",{"_index":1145,"title":{},"body":{"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/SuccessResponseInterceptor.html":{}}}],["tap((response",{"_index":1164,"title":{},"body":{"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/SuccessResponseInterceptor.html":{}}}],["template",{"_index":875,"title":{},"body":{"modules/EmailModule.html":{},"classes/EmailService.html":{},"miscellaneous/variables.html":{}}}],["template_queue_name",{"_index":1105,"title":{},"body":{"modules/PaymentModule.html":{},"injectables/StripeService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["templatequeue",{"_index":1125,"title":{},"body":{"modules/PaymentModule.html":{},"injectables/StripeService.html":{}}}],["text",{"_index":1324,"title":{},"body":{"entities/User.html":{},"miscellaneous/functions.html":{}}}],["textmappropagator",{"_index":1708,"title":{},"body":{"miscellaneous/variables.html":{}}}],["this.appredis",{"_index":258,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["this.appredis.decr(key",{"_index":288,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["this.appredis.del(...keys",{"_index":296,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["this.appredis.del(key",{"_index":293,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["this.appredis.exists(key",{"_index":289,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["this.appredis.get(key",{"_index":276,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["this.appredis.pipeline",{"_index":280,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["this.appredis.set(...(args",{"_index":274,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["this.appredisservice.exists(cachekey",{"_index":516,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.appredisservice.get(cachekey",{"_index":1468,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.appredisservice.set",{"_index":536,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["this.authservice.forgotpassword(email",{"_index":371,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.login",{"_index":358,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.refresh(refreshtoken",{"_index":366,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.resetpassword",{"_index":377,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.validateuser(email",{"_index":1036,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["this.configservice.get('auth.saltrounds",{"_index":1521,"title":{},"body":{"injectables/UsersSubscriber.html":{}}}],["this.configservice.getorthrow",{"_index":489,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.configservice.getorthrow('auth.jwt.expiresin",{"_index":484,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.configservice.getorthrow('auth.saltrounds",{"_index":494,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["this.configservice.getorthrow('aws.s3.bucket",{"_index":1219,"title":{},"body":{"injectables/S3Service.html":{}}}],["this.configservice.getorthrow('aws.s3.region",{"_index":1221,"title":{},"body":{"injectables/S3Service.html":{}}}],["this.configservice.getorthrow('cloudinary.apikey",{"_index":692,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["this.configservice.getorthrow('cloudinary.apisecret",{"_index":694,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["this.configservice.getorthrow('cloudinary.cloudname",{"_index":690,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["this.configservice.getorthrow('cloudinary.folder')}/${filecategory",{"_index":705,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["this.configservice.getorthrow('nodeenv",{"_index":1249,"title":{},"body":{"injectables/SchemaService.html":{}}}],["this.configservice.getorthrow('redis.bullboard.password",{"_index":176,"title":{},"body":{"modules/AppModule.html":{}}}],["this.configservice.getorthrow('redis.bullboard.username",{"_index":175,"title":{},"body":{"modules/AppModule.html":{}}}],["this.configservice.getorthrow('redis.namespace",{"_index":260,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["this.configservice.getorthrow('url.passwordreset",{"_index":482,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.em.fork",{"_index":768,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["this.email",{"_index":1381,"title":{},"body":{"entities/User.html":{}}}],["this.email.tolowercase().trim",{"_index":1382,"title":{},"body":{"entities/User.html":{}}}],["this.emailservice.sendemail",{"_index":1091,"title":{},"body":{"classes/PasswordResetEmailConsumer.html":{}}}],["this.geterrorcode(exception",{"_index":628,"title":{},"body":{"classes/CatchEverythingFilter.html":{}}}],["this.geterrormessage(exception",{"_index":625,"title":{},"body":{"classes/CatchEverythingFilter.html":{}}}],["this.geterrorname(exception",{"_index":626,"title":{},"body":{"classes/CatchEverythingFilter.html":{}}}],["this.gethttpstatus(exception",{"_index":623,"title":{},"body":{"classes/CatchEverythingFilter.html":{}}}],["this.hashpassword(user",{"_index":1510,"title":{},"body":{"injectables/UsersSubscriber.html":{}}}],["this.httpadapterhost",{"_index":599,"title":{},"body":{"classes/CatchEverythingFilter.html":{}}}],["this.httpagent",{"_index":929,"title":{},"body":{"injectables/HttpClientService.html":{}}}],["this.httpsagent",{"_index":931,"title":{},"body":{"injectables/HttpClientService.html":{}}}],["this.httpservice.axiosref.defaults.httpagent",{"_index":928,"title":{},"body":{"injectables/HttpClientService.html":{}}}],["this.httpservice.axiosref.defaults.httpsagent",{"_index":930,"title":{},"body":{"injectables/HttpClientService.html":{}}}],["this.ispasswordmodified(user",{"_index":1511,"title":{},"body":{"injectables/UsersSubscriber.html":{}}}],["this.jwtexpiresin",{"_index":483,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.jwtnotbefore",{"_index":485,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.jwtrefreshexpriresin",{"_index":488,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.jwtrefreshsecret",{"_index":491,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.jwtservice.sign",{"_index":541,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.jwtservice.sign(newpayload",{"_index":540,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.jwtservice.sign(payload",{"_index":511,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.jwtservice.verify(refreshtoken",{"_index":520,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.jwtservice.verify(resettoken",{"_index":553,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.loggercontext",{"_index":633,"title":{},"body":{"classes/CatchEverythingFilter.html":{}}}],["this.loggerservice.error",{"_index":631,"title":{},"body":{"classes/CatchEverythingFilter.html":{},"injectables/CloudinaryService.html":{}}}],["this.loggerservice.log",{"_index":268,"title":{},"body":{"injectables/AppRedisService.html":{},"injectables/CloudinaryService.html":{},"classes/EmailService.html":{},"injectables/HttpClientService.html":{},"classes/PasswordResetEmailConsumer.html":{},"injectables/S3Service.html":{},"injectables/SchemaService.html":{},"injectables/StripeService.html":{}}}],["this.loggerservice.log(`[${method",{"_index":1165,"title":{},"body":{"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/SuccessResponseInterceptor.html":{}}}],["this.loggerservice.log(`creating",{"_index":1299,"title":{},"body":{"injectables/StripeService.html":{}}}],["this.loggerservice.log(`email",{"_index":891,"title":{},"body":{"classes/EmailService.html":{}}}],["this.loggerservice.log(message.trim",{"_index":1070,"title":{},"body":{"injectables/MorganMiddleware.html":{}}}],["this.loggerservice.warn(message.trim",{"_index":1068,"title":{},"body":{"injectables/MorganMiddleware.html":{}}}],["this.mailerservice.sendmail",{"_index":890,"title":{},"body":{"classes/EmailService.html":{}}}],["this.nanoid",{"_index":776,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["this.normalizefields(user",{"_index":1509,"title":{},"body":{"injectables/UsersSubscriber.html":{}}}],["this.orm.getschemagenerator",{"_index":1251,"title":{},"body":{"injectables/SchemaService.html":{}}}],["this.passwordresetemailqueue.add('send",{"_index":546,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.passwordreseturl",{"_index":481,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.passwordreseturl}?reset",{"_index":544,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.redisservice.getorthrow",{"_index":259,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["this.reflector.get(role",{"_index":1182,"title":{},"body":{"guards/RoleGuard.html":{}}}],["this.reflector.getallandoverride(is_public_key",{"_index":975,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["this.role",{"_index":1390,"title":{},"body":{"entities/User.html":{}}}],["this.role.tolowercase",{"_index":1391,"title":{},"body":{"entities/User.html":{}}}],["this.s3bucket",{"_index":1218,"title":{},"body":{"injectables/S3Service.html":{}}}],["this.s3client.putobject",{"_index":1224,"title":{},"body":{"injectables/S3Service.html":{}}}],["this.s3region",{"_index":1220,"title":{},"body":{"injectables/S3Service.html":{}}}],["this.saltrounds",{"_index":493,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["this.stripeclient.checkout.sessions.create",{"_index":1297,"title":{},"body":{"injectables/StripeService.html":{}}}],["this.stripeclient.paymentintents.create",{"_index":1303,"title":{},"body":{"injectables/StripeService.html":{}}}],["this.templatequeue.add(template_queue_name",{"_index":1307,"title":{},"body":{"injectables/StripeService.html":{}}}],["this.update",{"_index":1488,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.useremailcachekey",{"_index":1456,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.useremailcachekey}:${query.email",{"_index":1466,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.useremailcachekey}:${user.email",{"_index":1479,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.useremailcachekey}:${user?.email",{"_index":1486,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.useridcachekey",{"_index":1454,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.useridcachekey}:${query",{"_index":1462,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.useridcachekey}:${query.id",{"_index":1464,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.useridcachekey}:${user.id",{"_index":1476,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.useridcachekey}:${user?.id",{"_index":1484,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.create(parsed",{"_index":1471,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.create(userdata",{"_index":1460,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.findone(query",{"_index":1473,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.findoneorfail",{"_index":1458,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.getentitymanager().flush",{"_index":1483,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.getentitymanager().merge(user",{"_index":1472,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.getentitymanager().persistandflush(user",{"_index":1461,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersservice.create",{"_index":775,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["this.usersservice.create(user",{"_index":1414,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findone",{"_index":495,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["this.usersservice.update",{"_index":549,"title":{},"body":{"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{}}}],["this[field",{"_index":1387,"title":{},"body":{"entities/User.html":{}}}],["throw",{"_index":496,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CreateUserCommand.html":{},"injectables/JwtAuthGuard.html":{},"injectables/LocalStrategy.html":{},"guards/RoleGuard.html":{},"modules/StorageModule.html":{},"entities/User.html":{},"injectables/UsersService.html":{},"injectables/UsersSubscriber.html":{},"miscellaneous/variables.html":{}}}],["time",{"_index":246,"title":{},"body":{"injectables/AppRedisService.html":{},"injectables/MorganMiddleware.html":{},"miscellaneous/variables.html":{}}}],["timestamp",{"_index":629,"title":{},"body":{"classes/CatchEverythingFilter.html":{},"interfaces/ErrorResponse.html":{},"entities/User.html":{}}}],["timestamptz",{"_index":1341,"title":{},"body":{"entities/User.html":{}}}],["timestring",{"_index":1720,"title":{},"body":{"miscellaneous/variables.html":{}}}],["timestring.match(/^(\\d+)([smhdwmy",{"_index":1722,"title":{},"body":{"miscellaneous/variables.html":{}}}],["timezone",{"_index":1624,"title":{},"body":{"dependencies.html":{}}}],["token",{"_index":345,"title":{},"body":{"controllers/AuthController.html":{},"classes/AuthResponseDto.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/RefreshTokenDto.html":{},"classes/ResetPasswordDto.html":{},"coverage.html":{}}}],["token'})@apibody({type",{"_index":326,"title":{},"body":{"controllers/AuthController.html":{}}}],["token=${token",{"_index":545,"title":{},"body":{"injectables/AuthService.html":{}}}],["tokens",{"_index":367,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["tokens.ts",{"_index":1554,"title":{},"body":{"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["tokens:refresh:blacklisted:${refreshtoken",{"_index":514,"title":{},"body":{"injectables/AuthService.html":{}}}],["tostream",{"_index":680,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["tostream(file.buffer).pipe(upload",{"_index":715,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["total",{"_index":1060,"title":{},"body":{"injectables/MorganMiddleware.html":{}}}],["trace",{"_index":1659,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["transform",{"_index":828,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["transformer",{"_index":829,"title":{},"body":{"classes/CreateUserDto.html":{},"dependencies.html":{}}}],["transport",{"_index":866,"title":{},"body":{"modules/EmailModule.html":{}}}],["trim",{"_index":1389,"title":{},"body":{"entities/User.html":{}}}],["trimfields",{"_index":1385,"title":{},"body":{"entities/User.html":{},"injectables/UsersSubscriber.html":{}}}],["trimfields.foreach((field",{"_index":1386,"title":{},"body":{"entities/User.html":{},"injectables/UsersSubscriber.html":{}}}],["true",{"_index":123,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRedisModule.html":{},"injectables/AppRedisService.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CreateUserCommand.html":{},"modules/EmailModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"modules/PaymentModule.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"guards/RoleGuard.html":{},"injectables/SuccessResponseInterceptor.html":{},"entities/User.html":{},"injectables/UsersSubscriber.html":{},"miscellaneous/variables.html":{}}}],["try",{"_index":519,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CreateUserCommand.html":{},"injectables/UsersService.html":{}}}],["ttl",{"_index":236,"title":{},"body":{"injectables/AppRedisService.html":{},"interfaces/IStrorageService.html":{},"injectables/S3Service.html":{}}}],["ttlinfo",{"_index":263,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["ttl}s",{"_index":264,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["type",{"_index":15,"title":{},"body":{"interfaces/ApiResponse.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppRedisService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/AuthResponseDto.html":{},"injectables/AuthService.html":{},"classes/CatchEverythingFilter.html":{},"classes/ChangePasswordDto.html":{},"injectables/CloudinaryService.html":{},"injectables/CreateUserCommand.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserResponseDto.html":{},"classes/EmailService.html":{},"interfaces/ErrorResponse.html":{},"classes/ForgotPasswordDto.html":{},"classes/GetProfileResponseDto.html":{},"injectables/HttpClientService.html":{},"interfaces/IPaymentService.html":{},"interfaces/IStrorageService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"injectables/MorganMiddleware.html":{},"classes/PasswordResetEmailConsumer.html":{},"modules/PaymentModule.html":{},"classes/RefreshTokenDto.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"classes/ResetPasswordDto.html":{},"guards/RoleGuard.html":{},"injectables/S3Service.html":{},"injectables/SchemaService.html":{},"injectables/StripeService.html":{},"injectables/SuccessResponseInterceptor.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/UsersSubscriber.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":1692,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typeof",{"_index":612,"title":{},"body":{"classes/CatchEverythingFilter.html":{},"classes/CreateUserDto.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/SuccessResponseInterceptor.html":{},"entities/User.html":{},"injectables/UsersService.html":{},"injectables/UsersSubscriber.html":{}}}],["types",{"_index":595,"title":{},"body":{"classes/CatchEverythingFilter.html":{},"dependencies.html":{}}}],["types/auth",{"_index":475,"title":{},"body":{"injectables/AuthService.html":{}}}],["types/bcrypt",{"_index":1606,"title":{},"body":{"dependencies.html":{}}}],["types/chalk",{"_index":1608,"title":{},"body":{"dependencies.html":{}}}],["types/morgan",{"_index":1610,"title":{},"body":{"dependencies.html":{}}}],["types/s3",{"_index":955,"title":{},"body":{"interfaces/IStrorageService.html":{},"injectables/S3Service.html":{}}}],["typescript",{"_index":504,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["unauthorized",{"_index":179,"title":{},"body":{"modules/AppModule.html":{},"injectables/JwtAuthGuard.html":{}}}],["unauthorizedexception",{"_index":467,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/LocalStrategy.html":{}}}],["unauthorizedexception('invalid",{"_index":530,"title":{},"body":{"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{}}}],["unauthorizedexception('refresh",{"_index":528,"title":{},"body":{"injectables/AuthService.html":{}}}],["unauthorizedexception(errorobject",{"_index":982,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["unauthorizedresponse",{"_index":178,"title":{},"body":{"modules/AppModule.html":{}}}],["undefined",{"_index":582,"title":{},"body":{"classes/CatchEverythingFilter.html":{},"classes/CreateUserDto.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/SuccessResponseInterceptor.html":{},"entities/User.html":{},"injectables/UsersService.html":{}}}],["unique",{"_index":1378,"title":{},"body":{"entities/User.html":{}}}],["unit",{"_index":534,"title":{},"body":{"injectables/AuthService.html":{},"miscellaneous/variables.html":{}}}],["unit).asseconds",{"_index":538,"title":{},"body":{"injectables/AuthService.html":{}}}],["unknown",{"_index":217,"title":{},"body":{"injectables/AppRedisService.html":{},"injectables/JwtStrategy.html":{}}}],["unlicensed",{"_index":1690,"title":{},"body":{"properties.html":{}}}],["unused",{"_index":506,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["up",{"_index":1399,"title":{},"body":{"controllers/UsersController.html":{}}}],["up')@apioperation({summary",{"_index":1397,"title":{},"body":{"controllers/UsersController.html":{}}}],["update",{"_index":1007,"title":{},"body":{"injectables/JwtStrategy.html":{},"entities/User.html":{},"injectables/UsersService.html":{}}}],["update(data",{"_index":1445,"title":{},"body":{"injectables/UsersService.html":{}}}],["updatedat",{"_index":1322,"title":{},"body":{"entities/User.html":{}}}],["updateduser",{"_index":1487,"title":{},"body":{"injectables/UsersService.html":{}}}],["upload",{"_index":668,"title":{},"body":{"injectables/CloudinaryService.html":{},"interfaces/IStrorageService.html":{},"injectables/S3Service.html":{}}}],["upload(file",{"_index":671,"title":{},"body":{"injectables/CloudinaryService.html":{},"interfaces/IStrorageService.html":{},"injectables/S3Service.html":{}}}],["uploadapierrorresponse",{"_index":679,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["uploadapiresponse",{"_index":678,"title":{},"body":{"injectables/CloudinaryService.html":{},"interfaces/IStrorageService.html":{}}}],["uploadfilecategoryenum",{"_index":674,"title":{},"body":{"injectables/CloudinaryService.html":{},"interfaces/IStrorageService.html":{},"injectables/S3Service.html":{},"miscellaneous/enumerations.html":{}}}],["uppercase",{"_index":653,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/ResetPasswordDto.html":{}}}],["url",{"_index":159,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRedisModule.html":{},"injectables/HttpClientService.html":{},"injectables/MorganMiddleware.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/S3Service.html":{},"injectables/SuccessResponseInterceptor.html":{},"entities/User.html":{},"dependencies.html":{}}}],["url=${result.secure_url",{"_index":713,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["usa",{"_index":836,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["usa'})@isstring()@isoptional",{"_index":801,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["usd",{"_index":1663,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["use",{"_index":250,"title":{},"body":{"injectables/AppRedisService.html":{},"injectables/MorganMiddleware.html":{}}}],["use(req",{"_index":1045,"title":{},"body":{"injectables/MorganMiddleware.html":{}}}],["useclass",{"_index":419,"title":{},"body":{"modules/AuthModule.html":{}}}],["used",{"_index":255,"title":{},"body":{"injectables/AppRedisService.html":{},"injectables/JwtStrategy.html":{}}}],["usefactory",{"_index":127,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRedisModule.html":{},"modules/AuthModule.html":{},"modules/EmailModule.html":{},"modules/PaymentModule.html":{},"modules/StorageModule.html":{}}}],["useguards",{"_index":335,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(localauthguard",{"_index":353,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(localauthguard)@public()@post('login')@httpcode(httpstatus.ok)@apioperation({summary",{"_index":318,"title":{},"body":{"controllers/AuthController.html":{}}}],["user",{"_index":136,"title":{"entities/User.html":{}},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"classes/AuthResponseDto.html":{},"injectables/AuthService.html":{},"classes/ChangePasswordDto.html":{},"injectables/CreateUserCommand.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserResponseDto.html":{},"modules/EmailModule.html":{},"classes/GetProfileResponseDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"injectables/MorganMiddleware.html":{},"classes/ResetPasswordDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/UsersSubscriber.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["user'})@apibody({type",{"_index":1400,"title":{},"body":{"controllers/UsersController.html":{}}}],["user.command",{"_index":120,"title":{},"body":{"modules/AppModule.html":{}}}],["user.command.ts",{"_index":717,"title":{},"body":{"injectables/CreateUserCommand.html":{},"coverage.html":{}}}],["user.command.ts:14",{"_index":728,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["user.command.ts:23",{"_index":752,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["user.command.ts:52",{"_index":734,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["user.command.ts:58",{"_index":739,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["user.command.ts:64",{"_index":743,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["user.command.ts:70",{"_index":747,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["user.dto",{"_index":1408,"title":{},"body":{"controllers/UsersController.html":{}}}],["user.dto.ts",{"_index":784,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:115",{"_index":812,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:125",{"_index":821,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:129",{"_index":799,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:22",{"_index":807,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:30",{"_index":809,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:38",{"_index":811,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:46",{"_index":797,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:54",{"_index":800,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:62",{"_index":818,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:70",{"_index":823,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:78",{"_index":802,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:91",{"_index":805,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:99",{"_index":815,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.email",{"_index":542,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersSubscriber.html":{}}}],["user.email.tolowercase().trim",{"_index":1512,"title":{},"body":{"injectables/UsersSubscriber.html":{}}}],["user.firstname",{"_index":548,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.id",{"_index":510,"title":{},"body":{"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{}}}],["user.password",{"_index":499,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersSubscriber.html":{}}}],["user.passwordresetrequested",{"_index":555,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.role",{"_index":1516,"title":{},"body":{"injectables/UsersSubscriber.html":{}}}],["user.role.tolowercase",{"_index":1517,"title":{},"body":{"injectables/UsersSubscriber.html":{}}}],["user@example.com",{"_index":830,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/ForgotPasswordDto.html":{},"classes/LoginDto.html":{}}}],["user@example.com'})@isemail",{"_index":895,"title":{},"body":{"classes/ForgotPasswordDto.html":{},"classes/LoginDto.html":{}}}],["user@example.com'})@isemail()@isnotempty",{"_index":806,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user[field",{"_index":1514,"title":{},"body":{"injectables/UsersSubscriber.html":{}}}],["userdata",{"_index":1439,"title":{},"body":{"injectables/UsersService.html":{}}}],["userdata.email",{"_index":1459,"title":{},"body":{"injectables/UsersService.html":{}}}],["useremailcachekey",{"_index":1428,"title":{},"body":{"injectables/UsersService.html":{}}}],["userid",{"_index":1436,"title":{},"body":{"injectables/UsersService.html":{}}}],["useridcachekey",{"_index":1429,"title":{},"body":{"injectables/UsersService.html":{}}}],["usernamefield",{"_index":1035,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["userrepository",{"_index":1431,"title":{},"body":{"injectables/UsersService.html":{}}}],["userrole",{"_index":1183,"title":{},"body":{"guards/RoleGuard.html":{}}}],["userroleenum",{"_index":748,"title":{},"body":{"injectables/CreateUserCommand.html":{},"classes/CreateUserDto.html":{},"entities/User.html":{},"injectables/UsersSubscriber.html":{},"miscellaneous/enumerations.html":{}}}],["userroleenum.admin",{"_index":840,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["userroleenum.user",{"_index":1365,"title":{},"body":{"entities/User.html":{}}}],["userroleenum})@isenum(userroleenum",{"_index":820,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["users",{"_index":174,"title":{},"body":{"modules/AppModule.html":{},"entities/User.html":{},"controllers/UsersController.html":{}}}],["users.controller",{"_index":1424,"title":{},"body":{"modules/UsersModule.html":{}}}],["users.service",{"_index":1405,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["users/entities/user.entity",{"_index":471,"title":{},"body":{"injectables/AuthService.html":{}}}],["users/users.module",{"_index":388,"title":{},"body":{"modules/AuthModule.html":{}}}],["users/users.service",{"_index":468,"title":{},"body":{"injectables/AuthService.html":{}}}],["users:email",{"_index":1457,"title":{},"body":{"injectables/UsersService.html":{}}}],["users:id",{"_index":1455,"title":{},"body":{"injectables/UsersService.html":{}}}],["userscontroller",{"_index":1392,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["usersmodule",{"_index":64,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersservice",{"_index":443,"title":{"injectables/UsersService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/CreateUserCommand.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["userssubscriber",{"_index":110,"title":{"injectables/UsersSubscriber.html":{}},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{},"injectables/UsersSubscriber.html":{},"coverage.html":{},"overview.html":{}}}],["userssubscriber(configservice",{"_index":155,"title":{},"body":{"modules/AppModule.html":{}}}],["using",{"_index":266,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["util",{"_index":1644,"title":{},"body":{"dependencies.html":{}}}],["uuid",{"_index":1354,"title":{},"body":{"entities/User.html":{},"dependencies.html":{}}}],["uuidv7",{"_index":1352,"title":{},"body":{"entities/User.html":{}}}],["v2",{"_index":676,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["v7",{"_index":1376,"title":{},"body":{"entities/User.html":{}}}],["val",{"_index":735,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["validate",{"_index":149,"title":{},"body":{"modules/AppModule.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["validate(email",{"_index":1032,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["validate(req",{"_index":986,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validateuser",{"_index":441,"title":{},"body":{"injectables/AuthService.html":{}}}],["validateuser(email",{"_index":456,"title":{},"body":{"injectables/AuthService.html":{}}}],["validator",{"_index":665,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/ForgotPasswordDto.html":{},"classes/LoginDto.html":{},"classes/RefreshTokenDto.html":{},"classes/ResetPasswordDto.html":{},"dependencies.html":{}}}],["value",{"_index":240,"title":{},"body":{"injectables/AppRedisService.html":{},"injectables/AuthService.html":{},"classes/CatchEverythingFilter.html":{},"injectables/CreateUserCommand.html":{},"classes/CreateUserDto.html":{},"injectables/HttpClientService.html":{},"injectables/S3Service.html":{},"injectables/SchemaService.html":{},"entities/User.html":{},"injectables/UsersSubscriber.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["value.replace(/\\+/g",{"_index":838,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["value.trim",{"_index":1515,"title":{},"body":{"injectables/UsersSubscriber.html":{}}}],["varchar",{"_index":1329,"title":{},"body":{"entities/User.html":{}}}],["variable",{"_index":1530,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":1698,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["vars",{"_index":507,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["version",{"_index":1056,"title":{},"body":{"injectables/MorganMiddleware.html":{},"properties.html":{}}}],["void",{"_index":80,"title":{},"body":{"modules/AppModule.html":{},"classes/CatchEverythingFilter.html":{},"injectables/MorganMiddleware.html":{},"injectables/UsersSubscriber.html":{},"miscellaneous/functions.html":{}}}],["w3cbaggagepropagator",{"_index":1713,"title":{},"body":{"miscellaneous/variables.html":{}}}],["w3ctracecontextpropagator",{"_index":1712,"title":{},"body":{"miscellaneous/variables.html":{}}}],["webhookconfig",{"_index":1115,"title":{},"body":{"modules/PaymentModule.html":{}}}],["webhooks",{"_index":109,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["welcome",{"_index":32,"title":{},"body":{"controllers/AppController.html":{}}}],["welcomemessage",{"_index":29,"title":{},"body":{"controllers/AppController.html":{}}}],["whether",{"_index":1331,"title":{},"body":{"entities/User.html":{}}}],["winston",{"_index":1629,"title":{},"body":{"dependencies.html":{}}}],["without",{"_index":267,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["word",{"_index":1174,"title":{},"body":{"classes/ResetPasswordDto.html":{}}}],["word.'})@isstring()@isnotempty()@matches(/^(?=.*[a",{"_index":1168,"title":{},"body":{"classes/ResetPasswordDto.html":{}}}],["workerhost",{"_index":1081,"title":{},"body":{"classes/PasswordResetEmailConsumer.html":{}}}],["world",{"_index":301,"title":{},"body":{"injectables/AppService.html":{}}}],["write",{"_index":1065,"title":{},"body":{"injectables/MorganMiddleware.html":{}}}],["wrong",{"_index":1016,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["yes",{"_index":238,"title":{},"body":{"injectables/AppRedisService.html":{},"interfaces/IPaymentService.html":{},"interfaces/IStrorageService.html":{},"injectables/S3Service.html":{},"injectables/StripeService.html":{},"injectables/UsersService.html":{}}}],["z\\d!@#$%^&*()_",{"_index":648,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/ResetPasswordDto.html":{}}}],["z])(?=.*[!@#$%^&*()_",{"_index":646,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/ResetPasswordDto.html":{}}}],["z])(?=.*[a",{"_index":645,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/ResetPasswordDto.html":{}}}],["za",{"_index":647,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/ResetPasswordDto.html":{}}}],["zoom",{"_index":68,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRedisModule.html":{},"modules/AuthModule.html":{},"modules/EmailModule.html":{},"modules/HttpClientModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"interfaces/ApiResponse.html":{"url":"interfaces/ApiResponse.html","title":"interface - ApiResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ApiResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/interfaces/api-response.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            data\n                                        \n                                \n                                \n                                        \n                                            message\n                                        \n                                \n                                \n                                        \n                                            statusCode\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        data:     T\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     T\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        message\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        message:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        statusCode\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        statusCode:     HttpStatus\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     HttpStatus\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { HttpStatus } from '@nestjs/common';\n\nexport interface ApiResponse {\n  statusCode: HttpStatus;\n  message: string;\n  data?: T;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                welcomeMessage\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        welcomeMessage\n                        \n                    \n                \n            \n            \n                \n                        \n                    welcomeMessage()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@HttpCode(HttpStatus.OK)@Public()@ApiOperation({summary: 'Welcome message for nest-js-boilerplate'})\n                \n            \n\n                    \n                        \n                            Defined in src/app.controller.ts:12\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     literal type\n\n                        \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, HttpCode, HttpStatus } from '@nestjs/common';\nimport { Public } from './modules/auth/decorators/public.decorator';\nimport { ApiOperation, ApiTags } from '@nestjs/swagger';\n\n@ApiTags('app')\n@Controller()\nexport class AppController {\n  @Get()\n  @HttpCode(HttpStatus.OK)\n  @Public()\n  @ApiOperation({ summary: 'Welcome message for nest-js-boilerplate' })\n  welcomeMessage(): { data: string } {\n    return { data: 'Welcome to nest-js-boilerplate! :)' };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nCreateUserCommand\n\nCreateUserCommand\n\nAppModule -->\n\nCreateUserCommand->AppModule\n\n\n\n\n\nSchemaService\n\nSchemaService\n\nAppModule -->\n\nSchemaService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                        \n                            CreateUserCommand\n                        \n                        \n                            SchemaService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        configure\n                        \n                    \n                \n            \n            \n                \nconfigure(consumer: MiddlewareConsumer)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app.module.ts:80\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                consumer\n                                            \n                                                        MiddlewareConsumer\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n    \n\n\n    \n        import {\n  Logger,\n  MiddlewareConsumer,\n  Module,\n  NestModule,\n  RequestMethod,\n} from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport configuration from './config/index.';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { UsersModule } from './modules/users/users.module';\nimport { AuthModule } from './modules/auth/auth.module';\nimport { MorganMiddleware } from './common/middlewares/morgan.middleware';\nimport { MikroOrmModule } from '@mikro-orm/nestjs';\nimport { PostgreSqlDriver } from '@mikro-orm/postgresql';\nimport { PRODUCTION } from './common/constants';\nimport { SchemaService } from './schema.service';\nimport basicAuth from 'express-basic-auth';\nimport { applyRawBodyOnlyTo } from '@golevelup/nestjs-webhooks';\nimport { UsersSubscriber } from './modules/users/subscribers/user.subscriber';\nimport { BullModule } from '@nestjs/bullmq';\nimport { BullBoardModule } from '@bull-board/nestjs';\nimport { ExpressAdapter } from '@bull-board/express';\nimport { CreateUserCommand } from './commands/create-user.command';\n\n@Module({\n  imports: [\n    ConfigModule.forRoot({\n      isGlobal: true,\n      load: [configuration],\n      cache: true,\n    }),\n    MikroOrmModule.forRootAsync({\n      useFactory: async (configService: ConfigService) => {\n        return {\n          driver: PostgreSqlDriver,\n          dbName: configService.getOrThrow('db.name'),\n          host: configService.getOrThrow('db.host'),\n          port: configService.getOrThrow('db.port'),\n          user: configService.getOrThrow('db.username'),\n          password: configService.getOrThrow('db.password'),\n          autoLoadEntities: true,\n          ensureDatabase:\n            configService.getOrThrow('nodeEnv') !== PRODUCTION,\n          pool: {\n            min: configService.getOrThrow('db.pool.min'),\n            max: configService.getOrThrow('db.pool.max'),\n          },\n          forceUtcTimezone: true,\n          validate: true,\n          strict: true,\n          debug: configService.getOrThrow('db.logging'),\n          subscribers: [new UsersSubscriber(configService)],\n        };\n      },\n      inject: [ConfigService],\n    }),\n    UsersModule,\n    AuthModule,\n    BullModule.forRootAsync({\n      inject: [ConfigService],\n      useFactory: (configService: ConfigService) => ({\n        connection: {\n          url: configService.getOrThrow('redis.url'),\n        },\n      }),\n    }),\n    BullBoardModule.forRoot({\n      adapter: ExpressAdapter,\n      route: '/queues',\n    }),\n  ],\n  controllers: [AppController],\n  providers: [AppService, Logger, SchemaService, CreateUserCommand],\n})\nexport class AppModule implements NestModule {\n  constructor(private readonly configService: ConfigService) {}\n\n  configure(consumer: MiddlewareConsumer) {\n    applyRawBodyOnlyTo(consumer, {\n      method: RequestMethod.ALL,\n      path: '*path/webhook',\n    });\n\n    consumer\n      .apply(\n        basicAuth({\n          users: {\n            [this.configService.getOrThrow('redis.bullBoard.username')]:\n              this.configService.getOrThrow('redis.bullBoard.password'),\n          },\n          challenge: true,\n          unauthorizedResponse: 'Unauthorized',\n        }),\n      )\n      .forRoutes({ path: 'queues', method: RequestMethod.ALL });\n\n    consumer.apply(MorganMiddleware).forRoutes('*');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppRedisModule.html":{"url":"modules/AppRedisModule.html","title":"module - AppRedisModule","body":"\n                   \n\n\n\n\n    Modules\n    AppRedisModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppRedisModule\n\n\n\ncluster_AppRedisModule_exports\n\n\n\ncluster_AppRedisModule_providers\n\n\n\n\nAppRedisService \n\nAppRedisService \n\n\n\nAppRedisModule\n\nAppRedisModule\n\nAppRedisService  -->\n\nAppRedisModule->AppRedisService \n\n\n\n\n\nAppRedisService\n\nAppRedisService\n\nAppRedisModule -->\n\nAppRedisService->AppRedisModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/services/redis/redis.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppRedisService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AppRedisService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Logger, Module } from '@nestjs/common';\nimport { AppRedisService } from './redis.service';\nimport { RedisModule } from '@liaoliaots/nestjs-redis';\nimport { ConfigService } from '@nestjs/config';\n\n@Module({\n  imports: [\n    RedisModule.forRootAsync({\n      inject: [ConfigService],\n      useFactory: async (configService: ConfigService) => {\n        return {\n          readyLog: true,\n          errorLog: true,\n          config: [\n            {\n              namespace: configService.getOrThrow('redis.namespace'),\n              url: configService.getOrThrow('redis.url'),\n            },\n          ],\n        };\n      },\n    }),\n  ],\n  providers: [AppRedisService, Logger],\n  exports: [AppRedisService],\n})\nexport class AppRedisModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppRedisService.html":{"url":"injectables/AppRedisService.html","title":"injectable - AppRedisService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppRedisService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/redis/redis.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                appRedis\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                decrement\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                deleteMany\n                            \n                            \n                                    Async\n                                exists\n                            \n                            \n                                    Async\n                                get\n                            \n                            \n                                    Async\n                                increment\n                            \n                            \n                                    Async\n                                set\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(loggerService: LoggerService, configService: ConfigService, redisService: RedisService)\n                    \n                \n                        \n                            \n                                Defined in src/services/redis/redis.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        loggerService\n                                                  \n                                                        \n                                                                    LoggerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        redisService\n                                                  \n                                                        \n                                                                    RedisService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        decrement\n                        \n                    \n                \n            \n            \n                \n                        \n                    decrement(key: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/redis/redis.service.ts:72\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(key: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/redis/redis.service.ts:90\n                        \n                    \n\n\n            \n                \n                        Delete a Redis key\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Redis key to delete\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                Number of keys deleted (0 or 1)\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        deleteMany\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteMany(keys: string[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/redis/redis.service.ts:106\n                        \n                    \n\n\n            \n                \n                        Delete multiple Redis keys\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                keys\n                                            \n                                                        string[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Array of Redis keys to delete\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                Number of keys deleted\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        exists\n                        \n                    \n                \n            \n            \n                \n                        \n                    exists(key: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/redis/redis.service.ts:76\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        get\n                        \n                    \n                \n            \n            \n                \n                        \n                    get(key: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/redis/redis.service.ts:46\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        increment\n                        \n                    \n                \n            \n            \n                \n                        \n                    increment(key: string, ttl?: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/redis/redis.service.ts:57\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                ttl\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        set\n                        \n                    \n                \n            \n            \n                \n                        \n                    set(key: string, value: any, ttl?: number, nx: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/redis/redis.service.ts:29\n                        \n                    \n\n\n            \n                \n                        Set a Redis key\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    Redis key\n\n                                            \n                                        \n                                        \n                                                value\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    Value to store\n\n                                            \n                                        \n                                        \n                                                ttl\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    Time-to-live in seconds\n\n                                            \n                                        \n                                        \n                                                nx\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    false\n                                            \n\n                                            \n                                                    Set to true to use NX (only set if key does not exist)\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                'OK' if set successfully, null if not (when NX is used)\n\n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        appRedis\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Redis\n\n                    \n                \n                    \n                        \n                                Defined in src/services/redis/redis.service.ts:8\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable, Logger, LoggerService } from '@nestjs/common';\nimport { RedisService } from '@liaoliaots/nestjs-redis';\nimport Redis from 'ioredis';\nimport { ConfigService } from '@nestjs/config';\n\n@Injectable()\nexport class AppRedisService {\n  private readonly appRedis: Redis;\n\n  constructor(\n    @Inject(Logger)\n    private readonly loggerService: LoggerService,\n    private readonly configService: ConfigService,\n    private readonly redisService: RedisService,\n  ) {\n    this.appRedis = this.redisService.getOrThrow(\n      this.configService.getOrThrow('redis.namespace'),\n    );\n  }\n\n  /**\n   * Set a Redis key\n   * @param key Redis key\n   * @param value Value to store\n   * @param ttl Time-to-live in seconds\n   * @param nx Set to true to use NX (only set if key does not exist)\n   * @returns 'OK' if set successfully, null if not (when NX is used)\n   */\n  async set(key: string, value: any, ttl?: number, nx: boolean = false) {\n    const ttlInfo = ttl ? `TTL: ${ttl}s` : 'no TTL';\n    const nxInfo = nx ? 'using NX' : 'without NX';\n\n    this.loggerService.log(\n      `Setting key \"${key}\" (${ttlInfo}, ${nxInfo})`,\n      AppRedisService.name,\n    );\n\n    const args: (string | number)[] = [key, value];\n\n    if (nx) args.push('NX');\n    if (ttl) args.push('EX', ttl);\n\n    return this.appRedis.set(...(args as Parameters));\n  }\n\n  async get(key: string) {\n    const value = await this.appRedis.get(key);\n\n    this.loggerService.log(\n      `Getting key \"${key}\" - ${value ? 'Found' : 'Not Found'}`,\n      AppRedisService.name,\n    );\n\n    return value;\n  }\n\n  async increment(key: string, ttl?: number): Promise {\n    const pipeline = this.appRedis.pipeline();\n\n    if (ttl) {\n      pipeline.set(key, 0, 'EX', ttl, 'NX');\n    }\n\n    pipeline.incr(key);\n\n    const results = await pipeline.exec();\n    const incrResult = results[ttl ? 1 : 0];\n\n    return incrResult[1];\n  }\n\n  async decrement(key: string) {\n    return this.appRedis.decr(key);\n  }\n\n  async exists(key: string): Promise {\n    const exists = await this.appRedis.exists(key);\n    this.loggerService.log(\n      `Checking existence of key \"${key}\" - ${exists ? 'Exists' : 'Does not exist'}`,\n      AppRedisService.name,\n    );\n    return exists > 0;\n  }\n\n  /**\n   * Delete a Redis key\n   * @param key Redis key to delete\n   * @returns Number of keys deleted (0 or 1)\n   */\n  async delete(key: string): Promise {\n    const result = await this.appRedis.del(key);\n\n    this.loggerService.log(\n      `Deleting key \"${key}\" - ${result > 0 ? 'Deleted' : 'Key not found'}`,\n      AppRedisService.name,\n    );\n\n    return result;\n  }\n\n  /**\n   * Delete multiple Redis keys\n   * @param keys Array of Redis keys to delete\n   * @returns Number of keys deleted\n   */\n  async deleteMany(keys: string[]): Promise {\n    if (keys.length === 0) return 0;\n\n    const result = await this.appRedis.del(...keys);\n\n    this.loggerService.log(\n      `Deleting ${keys.length} keys - ${result} deleted`,\n      AppRedisService.name,\n    );\n\n    return result;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app.service.ts:5\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello World!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                forgotPassword\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                login\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                refresh\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                resetPassword\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        forgotPassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    forgotPassword(body: ForgotPasswordDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Post('forgot-password')@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Request password reset'})@ApiBody({type: ForgotPasswordDto})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/auth/auth.controller.ts:63\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            ForgotPasswordDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(req: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(LocalAuthGuard)@Public()@Post('login')@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'User login'})@ApiBody({type: LoginDto})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/auth/auth.controller.ts:31\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        refresh\n                        \n                    \n                \n            \n            \n                \n                        \n                    refresh(body: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Post('refresh')@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Refresh access token'})@ApiBody({type: RefreshTokenDto})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/auth/auth.controller.ts:47\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        resetPassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    resetPassword(body: ResetPasswordDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Post('reset-password')@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Reset user password'})@ApiBody({type: ResetPasswordDto, description: 'Reset password data'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/auth/auth.controller.ts:79\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            ResetPasswordDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Request,\n  Post,\n  UseGuards,\n  Body,\n  HttpStatus,\n  HttpCode,\n} from '@nestjs/common';\nimport { ApiTags, ApiOperation, ApiBody } from '@nestjs/swagger';\nimport { LocalAuthGuard } from './guards/local-auth.guard';\nimport { AuthService } from './auth.service';\nimport { Public } from './decorators/public.decorator';\nimport { LoginDto } from './dto/login.dto';\nimport { RefreshTokenDto } from './dto/refresh-token-dto';\nimport { ForgotPasswordDto } from './dto/forgot-password.dto';\nimport { ResetPasswordDto } from './dto/reset-password.dto';\nimport { ApiResponse } from 'src/common/interfaces/api-response.interface';\n\n@ApiTags('auth')\n@Controller('auth')\nexport class AuthController {\n  constructor(private readonly authService: AuthService) {}\n\n  @UseGuards(LocalAuthGuard)\n  @Public()\n  @Post('login')\n  @HttpCode(HttpStatus.OK)\n  @ApiOperation({ summary: 'User login' })\n  @ApiBody({ type: LoginDto })\n  async login(@Request() req: any): Promise> {\n    const { access_token, refresh_token } = await this.authService.login(\n      req.user,\n    );\n    return {\n      statusCode: HttpStatus.OK,\n      message: 'Login Successful',\n      data: { accessToken: access_token, refreshToken: refresh_token },\n    };\n  }\n\n  @Public()\n  @Post('refresh')\n  @HttpCode(HttpStatus.OK)\n  @ApiOperation({ summary: 'Refresh access token' })\n  @ApiBody({ type: RefreshTokenDto })\n  async refresh(@Body() body: any): Promise> {\n    const { refreshToken } = body;\n    const { access_token, refresh_token } =\n      await this.authService.refresh(refreshToken);\n    return {\n      statusCode: HttpStatus.OK,\n      message: 'Tokens refreshed',\n      data: { accessToken: access_token, refreshToken: refresh_token },\n    };\n  }\n\n  @Public()\n  @Post('forgot-password')\n  @HttpCode(HttpStatus.OK)\n  @ApiOperation({ summary: 'Request password reset' })\n  @ApiBody({ type: ForgotPasswordDto })\n  async forgotPassword(\n    @Body() body: ForgotPasswordDto,\n  ): Promise> {\n    const { email } = body;\n    await this.authService.forgotPassword(email);\n    return {\n      statusCode: HttpStatus.OK,\n      message: 'Password reset email sent',\n    };\n  }\n\n  @Public()\n  @Post('reset-password')\n  @HttpCode(HttpStatus.OK)\n  @ApiOperation({ summary: 'Reset user password' })\n  @ApiBody({ type: ResetPasswordDto, description: 'Reset password data' })\n  async resetPassword(\n    @Body() body: ResetPasswordDto,\n  ): Promise> {\n    const { resetToken, newPassword, confirmPassword } = body;\n    await this.authService.resetPassword(\n      resetToken,\n      newPassword,\n      confirmPassword,\n    );\n    return {\n      statusCode: HttpStatus.OK,\n      message: 'Password reset successful',\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_AuthModule_exports\n\n\n\n\nAppRedisModule\n\nAppRedisModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nAppRedisModule->AuthModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAuthModule -->\n\nUsersModule->AuthModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthModule -->\n\nLocalStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            JwtStrategy\n                        \n                        \n                            LocalStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AppRedisModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { APP_GUARD } from '@nestjs/core';\nimport { AuthController } from './auth.controller';\nimport { AuthService } from './auth.service';\nimport { UsersModule } from '../users/users.module';\nimport { JwtModule } from '@nestjs/jwt';\nimport { PassportModule } from '@nestjs/passport';\nimport { LocalStrategy } from './strategies/local.strategy';\nimport { JwtStrategy } from './strategies/jwt.strategy';\nimport { JwtAuthGuard } from './guards/jwt-auth.guard';\nimport { ConfigService } from '@nestjs/config';\nimport { AppRedisModule } from 'src/services/redis/redis.module';\nimport { BullModule } from '@nestjs/bullmq';\nimport { BullBoardModule } from '@bull-board/nestjs';\nimport { PASSWORD_RESET_EMAIL_QUEUE_NAME } from 'src/common/constants';\nimport { BullMQAdapter } from '@bull-board/api/bullMQAdapter';\n\n@Module({\n  imports: [\n    UsersModule,\n    PassportModule,\n    JwtModule.registerAsync({\n      useFactory: (configService: ConfigService) => ({\n        global: true,\n        secret: configService.get('auth.jwt.secret'),\n        signOptions: {\n          expiresIn: configService.get('auth.jwt.expiresIn'),\n        },\n      }),\n      inject: [ConfigService],\n    }),\n    BullModule.registerQueue({\n      name: PASSWORD_RESET_EMAIL_QUEUE_NAME,\n      defaultJobOptions: {\n        attempts: 5,\n        backoff: { type: 'exponential', delay: 2000 },\n      },\n    }),\n    BullBoardModule.forFeature({\n      name: PASSWORD_RESET_EMAIL_QUEUE_NAME,\n      adapter: BullMQAdapter,\n    }),\n    AppRedisModule,\n  ],\n  controllers: [AuthController],\n  providers: [\n    AuthService,\n    LocalStrategy,\n    JwtStrategy,\n    {\n      provide: APP_GUARD,\n      useClass: JwtAuthGuard,\n    },\n  ],\n  exports: [AuthService],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AuthResponseDto.html":{"url":"classes/AuthResponseDto.html","title":"class - AuthResponseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AuthResponseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/dto/auth-response.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                accessToken\n                            \n                            \n                                    \n                                message\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        accessToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Access token for authenticated user', example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/dto/auth-response.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        message\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Message indicating the success of the operation', example: 'Login Successful'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/dto/auth-response.dto.ts:14\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\n\nexport class AuthResponseDto {\n  @ApiProperty({\n    description: 'Access token for authenticated user',\n    example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...',\n  })\n  accessToken: string;\n\n  @ApiProperty({\n    description: 'Message indicating the success of the operation',\n    example: 'Login Successful',\n  })\n  message: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                jwtExpiresIn\n                            \n                            \n                                    Private\n                                    Readonly\n                                jwtNotBefore\n                            \n                            \n                                    Private\n                                    Readonly\n                                jwtRefreshExpriresIn\n                            \n                            \n                                    Private\n                                    Readonly\n                                jwtRefreshSecret\n                            \n                            \n                                    Private\n                                    Readonly\n                                passwordResetUrl\n                            \n                            \n                                    Private\n                                    Readonly\n                                saltRounds\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                forgotPassword\n                            \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                refresh\n                            \n                            \n                                    Async\n                                resetPassword\n                            \n                            \n                                    Async\n                                validateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(appRedisService: AppRedisService, usersService: UsersService, jwtService: JwtService, configService: ConfigService, passwordResetEmailQueue: Queue)\n                    \n                \n                        \n                            \n                                Defined in src/modules/auth/auth.service.ts:27\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        appRedisService\n                                                  \n                                                        \n                                                                        AppRedisService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        passwordResetEmailQueue\n                                                  \n                                                        \n                                                                    Queue\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        forgotPassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    forgotPassword(email: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/auth/auth.service.ts:137\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(user: User)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/auth/auth.service.ts:69\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            User\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        refresh\n                        \n                    \n                \n            \n            \n                \n                        \n                    refresh(refreshToken: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/auth/auth.service.ts:84\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                refreshToken\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        resetPassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    resetPassword(resetToken: string, newPassword: string, confirmPassword: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/auth/auth.service.ts:163\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                resetToken\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                newPassword\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                confirmPassword\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validateUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    validateUser(email: string, pass: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/auth/auth.service.ts:50\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                pass\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        jwtExpiresIn\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/auth.service.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        jwtNotBefore\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/auth.service.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        jwtRefreshExpriresIn\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/auth.service.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        jwtRefreshSecret\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/auth.service.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        passwordResetUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/auth.service.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        saltRounds\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/auth.service.ts:27\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import bcrypt from 'bcrypt';\nimport {\n  BadRequestException,\n  Injectable,\n  NotFoundException,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { UsersService } from '../users/users.service';\nimport { JsonWebTokenError, JwtService, NotBeforeError } from '@nestjs/jwt';\nimport { User } from '../users/entities/user.entity';\nimport { ConfigService } from '@nestjs/config';\nimport { InjectQueue } from '@nestjs/bullmq';\nimport { PASSWORD_RESET_EMAIL_QUEUE_NAME } from 'src/common/constants';\nimport { Queue } from 'bullmq';\nimport { AuthTokens } from './types/auth-tokens';\nimport { AppRedisService } from 'src/services/redis/redis.service';\nimport moment from 'moment';\nimport { parseTimeString } from 'src/common/utils/time.utils';\n\n@Injectable()\nexport class AuthService {\n  private readonly passwordResetUrl: string;\n  private readonly jwtExpiresIn: string;\n  private readonly jwtNotBefore: string;\n  private readonly jwtRefreshSecret: string;\n  private readonly jwtRefreshExpriresIn: string;\n  private readonly saltRounds: number;\n\n  constructor(\n    private readonly appRedisService: AppRedisService,\n    private readonly usersService: UsersService,\n    private readonly jwtService: JwtService,\n    private readonly configService: ConfigService,\n    @InjectQueue(PASSWORD_RESET_EMAIL_QUEUE_NAME)\n    private readonly passwordResetEmailQueue: Queue,\n  ) {\n    this.passwordResetUrl =\n      this.configService.getOrThrow('url.passwordReset');\n    this.jwtExpiresIn = this.configService.getOrThrow('auth.jwt.expiresIn');\n    this.jwtNotBefore = `${parseInt(this.jwtExpiresIn) - 1}m`;\n    this.jwtRefreshExpriresIn = this.configService.getOrThrow(\n      'auth.jwt.refreshExpiresIn',\n    );\n    this.jwtRefreshSecret = this.configService.getOrThrow(\n      'auth.jwt.refreshSecret',\n    );\n    this.saltRounds = this.configService.getOrThrow('auth.saltRounds');\n  }\n\n  async validateUser(\n    email: string,\n    pass: string,\n  ): Promise | null> {\n    const user = await this.usersService.findOne({ email });\n\n    if (!user) {\n      throw new NotFoundException('User not found');\n    }\n\n    if (user && (await bcrypt.compare(pass, user.password))) {\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      const { password, ...result } = user;\n      return result;\n    }\n\n    return null;\n  }\n\n  async login(user: User): Promise {\n    const payload = {\n      sub: user.id,\n    };\n\n    return {\n      access_token: this.jwtService.sign(payload),\n      refresh_token: this.jwtService.sign(payload, {\n        secret: this.jwtRefreshSecret,\n        expiresIn: this.jwtRefreshExpriresIn,\n        notBefore: this.jwtNotBefore,\n      }),\n    };\n  }\n\n  async refresh(refreshToken: string): Promise {\n    let payload: any;\n\n    const cacheKey = `tokens:refresh:blacklisted:${refreshToken}`;\n    const isBlacklisted = await this.appRedisService.exists(cacheKey);\n    if (isBlacklisted) {\n      throw new BadRequestException('Refresh token is blacklisted');\n    }\n\n    try {\n      payload = this.jwtService.verify(refreshToken, {\n        secret: this.jwtRefreshSecret,\n      });\n    } catch (error) {\n      if (\n        error instanceof JsonWebTokenError &&\n        error.message === 'jwt malformed'\n      ) {\n        throw new BadRequestException('Malformed refresh token');\n      } else if (error instanceof NotBeforeError) {\n        throw new UnauthorizedException('Refresh token not active yet');\n      }\n      throw new UnauthorizedException('Invalid refresh token');\n    }\n\n    const user = await this.usersService.findOne({\n      id: payload.sub,\n    });\n\n    if (!user) throw new NotFoundException('User not found');\n\n    const newPayload = {\n      sub: user.id,\n    };\n\n    const { value, unit } = parseTimeString(this.jwtRefreshExpriresIn);\n\n    await this.appRedisService.set(\n      cacheKey,\n      '1',\n      moment.duration(value, unit).asSeconds() + 60,\n    );\n\n    return {\n      access_token: this.jwtService.sign(newPayload),\n      refresh_token: this.jwtService.sign(newPayload, {\n        secret: this.jwtRefreshSecret,\n        expiresIn: this.jwtRefreshExpriresIn,\n        notBefore: this.jwtNotBefore,\n      }),\n    };\n  }\n\n  async forgotPassword(email: string): Promise {\n    const user = await this.usersService.findOne({ email });\n\n    if (!user) {\n      throw new NotFoundException('User not found');\n    }\n\n    const token = this.jwtService.sign({\n      email: user.email,\n      sub: user.id,\n    });\n\n    const resetUrl = `${this.passwordResetUrl}?reset-token=${token}`;\n\n    await this.passwordResetEmailQueue.add('send-password-reset-email', {\n      email: user.email,\n      firstName: user.firstName,\n      resetUrl,\n    });\n\n    await this.usersService.update({\n      id: user.id,\n      passwordResetRequested: true,\n    });\n  }\n\n  async resetPassword(\n    resetToken: string,\n    newPassword: string,\n    confirmPassword: string,\n  ): Promise {\n    if (newPassword !== confirmPassword) {\n      throw new BadRequestException('Passwords do not match');\n    }\n\n    const payload = this.jwtService.verify(resetToken);\n    const user = await this.usersService.findOne({\n      email: payload.email,\n    });\n\n    if (!user) {\n      throw new NotFoundException('User not found');\n    }\n\n    if (!user.passwordResetRequested) {\n      throw new NotFoundException('Password reset not requested');\n    }\n\n    const salt = await bcrypt.genSalt(this.saltRounds);\n    const hashedPassword = await bcrypt.hash(newPassword, salt);\n    await this.usersService.update({\n      id: user.id,\n      password: hashedPassword,\n      passwordResetRequested: false,\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CatchEverythingFilter.html":{"url":"classes/CatchEverythingFilter.html","title":"class - CatchEverythingFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CatchEverythingFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/filters/exception.filter.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                loggerContext\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                            \n                                    Private\n                                getErrorCode\n                            \n                            \n                                    Private\n                                getErrorMessage\n                            \n                            \n                                    Private\n                                getErrorName\n                            \n                            \n                                    Private\n                                getHttpStatus\n                            \n                            \n                                    Private\n                                sanitizeBody\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(httpAdapterHost: HttpAdapterHost, loggerService: LoggerService)\n                    \n                \n                        \n                            \n                                Defined in src/common/filters/exception.filter.ts:20\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        httpAdapterHost\n                                                  \n                                                        \n                                                                    HttpAdapterHost\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        loggerService\n                                                  \n                                                        \n                                                                    LoggerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        loggerContext\n                        \n                    \n                \n            \n                \n                    \n                        Default value : CatchEverythingFilter.name\n                    \n                \n                    \n                        \n                                Defined in src/common/filters/exception.filter.ts:20\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        catch\n                        \n                    \n                \n            \n            \n                \ncatch(exception: HandledException, host: ArgumentsHost)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/filters/exception.filter.ts:27\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                exception\n                                            \n                                                            HandledException\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                host\n                                            \n                                                        ArgumentsHost\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        getErrorCode\n                        \n                    \n                \n            \n            \n                \n                        \n                    getErrorCode(exception: HandledException)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/filters/exception.filter.ts:119\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                exception\n                                            \n                                                            HandledException\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     string | undefined\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        getErrorMessage\n                        \n                    \n                \n            \n            \n                \n                        \n                    getErrorMessage(exception: HandledException)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/filters/exception.filter.ts:92\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                exception\n                                            \n                                                            HandledException\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        getErrorName\n                        \n                    \n                \n            \n            \n                \n                        \n                    getErrorName(exception: HandledException)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/filters/exception.filter.ts:108\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                exception\n                                            \n                                                            HandledException\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        getHttpStatus\n                        \n                    \n                \n            \n            \n                \n                        \n                    getHttpStatus(exception: HandledException)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/filters/exception.filter.ts:78\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                exception\n                                            \n                                                            HandledException\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         number\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        sanitizeBody\n                        \n                    \n                \n            \n            \n                \n                        \n                    sanitizeBody(body: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/filters/exception.filter.ts:123\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  ExceptionFilter,\n  Catch,\n  ArgumentsHost,\n  HttpException,\n  HttpStatus,\n  ForbiddenException,\n  Logger,\n  LoggerService,\n  Inject,\n  NotFoundException,\n} from '@nestjs/common';\nimport { HttpAdapterHost } from '@nestjs/core';\nimport { AxiosError } from 'axios';\nimport { HandledException } from '../types';\nimport { ErrorResponse } from '../interfaces/error-response.interface';\n\n@Catch()\nexport class CatchEverythingFilter implements ExceptionFilter {\n  private readonly loggerContext = CatchEverythingFilter.name;\n\n  constructor(\n    private readonly httpAdapterHost: HttpAdapterHost,\n    @Inject(Logger) private readonly loggerService: LoggerService,\n  ) {}\n\n  catch(exception: HandledException, host: ArgumentsHost): void {\n    const { httpAdapter } = this.httpAdapterHost;\n    const ctx = host.switchToHttp();\n    const request = ctx.getRequest();\n    const response = ctx.getResponse();\n    const requestUrl = httpAdapter.getRequestUrl(request);\n\n    if (exception instanceof NotFoundException) {\n      const exceptionResponse = exception.getResponse() as any;\n      const message = exceptionResponse?.message || exception.message;\n\n      const isRoutingError =\n        typeof message === 'string' &&\n        (message.startsWith('Cannot ') ||\n          message.includes('Cannot find') ||\n          (message === 'Not Found' && !exceptionResponse?.error));\n\n      if (isRoutingError) {\n        const responseBody = {\n          statusCode: HttpStatus.NOT_FOUND,\n          message: `Route ${request.method} ${request.url} does not exist ¯\\\\_(ツ)_/¯`,\n        };\n\n        httpAdapter.reply(response, responseBody, HttpStatus.NOT_FOUND);\n        return;\n      }\n    }\n\n    const httpStatus = this.getHttpStatus(exception);\n    const errorMessage = this.getErrorMessage(exception);\n    const name = this.getErrorName(exception);\n    const errorCode = this.getErrorCode(exception);\n\n    const responseBody: ErrorResponse = {\n      statusCode: httpStatus,\n      message: errorMessage,\n      errorCode,\n      timestamp: new Date().toISOString(),\n      path: `${request.method} - ${requestUrl}`,\n      name,\n    };\n\n    this.loggerService.error(\n      `Exception caught: ${name} - ${errorMessage}`,\n      exception,\n      this.loggerContext,\n    );\n\n    httpAdapter.reply(response, responseBody, httpStatus);\n  }\n\n  private getHttpStatus(exception: HandledException): number {\n    if (exception instanceof HttpException) return exception.getStatus();\n    if (exception instanceof AxiosError) {\n      const status = exception.response?.status || HttpStatus.BAD_GATEWAY;\n      return status >= 500 && status \n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ChangePasswordDto.html":{"url":"classes/ChangePasswordDto.html","title":"class - ChangePasswordDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ChangePasswordDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/dto/change-password.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                confirmPassword\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                newPassword\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        confirmPassword\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The confirmation of the new password', example: 'Strong.Pass-1'})@IsString()@IsNotEmpty()@Matches(/^(?=.*[a-z])(?=.*[A-Z])(?=.*[!@#$%^&*()_\\-+=\\[\\]{};':\"\\\\|,.<>\\/?])[A-Za-z\\d!@#$%^&*()_\\-+=\\[\\]{};':\"\\\\|,.<>\\/?]{10,}$/, {message: 'Password must be at least 10 characters long and include uppercase, lowercase, and a symbol (e.g. @, #, ., -)'})@MinLength(10)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dto/change-password.dto.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        newPassword\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The new password for the user. Minimum of 10 characters.', example: 'Strong.Pass-1'})@IsString()@IsNotEmpty()@Matches(/^(?=.*[a-z])(?=.*[A-Z])(?=.*[!@#$%^&*()_\\-+=\\[\\]{};':\"\\\\|,.<>\\/?])[A-Za-z\\d!@#$%^&*()_\\-+=\\[\\]{};':\"\\\\|,.<>\\/?]{10,}$/, {message: 'Password must be at least 10 characters long and include uppercase, lowercase, and a symbol (e.g. @, #, ., -)'})@MinLength(10)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dto/change-password.dto.ts:19\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsNotEmpty, IsString, Matches, MinLength } from 'class-validator';\n\nexport class ChangePasswordDto {\n  @ApiProperty({\n    description: 'The new password for the user. Minimum of 10 characters.',\n    example: 'Strong.Pass-1',\n  })\n  @IsString()\n  @IsNotEmpty()\n  @Matches(\n    /^(?=.*[a-z])(?=.*[A-Z])(?=.*[!@#$%^&*()_\\-+=\\[\\]{};':\"\\\\|,.<>\\/?])[A-Za-z\\d!@#$%^&*()_\\-+=\\[\\]{};':\"\\\\|,.<>\\/?]{10,}$/,\n    {\n      message:\n        'Password must be at least 10 characters long and include uppercase, lowercase, and a symbol (e.g. @, #, ., -)',\n    },\n  )\n  @MinLength(10)\n  newPassword: string;\n\n  @ApiProperty({\n    description: 'The confirmation of the new password',\n    example: 'Strong.Pass-1',\n  })\n  @IsString()\n  @IsNotEmpty()\n  @Matches(\n    /^(?=.*[a-z])(?=.*[A-Z])(?=.*[!@#$%^&*()_\\-+=\\[\\]{};':\"\\\\|,.<>\\/?])[A-Za-z\\d!@#$%^&*()_\\-+=\\[\\]{};':\"\\\\|,.<>\\/?]{10,}$/,\n    {\n      message:\n        'Password must be at least 10 characters long and include uppercase, lowercase, and a symbol (e.g. @, #, ., -)',\n    },\n  )\n  @MinLength(10)\n  confirmPassword: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CloudinaryService.html":{"url":"injectables/CloudinaryService.html","title":"injectable - CloudinaryService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CloudinaryService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/storage/cloudinary.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                upload\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, loggerService: LoggerService)\n                    \n                \n                        \n                            \n                                Defined in src/services/storage/cloudinary.service.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        loggerService\n                                                  \n                                                        \n                                                                    LoggerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        upload\n                        \n                    \n                \n            \n            \n                \n                        \n                    upload(file: MemoryStoredFile, fileCategory: UploadFileCategoryEnum)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/storage/cloudinary.service.ts:26\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                file\n                                            \n                                                        MemoryStoredFile\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                fileCategory\n                                            \n                                                            UploadFileCategoryEnum\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable, Logger, LoggerService } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport {\n  v2 as cloudinary,\n  UploadApiResponse,\n  UploadApiErrorResponse,\n} from 'cloudinary';\nimport toStream = require('buffer-to-stream');\nimport { IStrorageService } from './interfaces/storage.interface';\nimport { UploadFileCategoryEnum } from 'src/common/enums';\nimport { MemoryStoredFile } from 'nestjs-form-data';\n\n@Injectable()\nexport class CloudinaryService implements IStrorageService {\n  constructor(\n    private readonly configService: ConfigService,\n    @Inject(Logger) private readonly loggerService: LoggerService,\n  ) {\n    cloudinary.config({\n      cloud_name: this.configService.getOrThrow('cloudinary.cloudName'),\n      api_key: this.configService.getOrThrow('cloudinary.apiKey'),\n      api_secret: this.configService.getOrThrow('cloudinary.apiSecret'),\n    });\n  }\n\n  async upload(\n    file: MemoryStoredFile,\n    fileCategory: UploadFileCategoryEnum,\n  ): Promise {\n    this.loggerService.log(\n      `Starting upload: filename=\"${file.originalName}\", size=${file.size} bytes, category=${fileCategory}`,\n      CloudinaryService.name,\n    );\n\n    return new Promise((resolve, reject) => {\n      const upload = cloudinary.uploader.upload_stream(\n        {\n          folder: `${this.configService.getOrThrow('cloudinary.folder')}/${fileCategory}`,\n          resource_type: 'auto',\n        },\n        (error: UploadApiErrorResponse, result: UploadApiResponse) => {\n          if (error) {\n            this.loggerService.error(\n              `Upload failed: filename=\"${file.originalName}\", error=${error.message}`,\n              error.stack,\n              CloudinaryService.name,\n            );\n            return reject(error);\n          }\n\n          this.loggerService.log(\n            `Upload successful: filename=\"${file.originalName}\", public_id=${result.public_id}, url=${result.secure_url}`,\n            CloudinaryService.name,\n          );\n          return resolve(result);\n        },\n      );\n\n      toStream(file.buffer).pipe(upload);\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CreateUserCommand.html":{"url":"injectables/CreateUserCommand.html","title":"injectable - CreateUserCommand","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CreateUserCommand\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/commands/create-user.command.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        CommandRunner\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                nanoid\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                parseEmail\n                            \n                            \n                                    \n                                parseFirstName\n                            \n                            \n                                    \n                                parseLastName\n                            \n                            \n                                    \n                                parseRole\n                            \n                            \n                                    Async\n                                run\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(em: EntityManager, usersService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/commands/create-user.command.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        em\n                                                  \n                                                        \n                                                                    EntityManager\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        parseEmail\n                        \n                    \n                \n            \n            \n                \n                        \n                    parseEmail(val: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Option({flags: '-e, --email ', required: true})\n                \n            \n\n                    \n                        \n                            Defined in src/commands/create-user.command.ts:52\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                val\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        parseFirstName\n                        \n                    \n                \n            \n            \n                \n                        \n                    parseFirstName(val: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Option({flags: '-f, --first-name ', required: true})\n                \n            \n\n                    \n                        \n                            Defined in src/commands/create-user.command.ts:58\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                val\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        parseLastName\n                        \n                    \n                \n            \n            \n                \n                        \n                    parseLastName(val: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Option({flags: '-l, --last-name ', required: true})\n                \n            \n\n                    \n                        \n                            Defined in src/commands/create-user.command.ts:64\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                val\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        parseRole\n                        \n                    \n                \n            \n            \n                \n                        \n                    parseRole(val: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Option({flags: '-r, --role ', required: true})\n                \n            \n\n                    \n                        \n                            Defined in src/commands/create-user.command.ts:70\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                val\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         UserRoleEnum\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        run\n                        \n                    \n                \n            \n            \n                \n                        \n                    run(inputs: string[], options: Record)\n                \n            \n\n\n                    \n                        \n                            Defined in src/commands/create-user.command.ts:23\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                inputs\n                                            \n                                                        string[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                options\n                                            \n                                                        Record\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        nanoid\n                        \n                    \n                \n            \n                \n                    \n                        Default value : customAlphabet(PASSWORD_CHARACTER_SET, 10)\n                    \n                \n                    \n                        \n                                Defined in src/commands/create-user.command.ts:14\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { Command, CommandRunner } from 'nest-commander';\nimport { UsersService } from 'src/modules/users/users.service';\nimport { Option } from 'nest-commander';\nimport chalk from 'chalk';\nimport { UserRoleEnum } from 'src/common/enums';\nimport { customAlphabet } from 'nanoid';\nimport { PASSWORD_CHARACTER_SET } from 'src/common/constants';\nimport { EntityManager } from '@mikro-orm/core';\n\n@Command({ name: 'create:user', description: 'Create a new user' })\n@Injectable()\nexport class CreateUserCommand extends CommandRunner {\n  private readonly nanoid = customAlphabet(PASSWORD_CHARACTER_SET, 10);\n\n  constructor(\n    private readonly em: EntityManager,\n    private readonly usersService: UsersService,\n  ) {\n    super();\n  }\n\n  async run(inputs: string[], options: Record): Promise {\n    const { email, firstName, lastName, role } = options;\n\n    const forkedEm = this.em.fork();\n\n    try {\n      const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]{2,}$/i;\n\n      if (!emailRegex.test(email)) {\n        throw new Error('Invalid email format');\n      }\n\n      await forkedEm.transactional(async () => {\n        await this.usersService.create({\n          email,\n          firstName,\n          lastName,\n          password: this.nanoid(),\n          role,\n        });\n      });\n      console.log(chalk.green.bold(`✅ Created user with email: ${email}`));\n    } catch (error) {\n      console.error(\n        chalk.red.bold(`❌ Failed to create user: ${error.message}`),\n      );\n    }\n  }\n\n  @Option({ flags: '-e, --email ', required: true }) parseEmail(\n    val: string,\n  ) {\n    return val;\n  }\n\n  @Option({ flags: '-f, --first-name ', required: true }) parseFirstName(\n    val: string,\n  ) {\n    return val;\n  }\n\n  @Option({ flags: '-l, --last-name ', required: true }) parseLastName(\n    val: string,\n  ) {\n    return val;\n  }\n\n  @Option({ flags: '-r, --role ', required: true }) parseRole(\n    val: string,\n  ) {\n    return val as UserRoleEnum;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/dto/create-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                address\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                changePassword\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                city\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                country\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                countryCode\n                            \n                            \n                                    \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                firstName\n                            \n                            \n                                    \n                                    \n                                    \n                                lastName\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                password\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                phoneNumber\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                postalCode\n                            \n                            \n                                    \n                                    \n                                role\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                state\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The address of the user', example: '123 Main St, Springfield'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dto/create-user.dto.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        changePassword\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsBoolean()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dto/create-user.dto.ts:129\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        city\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The city of the user', example: 'Springfield'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dto/create-user.dto.ts:54\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        country\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The country of the user', example: 'USA'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dto/create-user.dto.ts:78\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        countryCode\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The country code of the user', example: '+1'})@IsString()@IsOptional()@Transform( => )\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dto/create-user.dto.ts:91\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The email of the user', example: 'user@example.com'})@IsEmail()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dto/create-user.dto.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The first name of the user', example: 'John'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dto/create-user.dto.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The last name of the user', example: 'Doe'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dto/create-user.dto.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The password of the user', example: 'Strong.Pass-1'})@IsString()@IsNotEmpty()@Matches(/^(?=.*[a-z])(?=.*[A-Z])(?=.*[!@#$%^&*()_\\-+=\\[\\]{};':\"\\\\|,.<>\\/?])[A-Za-z\\d!@#$%^&*()_\\-+=\\[\\]{};':\"\\\\|,.<>\\/?]{10,}$/, {message: 'Password must be at least 10 characters long and include uppercase, lowercase, and a symbol (e.g. @, #, ., -)'})@MinLength(10)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dto/create-user.dto.ts:115\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        phoneNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The phone number of the user', example: '234567890'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dto/create-user.dto.ts:99\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        postalCode\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The postal code of the user', example: '12345'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dto/create-user.dto.ts:62\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserRoleEnum\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Role of the user', example: undefined, enum: UserRoleEnum})@IsEnum(UserRoleEnum, {message: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dto/create-user.dto.ts:125\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        state\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The state of the user', example: 'Illinois'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dto/create-user.dto.ts:70\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsBoolean,\n  IsEmail,\n  IsEnum,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  Matches,\n  MinLength,\n} from 'class-validator';\nimport { ApiProperty } from '@nestjs/swagger';\nimport { UserRoleEnum } from 'src/common/enums';\nimport { Transform } from 'class-transformer';\n\nexport class CreateUserDto {\n  @ApiProperty({\n    description: 'The email of the user',\n    example: 'user@example.com',\n  })\n  @IsEmail()\n  @IsNotEmpty()\n  email: string;\n\n  @ApiProperty({\n    description: 'The first name of the user',\n    example: 'John',\n  })\n  @IsString()\n  @IsNotEmpty()\n  firstName: string;\n\n  @ApiProperty({\n    description: 'The last name of the user',\n    example: 'Doe',\n  })\n  @IsString()\n  @IsNotEmpty()\n  lastName: string;\n\n  @ApiProperty({\n    description: 'The address of the user',\n    example: '123 Main St, Springfield',\n  })\n  @IsString()\n  @IsOptional()\n  address?: string;\n\n  @ApiProperty({\n    description: 'The city of the user',\n    example: 'Springfield',\n  })\n  @IsString()\n  @IsOptional()\n  city?: string;\n\n  @ApiProperty({\n    description: 'The postal code of the user',\n    example: '12345',\n  })\n  @IsString()\n  @IsOptional()\n  postalCode?: string;\n\n  @ApiProperty({\n    description: 'The state of the user',\n    example: 'Illinois',\n  })\n  @IsString()\n  @IsOptional()\n  state?: string;\n\n  @ApiProperty({\n    description: 'The country of the user',\n    example: 'USA',\n  })\n  @IsString()\n  @IsOptional()\n  country?: string;\n\n  @ApiProperty({\n    description: 'The country code of the user',\n    example: '+1',\n  })\n  @IsString()\n  @IsOptional()\n  @Transform(({ value }) => {\n    if (typeof value !== 'string') return value;\n    const cleaned = value.replace(/\\+/g, '');\n    return cleaned ? `+${cleaned}` : '';\n  })\n  countryCode?: string;\n\n  @ApiProperty({\n    description: 'The phone number of the user',\n    example: '234567890',\n  })\n  @IsString()\n  @IsOptional()\n  phoneNumber?: string;\n\n  @ApiProperty({\n    description: 'The password of the user',\n    example: 'Strong.Pass-1',\n  })\n  @IsString()\n  @IsNotEmpty()\n  @Matches(\n    /^(?=.*[a-z])(?=.*[A-Z])(?=.*[!@#$%^&*()_\\-+=\\[\\]{};':\"\\\\|,.<>\\/?])[A-Za-z\\d!@#$%^&*()_\\-+=\\[\\]{};':\"\\\\|,.<>\\/?]{10,}$/,\n    {\n      message:\n        'Password must be at least 10 characters long and include uppercase, lowercase, and a symbol (e.g. @, #, ., -)',\n    },\n  )\n  @MinLength(10)\n  password: string;\n\n  @ApiProperty({\n    description: 'Role of the user',\n    example: UserRoleEnum.ADMIN,\n    enum: UserRoleEnum,\n  })\n  @IsEnum(UserRoleEnum, {\n    message: `role must be one of: ${Object.values(UserRoleEnum).join(', ')}`,\n  })\n  role: UserRoleEnum;\n\n  @IsBoolean()\n  @IsOptional()\n  changePassword?: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserResponseDto.html":{"url":"classes/CreateUserResponseDto.html","title":"class - CreateUserResponseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserResponseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/dto/responses.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                data\n                            \n                            \n                                    \n                                message\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        data\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The newly created user', type: User})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dto/responses.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        message\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Message indicating the success of the operation', example: 'User created successfully'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dto/responses.dto.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { User } from '../entities/user.entity';\n\nexport class CreateUserResponseDto {\n  @ApiProperty({\n    description: 'Message indicating the success of the operation',\n    example: 'User created successfully',\n  })\n  message: string;\n\n  @ApiProperty({\n    description: 'The newly created user',\n    type: User,\n  })\n  data: User;\n}\n\nexport class GetProfileResponseDto {\n  @ApiProperty({\n    description: 'Message indicating the success of the operation',\n    example: 'Profile fetched successfully',\n  })\n  message: string;\n\n  @ApiProperty({\n    description: 'The profile of the user',\n    type: User,\n  })\n  data: User;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/EmailModule.html":{"url":"modules/EmailModule.html","title":"module - EmailModule","body":"\n                   \n\n\n\n\n    Modules\n    EmailModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_EmailModule\n\n\n\ncluster_EmailModule_exports\n\n\n\n\nEmailService \n\nEmailService \n\n\n\nEmailModule\n\nEmailModule\n\nEmailService  -->\n\nEmailModule->EmailService \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/services/email/email.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Exports\n                    \n                        \n                            EmailService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Logger, Module } from '@nestjs/common';\nimport { EmailService } from './email.service';\nimport { MailerModule } from '@nestjs-modules/mailer';\nimport { ConfigService } from '@nestjs/config';\nimport { EMAIL_FROM_NAME } from 'src/common/constants';\nimport { PugAdapter } from '@nestjs-modules/mailer/dist/adapters/pug.adapter';\nimport { join } from 'path';\n\n@Module({\n  imports: [\n    MailerModule.forRootAsync({\n      useFactory: (configService: ConfigService) => ({\n        transport: {\n          host: configService.getOrThrow('smtp.host'),\n          port: configService.getOrThrow('smtp.port'),\n          secure: configService.getOrThrow('smtp.secure'),\n          auth: {\n            user: configService.getOrThrow('smtp.auth.user'),\n            pass: configService.getOrThrow('smtp.auth.pass'),\n          },\n        },\n        defaults: {\n          from: `\"${EMAIL_FROM_NAME}\" ('smtp.auth.user')}>`,\n        },\n        template: {\n          dir: join(process.cwd(), 'src/templates/email'),\n          adapter: new PugAdapter(),\n          options: {\n            strict: true,\n          },\n        },\n      }),\n      inject: [ConfigService],\n    }),\n  ],\n  providers: [EmailService, Logger],\n  controllers: [],\n  exports: [EmailService],\n})\nexport class EmailModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/EmailService.html":{"url":"classes/EmailService.html","title":"class - EmailService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  EmailService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/email/email.service.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                sendEmail\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(mailerService: MailerService, loggerService: LoggerService)\n                    \n                \n                        \n                            \n                                Defined in src/services/email/email.service.ts:4\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        mailerService\n                                                  \n                                                        \n                                                                    MailerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        loggerService\n                                                  \n                                                        \n                                                                    LoggerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        sendEmail\n                        \n                    \n                \n            \n            \n                \n                        \n                    sendEmail(to: string | string[], subject: string, template: string, context: Record)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/email/email.service.ts:11\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                to\n                                            \n                                                        string | string[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                subject\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                template\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                context\n                                            \n                                                        Record\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MailerService } from '@nestjs-modules/mailer';\nimport { Inject, Logger, LoggerService } from '@nestjs/common';\n\nexport class EmailService {\n  constructor(\n    @Inject(MailerService)\n    private readonly mailerService: MailerService,\n    @Inject(Logger) private readonly loggerService: LoggerService,\n  ) {}\n\n  async sendEmail(\n    to: string | string[],\n    subject: string,\n    template: string,\n    context: Record,\n  ): Promise {\n    this.loggerService.log(\n      `Sending email to: ${to} with subject: ${subject}`,\n      'EmailService',\n    );\n\n    await this.mailerService.sendMail({\n      to,\n      subject,\n      template,\n      context,\n    });\n\n    this.loggerService.log(`Email sent successfully to: ${to}`, 'EmailService');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ErrorResponse.html":{"url":"interfaces/ErrorResponse.html","title":"interface - ErrorResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ErrorResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/interfaces/error-response.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            errorCode\n                                        \n                                \n                                \n                                        \n                                            message\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                                \n                                        \n                                            path\n                                        \n                                \n                                \n                                        \n                                            statusCode\n                                        \n                                \n                                \n                                        \n                                            timestamp\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        errorCode\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        errorCode:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        message\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        message:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        path\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        path:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        statusCode\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        statusCode:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        timestamp\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        timestamp:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface ErrorResponse {\n  statusCode: number;\n  message: string;\n  errorCode?: string;\n  timestamp: string;\n  path: string;\n  name: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ForgotPasswordDto.html":{"url":"classes/ForgotPasswordDto.html","title":"class - ForgotPasswordDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ForgotPasswordDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/dto/forgot-password.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                email\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'user@example.com'})@IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/dto/forgot-password.dto.ts:7\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail } from 'class-validator';\nimport { ApiProperty } from '@nestjs/swagger';\n\nexport class ForgotPasswordDto {\n  @ApiProperty({ example: 'user@example.com' })\n  @IsEmail()\n  email: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetProfileResponseDto.html":{"url":"classes/GetProfileResponseDto.html","title":"class - GetProfileResponseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetProfileResponseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/dto/responses.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                data\n                            \n                            \n                                    \n                                message\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        data\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The profile of the user', type: User})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dto/responses.dto.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        message\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Message indicating the success of the operation', example: 'Profile fetched successfully'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dto/responses.dto.ts:23\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { User } from '../entities/user.entity';\n\nexport class CreateUserResponseDto {\n  @ApiProperty({\n    description: 'Message indicating the success of the operation',\n    example: 'User created successfully',\n  })\n  message: string;\n\n  @ApiProperty({\n    description: 'The newly created user',\n    type: User,\n  })\n  data: User;\n}\n\nexport class GetProfileResponseDto {\n  @ApiProperty({\n    description: 'Message indicating the success of the operation',\n    example: 'Profile fetched successfully',\n  })\n  message: string;\n\n  @ApiProperty({\n    description: 'The profile of the user',\n    type: User,\n  })\n  data: User;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/HttpClientModule.html":{"url":"modules/HttpClientModule.html","title":"module - HttpClientModule","body":"\n                   \n\n\n\n\n    Modules\n    HttpClientModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_HttpClientModule\n\n\n\ncluster_HttpClientModule_exports\n\n\n\ncluster_HttpClientModule_providers\n\n\n\n\nHttpClientService \n\nHttpClientService \n\n\n\nHttpClientModule\n\nHttpClientModule\n\nHttpClientService  -->\n\nHttpClientModule->HttpClientService \n\n\n\n\n\nHttpClientService\n\nHttpClientService\n\nHttpClientModule -->\n\nHttpClientService->HttpClientModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/services/http-client/http-client.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            HttpClientService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            HttpClientService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Logger, Module } from '@nestjs/common';\nimport { HttpModule } from '@nestjs/axios';\nimport { HttpClientService } from './http-client.service';\n\n@Module({\n  imports: [HttpModule],\n  providers: [HttpClientService, Logger],\n  exports: [HttpClientService],\n})\nexport class HttpClientModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/HttpClientService.html":{"url":"injectables/HttpClientService.html","title":"injectable - HttpClientService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  HttpClientService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/http-client/http-client.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                httpAgent\n                            \n                            \n                                    Private\n                                    Readonly\n                                httpsAgent\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                makeHttpRequest\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(httpService: HttpService, loggerService: LoggerService)\n                    \n                \n                        \n                            \n                                Defined in src/services/http-client/http-client.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        httpService\n                                                  \n                                                        \n                                                                    HttpService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        loggerService\n                                                  \n                                                        \n                                                                    LoggerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        makeHttpRequest\n                        \n                    \n                \n            \n            \n                \n                        \n                    makeHttpRequest(url: string, options: AxiosRequestConfig)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/http-client/http-client.service.ts:21\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                url\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                options\n                                            \n                                                        AxiosRequestConfig\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        httpAgent\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new http.Agent({ keepAlive: false })\n                    \n                \n                    \n                        \n                                Defined in src/services/http-client/http-client.service.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        httpsAgent\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new https.Agent({ keepAlive: false })\n                    \n                \n                    \n                        \n                                Defined in src/services/http-client/http-client.service.ts:11\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { HttpService } from '@nestjs/axios';\nimport { Inject, Injectable, Logger, LoggerService } from '@nestjs/common';\nimport { AxiosRequestConfig } from 'axios';\nimport http from 'http';\nimport https from 'https';\nimport { lastValueFrom } from 'rxjs';\n\n@Injectable()\nexport class HttpClientService {\n  private readonly httpAgent = new http.Agent({ keepAlive: false });\n  private readonly httpsAgent = new https.Agent({ keepAlive: false });\n\n  constructor(\n    private readonly httpService: HttpService,\n    @Inject(Logger) private readonly loggerService: LoggerService,\n  ) {\n    this.httpService.axiosRef.defaults.httpAgent = this.httpAgent;\n    this.httpService.axiosRef.defaults.httpsAgent = this.httpsAgent;\n  }\n\n  async makeHttpRequest(\n    url: string,\n    options: AxiosRequestConfig,\n  ): Promise {\n    this.loggerService.log(\n      `Making HTTP request to ${url}`,\n      HttpClientService.name,\n    );\n\n    const data =\n      (await lastValueFrom(this.httpService.request({ url, ...options }))) ||\n      {};\n\n    this.loggerService.log(\n      `HTTP request to ${url} successful`,\n      HttpClientService.name,\n    );\n\n    return data;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IPaymentService.html":{"url":"interfaces/IPaymentService.html","title":"interface - IPaymentService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IPaymentService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/payment/interfaces/payment.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        createCheckoutSession\n                                    \n                                \n                                \n                                    \n                                        createPaymentIntent\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        createCheckoutSession\n                        \n                    \n                \n            \n            \n                \ncreateCheckoutSession(params: Stripe.Checkout.SessionCreateParams, options?: Stripe.RequestOptions)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/payment/interfaces/payment.interface.ts:4\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                params\n                                            \n                                                            Stripe.Checkout.SessionCreateParams\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                options\n                                            \n                                                        Stripe.RequestOptions\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createPaymentIntent\n                        \n                    \n                \n            \n            \n                \ncreatePaymentIntent(params: Stripe.PaymentIntentCreateParams, options?: Stripe.RequestOptions)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/payment/interfaces/payment.interface.ts:9\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                params\n                                            \n                                                            Stripe.PaymentIntentCreateParams\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                options\n                                            \n                                                        Stripe.RequestOptions\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import Stripe from 'stripe';\n\nexport interface IPaymentService {\n  createCheckoutSession(\n    params: Stripe.Checkout.SessionCreateParams,\n    options?: Stripe.RequestOptions,\n  ): Promise>;\n\n  createPaymentIntent(\n    params: Stripe.PaymentIntentCreateParams,\n    options?: Stripe.RequestOptions,\n  ): Promise>;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IStrorageService.html":{"url":"interfaces/IStrorageService.html","title":"interface - IStrorageService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IStrorageService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/storage/interfaces/storage.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                        Optional\n                                    \n                                        createPresignedUrlWithoutClient\n                                    \n                                \n                                \n                                    \n                                        upload\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        createPresignedUrlWithoutClient\n                        \n                    \n                \n            \n            \n                \ncreatePresignedUrlWithoutClient(key: string, method?: HttpRequestMethodEnum, ttl?: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/storage/interfaces/storage.interface.ts:15\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                method\n                                            \n                                                            HttpRequestMethodEnum\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                        \n                                                ttl\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        upload\n                        \n                    \n                \n            \n            \n                \nupload(file: MemoryStoredFile, fileCategory: UploadFileCategoryEnum)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/storage/interfaces/storage.interface.ts:10\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                file\n                                            \n                                                        MemoryStoredFile\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                fileCategory\n                                            \n                                                            UploadFileCategoryEnum\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { UploadApiResponse } from 'cloudinary';\nimport { MemoryStoredFile } from 'nestjs-form-data';\nimport {\n  HttpRequestMethodEnum,\n  UploadFileCategoryEnum,\n} from 'src/common/enums';\nimport { S3PutObjectResponse } from '../types/s3-put-object-response';\n\nexport interface IStrorageService {\n  upload(\n    file: MemoryStoredFile,\n    fileCategory: UploadFileCategoryEnum,\n  ): Promise;\n\n  createPresignedUrlWithoutClient?(\n    key: string,\n    method?: HttpRequestMethodEnum,\n    ttl?: number,\n  ): Promise;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtAuthGuard.html":{"url":"injectables/JwtAuthGuard.html","title":"injectable - JwtAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/guards/jwt-auth.guard.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        AuthGuard('jwt')\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                            \n                                handleRequest\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/modules/auth/guards/jwt-auth.guard.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/auth/guards/jwt-auth.guard.ts:16\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        handleRequest\n                        \n                    \n                \n            \n            \n                \nhandleRequest(err: Error, user: any, info: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/auth/guards/jwt-auth.guard.ts:27\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                err\n                                            \n                                                        Error\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                info\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  ExecutionContext,\n  Injectable,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { AuthGuard } from '@nestjs/passport';\nimport { IS_PUBLIC_KEY } from '../decorators/public.decorator';\n\n@Injectable()\nexport class JwtAuthGuard extends AuthGuard('jwt') {\n  constructor(private reflector: Reflector) {\n    super();\n  }\n\n  canActivate(context: ExecutionContext) {\n    const isPublic = this.reflector.getAllAndOverride(IS_PUBLIC_KEY, [\n      context.getHandler(),\n      context.getClass(),\n    ]);\n    if (isPublic) {\n      return true;\n    }\n    return super.canActivate(context);\n  }\n\n  handleRequest(err: Error, user: any, info: any) {\n    if (err || !user) {\n      let errorObject: Error = {\n        name: info?.name || 'UnauthorizedException',\n        message: info?.message || 'Unauthorized',\n      };\n\n      throw new UnauthorizedException(errorObject);\n    }\n\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/strategies/jwt.strategy.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PassportStrategy(Strategy)\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, usersService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/auth/strategies/jwt.strategy.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                        \n                    validate(req: Request, payload: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/auth/strategies/jwt.strategy.ts:34\n                        \n                    \n\n\n            \n                \n                        NOTE: req is available here and can be used to extract the raw JWT.\nThis can support enforcing a single active session per user:\n\nCompare the JWT in the request with the token stored in the user document.\nReject the request if they don't match (i.e., user is logged in elsewhere).\n\nImplementation details:\n\nStore or update the token in the user document during login and token refresh.\nThis logic should be implemented in the\nlogin() (needs to be implemented as login currently stops at the controller level and no it's not wrong)\n and refresh() methods of the AuthService class.\n\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                payload\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ExtractJwt, Strategy } from 'passport-jwt';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Injectable } from '@nestjs/common';\nimport { UsersService } from 'src/modules/users/users.service';\nimport { ConfigService } from '@nestjs/config';\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  constructor(\n    configService: ConfigService,\n    private usersService: UsersService,\n  ) {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      ignoreExpiration: false,\n      secretOrKey: configService.getOrThrow('auth.jwt.secret'),\n      passReqToCallback: true,\n    });\n  }\n\n  /**\n   * NOTE: `req` is available here and can be used to extract the raw JWT.\n   *\n   * This can support enforcing a single active session per user:\n   * - Compare the JWT in the request with the token stored in the user document.\n   * - Reject the request if they don't match (i.e., user is logged in elsewhere).\n   *\n   * Implementation details:\n   * - Store or update the token in the user document during login and token refresh.\n   * - This logic should be implemented in the\n   * `login()` (needs to be implemented as login currently stops at the controller level and no it's not wrong)\n   *  and `refresh()` methods of the `AuthService` class.\n   */\n  async validate(req: Request, payload: any) {\n    const user = await this.usersService.findOne({\n      id: payload.sub,\n    });\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalAuthGuard.html":{"url":"injectables/LocalAuthGuard.html","title":"injectable - LocalAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LocalAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/guards/local-auth.guard.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        AuthGuard('local')\n            \n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class LocalAuthGuard extends AuthGuard('local') {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalStrategy.html":{"url":"injectables/LocalStrategy.html","title":"injectable - LocalStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LocalStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/strategies/local.strategy.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PassportStrategy(Strategy)\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService, usersService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/auth/strategies/local.strategy.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                        \n                    validate(email: string, password: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/auth/strategies/local.strategy.ts:17\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                password\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Strategy } from 'passport-local';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { AuthService } from '../auth.service';\nimport { UsersService } from 'src/modules/users/users.service';\nimport moment from 'moment';\n\n@Injectable()\nexport class LocalStrategy extends PassportStrategy(Strategy) {\n  constructor(\n    private authService: AuthService,\n    private usersService: UsersService,\n  ) {\n    super({ usernameField: 'email' });\n  }\n\n  async validate(email: string, password: string): Promise {\n    const user = await this.authService.validateUser(email, password);\n    if (!user) {\n      throw new UnauthorizedException('Invalid credentials');\n    }\n    await this.usersService.update({\n      id: user.id,\n      lastLoggedIn: moment().utc().toDate(),\n    });\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginDto.html":{"url":"classes/LoginDto.html","title":"class - LoginDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/dto/login.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The email of the user', example: 'user@example.com'})@IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/dto/login.dto.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The password of the user', example: 'Strong.Pass-1'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/dto/login.dto.ts:16\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsEmail } from 'class-validator';\n\nexport class LoginDto {\n  @ApiProperty({\n    description: 'The email of the user',\n    example: 'user@example.com',\n  })\n  @IsEmail()\n  email: string;\n\n  @ApiProperty({\n    description: 'The password of the user',\n    example: 'Strong.Pass-1',\n  })\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MorganMiddleware.html":{"url":"injectables/MorganMiddleware.html","title":"injectable - MorganMiddleware","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  MorganMiddleware\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/middlewares/morgan.middleware.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                use\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(loggerService: LoggerService)\n                    \n                \n                        \n                            \n                                Defined in src/common/middlewares/morgan.middleware.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        loggerService\n                                                  \n                                                        \n                                                                    LoggerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        use\n                        \n                    \n                \n            \n            \n                \nuse(req: any, res: any, next: () => void)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/middlewares/morgan.middleware.ts:14\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                res\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                next\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  Inject,\n  Injectable,\n  Logger,\n  LoggerService,\n  NestMiddleware,\n} from '@nestjs/common';\nimport morgan from 'morgan';\n\n@Injectable()\nexport class MorganMiddleware implements NestMiddleware {\n  constructor(@Inject(Logger) private readonly loggerService: LoggerService) {}\n\n  use(req: any, res: any, next: () => void) {\n    if (req.url === '/' || req.url.match(/\\/v1\\/queues\\/.*$/)) {\n      return next();\n    }\n\n    morgan(\n      ':remote-addr :remote-user :method :url :http-version :status :res[content-length] :response-time ms :total-time ms :referrer :user-agent :req[header] :req[body]',\n      {\n        stream: {\n          write: (message: string) => {\n            const status = res.statusCode;\n            if (status === 404) {\n              this.loggerService.warn(message.trim(), MorganMiddleware.name);\n            } else {\n              this.loggerService.log(message.trim(), MorganMiddleware.name);\n            }\n          },\n        },\n      },\n    )(req, res, next);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PasswordResetEmailConsumer.html":{"url":"classes/PasswordResetEmailConsumer.html","title":"class - PasswordResetEmailConsumer","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PasswordResetEmailConsumer\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/consumers/auth.consumer.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                process\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(emailService: EmailService, loggerService: LoggerService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/auth/consumers/auth.consumer.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        emailService\n                                                  \n                                                        \n                                                                        EmailService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        loggerService\n                                                  \n                                                        \n                                                                    LoggerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        process\n                        \n                    \n                \n            \n            \n                \n                        \n                    process(job: Job)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/auth/consumers/auth.consumer.ts:20\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                job\n                                            \n                                                        Job\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { PASSWORD_RESET_EMAIL_QUEUE_NAME } from 'src/common/constants';\nimport os from 'os';\nimport { Processor, WorkerHost } from '@nestjs/bullmq';\nimport { Job } from 'bullmq';\nimport { EmailService } from 'src/services/email/email.service';\nimport { Inject, Logger, LoggerService } from '@nestjs/common';\nimport { EmailSubjectEnum, EmailTemplateEnum } from 'src/common/enums';\n\n@Processor(PASSWORD_RESET_EMAIL_QUEUE_NAME, {\n  concurrency: os.cpus().length,\n})\nexport class PasswordResetEmailConsumer extends WorkerHost {\n  constructor(\n    private readonly emailService: EmailService,\n    @Inject(Logger) private readonly loggerService: LoggerService,\n  ) {\n    super();\n  }\n\n  async process(job: Job) {\n    const { data } = job;\n\n    this.loggerService.log(\n      `Processing job: ${job.id} for email: ${data?.email}`,\n      'PasswordResetEmailConsumer',\n    );\n\n    await this.emailService.sendEmail(\n      data?.email,\n      EmailSubjectEnum.PASSWORD_RESET,\n      EmailTemplateEnum.PASSWORD_RESET,\n      { resetUrl: data?.resetUrl, firstName: data?.firstName },\n    );\n\n    this.loggerService.log(\n      `Job: ${job.id} processed successfully for email: ${data?.email}`,\n      'PasswordResetEmailConsumer',\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PaymentModule.html":{"url":"modules/PaymentModule.html","title":"module - PaymentModule","body":"\n                   \n\n\n\n\n    Modules\n    PaymentModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/services/payment/payment.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        register\n                        \n                    \n                \n            \n            \n                \n                        \n                    register()\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/payment/payment.module.ts:16\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     DynamicModule\n\n                        \n                \n            \n        \n    \n\n    \n\n\n    \n        import { STRIPE_CLIENT_TOKEN, StripeModule } from '@golevelup/nestjs-stripe';\nimport { DynamicModule, Logger, LoggerService, Module } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { TEMPLATE_QUEUE_NAME, PAYMENT_PROVIDER } from 'src/common/constants';\nimport { PaymentDriverEnum } from 'src/common/enums';\nimport Stripe from 'stripe';\nimport { Public } from 'src/modules/auth/decorators/public.decorator';\nimport { StripeService } from './stripe.service';\nimport { BullModule, getQueueToken } from '@nestjs/bullmq';\nimport { BullBoardModule } from '@bull-board/nestjs';\nimport { BullMQAdapter } from '@bull-board/api/bullMQAdapter';\nimport { Queue } from 'bullmq';\n\n@Module({})\nexport class PaymentModule {\n  static register(): DynamicModule {\n    return {\n      module: PaymentModule,\n      imports: [\n        StripeModule.forRootAsync({\n          useFactory: (configService: ConfigService) => ({\n            apiKey: configService.getOrThrow('stripe.secretKey'),\n            webhookConfig: {\n              stripeSecrets: {\n                account: configService.getOrThrow(\n                  'stripe.webhookSecret.account',\n                ),\n                accountTest: configService.getOrThrow(\n                  'stripe.webhookSecret.accountTest',\n                ),\n              },\n              loggingConfiguration: {\n                logMatchingEventHandlers: true,\n              },\n              decorators: [Public()],\n            },\n          }),\n          inject: [ConfigService],\n        }),\n        BullModule.registerQueue({\n          name: TEMPLATE_QUEUE_NAME,\n          defaultJobOptions: {\n            attempts: 5,\n            backoff: { type: 'exponential', delay: 2000 },\n          },\n        }),\n        BullBoardModule.forFeature({\n          name: TEMPLATE_QUEUE_NAME,\n          adapter: BullMQAdapter,\n        }),\n      ],\n      providers: [\n        {\n          provide: PAYMENT_PROVIDER,\n          useFactory: (\n            configService: ConfigService,\n            loggerService: LoggerService,\n            stripeClient: Stripe,\n            templateQueue: Queue,\n          ) => {\n            const driver = configService.getOrThrow('driver.payment');\n            if (driver === PaymentDriverEnum.STRIPE)\n              return new StripeService(\n                configService,\n                loggerService,\n                stripeClient,\n                templateQueue,\n              );\n          },\n          inject: [\n            ConfigService,\n            Logger,\n            STRIPE_CLIENT_TOKEN,\n            getQueueToken(TEMPLATE_QUEUE_NAME),\n          ],\n        },\n        Logger,\n      ],\n      exports: [PAYMENT_PROVIDER],\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RefreshTokenDto.html":{"url":"classes/RefreshTokenDto.html","title":"class - RefreshTokenDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RefreshTokenDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/dto/refresh-token-dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                refreshToken\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        refreshToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Refresh token provided during login', example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/dto/refresh-token-dto.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsNotEmpty, IsString } from 'class-validator';\n\nexport class RefreshTokenDto {\n  @ApiProperty({\n    description: 'Refresh token provided during login',\n    example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9',\n  })\n  @IsString()\n  @IsNotEmpty()\n  refreshToken: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RequestBodyAndResponseInterceptor.html":{"url":"injectables/RequestBodyAndResponseInterceptor.html","title":"injectable - RequestBodyAndResponseInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RequestBodyAndResponseInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/interceptors/response.interceptor.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(loggerService: LoggerService)\n                    \n                \n                        \n                            \n                                Defined in src/common/interceptors/response.interceptor.ts:53\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        loggerService\n                                                  \n                                                        \n                                                                    LoggerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/interceptors/response.interceptor.ts:56\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                next\n                                            \n                                                        CallHandler\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { STRIPE_WEBHOOK_CONTEXT_TYPE } from '@golevelup/nestjs-stripe';\nimport {\n  CallHandler,\n  ExecutionContext,\n  Inject,\n  Injectable,\n  Logger,\n  LoggerService,\n  NestInterceptor,\n} from '@nestjs/common';\nimport { Observable } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\n\n@Injectable()\nexport class SuccessResponseInterceptor implements NestInterceptor {\n  intercept(context: ExecutionContext, next: CallHandler): Observable {\n    const contextType = context.getType();\n    if (contextType === STRIPE_WEBHOOK_CONTEXT_TYPE) {\n      return next.handle();\n    }\n\n    return next.handle().pipe(\n      map((response) => {\n        const httpResponse = context.switchToHttp().getResponse();\n\n        const statusCode =\n          response?.statusCode && Number.isInteger(response.statusCode)\n            ? response.statusCode\n            : httpResponse.statusCode;\n\n        const message =\n          response?.message && typeof response.message === 'string'\n            ? response.message\n            : 'Operation successful';\n\n        const responseData =\n          response?.data !== undefined ? response?.data : response?.message;\n\n        return {\n          statusCode,\n          success: true,\n          message,\n          data: responseData,\n        };\n      }),\n    );\n  }\n}\n\n@Injectable()\nexport class RequestBodyAndResponseInterceptor implements NestInterceptor {\n  constructor(@Inject(Logger) private readonly loggerService: LoggerService) {}\n\n  intercept(context: ExecutionContext, next: CallHandler): Observable {\n    const request = context.switchToHttp().getRequest();\n    const method = request.method;\n    const url = request.url;\n\n    return next.handle().pipe(\n      tap((response) => {\n        this.loggerService.log(`[${method}] ${url} - Response:`, response);\n      }),\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ResetPasswordDto.html":{"url":"classes/ResetPasswordDto.html","title":"class - ResetPasswordDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ResetPasswordDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/dto/reset-password.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                confirmPassword\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                newPassword\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                resetToken\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        confirmPassword\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The confirmation of the new password', example: 'Asecure-Word.'})@IsString()@IsNotEmpty()@Matches(/^(?=.*[a-z])(?=.*[A-Z])(?=.*[!@#$%^&*()_\\-+=\\[\\]{};':\"\\\\|,.<>\\/?])[A-Za-z\\d!@#$%^&*()_\\-+=\\[\\]{};':\"\\\\|,.<>\\/?]{10,}$/, {message: 'Password must be at least 10 characters long and include uppercase, lowercase, and a symbol (e.g. @, #, ., -)'})@MinLength(10)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/dto/reset-password.dto.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        newPassword\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The new password for the user', example: 'Asecure-Word.'})@IsString()@IsNotEmpty()@Matches(/^(?=.*[a-z])(?=.*[A-Z])(?=.*[!@#$%^&*()_\\-+=\\[\\]{};':\"\\\\|,.<>\\/?])[A-Za-z\\d!@#$%^&*()_\\-+=\\[\\]{};':\"\\\\|,.<>\\/?]{10,}$/, {message: 'Password must be at least 10 characters long and include uppercase, lowercase, and a symbol (e.g. @, #, ., -)'})@MinLength(10)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/dto/reset-password.dto.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        resetToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The reset token sent to the user', example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...'})@IsString()@IsJWT()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/dto/reset-password.dto.ts:50\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport {\n  IsJWT,\n  IsNotEmpty,\n  IsString,\n  Matches,\n  MinLength,\n} from 'class-validator';\n\nexport class ResetPasswordDto {\n  @ApiProperty({\n    description: 'The new password for the user',\n    example: 'Asecure-Word.',\n  })\n  @IsString()\n  @IsNotEmpty()\n  @Matches(\n    /^(?=.*[a-z])(?=.*[A-Z])(?=.*[!@#$%^&*()_\\-+=\\[\\]{};':\"\\\\|,.<>\\/?])[A-Za-z\\d!@#$%^&*()_\\-+=\\[\\]{};':\"\\\\|,.<>\\/?]{10,}$/,\n    {\n      message:\n        'Password must be at least 10 characters long and include uppercase, lowercase, and a symbol (e.g. @, #, ., -)',\n    },\n  )\n  @MinLength(10)\n  newPassword: string;\n\n  @ApiProperty({\n    description: 'The confirmation of the new password',\n    example: 'Asecure-Word.',\n  })\n  @IsString()\n  @IsNotEmpty()\n  @Matches(\n    /^(?=.*[a-z])(?=.*[A-Z])(?=.*[!@#$%^&*()_\\-+=\\[\\]{};':\"\\\\|,.<>\\/?])[A-Za-z\\d!@#$%^&*()_\\-+=\\[\\]{};':\"\\\\|,.<>\\/?]{10,}$/,\n    {\n      message:\n        'Password must be at least 10 characters long and include uppercase, lowercase, and a symbol (e.g. @, #, ., -)',\n    },\n  )\n  @MinLength(10)\n  confirmPassword: string;\n\n  @ApiProperty({\n    description: 'The reset token sent to the user',\n    example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...',\n  })\n  @IsString()\n  @IsJWT()\n  @IsNotEmpty()\n  resetToken: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/RoleGuard.html":{"url":"guards/RoleGuard.html","title":"guard - RoleGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    RoleGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/common/guards/index.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/common/guards/index.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/guards/index.ts:16\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     boolean | Promise | Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import {\n  Injectable,\n  CanActivate,\n  ExecutionContext,\n  ForbiddenException,\n} from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { Role } from '../decorators';\nimport { Observable } from 'rxjs';\nimport { STRIPE_WEBHOOK_CONTEXT_TYPE } from '@golevelup/nestjs-stripe';\n\n@Injectable()\nexport class RoleGuard implements CanActivate {\n  constructor(private readonly reflector: Reflector) {}\n\n  canActivate(\n    context: ExecutionContext,\n  ): boolean | Promise | Observable {\n    const contextType = context.getType();\n\n    if (contextType === STRIPE_WEBHOOK_CONTEXT_TYPE) {\n      return true;\n    }\n\n    const requiredRole = this.reflector.get(Role, context.getHandler());\n\n    if (!requiredRole) {\n      return true;\n    }\n\n    const request = context.switchToHttp().getRequest();\n    const userRole: string = request?.user?.role;\n\n    if (userRole !== requiredRole) {\n      throw new ForbiddenException(\n        'You do not have the necessary permission to access this route!',\n      );\n    }\n\n    return true;\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/S3Service.html":{"url":"injectables/S3Service.html","title":"injectable - S3Service","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  S3Service\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/storage/s3.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                nanoid\n                            \n                            \n                                    Private\n                                s3Bucket\n                            \n                            \n                                    Private\n                                s3Region\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createPresignedUrlWithoutClient\n                            \n                            \n                                    Async\n                                upload\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, loggerService: LoggerService, s3Client: S3)\n                    \n                \n                        \n                            \n                                Defined in src/services/storage/s3.service.ts:24\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        loggerService\n                                                  \n                                                        \n                                                                    LoggerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        s3Client\n                                                  \n                                                        \n                                                                    S3\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createPresignedUrlWithoutClient\n                        \n                    \n                \n            \n            \n                \n                        \n                    createPresignedUrlWithoutClient(key: string, method?: HttpRequestMethodEnum, ttl?: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/storage/s3.service.ts:65\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                method\n                                            \n                                                            HttpRequestMethodEnum\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                        \n                                                ttl\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        upload\n                        \n                    \n                \n            \n            \n                \n                        \n                    upload(file: MemoryStoredFile, fileCategory: UploadFileCategoryEnum)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/storage/s3.service.ts:35\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                file\n                                            \n                                                        MemoryStoredFile\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                fileCategory\n                                            \n                                                            UploadFileCategoryEnum\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        nanoid\n                        \n                    \n                \n            \n                \n                    \n                        Default value : customAlphabet(hexadecimalLowercase, 10)\n                    \n                \n                    \n                        \n                                Defined in src/services/storage/s3.service.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        s3Bucket\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/services/storage/s3.service.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        s3Region\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/services/storage/s3.service.ts:23\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable, Logger, LoggerService } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { IStrorageService } from './interfaces/storage.interface';\nimport {\n  HttpRequestMethodEnum,\n  UploadFileCategoryEnum,\n} from 'src/common/enums';\nimport { MemoryStoredFile } from 'nestjs-form-data';\nimport { InjectS3, S3 } from 'nestjs-s3';\nimport { customAlphabet } from 'nanoid';\nimport { hexadecimalLowercase } from 'nanoid-dictionary';\nimport { S3PutObjectResponse } from './types/s3-put-object-response';\nimport { parseUrl } from '@smithy/url-parser';\nimport { S3RequestPresigner } from '@aws-sdk/s3-request-presigner';\nimport { fromEnv } from '@aws-sdk/credential-providers';\nimport { Hash } from '@smithy/hash-node';\nimport { HttpRequest } from '@smithy/protocol-http';\nimport { formatUrl } from '@aws-sdk/util-format-url';\n\n@Injectable()\nexport class S3Service implements IStrorageService {\n  private s3Bucket: string;\n  private s3Region: string;\n  private readonly nanoid = customAlphabet(hexadecimalLowercase, 10);\n\n  constructor(\n    private readonly configService: ConfigService,\n    @Inject(Logger) private readonly loggerService: LoggerService,\n    @InjectS3() private readonly s3Client: S3,\n  ) {\n    this.s3Bucket = this.configService.getOrThrow('aws.s3.bucket');\n    this.s3Region = this.configService.getOrThrow('aws.s3.region');\n  }\n\n  async upload(\n    file: MemoryStoredFile,\n    fileCategory: UploadFileCategoryEnum,\n  ): Promise {\n    this.s3Bucket = this.configService.getOrThrow('aws.s3.bucket');\n\n    const key = `${fileCategory}/${this.nanoid()}_${file.originalName}`;\n\n    this.loggerService.log(\n      `Starting upload: filename=\"${file.originalName}\", size=${file.size} bytes, category=${fileCategory}`,\n      S3Service.name,\n    );\n\n    await this.s3Client.putObject({\n      Bucket: this.s3Bucket,\n      Key: key,\n      Body: file.buffer,\n      ContentType: file.mimetype,\n    });\n\n    const url = `https://${this.s3Bucket}.s3.${this.s3Region}.amazonaws.com/${key}`;\n\n    this.loggerService.log(\n      `Upload successful: filename=\"${file.originalName}\", key=${key}`,\n      S3Service.name,\n    );\n\n    return { key, url };\n  }\n\n  async createPresignedUrlWithoutClient(\n    key: string,\n    method?: HttpRequestMethodEnum,\n    ttl?: number,\n  ): Promise {\n    const httpMethod = method ?? HttpRequestMethodEnum.GET;\n    const expiresIn = ttl ?? 30 * 60 * 60;\n\n    const url = parseUrl(\n      `https://${this.s3Bucket}.s3.${this.s3Region}.amazonaws.com/${key}`,\n    );\n    const presigner = new S3RequestPresigner({\n      credentials: fromEnv(),\n      region: this.s3Region,\n      sha256: Hash.bind(null, 'sha256'),\n    });\n\n    const signedUrlObject = await presigner.presign(\n      new HttpRequest({ ...url, method: httpMethod }),\n      { expiresIn },\n    );\n    return formatUrl(signedUrlObject);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SchemaService.html":{"url":"injectables/SchemaService.html","title":"injectable - SchemaService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SchemaService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/schema.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                onModuleInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(orm: MikroORM, configService: ConfigService, loggerService: LoggerService)\n                    \n                \n                        \n                            \n                                Defined in src/schema.service.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        orm\n                                                  \n                                                        \n                                                                    MikroORM\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        loggerService\n                                                  \n                                                        \n                                                                    LoggerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \n                        \n                    onModuleInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/schema.service.ts:22\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(SchemaService.name)\n                    \n                \n                    \n                        \n                                Defined in src/schema.service.ts:14\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import {\n  Injectable,\n  OnModuleInit,\n  Logger,\n  LoggerService,\n  Inject,\n} from '@nestjs/common';\nimport { MikroORM } from '@mikro-orm/core';\nimport { ConfigService } from '@nestjs/config';\nimport { PRODUCTION } from './common/constants';\n\n@Injectable()\nexport class SchemaService implements OnModuleInit {\n  private readonly logger = new Logger(SchemaService.name);\n\n  constructor(\n    private readonly orm: MikroORM,\n    private readonly configService: ConfigService,\n    @Inject(Logger) private readonly loggerService: LoggerService,\n  ) {}\n\n  async onModuleInit() {\n    const nodeEnv = this.configService.getOrThrow('nodeEnv');\n\n    if (nodeEnv !== PRODUCTION) {\n      const generator = this.orm.getSchemaGenerator();\n      await generator.updateSchema();\n      this.loggerService.log(\n        '✅ Database schema synchronized',\n        SchemaService.name,\n      );\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/StorageModule.html":{"url":"modules/StorageModule.html","title":"module - StorageModule","body":"\n                   \n\n\n\n\n    Modules\n    StorageModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/services/storage/storage.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        register\n                        \n                    \n                \n            \n            \n                \n                        \n                    register()\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/storage/storage.module.ts:11\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     DynamicModule\n\n                        \n                \n            \n        \n    \n\n    \n\n\n    \n        import { Module, DynamicModule, Logger, LoggerService } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { CloudinaryService } from './cloudinary.service';\nimport { STORAGE_PROVIDER } from 'src/common/constants';\nimport { StorageDriverEnum } from 'src/common/enums';\nimport { S3Service } from './s3.service';\nimport { getS3ConnectionToken, S3, S3Module } from 'nestjs-s3';\n\n@Module({})\nexport class StorageModule {\n  static register(): DynamicModule {\n    return {\n      module: StorageModule,\n      imports: [\n        S3Module.forRootAsync({\n          inject: [ConfigService],\n          useFactory: (configService: ConfigService) => ({\n            config: {\n              credentials: {\n                accessKeyId: configService.get('aws.s3.accessKeyId'),\n                secretAccessKey: configService.get(\n                  'aws.s3.secretAccessKey',\n                ),\n              },\n              region: configService.get('aws.s3.region'),\n            },\n          }),\n        }),\n      ],\n      providers: [\n        {\n          provide: STORAGE_PROVIDER,\n          useFactory: (\n            configService: ConfigService,\n            loggerService: LoggerService,\n            s3Client: S3,\n          ) => {\n            const driver = configService.getOrThrow('driver.storage');\n            if (driver === StorageDriverEnum.CLOUDINARY) {\n              return new CloudinaryService(configService, loggerService);\n            } else if (driver === StorageDriverEnum.S3) {\n              return new S3Service(configService, loggerService, s3Client);\n            }\n\n            throw new Error(`Unsupported storage driver: ${driver}`);\n          },\n          inject: [ConfigService, Logger, getS3ConnectionToken('')],\n        },\n        Logger,\n      ],\n      exports: [STORAGE_PROVIDER],\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/StripeService.html":{"url":"injectables/StripeService.html","title":"injectable - StripeService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  StripeService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/payment/stripe.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createCheckoutSession\n                            \n                            \n                                    Async\n                                createPaymentIntent\n                            \n                            \n                                    \n                                    Async\n                                handlePaymentIntentSucceeded\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, loggerService: LoggerService, stripeClient: Stripe, templateQueue: Queue)\n                    \n                \n                        \n                            \n                                Defined in src/services/payment/stripe.service.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        loggerService\n                                                  \n                                                        \n                                                                    LoggerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        stripeClient\n                                                  \n                                                        \n                                                                    Stripe\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        templateQueue\n                                                  \n                                                        \n                                                                    Queue\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createCheckoutSession\n                        \n                    \n                \n            \n            \n                \n                        \n                    createCheckoutSession(params: Stripe.Checkout.SessionCreateParams, options?: Stripe.RequestOptions)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/payment/stripe.service.ts:23\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                params\n                                            \n                                                            Stripe.Checkout.SessionCreateParams\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                options\n                                            \n                                                        Stripe.RequestOptions\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createPaymentIntent\n                        \n                    \n                \n            \n            \n                \n                        \n                    createPaymentIntent(params: Stripe.PaymentIntentCreateParams, options?: Stripe.RequestOptions)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/payment/stripe.service.ts:45\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                params\n                                            \n                                                            Stripe.PaymentIntentCreateParams\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                options\n                                            \n                                                        Stripe.RequestOptions\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        handlePaymentIntentSucceeded\n                        \n                    \n                \n            \n            \n                \n                        \n                    handlePaymentIntentSucceeded(evt: Stripe.PaymentIntentSucceededEvent)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @StripeWebhookHandler('payment_intent.succeeded')\n                \n            \n\n                    \n                        \n                            Defined in src/services/payment/stripe.service.ts:60\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                evt\n                                            \n                                                            Stripe.PaymentIntentSucceededEvent\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  InjectStripeClient,\n  StripeWebhookHandler,\n} from '@golevelup/nestjs-stripe';\nimport { Inject, Injectable, Logger, LoggerService } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport Stripe from 'stripe';\nimport { TEMPLATE_QUEUE_NAME } from 'src/common/constants';\nimport { IPaymentService } from './interfaces/payment.interface';\nimport { InjectQueue } from '@nestjs/bullmq';\nimport { Queue } from 'bullmq';\n\n@Injectable()\nexport class StripeService implements IPaymentService {\n  constructor(\n    private readonly configService: ConfigService,\n    @Inject(Logger) private readonly loggerService: LoggerService,\n    @InjectStripeClient() private readonly stripeClient: Stripe,\n    @InjectQueue(TEMPLATE_QUEUE_NAME)\n    private readonly templateQueue: Queue,\n  ) {}\n\n  async createCheckoutSession(\n    params: Stripe.Checkout.SessionCreateParams,\n    options?: Stripe.RequestOptions,\n  ): Promise> {\n    this.loggerService.log(\n      `Creating Stripe checkout session`,\n      StripeService.name,\n    );\n\n    const session = await this.stripeClient.checkout.sessions.create(\n      params,\n      options,\n    );\n\n    this.loggerService.log(\n      `Checkout session created successfully with ID: ${session.id}`,\n      StripeService.name,\n    );\n\n    return session;\n  }\n\n  async createPaymentIntent(\n    params: Stripe.PaymentIntentCreateParams,\n    options?: Stripe.RequestOptions,\n  ): Promise> {\n    this.loggerService.log(`Creating Payment Intent`, StripeService.name);\n\n    const paymentIntent = await this.stripeClient.paymentIntents.create(\n      params,\n      options,\n    );\n\n    return paymentIntent;\n  }\n\n  @StripeWebhookHandler('payment_intent.succeeded')\n  async handlePaymentIntentSucceeded(evt: Stripe.PaymentIntentSucceededEvent) {\n    const { data }: { data: Stripe.PaymentIntentSucceededEvent.Data } = evt;\n    const intent = data.object as Stripe.PaymentIntent;\n\n    await this.templateQueue.add(TEMPLATE_QUEUE_NAME, {\n      intent,\n      eventId: evt?.id,\n    });\n\n    this.loggerService.log(\n      `Received Stripe payment_intent.succeeded event: intent id=\"${intent.id}\" and queued into: \"${TEMPLATE_QUEUE_NAME}\"`,\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SuccessResponseInterceptor.html":{"url":"injectables/SuccessResponseInterceptor.html","title":"injectable - SuccessResponseInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SuccessResponseInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/interceptors/response.interceptor.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/interceptors/response.interceptor.ts:16\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                next\n                                            \n                                                        CallHandler\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { STRIPE_WEBHOOK_CONTEXT_TYPE } from '@golevelup/nestjs-stripe';\nimport {\n  CallHandler,\n  ExecutionContext,\n  Inject,\n  Injectable,\n  Logger,\n  LoggerService,\n  NestInterceptor,\n} from '@nestjs/common';\nimport { Observable } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\n\n@Injectable()\nexport class SuccessResponseInterceptor implements NestInterceptor {\n  intercept(context: ExecutionContext, next: CallHandler): Observable {\n    const contextType = context.getType();\n    if (contextType === STRIPE_WEBHOOK_CONTEXT_TYPE) {\n      return next.handle();\n    }\n\n    return next.handle().pipe(\n      map((response) => {\n        const httpResponse = context.switchToHttp().getResponse();\n\n        const statusCode =\n          response?.statusCode && Number.isInteger(response.statusCode)\n            ? response.statusCode\n            : httpResponse.statusCode;\n\n        const message =\n          response?.message && typeof response.message === 'string'\n            ? response.message\n            : 'Operation successful';\n\n        const responseData =\n          response?.data !== undefined ? response?.data : response?.message;\n\n        return {\n          statusCode,\n          success: true,\n          message,\n          data: responseData,\n        };\n      }),\n    );\n  }\n}\n\n@Injectable()\nexport class RequestBodyAndResponseInterceptor implements NestInterceptor {\n  constructor(@Inject(Logger) private readonly loggerService: LoggerService) {}\n\n  intercept(context: ExecutionContext, next: CallHandler): Observable {\n    const request = context.switchToHttp().getRequest();\n    const method = request.method;\n    const url = request.url;\n\n    return next.handle().pipe(\n      tap((response) => {\n        this.loggerService.log(`[${method}] ${url} - Response:`, response);\n      }),\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/User.html":{"url":"entities/User.html","title":"entity - User","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/entities/user.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Optional\n                                address\n                            \n                            \n                                    \n                                    Optional\n                                avatar\n                            \n                            \n                                    \n                                changePassword\n                            \n                            \n                                    \n                                    Optional\n                                city\n                            \n                            \n                                    \n                                    Optional\n                                country\n                            \n                            \n                                    \n                                    Optional\n                                countryCode\n                            \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                    Optional\n                                deletedAt\n                            \n                            \n                                    \n                                email\n                            \n                            \n                                    \n                                firstName\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                    Optional\n                                lastLoggedIn\n                            \n                            \n                                    \n                                lastName\n                            \n                            \n                                    \n                                password\n                            \n                            \n                                    \n                                passwordResetRequested\n                            \n                            \n                                    \n                                    Optional\n                                phoneNumber\n                            \n                            \n                                    \n                                    Optional\n                                postalCode\n                            \n                            \n                                    \n                                role\n                            \n                            \n                                    \n                                    Optional\n                                state\n                            \n                            \n                                    \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Property({type: 'text', nullable: true, comment: 'Street address'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/entities/user.entity.ts:55\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        avatar\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Property({type: 'varchar', length: 500, nullable: true, comment: 'Avatar URL or path'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/entities/user.entity.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        changePassword\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Property({type: 'boolean', default: false, comment: 'Whether user needs to change password'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/entities/user.entity.ts:126\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        city\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Property({type: 'varchar', length: 100, nullable: true, comment: 'City name'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/entities/user.entity.ts:63\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        country\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Property({type: 'varchar', length: 100, nullable: true, comment: 'Country name'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/entities/user.entity.ts:87\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        countryCode\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Property({type: 'varchar', length: 3, nullable: true, comment: 'ISO country code'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/entities/user.entity.ts:95\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Default value : new Date()\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Property({type: 'timestamptz', defaultRaw: 'CURRENT_TIMESTAMP', comment: 'Record creation timestamp'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/entities/user.entity.ts:154\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        deletedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Property({type: 'timestamptz', nullable: true, comment: 'Soft delete timestamp'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/entities/user.entity.ts:147\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Property({unique: true, type: 'varchar', length: 255, comment: 'User email address'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/entities/user.entity.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Property({type: 'varchar', length: 100, comment: 'User first name'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/entities/user.entity.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : uuidv7()\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryKey({type: 'uuid'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/entities/user.entity.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        lastLoggedIn\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Property({type: 'timestamptz', nullable: true, comment: 'Last login timestamp'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/entities/user.entity.ts:140\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Property({type: 'varchar', length: 100, comment: 'User last name'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/entities/user.entity.ts:48\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Property({type: 'varchar', length: 255, comment: 'Hashed password'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/entities/user.entity.ts:110\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        passwordResetRequested\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Property({type: 'boolean', default: false, comment: 'Whether password reset was requested'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/entities/user.entity.ts:133\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        phoneNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Property({type: 'varchar', length: 20, nullable: true, comment: 'Phone number'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/entities/user.entity.ts:103\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        postalCode\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Property({type: 'varchar', length: 20, nullable: true, comment: 'Postal/ZIP code'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/entities/user.entity.ts:71\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserRoleEnum\n\n                    \n                \n                \n                    \n                        Default value : UserRoleEnum.USER\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Enum({items: () => UserRoleEnum, type: 'varchar', length: 20, default: undefined, comment: 'User role'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/entities/user.entity.ts:119\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        state\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Property({type: 'varchar', length: 100, nullable: true, comment: 'State/Province'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/entities/user.entity.ts:79\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Default value : new Date()\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Property({type: 'timestamptz', defaultRaw: 'CURRENT_TIMESTAMP', onUpdate: () => , comment: 'Record last update timestamp'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/entities/user.entity.ts:162\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  PrimaryKey,\n  Property,\n  Enum,\n  BeforeCreate,\n  BeforeUpdate,\n  Index,\n} from '@mikro-orm/core';\nimport { UserRoleEnum } from 'src/common/enums';\nimport { v7 as uuidv7 } from 'uuid';\n\n@Entity({ tableName: 'users' })\n@Index({ properties: ['email'] })\n@Index({ properties: ['deletedAt'] })\nexport class User {\n  @PrimaryKey({ type: 'uuid' })\n  id: string = uuidv7();\n\n  @Property({\n    unique: true,\n    type: 'varchar',\n    length: 255,\n    comment: 'User email address',\n  })\n  email!: string;\n\n  @Property({\n    type: 'varchar',\n    length: 500,\n    nullable: true,\n    comment: 'Avatar URL or path',\n  })\n  avatar?: string;\n\n  @Property({\n    type: 'varchar',\n    length: 100,\n    comment: 'User first name',\n  })\n  firstName!: string;\n\n  @Property({\n    type: 'varchar',\n    length: 100,\n    comment: 'User last name',\n  })\n  lastName!: string;\n\n  @Property({\n    type: 'text',\n    nullable: true,\n    comment: 'Street address',\n  })\n  address?: string;\n\n  @Property({\n    type: 'varchar',\n    length: 100,\n    nullable: true,\n    comment: 'City name',\n  })\n  city?: string;\n\n  @Property({\n    type: 'varchar',\n    length: 20,\n    nullable: true,\n    comment: 'Postal/ZIP code',\n  })\n  postalCode?: string;\n\n  @Property({\n    type: 'varchar',\n    length: 100,\n    nullable: true,\n    comment: 'State/Province',\n  })\n  state?: string;\n\n  @Property({\n    type: 'varchar',\n    length: 100,\n    nullable: true,\n    comment: 'Country name',\n  })\n  country?: string;\n\n  @Property({\n    type: 'varchar',\n    length: 3,\n    nullable: true,\n    comment: 'ISO country code',\n  })\n  countryCode?: string;\n\n  @Property({\n    type: 'varchar',\n    length: 20,\n    nullable: true,\n    comment: 'Phone number',\n  })\n  phoneNumber?: string;\n\n  @Property({\n    type: 'varchar',\n    length: 255,\n    comment: 'Hashed password',\n  })\n  password!: string;\n\n  @Enum({\n    items: () => UserRoleEnum,\n    type: 'varchar',\n    length: 20,\n    default: UserRoleEnum.USER,\n    comment: 'User role',\n  })\n  role: UserRoleEnum = UserRoleEnum.USER;\n\n  @Property({\n    type: 'boolean',\n    default: false,\n    comment: 'Whether user needs to change password',\n  })\n  changePassword: boolean = false;\n\n  @Property({\n    type: 'boolean',\n    default: false,\n    comment: 'Whether password reset was requested',\n  })\n  passwordResetRequested: boolean = false;\n\n  @Property({\n    type: 'timestamptz',\n    nullable: true,\n    comment: 'Last login timestamp',\n  })\n  lastLoggedIn?: Date;\n\n  @Property({\n    type: 'timestamptz',\n    nullable: true,\n    comment: 'Soft delete timestamp',\n  })\n  deletedAt?: Date;\n\n  @Property({\n    type: 'timestamptz',\n    defaultRaw: 'CURRENT_TIMESTAMP',\n    comment: 'Record creation timestamp',\n  })\n  createdAt: Date = new Date();\n\n  @Property({\n    type: 'timestamptz',\n    defaultRaw: 'CURRENT_TIMESTAMP',\n    onUpdate: () => new Date(),\n    comment: 'Record last update timestamp',\n  })\n  updatedAt: Date = new Date();\n\n  @BeforeCreate()\n  @BeforeUpdate()\n  private normalizeFields() {\n    if (this.email) {\n      this.email = this.email.toLowerCase().trim();\n\n      const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n      if (!emailRegex.test(this.email)) {\n        throw new Error('Invalid email format');\n      }\n    }\n\n    const trimFields = [\n      'avatar',\n      'firstName',\n      'lastName',\n      'address',\n      'city',\n      'postalCode',\n      'state',\n      'country',\n      'countryCode',\n      'phoneNumber',\n    ];\n\n    trimFields.forEach((field) => {\n      if (\n        this[field as keyof this] &&\n        typeof this[field as keyof this] === 'string'\n      ) {\n        (this[field as keyof this] as any) = (\n          this[field as keyof this] as string\n        ).trim();\n      }\n    });\n\n    if (this.role) {\n      this.role = this.role.toLowerCase() as UserRoleEnum;\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                create\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                getProfile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(user: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Post('sign-up')@ApiOperation({summary: 'Sign up a new user'})@ApiBody({type: CreateUserDto})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/users/users.controller.ts:25\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        getProfile\n                        \n                    \n                \n            \n            \n                \n                        \n                    getProfile(req: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('profile')@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Get user profile'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/users/users.controller.ts:37\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Get,\n  HttpCode,\n  HttpStatus,\n  Post,\n  Request,\n} from '@nestjs/common';\nimport { ApiTags, ApiOperation, ApiBody } from '@nestjs/swagger';\nimport { UsersService } from './users.service';\nimport { Public } from '../auth/decorators/public.decorator';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport { ApiResponse } from 'src/common/interfaces/api-response.interface';\n\n@ApiTags('users')\n@Controller('users')\nexport class UsersController {\n  constructor(private readonly usersService: UsersService) {}\n\n  @Public()\n  @Post('sign-up')\n  @ApiOperation({ summary: 'Sign up a new user' })\n  @ApiBody({ type: CreateUserDto })\n  async create(@Body() user: CreateUserDto): Promise> {\n    const newUser = await this.usersService.create(user);\n    return {\n      statusCode: HttpStatus.CREATED,\n      message: 'User created successfully',\n      data: newUser,\n    };\n  }\n\n  @Get('profile')\n  @HttpCode(HttpStatus.OK)\n  @ApiOperation({ summary: 'Get user profile' })\n  async getProfile(@Request() req: any): Promise> {\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const { password, ...safeUser } = req.user;\n\n    return {\n      statusCode: HttpStatus.OK,\n      message: 'Profile fetched successfully',\n      data: { user: safeUser },\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_providers\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_imports\n\n\n\n\nAppRedisModule\n\nAppRedisModule\n\n\n\nUsersModule\n\nUsersModule\n\nUsersModule -->\n\nAppRedisModule->UsersModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\nUsersSubscriber\n\nUsersSubscriber\n\nUsersModule -->\n\nUsersSubscriber->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UsersService\n                        \n                        \n                            UsersSubscriber\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AppRedisModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UsersService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { UsersService } from './users.service';\nimport { UsersController } from './users.controller';\nimport { MikroOrmModule } from '@mikro-orm/nestjs';\nimport { User } from './entities/user.entity';\nimport { UsersSubscriber } from './subscribers/user.subscriber';\nimport { AppRedisModule } from 'src/services/redis/redis.module';\n\n@Module({\n  imports: [MikroOrmModule.forFeature([User]), AppRedisModule],\n  controllers: [UsersController],\n  providers: [UsersService, UsersSubscriber],\n  exports: [UsersService],\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/users.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                saltRounds\n                            \n                            \n                                    Private\n                                    Readonly\n                                userEmailCacheKey\n                            \n                            \n                                    Private\n                                    Readonly\n                                userIdCacheKey\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                changePassword\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(appRedisService: AppRedisService, configService: ConfigService, userRepository: EntityRepository)\n                    \n                \n                        \n                            \n                                Defined in src/modules/users/users.service.ts:24\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        appRedisService\n                                                  \n                                                        \n                                                                        AppRedisService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        EntityRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        changePassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    changePassword(userId: string, data: ChangePasswordDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/users/users.service.ts:133\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                data\n                                            \n                                                            ChangePasswordDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(userData: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/users/users.service.ts:37\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userData\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(query: FilterQuery, options?: FindOneOrFailOptions)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/users/users.service.ts:55\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                query\n                                            \n                                                            FilterQuery\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                options\n                                            \n                                                            FindOneOrFailOptions\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(data: EntityData)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/users/users.service.ts:103\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                            EntityData\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        saltRounds\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/users/users.service.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        userEmailCacheKey\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/users/users.service.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        userIdCacheKey\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/users/users.service.ts:23\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  Injectable,\n  NotFoundException,\n} from '@nestjs/common';\nimport { InjectRepository } from '@mikro-orm/nestjs';\nimport {\n  EntityData,\n  EntityRepository,\n  FilterQuery,\n  FindOneOrFailOptions,\n  NotFoundError,\n} from '@mikro-orm/core';\nimport { User } from './entities/user.entity';\nimport { ConfigService } from '@nestjs/config';\nimport { ChangePasswordDto } from './dto/change-password.dto';\nimport bcrypt from 'bcrypt';\nimport { AppRedisService } from 'src/services/redis/redis.service';\n\n@Injectable()\nexport class UsersService {\n  private readonly saltRounds: number;\n  private readonly userIdCacheKey: string;\n  private readonly userEmailCacheKey: string;\n\n  constructor(\n    private readonly appRedisService: AppRedisService,\n    private readonly configService: ConfigService,\n    @InjectRepository(User)\n    private readonly userRepository: EntityRepository,\n  ) {\n    this.saltRounds = this.configService.getOrThrow('auth.saltRounds');\n    this.userIdCacheKey = `users:id`;\n    this.userEmailCacheKey = `users:email`;\n  }\n\n  async create(userData: any): Promise> {\n    try {\n      await this.userRepository.findOneOrFail({\n        email: userData.email,\n      });\n    } catch (error) {\n      if (error instanceof NotFoundError) {\n      }\n    }\n\n    const user = this.userRepository.create(userData);\n    await this.userRepository.getEntityManager().persistAndFlush(user);\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const { password, ...result } = user;\n    return result;\n  }\n\n  async findOne(\n    query: FilterQuery,\n    options?: FindOneOrFailOptions,\n  ): Promise {\n    let cacheKey: string | undefined;\n\n    if (typeof query === 'string') {\n      cacheKey = `${this.userIdCacheKey}:${query}`;\n    } else if (typeof query === 'object' && query !== null) {\n      if ('id' in query && query.id) {\n        cacheKey = `${this.userIdCacheKey}:${query.id}`;\n      } else if ('email' in query && query.email) {\n        cacheKey = `${this.userEmailCacheKey}:${query.email}`;\n      }\n    }\n\n    if (cacheKey) {\n      const cached = await this.appRedisService.get(cacheKey);\n\n      if (cached) {\n        const parsed = JSON.parse(cached);\n        const user = this.userRepository.create(parsed);\n        return this.userRepository.getEntityManager().merge(user);\n      }\n    }\n\n    const user = await this.userRepository.findOne(query, options);\n\n    if (cacheKey) {\n      const serializable = { ...user };\n\n      await Promise.all([\n        this.appRedisService.set(\n          `${this.userIdCacheKey}:${user.id}`,\n          JSON.stringify(serializable),\n          24 * 60 * 60,\n        ),\n        this.appRedisService.set(\n          `${this.userEmailCacheKey}:${user.email}`,\n          JSON.stringify(serializable),\n          24 * 60 * 60,\n        ),\n      ]);\n    }\n\n    return user;\n  }\n\n  async update(data: EntityData): Promise> {\n    const user = await this.userRepository.findOneOrFail(\n      { id: data.id },\n      { failHandler: () => new NotFoundException('User not found') },\n    );\n\n    Object.assign(user, data);\n\n    await this.userRepository.getEntityManager().flush();\n\n    if (user) {\n      await Promise.all([\n        this.appRedisService.set(\n          `${this.userIdCacheKey}:${user?.id}`,\n          JSON.stringify(user),\n          24 * 60 * 60,\n        ),\n        this.appRedisService.set(\n          `${this.userEmailCacheKey}:${user?.email}`,\n          JSON.stringify(user),\n          24 * 60 * 60,\n        ),\n      ]);\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const { password, ...result } = user;\n    return result;\n  }\n\n  async changePassword(\n    userId: string,\n    data: ChangePasswordDto,\n  ): Promise> {\n    const { newPassword, confirmPassword } = data;\n\n    if (newPassword !== confirmPassword) {\n      throw new BadRequestException('Passwords do not match');\n    }\n\n    const salt = await bcrypt.genSalt(this.saltRounds);\n    const hashedPassword = await bcrypt.hash(newPassword, salt);\n\n    const updatedUser = await this.update({\n      id: userId,\n      password: hashedPassword,\n      changePassword: false,\n    });\n\n    return updatedUser;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersSubscriber.html":{"url":"injectables/UsersSubscriber.html","title":"injectable - UsersSubscriber","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersSubscriber\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/subscribers/user.subscriber.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                beforeCreate\n                            \n                            \n                                    Async\n                                beforeUpdate\n                            \n                            \n                                getSubscribedEntities\n                            \n                            \n                                    Private\n                                    Async\n                                hashPassword\n                            \n                            \n                                    Private\n                                isPasswordModified\n                            \n                            \n                                    Private\n                                normalizeFields\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/users/subscribers/user.subscriber.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        beforeCreate\n                        \n                    \n                \n            \n            \n                \n                        \n                    beforeCreate(args: EventArgs)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/users/subscribers/user.subscriber.ts:16\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                args\n                                            \n                                                            EventArgs\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        beforeUpdate\n                        \n                    \n                \n            \n            \n                \n                        \n                    beforeUpdate(args: EventArgs)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/users/subscribers/user.subscriber.ts:24\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                args\n                                            \n                                                            EventArgs\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getSubscribedEntities\n                        \n                    \n                \n            \n            \n                \ngetSubscribedEntities()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/users/subscribers/user.subscriber.ts:12\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     EntityName[]\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        hashPassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    hashPassword(user: User)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/users/subscribers/user.subscriber.ts:77\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            User\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        isPasswordModified\n                        \n                    \n                \n            \n            \n                \n                        \n                    isPasswordModified(user: User)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/users/subscribers/user.subscriber.ts:69\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            User\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        normalizeFields\n                        \n                    \n                \n            \n            \n                \n                        \n                    normalizeFields(user: User)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/users/subscribers/user.subscriber.ts:34\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            User\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { EventSubscriber, EntityName, EventArgs } from '@mikro-orm/core';\nimport { Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { User } from '../entities/user.entity';\nimport { UserRoleEnum } from 'src/common/enums';\nimport * as bcrypt from 'bcrypt';\n\n@Injectable()\nexport class UsersSubscriber implements EventSubscriber {\n  constructor(private readonly configService: ConfigService) {}\n\n  getSubscribedEntities(): EntityName[] {\n    return [User];\n  }\n\n  async beforeCreate(args: EventArgs) {\n    const user = args.entity;\n\n    this.normalizeFields(user);\n\n    await this.hashPassword(user);\n  }\n\n  async beforeUpdate(args: EventArgs) {\n    const user = args.entity;\n\n    this.normalizeFields(user);\n\n    if (this.isPasswordModified(user)) {\n      await this.hashPassword(user);\n    }\n  }\n\n  private normalizeFields(user: User) {\n    if (user.email) {\n      user.email = user.email.toLowerCase().trim();\n\n      const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n      if (!emailRegex.test(user.email)) {\n        throw new Error('Invalid email format');\n      }\n    }\n\n    const trimFields: (keyof User)[] = [\n      'avatar',\n      'firstName',\n      'lastName',\n      'address',\n      'city',\n      'postalCode',\n      'state',\n      'country',\n      'countryCode',\n      'phoneNumber',\n    ];\n\n    trimFields.forEach((field) => {\n      const value = user[field];\n      if (value && typeof value === 'string') {\n        (user[field] as any) = value.trim();\n      }\n    });\n\n    if (user.role) {\n      user.role = user.role.toLowerCase() as UserRoleEnum;\n    }\n  }\n\n  private isPasswordModified(user: User): boolean {\n    const originalData = (user as any).__helper?.__originalEntityData;\n\n    if (!originalData) return true;\n\n    return user.password !== originalData.password;\n  }\n\n  private async hashPassword(user: User) {\n    const saltRounds = this.configService.get('auth.saltRounds');\n    user.password = await bcrypt.hash(user.password, saltRounds);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/commands/create-user.command.ts\n            \n            injectable\n            CreateUserCommand\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                        src/common/constants/index.ts\n            \n            variable\n            APP_NAME\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/common/constants/index.ts\n            \n            variable\n            EMAIL_FROM_NAME\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/common/constants/index.ts\n            \n            variable\n            PASSWORD_CHARACTER_SET\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/common/constants/index.ts\n            \n            variable\n            PASSWORD_RESET_EMAIL_QUEUE_NAME\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/common/constants/index.ts\n            \n            variable\n            PAYMENT_PROVIDER\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/common/constants/index.ts\n            \n            variable\n            PRODUCTION\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/common/constants/index.ts\n            \n            variable\n            STORAGE_PROVIDER\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/common/constants/index.ts\n            \n            variable\n            TEMPLATE_QUEUE_NAME\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/common/decorators/index.ts\n            \n            variable\n            Role\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/filters/exception.filter.ts\n            \n            class\n            CatchEverythingFilter\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/common/guards/index.ts\n            \n            guard\n            RoleGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/common/interceptors/response.interceptor.ts\n            \n            injectable\n            RequestBodyAndResponseInterceptor\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/common/interceptors/response.interceptor.ts\n            \n            injectable\n            SuccessResponseInterceptor\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/common/interfaces/api-response.interface.ts\n            \n            interface\n            ApiResponse\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/common/interfaces/error-response.interface.ts\n            \n            interface\n            ErrorResponse\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/common/middlewares/morgan.middleware.ts\n            \n            injectable\n            MorganMiddleware\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                        src/common/types/index.ts\n            \n            type alias\n            HandledException\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/common/utils/generate-slug.ts\n            \n            function\n            generateSlug\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/common/utils/time.utils.ts\n            \n            variable\n            parseTimeString\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/config/swagger.config.ts\n            \n            function\n            setupSwagger\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/main.cli.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/modules/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/13)\n            \n        \n        \n            \n                \n                src/modules/auth/consumers/auth.consumer.ts\n            \n            class\n            PasswordResetEmailConsumer\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                        src/modules/auth/decorators/public.decorator.ts\n            \n            variable\n            IS_PUBLIC_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/modules/auth/decorators/public.decorator.ts\n            \n            variable\n            Public\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/auth/dto/auth-response.dto.ts\n            \n            class\n            AuthResponseDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/auth/dto/forgot-password.dto.ts\n            \n            class\n            ForgotPasswordDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/modules/auth/dto/login.dto.ts\n            \n            class\n            LoginDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/auth/dto/refresh-token-dto.ts\n            \n            class\n            RefreshTokenDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/modules/auth/dto/reset-password.dto.ts\n            \n            class\n            ResetPasswordDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/modules/auth/guards/jwt-auth.guard.ts\n            \n            injectable\n            JwtAuthGuard\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/modules/auth/guards/local-auth.guard.ts\n            \n            injectable\n            LocalAuthGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/auth/strategies/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                src/modules/auth/strategies/local.strategy.ts\n            \n            injectable\n            LocalStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                        src/modules/auth/types/auth-tokens.ts\n            \n            type alias\n            AuthTokens\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/users/dto/change-password.dto.ts\n            \n            class\n            ChangePasswordDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/users/dto/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/14)\n            \n        \n        \n            \n                \n                src/modules/users/dto/responses.dto.ts\n            \n            class\n            CreateUserResponseDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/users/dto/responses.dto.ts\n            \n            class\n            GetProfileResponseDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/users/entities/user.entity.ts\n            \n            entity\n            User\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/users/entities/user.entity.ts\n            \n            class\n            User\n            \n                0 %\n                (0/22)\n            \n        \n        \n            \n                \n                src/modules/users/subscribers/user.subscriber.ts\n            \n            injectable\n            UsersSubscriber\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/modules/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/users/users.service.ts\n            \n            injectable\n            UsersService\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/schema.service.ts\n            \n            injectable\n            SchemaService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/services/email/email.service.ts\n            \n            class\n            EmailService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/services/http-client/http-client.service.ts\n            \n            injectable\n            HttpClientService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/services/payment/interfaces/payment.interface.ts\n            \n            interface\n            IPaymentService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/services/payment/stripe.service.ts\n            \n            injectable\n            StripeService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                        src/services/payment/types/checkout.ts\n            \n            type alias\n            Checkout\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/services/payment/types/payment-intent.ts\n            \n            type alias\n            PaymentIntent\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/services/redis/redis.service.ts\n            \n            injectable\n            AppRedisService\n            \n                30 %\n                (3/10)\n            \n        \n        \n            \n                \n                src/services/storage/cloudinary.service.ts\n            \n            injectable\n            CloudinaryService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/services/storage/interfaces/storage.interface.ts\n            \n            interface\n            IStrorageService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/services/storage/s3.service.ts\n            \n            injectable\n            S3Service\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                        src/services/storage/types/s3-put-object-response.ts\n            \n            type alias\n            S3PutObjectResponse\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/tracing.ts\n            \n            variable\n            otelSDK\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/tracing.ts\n            \n            variable\n            prometheusExporter\n            \n                0 %\n                (0/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @aws-sdk/credential-providers : ^3.848.0\n        \n            @aws-sdk/s3-request-presigner : ^3.850.0\n        \n            @aws-sdk/util-format-url : ^3.840.0\n        \n            @bull-board/api : ^6.12.0\n        \n            @bull-board/express : ^6.12.0\n        \n            @bull-board/nestjs : ^6.12.0\n        \n            @compodoc/compodoc : ^1.1.26\n        \n            @golevelup/nestjs-stripe : ^0.9.3\n        \n            @golevelup/nestjs-webhooks : ^0.2.21\n        \n            @liaoliaots/nestjs-redis : ^10.0.0\n        \n            @mikro-orm/core : ^6.4.16\n        \n            @mikro-orm/nestjs : ^6.1.1\n        \n            @mikro-orm/postgresql : ^6.4.16\n        \n            @nestjs-modules/mailer : ^2.0.2\n        \n            @nestjs/axios : ^4.0.0\n        \n            @nestjs/bullmq : ^11.0.3\n        \n            @nestjs/common : ^10.0.0\n        \n            @nestjs/config : ^3.2.2\n        \n            @nestjs/core : ^10.0.0\n        \n            @nestjs/jwt : ^10.2.0\n        \n            @nestjs/mapped-types : *\n        \n            @nestjs/passport : ^10.0.3\n        \n            @nestjs/platform-express : ^10.0.0\n        \n            @nestjs/swagger : ^7.3.1\n        \n            @opentelemetry/auto-instrumentations-node : ^0.62.0\n        \n            @opentelemetry/context-async-hooks : ^2.0.1\n        \n            @opentelemetry/core : ^2.0.1\n        \n            @opentelemetry/exporter-prometheus : ^0.203.0\n        \n            @opentelemetry/propagator-b3 : ^2.0.1\n        \n            @opentelemetry/propagator-jaeger : ^2.0.1\n        \n            @opentelemetry/sdk-node : ^0.203.0\n        \n            @smithy/hash-node : ^4.0.4\n        \n            @smithy/protocol-http : ^5.1.2\n        \n            @types/bcrypt : ^5.0.2\n        \n            @types/chalk : ^2.2.4\n        \n            @types/morgan : ^1.9.10\n        \n            axios : ^1.10.0\n        \n            bcrypt : ^5.1.1\n        \n            buffer-to-stream : ^1.0.0\n        \n            bullmq : ^5.56.8\n        \n            chalk : ^4.1.2\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.1\n        \n            cloudinary : ^2.7.0\n        \n            express-basic-auth : ^1.2.1\n        \n            helmet : ^8.1.0\n        \n            moment-timezone : ^0.6.0\n        \n            morgan : ^1.10.0\n        \n            nanoid : ^3.0.0\n        \n            nanoid-dictionary : ^5.0.0\n        \n            nest-commander : ^3.18.0\n        \n            nest-winston : ^1.10.2\n        \n            nestjs-form-data : ^1.9.93\n        \n            nestjs-s3 : ^3.0.1\n        \n            nodemailer : ^7.0.5\n        \n            passport : ^0.7.0\n        \n            passport-jwt : ^4.0.1\n        \n            passport-local : ^1.0.0\n        \n            pug : ^3.0.3\n        \n            reflect-metadata : ^0.1.13\n        \n            rxjs : ^7.8.1\n        \n            stripe : ^18.3.0\n        \n            util : ^0.12.5\n        \n            uuid : ^11.1.0\n        \n            winston : ^3.17.0\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            EmailSubjectEnum   (src/.../index.ts)\n                        \n                        \n                            EmailTemplateEnum   (src/.../index.ts)\n                        \n                        \n                            HttpRequestMethodEnum   (src/.../index.ts)\n                        \n                        \n                            IANATimeZoneDatabaseEnum   (src/.../index.ts)\n                        \n                        \n                            PaymentDriverEnum   (src/.../index.ts)\n                        \n                        \n                            StorageDriverEnum   (src/.../index.ts)\n                        \n                        \n                            StripeCurrencyEnum   (src/.../index.ts)\n                        \n                        \n                            UploadFileCategoryEnum   (src/.../index.ts)\n                        \n                        \n                            UserRoleEnum   (src/.../index.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/common/enums/index.ts\n    \n        \n            \n                \n                    \n                        \n                        EmailSubjectEnum\n                    \n                \n                        \n                            \n                                 PASSWORD_RESET\n                            \n                        \n                        \n                            \n                                Value : 🔐 Reset Your Password Quickly & Securely\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        EmailTemplateEnum\n                    \n                \n                        \n                            \n                                 PASSWORD_RESET\n                            \n                        \n                        \n                            \n                                Value : password-reset\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        HttpRequestMethodEnum\n                    \n                \n                        \n                            \n                                 GET\n                            \n                        \n                        \n                            \n                                Value : GET\n                            \n                        \n                        \n                            \n                                 POST\n                            \n                        \n                        \n                            \n                                Value : POST\n                            \n                        \n                        \n                            \n                                 PUT\n                            \n                        \n                        \n                            \n                                Value : PUT\n                            \n                        \n                        \n                            \n                                 DELETE\n                            \n                        \n                        \n                            \n                                Value : DELETE\n                            \n                        \n                        \n                            \n                                 PATCH\n                            \n                        \n                        \n                            \n                                Value : PATCH\n                            \n                        \n                        \n                            \n                                 HEAD\n                            \n                        \n                        \n                            \n                                Value : HEAD\n                            \n                        \n                        \n                            \n                                 OPTIONS\n                            \n                        \n                        \n                            \n                                Value : OPTIONS\n                            \n                        \n                        \n                            \n                                 TRACE\n                            \n                        \n                        \n                            \n                                Value : TRACE\n                            \n                        \n                        \n                            \n                                 CONNECT\n                            \n                        \n                        \n                            \n                                Value : CONNECT\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        IANATimeZoneDatabaseEnum\n                    \n                \n                        \n                            \n                                 LAGOS\n                            \n                        \n                        \n                            \n                                Value : Africa/lagos\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        PaymentDriverEnum\n                    \n                \n                        \n                            \n                                 STRIPE\n                            \n                        \n                        \n                            \n                                Value : stripe\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        StorageDriverEnum\n                    \n                \n                        \n                            \n                                 CLOUDINARY\n                            \n                        \n                        \n                            \n                                Value : cloudinary\n                            \n                        \n                        \n                            \n                                 S3\n                            \n                        \n                        \n                            \n                                Value : s3\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        StripeCurrencyEnum\n                    \n                \n                        \n                            \n                                 USD\n                            \n                        \n                        \n                            \n                                Value : usd\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        UploadFileCategoryEnum\n                    \n                \n                        \n                            \n                                 AVATAR\n                            \n                        \n                        \n                            \n                                Value : avatars\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        UserRoleEnum\n                    \n                \n                        \n                            \n                                 ADMIN\n                            \n                        \n                        \n                            \n                                Value : admin\n                            \n                        \n                        \n                            \n                                 USER\n                            \n                        \n                        \n                            \n                                Value : user\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.cli.ts)\n                        \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            generateSlug   (src/.../generate-slug.ts)\n                        \n                        \n                            setupSwagger   (src/.../swagger.config.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.cli.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n    src/common/utils/generate-slug.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        generateSlug\n                        \n                    \n                \n            \n            \n                \ngenerateSlug(text: string, limit: number)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                text\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    src/config/swagger.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        setupSwagger\n                        \n                    \n                \n            \n            \n                \nsetupSwagger(app: INestApplication)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                app\n                                            \n                                                        INestApplication\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nhttps://olaban-ji.github.io/nest-js-boilerplate/\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AppRedisModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        EmailModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        HttpClientModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PaymentModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        StorageModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AppRedisModule\n\n\n\ncluster_AppRedisModule_exports\n\n\n\ncluster_AppRedisModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_EmailModule\n\n\n\ncluster_EmailModule_exports\n\n\n\ncluster_HttpClientModule\n\n\n\ncluster_HttpClientModule_exports\n\n\n\ncluster_HttpClientModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAuthModule -->\n\nUsersModule->AuthModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nCreateUserCommand\n\nCreateUserCommand\n\nAppModule -->\n\nCreateUserCommand->AppModule\n\n\n\n\n\nSchemaService\n\nSchemaService\n\nAppModule -->\n\nSchemaService->AppModule\n\n\n\n\n\nAppRedisService \n\nAppRedisService \n\n\n\nAppRedisModule\n\nAppRedisModule\n\nAuthModule -->\n\nAppRedisModule->AuthModule\n\n\n\nUsersModule -->\n\nAppRedisModule->UsersModule\n\n\n\nAppRedisService  -->\n\nAppRedisModule->AppRedisService \n\n\n\n\n\nAppRedisService\n\nAppRedisService\n\nAppRedisModule -->\n\nAppRedisService->AppRedisModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthModule -->\n\nLocalStrategy->AuthModule\n\n\n\n\n\nEmailService \n\nEmailService \n\n\n\nEmailModule\n\nEmailModule\n\nEmailService  -->\n\nEmailModule->EmailService \n\n\n\n\n\nHttpClientService \n\nHttpClientService \n\n\n\nHttpClientModule\n\nHttpClientModule\n\nHttpClientService  -->\n\nHttpClientModule->HttpClientService \n\n\n\n\n\nHttpClientService\n\nHttpClientService\n\nHttpClientModule -->\n\nHttpClientService->HttpClientModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\nUsersSubscriber\n\nUsersSubscriber\n\nUsersModule -->\n\nUsersSubscriber->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        8 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    3 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    1 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    18 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    13 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Guard\n                \n            \n        \n        \n            \n                \n                    \n                    4 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            AuthTokens   (src/.../auth-tokens.ts)\n                        \n                        \n                            Checkout   (src/.../checkout.ts)\n                        \n                        \n                            HandledException   (src/.../index.ts)\n                        \n                        \n                            PaymentIntent   (src/.../payment-intent.ts)\n                        \n                        \n                            S3PutObjectResponse   (src/.../s3-put-object-response.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/modules/auth/types/auth-tokens.ts\n    \n    \n        \n            \n                \n                    \n                    AuthTokens\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    src/services/payment/types/checkout.ts\n    \n    \n        \n            \n                \n                    \n                    Checkout\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    src/common/types/index.ts\n    \n    \n        \n            \n                \n                    \n                    HandledException\n                \n            \n            \n                \n                        HttpException | AxiosError | ForbiddenException | Error\n\n                \n            \n        \n    \n    src/services/payment/types/payment-intent.ts\n    \n    \n        \n            \n                \n                    \n                    PaymentIntent\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    src/services/storage/types/s3-put-object-response.ts\n    \n    \n        \n            \n                \n                    \n                    S3PutObjectResponse\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            APP_NAME   (src/.../index.ts)\n                        \n                        \n                            EMAIL_FROM_NAME   (src/.../index.ts)\n                        \n                        \n                            IS_PUBLIC_KEY   (src/.../public.decorator.ts)\n                        \n                        \n                            otelSDK   (src/.../tracing.ts)\n                        \n                        \n                            parseTimeString   (src/.../time.utils.ts)\n                        \n                        \n                            PASSWORD_CHARACTER_SET   (src/.../index.ts)\n                        \n                        \n                            PASSWORD_RESET_EMAIL_QUEUE_NAME   (src/.../index.ts)\n                        \n                        \n                            PAYMENT_PROVIDER   (src/.../index.ts)\n                        \n                        \n                            PRODUCTION   (src/.../index.ts)\n                        \n                        \n                            prometheusExporter   (src/.../tracing.ts)\n                        \n                        \n                            Public   (src/.../public.decorator.ts)\n                        \n                        \n                            Role   (src/.../index.ts)\n                        \n                        \n                            STORAGE_PROVIDER   (src/.../index.ts)\n                        \n                        \n                            TEMPLATE_QUEUE_NAME   (src/.../index.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/common/constants/index.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        APP_NAME\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'nestjs-boilerplate'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        EMAIL_FROM_NAME\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'nestjs'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        PASSWORD_CHARACTER_SET\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!@#$%^&*()_+-=[]{}|;:,.<>?'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        PASSWORD_RESET_EMAIL_QUEUE_NAME\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'password-reset-email-queue'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        PAYMENT_PROVIDER\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'PAYMENT_PROVIDER'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        PRODUCTION\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'production'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        STORAGE_PROVIDER\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'STORAGE_PROVIDER'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        TEMPLATE_QUEUE_NAME\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'template-queue-name'\n                    \n                \n\n\n        \n    \n\n    src/modules/auth/decorators/public.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        IS_PUBLIC_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'isPublic'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => SetMetadata(IS_PUBLIC_KEY, true)\n                    \n                \n\n\n        \n    \n\n    src/tracing.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        otelSDK\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new NodeSDK({\n  metricReader: prometheusExporter,\n  contextManager: new AsyncLocalStorageContextManager(),\n  textMapPropagator: new CompositePropagator({\n    propagators: [\n      new JaegerPropagator(),\n      new W3CTraceContextPropagator(),\n      new W3CBaggagePropagator(),\n      new B3Propagator(),\n    ],\n  }),\n  instrumentations: [getNodeAutoInstrumentations()],\n})\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        prometheusExporter\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new PrometheusExporter(\n  { preventServerStart: true },\n  () => {\n    console.log('Prometheus exporter initialized');\n  },\n)\n                    \n                \n\n\n        \n    \n\n    src/common/utils/time.utils.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        parseTimeString\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (\n  timeString: string,\n): { value: string; unit: moment.DurationInputArg2 } => {\n  const parsed = timeString.match(/^(\\d+)([smhdwMy])$/);\n\n  if (!parsed) {\n    throw new Error(\n      `Invalid time format: ${timeString}. Expected format like '1h', '30m', '7d'`,\n    );\n  }\n\n  const value = parsed[1];\n  const unit = parsed[2] as moment.DurationInputArg2;\n\n  return { value, unit };\n}\n                    \n                \n\n\n        \n    \n\n    src/common/decorators/index.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Role\n                        \n                    \n                \n            \n                \n                    \n                        Default value : Reflector.createDecorator()\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
