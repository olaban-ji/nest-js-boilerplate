var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/interfaces/ApiResponse.html",[0,1.95,1,2.508]],["body/interfaces/ApiResponse.html",[0,2.699,1,4.226,2,3.472,3,0.254,4,0.254,5,0.227,6,4.587,7,4.111,8,0.392,9,1.725,10,1.115,11,2.619,12,2.619,13,4.142,14,6.968,15,0.554,16,0.016,17,1.316,18,4.741,19,0.28,20,0.794,21,0.254,22,0.014,23,0.014]],["title/controllers/AppController.html",[24,2.063,25,2.713]],["body/controllers/AppController.html",[3,0.234,4,0.234,5,0.21,8,0.362,11,2.221,12,2.221,15,0.389,16,0.017,17,0.926,18,3.204,19,0.355,20,0.733,21,0.234,22,0.013,23,0.013,24,3.308,25,4.35,26,2.636,27,4.233,28,1.061,29,7.05,30,1.62,31,4.9,32,6.722,33,4.755,34,6.722,35,5.807,36,0.474,37,4.9,38,0.807,39,4.233,40,3.794,41,3.748,42,4.233,43,4.762,44,3.794,45,1.938,46,4.9,47,0.083,48,3.794,49,3.794,50,1.151]],["title/modules/AppModule.html",[51,1.325,52,2.713]],["body/modules/AppModule.html",[3,0.151,4,0.151,5,0.136,10,0.547,15,0.252,16,0.017,19,0.4,20,0.474,21,0.151,22,0.01,23,0.01,25,3.806,26,2.465,28,0.547,36,0.307,38,0.522,47,0.054,51,1.859,52,5.24,53,1.45,54,1.612,55,1.812,56,1.812,57,1.612,58,2.461,59,1.612,60,2.74,61,2.74,62,2.74,63,4.26,64,3.97,65,4.26,66,4.26,67,4.26,68,2.618,69,1.255,70,1.812,71,3.171,72,2.894,73,3.171,74,4.583,75,5.894,76,3.171,77,0.684,78,0.474,79,4.583,80,1.932,81,1.515,82,4.583,83,3.171,84,3.171,85,3.171,86,4.583,87,3.171,88,4.583,89,2.577,90,1.198,91,3.171,92,3.171,93,2.243,94,3.171,95,2.74,96,1.315,97,2.243,98,3.171,99,4.583,100,2.456,101,2.74,102,2.243,103,3.171,104,1.812,105,2.74,106,2.456,107,1.812,108,2.456,109,3.241,110,2.243,111,4.583,112,2.74,113,3.171,114,3.171,115,2.243,116,3.171,117,3.171,118,4.583,119,3.171,120,3.171,121,3.171,122,3.171,123,1.859,124,3.171,125,3.171,126,3.171,127,3.171,128,2.074,129,3.171,130,2.792,131,3.171,132,1.049,133,3.171,134,1.527,135,2.74,136,3.171,137,2.243,138,2.456,139,4.583,140,1.38,141,1.932,142,0.922,143,3.171,144,2.792,145,4.583,146,2.792,147,3.171,148,3.171,149,2.243,150,3.171,151,3.171,152,3.171,153,3.171,154,2.74,155,3.171,156,3.171,157,3.171]],["title/modules/AppRedisModule.html",[51,1.325,158,2.337]],["body/modules/AppRedisModule.html",[3,0.219,4,0.219,5,0.197,16,0.017,19,0.363,20,0.688,21,0.219,22,0.012,23,0.012,47,0.078,50,1.08,51,2.254,53,2.102,54,2.336,55,2.626,56,2.626,57,2.336,58,2.984,59,3.316,68,3.373,69,1.818,70,2.626,72,2.472,81,1.953,89,2.724,90,1.737,123,2.04,130,2.801,132,1.52,134,2.214,135,3.971,158,4.518,159,3.971,160,3.971,161,3.971,162,4.423,163,4.597,164,4.597,165,4.597,166,3.559,167,3.559,168,4.597,169,1.394,170,4.597,171,4.597,172,3.971,173,4.597,174,4.597]],["title/injectables/AppRedisService.html",[162,2.191,175,0.468]],["body/injectables/AppRedisService.html",[3,0.1,4,0.1,5,0.089,8,0.154,9,0.89,10,1.04,15,0.494,16,0.017,17,1.375,19,0.251,20,0.312,21,0.1,22,0.009,23,0.007,28,0.575,36,0.602,38,1.049,47,0.035,50,1.417,77,1.34,78,0.902,81,0.691,89,2.297,90,0.789,123,1.152,132,0.691,142,1.608,162,1.904,166,1.617,167,5.397,169,2.196,175,0.406,176,0.633,177,1.804,178,1.752,179,4.161,180,3.334,181,4.509,182,3.334,183,4.78,184,3.334,185,6.375,186,1.011,187,1.617,188,2.189,189,5.807,190,3.334,191,3.334,192,2.088,193,5.283,194,3.595,195,3.334,196,2.088,197,1.725,198,2.083,199,3.135,200,6.51,201,5.533,202,5.21,203,2.535,204,3.334,205,2.088,206,3.334,207,3.334,208,3.334,209,2.088,210,3.334,211,2.088,212,3.334,213,5.28,214,2.088,215,2.031,216,3.334,217,2.977,218,6.729,219,2.535,220,2.088,221,1.006,222,2.88,223,2.88,224,3.334,225,3.334,226,1.904,227,2.581,228,3.595,229,3.334,230,1.904,231,2.18,232,2.88,233,2.088,234,1.061,235,2.088,236,2.088,237,2.088,238,5.533,239,1.563,240,3.334,241,2.088,242,3.334,243,2.088,244,2.088,245,2.792,246,2.088,247,5.191,248,1.804,249,2.088,250,2.088,251,2.088,252,1.961,253,2.088,254,1.804,255,2.72,256,2.088,257,2.088,258,2.088,259,2.088,260,2.088,261,2.088,262,2.088,263,2.088,264,2.088,265,2.088,266,2.088,267,2.088,268,2.088,269,3.914,270,2.088,271,3.334,272,3.334,273,2.088]],["title/injectables/AppService.html",[65,2.508,175,0.468]],["body/injectables/AppService.html",[3,0.265,4,0.265,5,0.237,8,0.409,16,0.016,17,1.253,19,0.292,20,0.829,21,0.265,22,0.014,23,0.014,28,1.144,36,0.536,38,0.912,47,0.094,50,1.302,65,4.336,175,0.809,176,1.681,274,4.787,275,7.356,276,5.541,277,5.541,278,5.541]],["title/controllers/AuthController.html",[24,2.063,279,2.713]],["body/controllers/AuthController.html",[1,1.771,3,0.129,4,0.129,5,0.116,8,0.2,10,0.942,11,1.972,12,1.972,13,3.119,15,0.522,16,0.017,18,1.771,19,0.362,20,0.405,21,0.129,22,0.009,23,0.009,24,1.457,26,1.457,28,0.703,30,1.806,36,0.529,38,0.899,40,2.097,41,3.569,43,4.535,44,2.097,45,1.071,47,0.046,48,4.228,49,4.228,50,1.283,69,2.527,77,1.177,78,0.817,102,1.915,141,1.65,142,0.787,169,2.139,197,1.691,198,2.271,239,1.436,252,2.063,279,2.885,280,2.34,281,2.34,282,4.239,283,3.119,284,3.862,285,4.239,286,2.708,287,4.354,288,2.708,289,3.524,290,2.244,291,2.429,292,2.708,293,2.708,294,4.989,295,2.708,296,2.708,297,1.283,298,2.708,299,3.47,300,2.708,301,2.667,302,2.708,303,2.708,304,3.158,305,2.708,306,3.47,307,2.708,308,2.708,309,4.354,310,2.708,311,2.34,312,2.708,313,2.097,314,2.708,315,5.06,316,1.915,317,2.708,318,2.34,319,2.639,320,2.097,321,2.34,322,2.708,323,2.708,324,2.33,325,2.708,326,2.708,327,3.158,328,2.708,329,2.34,330,2.097,331,2.708,332,2.708,333,2.708,334,2.708,335,2.708,336,4.717,337,4.717,338,2.708,339,2.34,340,4.717,341,2.33,342,3.524,343,3.799,344,2.708,345,2.708,346,2.708,347,2.34,348,2.708,349,2.708,350,1.541,351,2.708,352,2.097,353,2.708,354,3.158,355,2.667,356,2.667,357,2.708]],["title/modules/AuthModule.html",[51,1.325,63,2.508]],["body/modules/AuthModule.html",[3,0.167,4,0.167,5,0.15,15,0.278,16,0.017,19,0.402,20,0.524,21,0.167,22,0.01,23,0.01,26,2.645,47,0.059,51,1.964,53,1.602,54,1.78,55,2,56,2,57,1.78,58,2.6,59,2.889,63,4.951,64,4.103,68,2.809,69,1.385,70,2,72,2.645,78,0.736,89,2.439,90,1.323,106,2.712,107,2,108,2.712,109,3.479,110,2.477,123,1.21,130,2.134,132,1.158,137,2.477,158,4.103,279,4.021,318,3.026,319,3.99,320,2.712,358,3.026,359,3.502,360,3.026,361,3.026,362,4.403,363,4.403,364,3.502,365,4.918,366,2.29,367,3.502,368,3.502,369,3.502,370,2.712,371,4.918,372,2.134,373,3.502,374,3.502,375,3.479,376,3.502,377,3.026,378,3.717,379,1.78,380,4.249,381,3.026,382,3.502,383,3.502,384,3.026,385,3.502,386,3.502,387,2.712,388,3.502,389,3.026,390,3.026,391,3.026,392,2.712,393,3.026,394,3.026,395,3.026,396,3.026,397,3.026,398,2.712,399,3.502]],["title/classes/AuthResponseDto.html",[47,0.065,400,2.97]],["body/classes/AuthResponseDto.html",[3,0.233,4,0.233,5,0.209,8,0.361,9,1.639,12,2.621,15,0.488,16,0.016,17,1.33,19,0.258,21,0.233,22,0.013,23,0.013,30,2.03,36,0.594,45,1.933,47,0.083,197,2.546,283,3.507,297,1.442,304,4.754,324,3.507,341,3.507,342,5.8,400,4.754,401,1.616,402,5.8,403,4.222,404,3.302,405,6.14,406,3.392,407,4.754,408,4.887,409,4.754,410,4.015,411,4.015,412,4.887,413,3.412]],["title/injectables/AuthService.html",[175,0.468,319,2.063]],["body/injectables/AuthService.html",[3,0.088,4,0.088,5,0.079,8,0.136,9,0.802,10,0.9,15,0.508,16,0.017,17,1.368,19,0.337,20,0.275,21,0.088,22,0.006,23,0.006,28,0.518,36,0.619,38,0.8,47,0.031,50,1.035,69,1.189,77,1.124,78,0.781,89,2.178,90,0.694,107,1.049,123,0.634,142,2.083,162,2.98,169,2.031,175,0.366,176,0.557,178,2.27,186,0.911,198,2.114,199,1.447,203,1.119,226,1.049,231,1.965,239,1.62,252,2.416,255,2.881,269,2.125,282,2.596,283,1.716,284,3.116,285,3.294,291,1.377,297,1.472,319,1.616,324,2.776,336,2.596,337,2.596,343,1.422,347,1.586,350,2.247,354,2.326,355,2.881,356,2.881,370,1.422,378,1.201,379,0.933,384,3.294,387,2.326,414,1.586,415,3.813,416,3.813,417,3.813,418,3.813,419,3.813,420,3.294,421,3.813,422,1.586,423,2.652,424,5.507,425,3.813,426,3.116,427,3.005,428,3.005,429,1.836,430,3.005,431,1.836,432,3.005,433,1.836,434,1.836,435,1.836,436,1.836,437,3.294,438,1.836,439,5.507,440,1.836,441,1.836,442,1.836,443,1.836,444,1.836,445,2.326,446,1.586,447,1.299,448,1.422,449,1.836,450,3.005,451,3.005,452,1.836,453,1.586,454,1.201,455,1.422,456,1.836,457,1.586,458,2.326,459,1.836,460,1.836,461,1.836,462,1.836,463,1.836,464,3.813,465,1.836,466,3.005,467,1.836,468,3.813,469,3.005,470,1.836,471,4.406,472,1.836,473,1.836,474,1.836,475,3.806,476,3.411,477,1.778,478,3.411,479,1.836,480,1.586,481,1.299,482,1.422,483,1.049,484,1.422,485,1.299,486,1.422,487,1.422,488,1.422,489,3.806,490,3.813,491,4.198,492,3.005,493,3.005,494,2.596,495,1.836,496,3.005,497,1.836,498,2.98,499,1.836,500,1.836,501,1.586,502,1.836,503,1.422,504,2.493,505,2.596,506,1.586,507,1.422,508,1.836,509,1.836,510,1.836,511,1.586,512,1.586,513,2.051,514,1.586,515,1.836,516,1.586,517,1.836,518,1.836,519,3.005,520,1.836,521,3.005,522,2.596,523,1.836,524,1.836,525,1.836,526,1.119,527,1.836,528,2.326,529,2.596,530,1.586,531,1.422,532,1.836,533,1.836,534,1.836,535,1.836,536,1.422,537,3.005,538,1.836,539,3.005,540,1.836]],["title/classes/BaseEntity.html",[47,0.065,541,2.713]],["body/classes/BaseEntity.html",[3,0.181,4,0.181,5,0.162,8,0.438,9,1.581,10,0.895,15,0.572,16,0.017,17,0.98,19,0.274,21,0.181,22,0.011,23,0.011,30,2.108,36,0.617,47,0.064,78,0.566,96,1.569,123,2.047,181,3.672,217,2.709,221,3.07,231,2.475,401,1.252,477,1.941,513,3.186,541,3.672,542,3.27,543,5.924,544,6.679,545,5.924,546,6.442,547,5.118,548,5.342,549,5.507,550,5.507,551,5.342,552,4.509,553,4.484,554,4.511,555,3.785,556,4.484,557,4.484,558,3.785,559,5.924,560,3.785,561,4.587,562,3.785,563,5.191,564,3.394,565,3.394,566,3.785,567,5.191,568,5.191,569,5.507,570,1.924,571,3.785,572,3.785,573,3.785,574,3.785]],["title/classes/CatchAllFilter.html",[47,0.065,575,2.97]],["body/classes/CatchAllFilter.html",[3,0.131,4,0.131,5,0.117,8,0.203,9,1.099,10,1.106,12,2.126,13,2.351,15,0.509,16,0.017,17,1.038,18,3.592,19,0.311,20,0.41,21,0.131,22,0.009,23,0.009,28,0.71,36,0.639,38,1.018,47,0.046,50,1.161,77,1.382,78,1.029,80,2.508,81,0.907,132,0.907,138,2.123,140,1.791,142,1.711,146,1.671,178,2.323,186,1.249,188,2.537,199,1.982,217,1.254,221,1.32,228,2.368,234,1.393,239,1.785,255,1.793,290,1.254,294,1.939,330,2.123,366,1.793,401,0.907,447,2.912,477,0.797,503,4.254,505,4.27,554,1.793,575,3.187,576,2.368,577,4.943,578,4.943,579,4.116,580,4.116,581,4.116,582,4.116,583,4.116,584,2.742,585,6.184,586,4.116,587,4.116,588,4.116,589,5.537,590,4.27,591,5.494,592,2.742,593,6.874,594,2.742,595,2.742,596,1.671,597,2.742,598,2.742,599,2.742,600,2.742,601,4.116,602,2.742,603,2.742,604,2.742,605,3.556,606,2.123,607,3.556,608,2.123,609,2.368,610,2.912,611,2.742,612,2.742,613,2.742,614,2.742,615,2.742,616,2.742,617,1.566,618,2.742,619,4.116,620,2.742,621,2.742,622,2.742,623,2.742,624,2.742,625,4.116,626,1.793,627,2.742,628,2.742,629,2.742,630,2.742,631,5.494,632,4.116,633,3.187,634,2.123,635,2.742,636,4.116,637,2.742,638,4.943,639,2.742,640,2.742,641,3.556,642,2.742,643,2.742,644,2.368,645,2.742,646,2.742,647,2.742,648,4.27,649,2.742,650,2.742,651,2.368]],["title/classes/ChangePasswordDto.html",[47,0.065,652,2.508]],["body/classes/ChangePasswordDto.html",[3,0.182,4,0.182,5,0.163,8,0.281,9,1.392,12,2.308,15,0.414,16,0.017,17,1.207,19,0.275,21,0.182,22,0.011,23,0.011,30,1.724,36,0.505,45,1.507,47,0.088,197,2.162,203,3.177,291,2.602,297,1.225,355,3.886,356,3.886,401,1.26,404,2.804,406,3.078,413,3.021,477,1.858,652,3.409,653,5.135,654,2.694,655,4.504,656,4.949,657,4.504,658,4.949,659,4.949,660,4.949,661,4.949,662,4.835,663,5.352,664,4.949,665,4.949,666,4.949,667,4.949,668,4.949,669,4.949,670,4.949,671,3.81,672,5.214,673,3.81,674,4.204,675,4.204,676,4.602,677,2.95,678,2.176]],["title/injectables/CloudinaryService.html",[175,0.468,679,2.713]],["body/injectables/CloudinaryService.html",[3,0.18,4,0.18,5,0.253,8,0.278,10,0.891,11,1.358,15,0.411,16,0.017,19,0.372,20,0.563,21,0.18,22,0.011,23,0.011,28,0.891,36,0.5,38,0.619,47,0.064,50,1.387,77,1.114,78,0.773,81,1.244,89,2.724,90,1.421,132,1.244,140,1.637,142,1.502,169,1.791,175,0.63,176,1.141,178,1.636,186,1.568,188,2.79,198,1.785,234,1.912,239,0.922,245,2.78,269,2.66,341,2.148,477,1.093,504,3.379,644,3.249,679,3.656,680,3.249,681,5.461,682,2.66,683,3.761,684,2.912,685,4.922,686,4.572,687,4.497,688,3.761,689,3.761,690,3.656,691,4.465,692,5.168,693,3.761,694,3.761,695,2.912,696,3.379,697,3.249,698,1.811,699,2.023,700,2.66,701,3.761,702,3.761,703,3.761,704,3.761,705,3.761,706,3.761,707,3.761,708,3.249,709,5.101,710,3.249,711,3.249,712,3.249,713,5.905,714,3.761,715,3.249,716,3.761,717,3.761,718,3.761,719,3.761,720,3.761,721,3.249,722,3.761,723,3.761,724,3.761,725,3.761,726,3.761,727,3.761,728,3.761]],["title/injectables/CreateUserCommand.html",[66,2.508,175,0.468]],["body/injectables/CreateUserCommand.html",[3,0.126,4,0.126,5,0.113,8,0.194,9,1.066,10,1.05,15,0.484,16,0.017,17,1.394,19,0.352,20,0.394,21,0.126,22,0.008,23,0.008,28,0.688,30,1.78,33,2.823,36,0.612,38,0.952,47,0.045,50,1.264,66,2.61,77,1.312,78,1.034,96,1.091,123,2.251,142,1.681,169,1.463,175,0.487,176,0.798,178,1.832,186,1.211,197,1.091,198,1.379,217,1.204,221,1.268,239,0.979,252,1.508,291,0.951,297,1.133,350,2.39,379,1.338,423,3.046,477,1.16,498,1.503,501,2.274,503,2.038,504,1.721,506,2.274,526,2.432,552,3.411,564,2.61,570,1.338,662,2.61,698,1.268,721,2.274,729,5.63,730,2.274,731,1.826,732,4.822,733,4.167,734,4.822,735,4.822,736,4.822,737,4.822,738,3.091,739,2.274,740,4.167,741,3.992,742,3.091,743,2.632,744,5.382,745,3.992,746,6.517,747,2.632,748,7.009,749,2.632,750,3.992,751,2.823,752,2.632,753,2.632,754,3.992,755,2.632,756,2.632,757,3.992,758,2.735,759,2.632,760,3.153,761,3.992,762,3.074,763,2.632,764,2.632,765,3.992,766,3.992,767,3.449,768,2.038,769,5.785,770,3.449,771,2.274,772,2.038,773,2.632,774,2.61,775,1.721,776,2.823,777,2.632,778,2.632,779,2.632,780,2.632,781,2.038,782,2.632,783,2.632,784,2.632,785,2.632,786,1.721,787,2.632,788,2.632,789,5.382]],["title/classes/CreateUserDto.html",[47,0.065,790,2.508]],["body/classes/CreateUserDto.html",[3,0.11,4,0.11,5,0.099,8,0.17,9,0.961,10,1.226,12,1.811,15,0.547,16,0.017,17,1.402,19,0.265,21,0.11,22,0.008,23,0.008,30,2.277,36,0.667,45,0.911,47,0.075,50,0.846,78,0.75,197,2.816,199,1.734,203,2.194,217,2.028,219,2.194,239,0.564,291,2.177,297,1.751,350,2.056,401,0.761,404,3.596,406,3.59,413,3.452,526,2.702,564,2.354,596,1.403,626,1.505,656,2.787,657,1.989,658,2.787,659,2.787,660,2.787,661,2.787,662,3.278,663,2.787,664,2.787,665,2.787,666,2.787,667,2.787,668,2.787,669,2.787,670,2.787,674,3.849,675,4.728,676,2.787,677,1.782,678,1.315,698,1.108,751,2.546,758,2.932,760,3.278,776,3.136,790,2.354,791,6.021,792,1.989,793,3.849,794,3.136,795,3.849,796,4.264,797,3.136,798,3.136,799,3.433,800,3.849,801,3.6,802,3.6,803,3.6,804,3.6,805,2.302,806,2.302,807,2.302,808,2.302,809,2.302,810,2.302,811,3.882,812,2.302,813,2.302,814,2.302,815,2.302,816,2.302,817,2.302,818,2.302,819,2.302,820,2.302,821,2.787,822,2.302,823,2.302,824,3.6,825,2.302,826,2.302,827,2.302,828,3.11,829,2.302,830,2.302,831,2.302,832,2.302,833,2.302,834,3.6,835,2.787,836,2.302,837,6.56,838,3.6,839,3.6,840,1.989,841,1.782,842,2.302,843,2.302,844,3.6,845,2.302,846,2.302,847,2.302,848,4.434,849,2.302,850,2.302,851,1.989,852,2.302,853,2.302,854,2.302]],["title/classes/CreateUserResponseDto.html",[47,0.065,855,2.713]],["body/classes/CreateUserResponseDto.html",[3,0.216,4,0.216,5,0.194,8,0.334,9,1.561,11,2.473,12,2.668,15,0.563,16,0.016,17,1.223,19,0.309,21,0.279,22,0.012,23,0.012,30,1.934,36,0.566,45,1.791,47,0.099,197,2.839,230,3.7,297,1.815,401,1.497,404,3.145,406,3.119,409,5.015,410,4.235,411,4.235,413,3.603,786,4.477,855,4.136,856,3.505,857,5.052,858,4.526,859,4.526,860,2.758,861,3.202,862,4.528,863,3.505]],["title/classes/DatabaseSeeder.html",[47,0.065,864,2.97]],["body/classes/DatabaseSeeder.html",[3,0.244,4,0.244,5,0.219,8,0.378,10,0.882,15,0.502,16,0.017,19,0.362,21,0.244,22,0.013,23,0.013,28,1.089,36,0.495,38,0.841,47,0.087,77,1.102,78,0.765,96,2.618,169,2.078,198,2.181,401,1.69,477,1.486,570,2.598,731,2.888,738,4.889,740,5.541,742,3.958,864,4.889,865,4.416,866,6.852,867,6.314,868,5.111,869,4.416,870,3.615,871,5.111,872,5.111]],["title/modules/EmailModule.html",[51,1.325,873,2.713]],["body/modules/EmailModule.html",[3,0.205,4,0.205,5,0.184,16,0.017,19,0.385,20,0.643,21,0.205,22,0.012,23,0.012,26,2.311,47,0.073,51,2.182,53,1.965,54,2.184,55,2.454,56,2.454,57,2.184,58,2.585,59,3.21,68,3.229,69,1.7,70,2.454,72,2.311,81,1.869,89,2.655,90,1.623,102,3.039,123,1.484,130,2.618,132,1.421,137,3.039,146,2.618,297,1.009,379,2.184,437,3.712,477,1.249,590,3.712,699,3.04,762,2.454,873,4.931,874,3.712,875,3.712,876,4.512,877,4.297,878,4.297,879,4.297,880,3.327,881,4.377,882,5.653,883,4.297,884,4.297,885,4.297,886,4.297,887,4.297,888,4.297,889,4.297,890,4.297,891,4.297,892,4.297,893,4.297,894,4.297,895,4.297,896,3.327,897,4.297,898,4.297,899,4.297,900,4.297]],["title/classes/EmailService.html",[47,0.065,876,2.337]],["body/classes/EmailService.html",[3,0.209,4,0.209,5,0.187,8,0.323,10,0.986,15,0.454,16,0.017,17,1.452,19,0.302,20,0.654,21,0.209,22,0.012,23,0.012,28,0.986,36,0.553,38,0.72,47,0.074,77,1.232,78,0.855,81,1.445,132,1.445,142,1.661,169,1.932,178,1.81,186,1.734,188,2.898,198,1.975,230,2.497,234,2.221,245,2.351,252,1.651,350,1.651,352,3.384,401,1.445,552,4.505,699,2.351,876,4.116,880,3.384,896,5.231,901,3.776,902,6.37,903,4.371,904,7.192,905,4.371,906,4.371,907,7.192,908,4.417,909,4.371,910,4.371,911,4.371,912,4.371,913,4.371]],["title/interfaces/ErrorResponse.html",[0,1.95,610,2.713]],["body/interfaces/ErrorResponse.html",[0,2.532,2,3.258,3,0.238,4,0.238,5,0.213,7,3.858,8,0.368,9,1.659,10,1.072,12,2.561,13,4.051,15,0.591,16,0.016,17,1.494,21,0.238,22,0.013,23,0.013,78,1.061,146,4.322,199,3.262,554,4.637,610,4.396,641,6.127,914,4.305]],["title/classes/ForgotPasswordDto.html",[47,0.065,287,2.713]],["body/classes/ForgotPasswordDto.html",[3,0.257,4,0.257,5,0.23,8,0.397,9,1.738,15,0.427,16,0.016,17,1.23,19,0.344,21,0.257,22,0.014,23,0.014,30,1.777,36,0.52,45,2.126,47,0.11,287,4.605,350,2.646,401,1.777,406,2.588,413,3.309,654,3.801,678,3.07,835,5.041,841,4.161,915,5.625,916,5.374,917,4.642,918,5.374]],["title/classes/GetProfileResponseDto.html",[47,0.065,861,2.713]],["body/classes/GetProfileResponseDto.html",[3,0.217,4,0.217,5,0.194,8,0.335,9,1.563,11,2.475,12,2.67,15,0.564,16,0.017,17,1.225,19,0.309,21,0.28,22,0.012,23,0.012,30,1.937,36,0.567,45,1.795,47,0.099,197,2.841,230,3.705,297,1.805,401,1.501,404,3.15,406,3.123,409,5.022,410,4.241,411,4.241,413,3.606,786,3.83,855,3.21,856,3.514,857,3.92,860,2.765,861,4.143,862,5.306,863,4.535,919,4.538,920,4.538]],["title/modules/HttpClientModule.html",[51,1.325,921,2.713]],["body/modules/HttpClientModule.html",[3,0.239,4,0.239,5,0.214,16,0.016,19,0.358,20,0.748,21,0.239,22,0.013,23,0.013,47,0.085,51,2.343,53,2.285,54,2.539,55,2.854,56,2.854,57,2.539,58,3.102,59,3.447,68,3.556,69,1.977,70,2.854,72,2.688,81,2.059,921,5.342,922,4.317,923,4.317,924,4.317,925,5.121,926,3.869,927,3.869,928,4.997,929,6.226,930,3.869,931,3.267,932,4.997]],["title/injectables/HttpClientService.html",[175,0.468,925,2.508]],["body/injectables/HttpClientService.html",[3,0.175,4,0.175,5,0.157,8,0.271,9,1.356,10,0.876,11,1.835,15,0.404,16,0.017,17,1.101,19,0.361,20,0.549,21,0.175,22,0.011,23,0.011,28,0.876,36,0.609,38,0.604,47,0.062,50,0.862,77,1.095,78,0.76,81,1.213,132,1.213,134,3.181,142,2.075,169,1.767,175,0.619,176,1.113,178,2.261,186,1.541,188,2.771,198,1.755,217,2.323,221,2.446,226,3.593,234,1.864,239,0.899,245,2.732,252,1.386,290,2.323,341,2.095,477,1.828,608,2.84,762,3.593,925,3.321,926,5.114,927,5.114,930,2.84,931,4.113,933,3.169,934,5.827,935,5.827,936,5.827,937,3.668,938,6.833,939,5.08,940,3.668,941,6.29,942,3.668,943,5.08,944,6.29,945,3.668,946,5.08,947,5.08,948,3.668,949,2.398,950,3.668,951,3.668,952,3.668,953,3.668,954,3.668,955,5.08,956,3.668]],["title/interfaces/IPaymentService.html",[0,1.95,957,2.713]],["body/interfaces/IPaymentService.html",[0,2.518,2,3.24,3,0.237,4,0.237,5,0.212,8,0.366,10,1.068,15,0.492,16,0.016,19,0.261,21,0.237,22,0.013,23,0.013,28,1.068,36,0.6,38,1.02,77,1.335,78,0.927,198,2.445,215,3.774,762,4.245,957,4.381,958,4.281,959,5.837,960,5.837,961,4.281,962,5.837,963,6.42,964,4.955,965,6.115,966,4.281,967,5.837,968,4.955,969,3.331]],["title/interfaces/IStrorageService.html",[0,1.95,696,2.508]],["body/interfaces/IStrorageService.html",[0,2.318,2,2.982,3,0.218,4,0.218,5,0.278,8,0.337,10,1.184,11,1.647,15,0.467,16,0.017,17,1.228,19,0.362,21,0.218,22,0.012,23,0.012,28,1.013,36,0.569,38,0.967,77,1.267,78,0.879,144,3.962,193,4.156,198,2.372,199,3.131,213,5.034,215,3.581,617,2.605,681,5.034,684,3.532,685,5.316,686,5.034,687,4.857,690,3.226,691,3.941,696,3.842,698,2.197,699,2.453,700,3.226,970,3.941,971,5.617,972,3.941,973,5.316,974,4.561,975,4.561,976,3.226,977,3.941,978,2.982,979,2.982]],["title/injectables/JwtAuthGuard.html",[175,0.468,375,2.713]],["body/injectables/JwtAuthGuard.html",[3,0.315,4,0.197,5,0.177,8,0.305,10,1.068,12,1.491,15,0.492,16,0.017,19,0.349,20,0.618,21,0.197,22,0.012,23,0.012,28,0.949,36,0.6,38,0.906,47,0.07,50,1.455,77,1.335,78,0.988,123,1.426,141,2.515,154,3.566,175,0.671,176,1.252,186,1.252,239,1.012,297,1.616,321,3.566,366,2.699,372,2.515,375,3.893,448,4.261,477,1.2,498,2.358,504,4.319,731,2.517,775,2.699,908,2.699,980,5.706,981,3.196,982,5.504,983,4.755,984,5.504,985,3.566,986,6.114,987,4.128,988,4.755,989,4.672,990,4.128,991,5.504,992,4.128,993,5.504,994,3.566,995,3.196,996,4.755,997,4.128,998,3.566,999,4.128,1000,4.128,1001,4.128,1002,4.128,1003,4.128,1004,4.128]],["title/injectables/JwtStrategy.html",[175,0.468,362,2.508]],["body/injectables/JwtStrategy.html",[3,0.157,4,0.157,5,0.141,8,0.243,10,0.811,15,0.374,16,0.017,19,0.335,20,0.492,21,0.157,22,0.01,23,0.01,24,2.53,28,1.034,36,0.455,38,0.541,47,0.093,50,0.773,77,1.014,78,0.704,89,2.609,90,1.242,123,1.136,169,1.666,175,0.573,176,0.997,178,1.041,186,1.427,194,2.841,222,4.064,226,1.878,232,4.064,239,0.806,252,1.242,255,2.15,283,3.768,284,4.239,290,3.106,297,1.685,301,3.591,319,2.53,324,3.768,362,3.076,372,2.004,423,3.271,447,2.326,475,2.841,476,2.546,477,0.956,478,2.546,489,4.744,507,4.91,511,4.064,513,1.769,514,2.841,531,3.642,565,3.076,682,2.326,715,4.064,731,2.151,768,2.546,775,2.15,1005,2.841,1006,4.064,1007,4.064,1008,3.289,1009,4.704,1010,3.289,1011,4.704,1012,4.064,1013,4.704,1014,4.704,1015,4.704,1016,4.064,1017,4.704,1018,4.704,1019,4.064,1020,4.704,1021,4.704,1022,4.704,1023,5.994,1024,4.704,1025,4.704,1026,4.704,1027,4.704,1028,4.704,1029,4.704,1030,4.064,1031,4.704,1032,5.994,1033,3.642,1034,4.704,1035,4.704,1036,4.704,1037,4.704,1038,4.704,1039,3.289,1040,2.841,1041,2.546,1042,2.841,1043,3.289,1044,3.289,1045,3.289,1046,3.289,1047,3.289,1048,3.289]],["title/injectables/LocalAuthGuard.html",[175,0.468,316,2.713]],["body/injectables/LocalAuthGuard.html",[3,0.272,4,0.272,5,0.244,16,0.016,19,0.356,20,0.853,21,0.272,22,0.014,23,0.014,47,0.097,175,0.822,176,1.729,316,4.771,372,3.474,731,3.085,981,4.414,994,4.925,1049,4.925,1050,6.745]],["title/injectables/LocalStrategy.html",[175,0.468,363,2.508]],["body/injectables/LocalStrategy.html",[3,0.202,4,0.202,5,0.181,8,0.312,10,0.964,15,0.444,16,0.017,17,1.346,19,0.383,20,0.632,21,0.202,22,0.012,23,0.012,28,0.964,36,0.541,38,0.696,47,0.072,50,0.993,77,1.205,78,0.836,169,1.9,175,0.682,176,1.282,178,1.77,186,1.696,198,1.931,239,1.036,252,2.112,291,2.408,297,1.472,319,3.832,320,3.272,350,2.112,363,3.655,372,2.575,423,3.499,448,3.272,477,1.228,491,3.65,498,2.414,512,3.65,513,2.273,528,3.272,731,2.557,768,3.272,775,2.763,1006,4.83,1007,4.83,1040,3.65,1041,3.272,1042,3.65,1051,3.65,1052,4.226,1053,4.226,1054,5.59,1055,4.226,1056,3.65,1057,4.83,1058,4.226,1059,4.226,1060,4.226,1061,4.226,1062,4.226,1063,3.272,1064,3.65,1065,4.226]],["title/classes/LoginDto.html",[47,0.065,299,2.713]],["body/classes/LoginDto.html",[3,0.236,4,0.236,5,0.212,8,0.365,9,1.65,15,0.491,16,0.016,17,1.335,19,0.326,21,0.236,22,0.013,23,0.013,30,2.044,36,0.599,45,1.955,47,0.105,197,2.563,203,3.767,291,2.629,297,1.661,299,4.373,350,2.75,401,1.634,404,3.325,406,3.405,413,3.429,656,4.787,678,2.822,835,4.787,841,3.826,917,4.269,1066,4.269,1067,4.941,1068,4.941]],["title/classes/Migration20250730220636.html",[47,0.065,1069,2.97]],["body/classes/Migration20250730220636.html",[3,0.153,4,0.153,5,0.137,8,0.399,16,0.016,19,0.169,21,0.153,22,0.01,23,0.01,28,0.794,36,0.309,38,0.526,47,0.054,69,1.264,78,0.885,96,1.324,134,1.538,146,1.946,149,4.183,169,1.639,181,2.259,193,2.259,198,1.591,199,1.538,219,2.807,221,3.019,226,2.631,231,5.003,283,1.825,291,2.136,297,1.582,350,2.234,401,1.056,513,2.478,536,2.473,548,4.579,550,3.98,551,5.336,552,3.258,553,2.759,554,3.867,557,2.759,561,2.473,564,3.533,565,2.088,731,2.107,751,2.259,758,2.746,774,3.012,793,3.821,795,3.258,796,3.821,800,2.259,811,3.567,821,2.473,1033,2.473,1069,3.567,1070,2.759,1071,5.403,1072,5.109,1073,3.194,1074,2.759,1075,3.194,1076,7.217,1077,3.98,1078,4.607,1079,3.194,1080,3.194,1081,4.607,1082,3.258,1083,3.194,1084,3.194,1085,6.27,1086,3.194,1087,3.567,1088,3.194,1089,4.607,1090,3.194,1091,3.194,1092,3.194,1093,3.194,1094,2.759,1095,3.194,1096,3.194,1097,3.194,1098,4.607,1099,3.194,1100,3.194,1101,7.622,1102,3.194,1103,3.194,1104,3.194,1105,7.217,1106,3.194,1107,3.194,1108,3.194,1109,3.194,1110,3.194,1111,2.759,1112,3.194,1113,3.194,1114,2.759,1115,3.194,1116,2.759,1117,3.194,1118,3.194,1119,2.759,1120,3.194,1121,3.194,1122,2.759,1123,3.194,1124,3.194,1125,3.98,1126,2.259,1127,3.194,1128,3.194,1129,3.194,1130,3.194,1131,3.194,1132,2.759,1133,3.194,1134,3.194,1135,3.194]],["title/injectables/MorganMiddleware.html",[93,2.713,175,0.468]],["body/injectables/MorganMiddleware.html",[3,0.2,4,0.2,5,0.18,8,0.31,10,0.96,12,1.515,15,0.442,16,0.017,17,0.792,19,0.294,20,0.628,21,0.2,22,0.012,23,0.012,28,0.96,36,0.539,38,0.691,47,0.071,50,0.986,77,1.199,78,0.832,80,3.804,81,1.387,93,3.936,132,1.387,134,2.02,140,1.826,142,1.219,144,2.557,175,0.678,176,1.273,178,1.329,186,1.273,187,3.249,188,2.813,223,4.807,227,4.308,239,1.029,297,1.307,301,3.638,458,4.308,483,3.952,617,2.397,648,5.393,695,3.249,931,2.743,1136,3.625,1137,4.196,1138,4.807,1139,5.744,1140,4.196,1141,3.625,1142,4.807,1143,5.393,1144,3.249,1145,4.196,1146,4.196,1147,5.564,1148,4.196,1149,3.625,1150,4.196,1151,3.625,1152,4.196,1153,4.196,1154,4.196,1155,4.196,1156,4.196,1157,4.196,1158,4.196,1159,4.196,1160,4.196,1161,5.564,1162,4.196]],["title/classes/PasswordResetEmailConsumer.html",[47,0.065,1163,2.97]],["body/classes/PasswordResetEmailConsumer.html",[3,0.197,4,0.197,5,0.177,8,0.305,10,0.949,11,1.491,15,0.437,16,0.017,19,0.381,20,0.618,21,0.197,22,0.012,23,0.012,28,0.949,36,0.533,38,0.68,47,0.07,77,1.186,78,0.823,81,1.365,107,2.358,132,1.365,142,1.6,169,1.878,178,1.743,186,1.669,188,2.858,230,2.358,234,2.098,239,1.012,245,2.96,252,1.559,350,2.079,378,2.699,379,2.098,401,1.365,454,2.699,522,3.566,526,2.515,698,1.988,731,1.888,775,2.699,876,4.312,1163,5.114,1164,3.566,1165,5.504,1166,4.128,1167,4.128,1168,5.504,1169,7.34,1170,4.128,1171,5.504,1172,4.128,1173,5.504,1174,4.128,1175,3.566,1176,3.566,1177,4.128,1178,4.128,1179,4.128,1180,4.128,1181,5.504,1182,6.192,1183,4.128,1184,4.128,1185,4.128,1186,4.128,1187,4.128,1188,4.128]],["title/modules/PaymentModule.html",[51,1.325,1189,2.97]],["body/modules/PaymentModule.html",[3,0.174,4,0.174,5,0.156,15,0.29,16,0.017,19,0.394,20,0.545,21,0.174,22,0.011,23,0.011,28,0.629,30,1.205,36,0.353,38,0.6,41,3.082,42,3.149,47,0.062,50,1.188,51,2.007,53,1.667,58,1.667,59,1.853,72,1.961,78,0.757,81,1.921,89,2.82,90,1.377,104,2.082,106,2.823,107,2.082,108,2.823,109,3.578,110,2.579,123,1.259,130,3.082,132,1.673,137,2.579,188,2.482,239,0.894,379,1.853,380,4.37,381,3.149,389,3.149,390,3.149,391,3.149,392,2.823,393,3.149,394,3.149,395,3.149,396,3.149,397,3.149,398,2.823,426,3.578,454,2.384,477,1.06,698,1.756,969,3.374,1189,4.497,1190,3.646,1191,4.37,1192,5.018,1193,3.646,1194,5.018,1195,5.058,1196,3.646,1197,4.108,1198,4.497,1199,3.149,1200,3.578,1201,3.646,1202,3.646,1203,3.646,1204,3.646,1205,3.646,1206,3.646,1207,3.646,1208,3.646,1209,5.058,1210,3.646,1211,3.646,1212,3.646,1213,3.646,1214,3.646,1215,4.37,1216,4.37,1217,4.37,1218,3.646,1219,3.646,1220,3.646]],["title/classes/RefreshTokenDto.html",[47,0.065,306,2.713]],["body/classes/RefreshTokenDto.html",[3,0.245,4,0.245,5,0.219,8,0.379,9,1.688,15,0.407,16,0.016,17,1.195,19,0.334,21,0.245,22,0.013,23,0.013,30,1.695,36,0.496,45,2.028,47,0.107,197,2.125,283,3.613,284,4.474,306,4.474,324,4.092,343,5.312,401,1.695,404,2.757,406,3.046,407,3.969,413,3.215,674,4.474,675,4.474,678,2.928,1030,5.465,1221,5.465,1222,4.429,1223,6.326,1224,5.126,1225,5.126]],["title/injectables/RequestBodyAndResponseInterceptor.html",[175,0.468,1226,2.713]],["body/injectables/RequestBodyAndResponseInterceptor.html",[3,0.177,4,0.177,5,0.159,8,0.274,10,0.884,11,1.341,12,1.85,13,2.927,15,0.407,16,0.017,17,0.701,19,0.334,20,0.556,21,0.245,22,0.011,23,0.011,28,0.884,36,0.496,38,0.611,47,0.087,50,1.486,77,1.104,78,0.767,81,1.228,104,2.122,123,1.283,132,1.228,134,2.467,140,2.229,142,1.079,144,2.263,175,0.715,176,1.127,178,1.176,186,1.127,187,2.876,188,2.713,239,1.756,290,1.699,341,2.122,410,2.428,411,2.428,483,3.612,596,2.263,617,2.927,626,2.428,633,2.876,634,2.876,908,2.428,949,2.428,969,1.998,989,4.693,1144,2.876,1226,3.624,1227,2.876,1228,4.426,1229,3.714,1230,5.067,1231,5.731,1232,3.714,1233,4.896,1234,3.967,1235,5.067,1236,3.209,1237,3.209,1238,3.209,1239,2.627,1240,3.967,1241,2.876,1242,3.209,1243,4.426,1244,3.209,1245,3.209,1246,3.209,1247,3.209,1248,3.209,1249,3.209,1250,3.209,1251,4.426,1252,4.426,1253,4.426,1254,4.426,1255,2.876,1256,3.209,1257,3.209]],["title/injectables/RequestContextMiddleware.html",[115,2.713,175,0.468]],["body/injectables/RequestContextMiddleware.html",[3,0.225,4,0.225,5,0.201,8,0.348,10,1.034,15,0.476,16,0.016,19,0.348,20,0.704,21,0.225,22,0.013,23,0.013,28,1.034,36,0.58,38,0.775,47,0.08,77,1.292,78,0.897,80,3.653,96,1.951,100,3.644,115,4.24,140,2.048,141,2.868,142,1.368,175,0.731,176,1.427,186,1.427,227,4.642,290,3.177,301,3.077,483,3.968,570,2.392,617,3.968,1138,5.179,1139,5.7,1142,5.179,1258,5.7,1259,4.066,1260,4.066,1261,6.001,1262,4.706,1263,5.179,1264,6.947,1265,4.706,1266,4.706,1267,4.706]],["title/classes/ResetPasswordDto.html",[47,0.065,309,2.713]],["body/classes/ResetPasswordDto.html",[3,0.172,4,0.172,5,0.154,8,0.267,9,1.341,12,2.256,15,0.459,16,0.017,17,1.284,19,0.265,21,0.172,22,0.01,23,0.01,30,1.91,36,0.559,45,1.427,47,0.085,69,1.987,197,2.395,291,2.569,297,1.467,309,3.552,324,2.869,352,3.889,354,4.473,355,3.777,356,3.777,401,1.193,404,3.107,406,3.274,407,2.794,413,3.174,477,1.815,654,2.552,655,4.339,658,4.836,659,4.836,660,4.836,661,4.836,662,4.65,663,4.836,664,4.836,665,4.836,666,4.836,667,4.836,668,4.836,669,4.836,670,4.836,674,4.418,675,4.418,676,4.473,677,2.794,678,2.061,1268,5.396,1269,6.246,1270,5.022,1271,3.609,1272,3.609,1273,3.609,1274,3.609,1275,5.022,1276,5.022]],["title/guards/RoleGuard.html",[1277,2.97,1278,2.97]],["body/guards/RoleGuard.html",[3,0.2,4,0.2,5,0.179,8,0.309,10,0.958,15,0.441,16,0.017,17,0.791,19,0.365,20,0.626,21,0.2,22,0.012,23,0.012,28,0.958,30,1.384,36,0.538,38,0.689,47,0.071,50,1.465,77,1.197,78,0.831,104,2.391,123,2.154,138,3.241,140,1.821,141,2.551,142,1.216,175,0.677,186,1.27,198,1.919,219,3.385,239,1.628,290,1.914,304,3.241,366,2.737,477,1.216,498,2.391,606,4.301,758,2.127,908,3.632,949,2.737,969,2.251,983,5.972,985,3.616,986,6.139,988,3.616,989,4.698,998,3.616,1233,4.828,1234,4.301,1240,4.301,1241,3.241,1255,3.241,1278,4.301,1279,4.186,1280,3.616,1281,4.186,1282,4.186,1283,6.236,1284,4.186,1285,5.556,1286,4.186,1287,4.186,1288,4.186]],["title/injectables/S3Service.html",[175,0.468,1289,2.713]],["body/injectables/S3Service.html",[3,0.129,4,0.129,5,0.21,8,0.2,9,1.089,10,0.846,11,0.978,15,0.465,16,0.017,17,1.206,19,0.383,20,0.405,21,0.129,22,0.009,23,0.009,28,0.703,36,0.596,38,0.671,47,0.046,50,0.958,58,1.239,77,1.057,78,0.734,81,0.895,89,2.435,90,1.023,132,0.895,134,2.821,140,1.178,142,1.789,144,3.569,169,1.867,175,0.497,176,0.821,178,2.233,186,1.237,188,2.527,193,4.354,198,1.886,199,2.363,213,4.228,215,2.485,217,1.239,221,1.304,234,1.376,239,1.566,245,2.194,252,1.541,290,1.239,294,1.915,341,1.547,387,3.158,477,1.185,617,1.547,662,2.667,681,4.535,682,1.915,684,2.097,685,4.228,686,3.799,687,3.862,696,2.667,697,2.34,698,1.304,699,2.194,700,1.915,708,2.34,709,3.524,710,2.34,711,2.34,712,2.34,733,4.535,771,2.34,781,2.097,931,1.771,971,4.239,972,2.34,973,4.228,976,1.915,977,2.34,978,1.771,979,1.771,1063,2.097,1289,2.885,1290,2.34,1291,4.906,1292,4.906,1293,4.239,1294,4.143,1295,4.079,1296,2.708,1297,2.708,1298,4.079,1299,2.708,1300,2.708,1301,4.079,1302,2.708,1303,2.34,1304,4.079,1305,2.708,1306,2.708,1307,4.079,1308,4.239,1309,2.34,1310,3.524,1311,4.079,1312,2.34,1313,2.708,1314,2.34,1315,2.34,1316,4.079,1317,2.34,1318,2.708,1319,2.34,1320,4.906,1321,4.079,1322,4.079,1323,2.708,1324,2.708,1325,4.079,1326,2.708,1327,2.708,1328,2.708,1329,2.708,1330,2.708,1331,4.079,1332,2.708,1333,4.079,1334,2.708,1335,2.34,1336,3.524,1337,2.34,1338,4.079,1339,2.708,1340,2.708,1341,2.708,1342,2.708]],["title/injectables/SchemaService.html",[67,2.508,175,0.468]],["body/injectables/SchemaService.html",[3,0.213,4,0.213,5,0.191,8,0.329,10,0.769,15,0.354,16,0.017,19,0.359,20,0.667,21,0.213,22,0.012,23,0.012,28,0.999,36,0.561,38,0.734,47,0.076,67,3.786,77,0.961,78,0.667,81,1.474,89,2.912,90,1.684,96,1.849,128,3.786,132,1.474,140,1.94,142,1.869,169,1.951,175,0.706,176,1.352,178,2.036,186,1.756,188,2.912,234,2.266,239,1.42,245,2.398,252,1.684,379,2.266,570,2.266,1260,3.852,1261,5.881,1263,5.002,1343,3.852,1344,7.231,1345,4.458,1346,4.458,1347,5.79,1348,4.458,1349,4.458,1350,4.458,1351,4.458,1352,4.458,1353,4.458,1354,4.458,1355,4.458]],["title/modules/StorageModule.html",[51,1.325,1356,2.97]],["body/modules/StorageModule.html",[3,0.193,4,0.193,5,0.173,16,0.017,19,0.379,20,0.605,21,0.193,22,0.011,23,0.011,28,0.697,36,0.391,38,0.666,47,0.069,50,1.44,51,2.117,53,1.849,58,1.849,59,2.055,72,2.175,81,2.026,89,2.843,90,1.528,130,3.308,132,1.795,172,3.493,188,2.703,239,0.991,379,2.055,398,3.13,477,1.781,498,2.309,679,2.86,698,1.947,699,2.175,1063,3.13,1191,4.69,1192,5.294,1194,5.294,1217,5.903,1289,2.86,1293,4.69,1294,4.335,1337,3.493,1356,4.745,1357,4.043,1358,4.043,1359,4.043,1360,4.745,1361,3.493,1362,4.043,1363,5.428,1364,4.043,1365,4.043,1366,4.043,1367,4.043,1368,4.043,1369,4.043,1370,4.043,1371,4.043,1372,4.043,1373,4.043,1374,4.043,1375,4.043,1376,4.043,1377,4.043,1378,4.043]],["title/injectables/StripeService.html",[175,0.468,1200,2.713]],["body/injectables/StripeService.html",[3,0.153,4,0.153,5,0.137,8,0.236,10,1.021,11,1.666,15,0.47,16,0.017,19,0.364,20,0.479,21,0.153,22,0.01,23,0.01,28,0.795,30,1.058,36,0.573,38,0.89,47,0.054,50,1.084,77,1.276,78,0.886,81,1.058,89,2.585,90,1.209,104,1.828,107,1.828,132,1.058,140,1.392,142,1.72,169,2.13,175,0.562,176,0.971,178,1.874,186,1.399,188,2.665,198,2.045,215,2.811,230,1.828,234,1.626,239,1.451,245,2.909,252,2.043,379,1.626,426,4.186,453,2.764,454,2.092,513,1.721,682,2.263,762,3.939,786,2.092,957,3.262,959,4.672,960,4.672,961,2.764,962,4.672,963,5.646,965,5.646,966,2.764,967,4.672,969,3.709,1019,5.113,1197,3.262,1200,3.262,1215,4.672,1216,4.672,1379,2.764,1380,4.612,1381,3.2,1382,3.2,1383,3.2,1384,4.612,1385,5.408,1386,4.612,1387,3.2,1388,4.612,1389,4.612,1390,3.2,1391,3.2,1392,3.2,1393,3.2,1394,3.571,1395,5.408,1396,3.2,1397,3.2,1398,3.2,1399,3.2,1400,5.919,1401,3.571,1402,3.2,1403,3.2,1404,3.2,1405,3.2,1406,3.2,1407,3.2,1408,3.2,1409,3.2,1410,3.2,1411,3.2,1412,3.2,1413,3.2]],["title/injectables/SuccessResponseInterceptor.html",[175,0.468,1239,2.713]],["body/injectables/SuccessResponseInterceptor.html",[3,0.182,4,0.182,5,0.163,8,0.281,10,0.657,11,1.376,12,1.883,13,2.978,15,0.303,16,0.017,17,0.719,19,0.337,20,0.57,21,0.249,22,0.011,23,0.011,28,0.899,36,0.369,38,0.627,47,0.088,50,1.502,77,0.821,78,0.57,81,1.26,104,2.176,123,1.316,132,1.26,134,2.511,140,2.269,142,1.107,144,2.321,175,0.725,176,1.155,178,1.206,188,2.351,239,1.767,290,1.742,341,2.176,410,2.491,411,2.491,483,3.651,596,2.321,617,2.978,626,2.491,633,2.95,634,2.95,908,2.491,949,2.491,969,2.049,989,4.735,1144,2.95,1226,2.694,1227,2.95,1228,4.504,1230,5.135,1231,5.783,1233,4.949,1234,4.037,1235,5.135,1236,3.291,1237,3.291,1238,3.291,1239,3.688,1240,4.037,1241,2.95,1242,3.291,1243,4.504,1244,3.291,1245,3.291,1246,3.291,1247,3.291,1248,3.291,1249,3.291,1250,3.291,1251,4.504,1252,4.504,1253,4.504,1254,4.504,1255,2.95,1256,3.291,1257,3.291,1414,3.81]],["title/classes/UpdateProfileDto.html",[47,0.065,1415,2.713]],["body/classes/UpdateProfileDto.html",[3,0.255,4,0.255,5,0.229,16,0.017,19,0.342,21,0.255,22,0.014,23,0.014,45,2.113,47,0.091,239,1.59,291,2.343,350,2.451,401,1.766,731,2.967,758,3.297,774,3.493,790,3.493,797,4.588,798,4.588,1415,4.588,1416,4.615,1417,4.615,1418,6.986,1419,6.487,1420,5.342,1421,4.615]],["title/entities/User.html",[297,0.901,1422,2.97]],["body/entities/User.html",[3,0.097,4,0.097,5,0.087,8,0.302,9,1.091,10,1.217,15,0.602,16,0.017,17,1.383,19,0.247,21,0.097,22,0.007,23,0.007,30,2.292,36,0.671,47,0.034,69,1.291,78,0.894,96,0.843,123,2.474,134,1.572,146,1.989,149,1.438,178,0.644,199,1.572,217,1.869,219,3.639,221,2.767,226,3.412,283,1.864,291,2.225,297,1.546,350,2.066,526,2.491,529,3.531,536,2.527,541,2.308,546,2.819,547,5.854,548,2.527,549,2.819,551,5.835,554,2.134,556,6.097,564,3.059,569,5.988,570,1.034,596,1.239,651,2.819,698,0.979,731,0.93,751,2.308,758,2.603,760,3.349,776,2.891,793,4.064,794,2.891,795,3.623,796,4.064,797,2.891,798,2.891,799,3.165,800,2.891,811,3.622,821,2.527,828,2.819,851,3.531,1033,2.527,1064,3.531,1082,3.623,1087,2.527,1111,2.819,1114,2.819,1116,2.819,1119,2.819,1122,2.819,1125,4.041,1126,2.308,1132,1.757,1151,6.327,1422,2.527,1423,1.757,1424,1.757,1425,2.034,1426,7.324,1427,2.034,1428,2.034,1429,6.322,1430,2.034,1431,2.034,1432,2.819,1433,2.034,1434,2.034,1435,4.678,1436,2.034,1437,2.034,1438,2.034,1439,2.034,1440,2.034,1441,2.034,1442,5.468,1443,2.034,1444,2.034,1445,2.034,1446,2.034,1447,2.034,1448,2.819,1449,2.819,1450,2.034,1451,1.438,1452,1.757,1453,2.034,1454,2.034,1455,1.757,1456,2.034]],["title/controllers/UserController.html",[24,2.063,1457,2.713]],["body/controllers/UserController.html",[1,1.838,3,0.134,4,0.134,5,0.12,8,0.208,10,0.959,11,2.254,12,2.009,13,3.177,15,0.514,16,0.017,18,1.838,19,0.351,20,0.421,21,0.134,22,0.009,23,0.009,24,1.512,26,1.512,28,0.723,30,1.839,36,0.539,38,0.916,40,2.176,41,2.556,43,4.608,44,2.176,45,1.112,47,0.048,48,3.884,49,4.307,50,1.307,77,1.199,78,0.832,141,1.713,142,0.817,149,1.988,169,2.156,198,2.296,230,3.177,239,1.459,252,1.895,281,2.428,289,2.428,290,2.294,291,2.009,294,4.574,297,1.649,301,4.229,311,2.428,313,2.176,315,4.806,327,2.176,329,2.428,330,2.176,339,2.428,340,4.334,423,2.416,477,1.219,481,1.988,482,2.176,483,1.606,484,2.176,485,1.988,486,2.176,487,2.176,488,2.176,513,1.512,528,2.176,565,2.742,652,4.081,774,2.742,786,1.838,790,4.081,794,3.549,862,4.833,863,2.176,1072,4.334,1126,2.966,1415,4.415,1421,2.428,1457,2.966,1458,2.428,1459,4.194,1460,5.017,1461,2.811,1462,4.194,1463,2.811,1464,2.811,1465,2.811,1466,2.811,1467,4.194,1468,2.811,1469,2.811,1470,2.811,1471,2.811,1472,2.811,1473,2.811,1474,4.194,1475,2.811,1476,2.811,1477,2.811,1478,2.428,1479,2.428,1480,2.811,1481,2.811,1482,2.428,1483,2.811,1484,2.811,1485,2.811,1486,2.811,1487,2.811,1488,2.811,1489,3.623,1490,2.811,1491,2.811,1492,2.811,1493,2.811,1494,4.194,1495,4.334,1496,2.811,1497,3.623,1498,2.811,1499,2.811,1500,2.811,1501,2.811]],["title/classes/UserFactory.html",[47,0.065,870,2.713]],["body/classes/UserFactory.html",[3,0.223,4,0.223,5,0.2,8,0.346,9,1.595,16,0.017,19,0.366,21,0.223,22,0.012,23,0.012,28,1.031,36,0.578,38,0.771,47,0.079,50,1.1,96,1.941,217,2.141,221,2.254,291,1.691,297,1.546,350,1.769,401,1.548,526,2.852,698,2.254,731,2.733,758,2.379,760,3.061,776,3.311,793,3.311,795,3.311,796,3.311,797,3.311,798,3.311,799,3.625,800,3.311,860,2.852,869,4.044,870,4.226,1082,3.311,1502,4.044,1503,6.582,1504,6.582,1505,6.933,1506,4.681,1507,4.681,1508,5.975,1509,5.975,1510,4.681,1511,4.681,1512,4.681,1513,4.681,1514,4.681,1515,4.681,1516,4.681,1517,4.681,1518,4.681,1519,4.681,1520,4.681,1521,4.681,1522,4.681,1523,4.681]],["title/modules/UserModule.html",[51,1.325,64,2.337]],["body/modules/UserModule.html",[3,0.216,4,0.216,5,0.193,16,0.017,19,0.39,20,0.676,21,0.216,22,0.012,23,0.012,26,3.14,47,0.077,51,2.235,53,2.065,54,2.295,55,2.579,56,2.579,57,2.295,58,2.959,59,3.288,64,4.679,68,3.335,69,1.786,70,2.579,72,3.14,95,3.901,96,1.872,97,3.193,158,4.421,297,1.061,377,3.901,423,3.72,860,2.751,1457,4.576,1479,3.901,1524,3.901,1525,4.515,1526,3.901,1527,3.901,1528,4.744,1529,4.515,1530,4.515,1531,4.515,1532,4.515]],["title/injectables/UserService.html",[175,0.468,423,1.847]],["body/injectables/UserService.html",[3,0.11,4,0.11,5,0.098,8,0.17,9,0.959,10,0.937,11,2.081,15,0.478,16,0.017,17,1.21,19,0.304,20,0.344,21,0.11,22,0.008,23,0.008,28,0.62,36,0.583,38,0.824,47,0.039,50,1.277,77,1.171,78,0.813,96,1.49,97,1.624,142,1.812,162,3.292,169,2.059,175,0.438,176,0.696,178,1.974,183,1.983,186,1.09,198,2.154,215,1.399,226,2.052,231,1.501,239,1.687,252,2.477,255,2.349,269,3.542,291,1.808,297,1.595,327,1.778,350,1.357,355,2.894,356,2.349,392,3.877,422,1.983,423,1.73,446,3.104,447,1.624,457,1.983,476,2.782,477,1.58,478,2.782,481,2.541,482,2.782,483,2.052,484,2.782,485,2.541,486,2.782,487,2.782,488,2.782,494,4.979,498,2.528,513,2.693,516,4.326,530,1.983,531,1.778,565,2.349,570,1.167,596,1.399,626,2.349,652,3.274,762,2.86,774,2.349,794,3.542,860,1.399,979,1.501,1126,1.624,1336,4.326,1482,1.983,1489,3.104,1495,4.326,1497,3.104,1533,1.983,1534,4.426,1535,4.426,1536,4.426,1537,4.426,1538,5.007,1539,3.593,1540,2.296,1541,2.296,1542,3.593,1543,2.296,1544,2.296,1545,2.296,1546,5.007,1547,5.007,1548,2.296,1549,6.023,1550,3.593,1551,5.007,1552,2.296,1553,2.296,1554,2.296,1555,2.296,1556,2.296,1557,2.296,1558,2.296,1559,2.296,1560,2.296,1561,2.296,1562,2.296,1563,2.296,1564,2.296,1565,2.296,1566,2.296,1567,2.296,1568,2.296,1569,2.296,1570,2.296,1571,2.296,1572,2.296,1573,3.593,1574,2.296,1575,2.296,1576,2.296,1577,2.296,1578,2.296,1579,2.296,1580,2.296,1581,3.593,1582,3.593,1583,3.593,1584,3.593,1585,3.593,1586,2.296,1587,2.296,1588,2.296,1589,3.593,1590,2.296,1591,2.296,1592,2.296]],["title/injectables/UserSubscriber.html",[175,0.468,1528,2.508]],["body/injectables/UserSubscriber.html",[3,0.16,4,0.16,5,0.143,8,0.247,10,1.144,15,0.527,16,0.017,19,0.35,20,0.5,21,0.16,22,0.01,23,0.01,28,0.821,36,0.661,38,1.092,47,0.057,50,1.302,77,1.43,78,0.992,80,2.038,89,2.7,90,1.263,96,1.387,123,1.155,140,1.455,142,0.972,169,2.153,175,0.58,176,1.014,178,2.28,186,1.444,219,2.901,239,1.481,248,4.113,252,2.094,297,1.786,420,4.113,445,3.686,480,4.113,570,1.7,739,2.889,740,4.676,742,3.686,860,2.038,1448,4.113,1449,4.113,1451,2.365,1452,2.889,1455,4.113,1528,3.113,1593,2.889,1594,6.039,1595,4.761,1596,4.761,1597,3.344,1598,4.761,1599,6.825,1600,3.344,1601,4.761,1602,3.344,1603,3.344,1604,5.543,1605,4.761,1606,3.344,1607,4.761,1608,3.344,1609,4.761,1610,3.344,1611,4.761,1612,3.344,1613,4.761,1614,4.761,1615,4.761,1616,3.344,1617,2.889,1618,4.761,1619,3.344,1620,3.344,1621,3.344,1622,3.344]],["title/coverage.html",[1623,4.056]],["body/coverage.html",[0,2.581,1,1.541,5,0.101,6,2.036,7,2.839,15,0.463,16,0.017,22,0.008,23,0.008,24,2.421,25,1.667,27,2.036,41,1.436,47,0.123,57,1.864,65,1.541,66,1.541,67,1.541,93,1.667,115,1.667,128,1.541,162,1.346,175,0.889,177,2.036,202,6.887,274,2.036,279,1.667,280,2.036,287,1.667,297,0.861,299,1.667,306,1.667,309,1.667,316,1.667,319,1.268,324,1.346,362,1.541,363,1.541,375,1.667,378,1.541,400,1.825,402,2.036,403,2.036,414,2.036,423,1.135,455,1.825,477,0.685,541,1.667,542,2.036,575,1.825,576,2.036,589,1.825,610,1.667,652,1.541,653,2.036,654,3.184,679,1.667,680,2.036,696,1.541,729,2.036,730,2.036,758,1.198,772,1.825,790,1.541,791,2.036,792,2.036,855,1.667,856,2.839,861,1.667,864,1.825,865,2.036,870,1.667,876,1.436,881,1.825,901,2.036,914,2.036,915,2.036,925,1.541,926,1.825,927,1.825,933,2.036,957,1.667,958,2.036,970,2.036,976,1.667,978,1.541,979,1.541,980,2.036,981,2.839,995,1.825,1005,2.036,1049,2.036,1051,2.036,1066,2.036,1069,1.825,1070,2.036,1077,2.036,1136,2.036,1141,5.033,1163,1.825,1164,2.036,1197,1.667,1198,1.825,1200,1.667,1221,2.036,1222,2.036,1226,1.667,1227,2.839,1239,1.667,1258,2.036,1259,2.036,1268,2.036,1277,1.825,1278,1.825,1280,2.036,1289,1.667,1290,2.036,1335,2.036,1343,2.036,1360,1.825,1379,2.036,1394,1.825,1401,1.825,1415,1.667,1416,2.036,1417,2.036,1422,1.825,1424,3.168,1451,1.667,1457,1.667,1458,2.036,1502,2.036,1528,1.541,1533,2.036,1593,2.036,1623,1.825,1624,2.036,1625,2.357,1626,2.357,1627,6.082,1628,4.501,1629,5.433,1630,7.076,1631,2.036,1632,7.601,1633,2.036,1634,5.502,1635,2.357,1636,7.197,1637,4.501,1638,3.667,1639,2.036,1640,5.502,1641,2.036,1642,2.036,1643,2.036,1644,3.168,1645,3.168,1646,2.036,1647,2.036,1648,2.036,1649,2.036,1650,2.036,1651,1.825,1652,2.036,1653,2.036,1654,2.357,1655,3.168,1656,2.357,1657,2.357,1658,2.036,1659,2.036,1660,2.357,1661,2.357,1662,2.036,1663,2.036,1664,2.036,1665,2.357,1666,2.036,1667,2.036,1668,3.168,1669,2.036,1670,2.036,1671,2.357]],["title/dependencies.html",[54,2.345,1672,2.766]],["body/dependencies.html",[11,1.208,16,0.017,20,0.5,22,0.01,23,0.01,33,3.367,45,1.323,47,0.081,54,1.7,58,1.529,90,1.263,96,2.646,97,2.365,100,3.686,101,2.889,102,2.365,104,2.719,105,2.889,107,1.91,109,3.921,110,2.365,112,2.889,134,1.61,166,2.589,167,2.589,169,1.014,290,1.529,366,2.187,370,2.589,372,2.038,445,2.589,454,2.187,458,2.589,481,2.365,507,2.589,561,2.589,570,1.7,608,2.589,609,2.889,678,1.91,690,2.365,695,2.589,699,2.981,700,2.365,733,3.686,767,2.889,770,2.889,781,2.589,840,2.889,880,2.589,930,2.589,931,2.187,949,2.187,969,2.56,1041,4.292,1056,2.889,1057,2.889,1074,2.889,1143,2.889,1294,2.365,1303,2.889,1308,4.789,1309,2.889,1310,2.889,1312,2.889,1314,2.889,1315,4.789,1317,2.889,1319,2.889,1673,3.344,1674,3.344,1675,3.344,1676,3.344,1677,5.543,1678,3.344,1679,3.344,1680,6.039,1681,3.344,1682,6.039,1683,3.344,1684,3.344,1685,3.344,1686,3.344,1687,3.344,1688,3.344,1689,3.344,1690,3.344,1691,3.344,1692,3.344,1693,3.344,1694,3.344,1695,2.889,1696,3.344,1697,3.344,1698,3.344,1699,6.039,1700,3.344,1701,3.344,1702,3.344,1703,4.761,1704,4.761,1705,3.344,1706,3.344,1707,3.344,1708,3.344,1709,3.344,1710,4.761,1711,3.344,1712,3.344,1713,4.761,1714,3.344,1715,3.344,1716,3.344,1717,3.344,1718,3.344,1719,3.344,1720,3.344,1721,3.344,1722,3.344,1723,3.344,1724,3.344,1725,3.344,1726,3.344,1727,3.344,1728,3.344,1729,3.344,1730,3.344,1731,4.761,1732,3.344,1733,3.344,1734,3.344,1735,3.344,1736,3.344,1737,3.344,1738,3.344,1739,3.344,1740,3.344,1741,3.344,1742,3.344,1743,3.344,1744,3.344,1745,3.344,1746,3.344,1747,3.344,1748,3.344,1749,3.344]],["title/miscellaneous/enumerations.html",[1750,1.722,1751,3.986]],["body/miscellaneous/enumerations.html",[8,0.331,16,0.017,22,0.012,23,0.012,69,2.298,181,4.109,217,3.616,291,2.098,297,1.365,313,4.498,687,4.109,690,4.109,760,3.798,762,3.318,969,3.125,973,4.498,978,3.798,1082,3.169,1094,5.019,1175,5.019,1176,5.019,1199,5.019,1294,4.109,1361,5.019,1478,5.019,1750,2.41,1751,3.871,1752,5.846,1753,5.809,1754,5.809,1755,4.481,1756,5.809,1757,4.481,1758,4.481,1759,5.809,1760,5.809,1761,5.809,1762,4.481,1763,4.481,1764,5.809,1765,4.481]],["title/miscellaneous/functions.html",[1750,1.722,1766,3.986]],["body/miscellaneous/functions.html",[8,0.366,10,1.165,15,0.537,16,0.016,17,1.276,22,0.013,23,0.013,38,1.165,57,3.777,77,1.456,78,1.011,80,3.774,199,2.983,297,1.587,1087,3.836,1451,4.381,1617,4.281,1641,4.281,1642,5.351,1643,4.281,1648,4.281,1649,5.351,1650,4.281,1651,5.231,1652,4.281,1653,4.281,1750,2.665,1766,4.281,1767,4.955,1768,4.955,1769,4.955,1770,4.955,1771,4.955,1772,4.955,1773,4.955,1774,4.955,1775,6.193,1776,4.955,1777,6.193,1778,4.955]],["title/index.html",[8,0.237,254,2.766,1779,3.202]],["body/index.html",[16,0.017,22,0.013,23,0.013,33,3.626,128,3.352,197,2.125,406,3.304,485,3.626,738,5.88,1623,3.969,1624,5.465,1780,5.126,1781,5.126,1782,5.126,1783,5.126,1784,6.326,1785,5.126,1786,7.595,1787,5.126,1788,5.126,1789,5.126,1790,5.126,1791,6.326,1792,5.126,1793,5.126,1794,6.861,1795,5.126,1796,6.326,1797,5.126,1798,5.126,1799,5.126]],["title/modules.html",[53,2.396]],["body/modules.html",[16,0.014,22,0.014,23,0.014,52,3.871,53,2.503,63,3.578,64,3.335,158,3.335,873,3.871,921,3.871,1012,5.687,1016,6.576,1189,4.238,1356,4.238,1800,7.612,1801,7.612,1802,7.764,1803,6.583]],["title/overview.html",[1804,4.526]],["body/overview.html",[2,2.579,16,0.016,22,0.011,23,0.011,26,2.122,51,1.363,52,5.353,53,1.804,54,2.005,55,2.253,56,2.253,57,2.005,58,1.804,59,2.005,60,3.408,61,3.408,62,3.408,63,5.008,64,4.577,65,3.957,66,3.957,67,3.957,68,3.05,69,1.56,70,2.253,158,4.352,159,3.408,160,3.408,161,3.408,162,4.08,176,1.196,203,3.253,319,3.841,358,3.408,360,3.408,361,3.408,362,3.957,363,3.957,401,1.304,423,3.439,873,4.281,874,3.408,875,3.408,876,3.951,921,4.793,922,3.408,923,3.408,924,3.408,925,4.67,1277,3.054,1423,3.408,1432,3.408,1524,3.408,1526,3.408,1527,3.408,1528,3.957,1804,3.408,1805,3.945,1806,3.945,1807,3.945,1808,3.945]],["title/properties.html",[9,1.232,1672,2.766]],["body/properties.html",[9,1.599,16,0.016,22,0.015,23,0.015,197,2.483,1149,5.174,1809,5.989,1810,5.989,1811,5.989,1812,5.989]],["title/miscellaneous/typealiases.html",[1750,1.722,1813,4.614]],["body/miscellaneous/typealiases.html",[8,0.392,15,0.59,16,0.016,22,0.014,23,0.014,39,6.264,455,5.004,504,3.472,589,5.004,605,4.587,606,4.111,607,4.587,976,4.572,978,4.226,979,4.226,1394,5.004,1401,5.004,1639,4.587,1658,4.587,1659,5.584,1662,4.587,1663,4.587,1664,5.584,1666,4.587,1667,5.584,1750,2.856,1752,4.111,1814,5.31,1815,5.31,1816,5.31,1817,5.31,1818,5.31]],["title/miscellaneous/variables.html",[1750,1.722,1819,3.986]],["body/miscellaneous/variables.html",[8,0.275,15,0.578,16,0.017,17,1.374,22,0.011,23,0.011,35,3.215,41,3.127,69,1.472,78,0.557,123,2.029,128,3.839,217,3.493,221,3.678,291,1.344,350,1.406,378,3.355,426,3.629,477,2.083,699,2.76,758,2.608,772,3.973,881,3.973,896,2.882,995,3.973,996,3.215,1197,3.629,1198,4.547,1360,4.547,1629,3.215,1631,4.433,1633,3.215,1644,3.215,1645,5.073,1646,4.433,1647,4.433,1651,2.882,1655,3.215,1668,3.215,1669,4.433,1670,5.468,1695,3.215,1750,2.002,1752,5.631,1819,3.215,1820,5.131,1821,5.131,1822,5.131,1823,3.722,1824,3.722,1825,3.722,1826,3.722,1827,3.722,1828,3.722,1829,3.722,1830,3.722,1831,3.722,1832,3.722,1833,3.722,1834,3.722,1835,3.722,1836,3.722,1837,3.722,1838,3.722,1839,3.722,1840,3.722,1841,3.722,1842,3.722]]],"invertedIndex":[["",{"_index":16,"title":{},"body":{"interfaces/ApiResponse.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AppRedisModule.html":{},"injectables/AppRedisService.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/AuthResponseDto.html":{},"injectables/AuthService.html":{},"classes/BaseEntity.html":{},"classes/CatchAllFilter.html":{},"classes/ChangePasswordDto.html":{},"injectables/CloudinaryService.html":{},"injectables/CreateUserCommand.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserResponseDto.html":{},"classes/DatabaseSeeder.html":{},"modules/EmailModule.html":{},"classes/EmailService.html":{},"interfaces/ErrorResponse.html":{},"classes/ForgotPasswordDto.html":{},"classes/GetProfileResponseDto.html":{},"modules/HttpClientModule.html":{},"injectables/HttpClientService.html":{},"interfaces/IPaymentService.html":{},"interfaces/IStrorageService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"classes/Migration20250730220636.html":{},"injectables/MorganMiddleware.html":{},"classes/PasswordResetEmailConsumer.html":{},"modules/PaymentModule.html":{},"classes/RefreshTokenDto.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/RequestContextMiddleware.html":{},"classes/ResetPasswordDto.html":{},"guards/RoleGuard.html":{},"injectables/S3Service.html":{},"injectables/SchemaService.html":{},"modules/StorageModule.html":{},"injectables/StripeService.html":{},"injectables/SuccessResponseInterceptor.html":{},"classes/UpdateProfileDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"classes/UserFactory.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"injectables/UserSubscriber.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":202,"title":{},"body":{"injectables/AppRedisService.html":{},"coverage.html":{}}}],["0.0.1",{"_index":1809,"title":{},"body":{"properties.html":{}}}],["0.1.13",{"_index":1743,"title":{},"body":{"dependencies.html":{}}}],["0.12.5",{"_index":1747,"title":{},"body":{"dependencies.html":{}}}],["0.14.1",{"_index":1717,"title":{},"body":{"dependencies.html":{}}}],["0.2.21",{"_index":1679,"title":{},"body":{"dependencies.html":{}}}],["0.203.0",{"_index":1703,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":1716,"title":{},"body":{"dependencies.html":{}}}],["0.6.0",{"_index":1726,"title":{},"body":{"dependencies.html":{}}}],["0.62.0",{"_index":1696,"title":{},"body":{"dependencies.html":{}}}],["0.7.0",{"_index":1737,"title":{},"body":{"dependencies.html":{}}}],["0.9.3",{"_index":1678,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":1632,"title":{},"body":{"coverage.html":{}}}],["0/13",{"_index":1654,"title":{},"body":{"coverage.html":{}}}],["0/14",{"_index":1660,"title":{},"body":{"coverage.html":{}}}],["0/18",{"_index":1661,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":1627,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":1636,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":1637,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":1634,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":1638,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":1628,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":1635,"title":{},"body":{"coverage.html":{}}}],["0123456789abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz!@#$%^&*()_",{"_index":1823,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1",{"_index":203,"title":{},"body":{"injectables/AppRedisService.html":{},"injectables/AuthService.html":{},"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginDto.html":{},"overview.html":{}}}],["1'})@isstring()@isnotempty()@matches(/^(?=.*[a",{"_index":657,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{}}}],["1'})@isstring()@isoptional()@transform",{"_index":812,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["1.0.0",{"_index":1713,"title":{},"body":{"dependencies.html":{}}}],["1.10.0",{"_index":1710,"title":{},"body":{"dependencies.html":{}}}],["1.10.2",{"_index":1732,"title":{},"body":{"dependencies.html":{}}}],["1.11.13",{"_index":1719,"title":{},"body":{"dependencies.html":{}}}],["1.2.1",{"_index":1721,"title":{},"body":{"dependencies.html":{}}}],["1.9.93",{"_index":1733,"title":{},"body":{"dependencies.html":{}}}],["1/3",{"_index":1657,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":662,"title":{},"body":{"classes/ChangePasswordDto.html":{},"injectables/CreateUserCommand.html":{},"classes/CreateUserDto.html":{},"classes/ResetPasswordDto.html":{},"injectables/S3Service.html":{}}}],["10.0.0",{"_index":1680,"title":{},"body":{"dependencies.html":{}}}],["10.0.3",{"_index":1691,"title":{},"body":{"dependencies.html":{}}}],["10.2.0",{"_index":1689,"title":{},"body":{"dependencies.html":{}}}],["100",{"_index":1429,"title":{},"body":{"entities/User.html":{}}}],["11.0.3",{"_index":1687,"title":{},"body":{"dependencies.html":{}}}],["11.1.0",{"_index":1748,"title":{},"body":{"dependencies.html":{}}}],["123",{"_index":801,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["12345",{"_index":845,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["12345'})@isstring()@isoptional",{"_index":825,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["18",{"_index":1807,"title":{},"body":{"overview.html":{}}}],["18.3.0",{"_index":1745,"title":{},"body":{"dependencies.html":{}}}],["19",{"_index":1806,"title":{},"body":{"overview.html":{}}}],["2.0.1",{"_index":1699,"title":{},"body":{"dependencies.html":{}}}],["2.0.2",{"_index":1685,"title":{},"body":{"dependencies.html":{}}}],["2.1.3",{"_index":1727,"title":{},"body":{"dependencies.html":{}}}],["2.7.0",{"_index":1718,"title":{},"body":{"dependencies.html":{}}}],["20",{"_index":1442,"title":{},"body":{"entities/User.html":{}}}],["2000",{"_index":396,"title":{},"body":{"modules/AuthModule.html":{},"modules/PaymentModule.html":{}}}],["234567890",{"_index":850,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["234567890'})@isstring()@isoptional",{"_index":822,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["255",{"_index":1435,"title":{},"body":{"entities/User.html":{}}}],["3",{"_index":1432,"title":{},"body":{"entities/User.html":{},"overview.html":{}}}],["3.0.0",{"_index":1728,"title":{},"body":{"dependencies.html":{}}}],["3.0.1",{"_index":1734,"title":{},"body":{"dependencies.html":{}}}],["3.0.3",{"_index":1740,"title":{},"body":{"dependencies.html":{}}}],["3.17.0",{"_index":1749,"title":{},"body":{"dependencies.html":{}}}],["3.18.0",{"_index":1730,"title":{},"body":{"dependencies.html":{}}}],["3.2.2",{"_index":1688,"title":{},"body":{"dependencies.html":{}}}],["3.840.0",{"_index":1675,"title":{},"body":{"dependencies.html":{}}}],["3.848.0",{"_index":1673,"title":{},"body":{"dependencies.html":{}}}],["3.850.0",{"_index":1674,"title":{},"body":{"dependencies.html":{}}}],["3/10",{"_index":1665,"title":{},"body":{"coverage.html":{}}}],["30",{"_index":1335,"title":{},"body":{"injectables/S3Service.html":{},"coverage.html":{}}}],["33",{"_index":1656,"title":{},"body":{"coverage.html":{}}}],["4",{"_index":1808,"title":{},"body":{"overview.html":{}}}],["4.0.0",{"_index":1686,"title":{},"body":{"dependencies.html":{}}}],["4.0.1",{"_index":1738,"title":{},"body":{"dependencies.html":{}}}],["4.0.4",{"_index":1708,"title":{},"body":{"dependencies.html":{}}}],["4.1.2",{"_index":1715,"title":{},"body":{"dependencies.html":{}}}],["404",{"_index":1159,"title":{},"body":{"injectables/MorganMiddleware.html":{}}}],["5",{"_index":392,"title":{},"body":{"modules/AuthModule.html":{},"modules/PaymentModule.html":{},"injectables/UserService.html":{}}}],["5.0.0",{"_index":1729,"title":{},"body":{"dependencies.html":{}}}],["5.1.1",{"_index":1711,"title":{},"body":{"dependencies.html":{}}}],["5.1.2",{"_index":1709,"title":{},"body":{"dependencies.html":{}}}],["5.56.8",{"_index":1714,"title":{},"body":{"dependencies.html":{}}}],["500",{"_index":651,"title":{},"body":{"classes/CatchAllFilter.html":{},"entities/User.html":{}}}],["6.1.1",{"_index":1683,"title":{},"body":{"dependencies.html":{}}}],["6.12.0",{"_index":1677,"title":{},"body":{"dependencies.html":{}}}],["6.4.16",{"_index":1682,"title":{},"body":{"dependencies.html":{}}}],["60",{"_index":1336,"title":{},"body":{"injectables/S3Service.html":{},"injectables/UserService.html":{}}}],["7.0.5",{"_index":1736,"title":{},"body":{"dependencies.html":{}}}],["7.3.1",{"_index":1693,"title":{},"body":{"dependencies.html":{}}}],["7.8.1",{"_index":1744,"title":{},"body":{"dependencies.html":{}}}],["8",{"_index":1805,"title":{},"body":{"overview.html":{}}}],["8.1.0",{"_index":1723,"title":{},"body":{"dependencies.html":{}}}],["9.37.0",{"_index":1720,"title":{},"body":{"dependencies.html":{}}}],["_(ツ)_",{"_index":635,"title":{},"body":{"classes/CatchAllFilter.html":{}}}],["abstract",{"_index":574,"title":{},"body":{"classes/BaseEntity.html":{}}}],["access",{"_index":304,"title":{},"body":{"controllers/AuthController.html":{},"classes/AuthResponseDto.html":{},"guards/RoleGuard.html":{}}}],["access_token",{"_index":336,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["accesskeyid",{"_index":1366,"title":{},"body":{"modules/StorageModule.html":{}}}],["accesstoken",{"_index":342,"title":{},"body":{"controllers/AuthController.html":{},"classes/AuthResponseDto.html":{}}}],["account",{"_index":1208,"title":{},"body":{"modules/PaymentModule.html":{}}}],["accounttest",{"_index":1211,"title":{},"body":{"modules/PaymentModule.html":{}}}],["active",{"_index":511,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["adapter",{"_index":137,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/EmailModule.html":{},"modules/PaymentModule.html":{}}}],["add",{"_index":1130,"title":{},"body":{"classes/Migration20250730220636.html":{}}}],["addr",{"_index":1148,"title":{},"body":{"injectables/MorganMiddleware.html":{}}}],["address",{"_index":793,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/Migration20250730220636.html":{},"entities/User.html":{},"classes/UserFactory.html":{}}}],["admin",{"_index":1094,"title":{},"body":{"classes/Migration20250730220636.html":{},"miscellaneous/enumerations.html":{}}}],["africa/lagos",{"_index":1763,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["agent",{"_index":1154,"title":{},"body":{"injectables/MorganMiddleware.html":{}}}],["alias",{"_index":1640,"title":{},"body":{"coverage.html":{}}}],["aliases",{"_index":1814,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["allowed",{"_index":1591,"title":{},"body":{"injectables/UserService.html":{}}}],["already",{"_index":1564,"title":{},"body":{"injectables/UserService.html":{}}}],["alter",{"_index":1129,"title":{},"body":{"classes/Migration20250730220636.html":{}}}],["any).__helper?.__originalentitydata",{"_index":1619,"title":{},"body":{"injectables/UserSubscriber.html":{}}}],["api_key",{"_index":704,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["api_secret",{"_index":706,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["apibody",{"_index":315,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{}}}],["apikey",{"_index":1204,"title":{},"body":{"modules/PaymentModule.html":{}}}],["apioperation",{"_index":43,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/UserController.html":{}}}],["apiproperty",{"_index":413,"title":{},"body":{"classes/AuthResponseDto.html":{},"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserResponseDto.html":{},"classes/ForgotPasswordDto.html":{},"classes/GetProfileResponseDto.html":{},"classes/LoginDto.html":{},"classes/RefreshTokenDto.html":{},"classes/ResetPasswordDto.html":{}}}],["apiproperty({description",{"_index":404,"title":{},"body":{"classes/AuthResponseDto.html":{},"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserResponseDto.html":{},"classes/GetProfileResponseDto.html":{},"classes/LoginDto.html":{},"classes/RefreshTokenDto.html":{},"classes/ResetPasswordDto.html":{}}}],["apiproperty({example",{"_index":916,"title":{},"body":{"classes/ForgotPasswordDto.html":{}}}],["apipropertyoptional",{"_index":838,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["apipropertyoptional({description",{"_index":827,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["apiresponse",{"_index":1,"title":{"interfaces/ApiResponse.html":{}},"body":{"interfaces/ApiResponse.html":{},"controllers/AuthController.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["apitags",{"_index":44,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/UserController.html":{}}}],["apitags('app",{"_index":46,"title":{},"body":{"controllers/AppController.html":{}}}],["apitags('auth",{"_index":331,"title":{},"body":{"controllers/AuthController.html":{}}}],["apitags('users",{"_index":1485,"title":{},"body":{"controllers/UserController.html":{}}}],["app",{"_index":1778,"title":{},"body":{"miscellaneous/functions.html":{}}}],["app.controller",{"_index":84,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":85,"title":{},"body":{"modules/AppModule.html":{}}}],["app_guard",{"_index":365,"title":{},"body":{"modules/AuthModule.html":{}}}],["app_name",{"_index":1631,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["appcontroller",{"_index":25,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["apply",{"_index":148,"title":{},"body":{"modules/AppModule.html":{}}}],["applyrawbodyonlyto",{"_index":103,"title":{},"body":{"modules/AppModule.html":{}}}],["applyrawbodyonlyto(consumer",{"_index":143,"title":{},"body":{"modules/AppModule.html":{}}}],["appmodule",{"_index":52,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appredis",{"_index":179,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["appredismodule",{"_index":158,"title":{"modules/AppRedisModule.html":{}},"body":{"modules/AppRedisModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["appredisservice",{"_index":162,"title":{"injectables/AppRedisService.html":{}},"body":{"modules/AppRedisModule.html":{},"injectables/AppRedisService.html":{},"injectables/AuthService.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["appredisservice.name",{"_index":247,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["appservice",{"_index":65,"title":{"injectables/AppService.html":{}},"body":{"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["args",{"_index":248,"title":{},"body":{"injectables/AppRedisService.html":{},"injectables/UserSubscriber.html":{}}}],["args.entity",{"_index":1613,"title":{},"body":{"injectables/UserSubscriber.html":{}}}],["args.push('ex",{"_index":250,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["args.push('nx",{"_index":249,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["argumentshost",{"_index":591,"title":{},"body":{"classes/CatchAllFilter.html":{}}}],["array",{"_index":207,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["asecure",{"_index":1269,"title":{},"body":{"classes/ResetPasswordDto.html":{}}}],["async",{"_index":169,"title":{},"body":{"modules/AppRedisModule.html":{},"injectables/AppRedisService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CloudinaryService.html":{},"injectables/CreateUserCommand.html":{},"classes/DatabaseSeeder.html":{},"classes/EmailService.html":{},"injectables/HttpClientService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/Migration20250730220636.html":{},"classes/PasswordResetEmailConsumer.html":{},"injectables/S3Service.html":{},"injectables/SchemaService.html":{},"injectables/StripeService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"injectables/UserSubscriber.html":{},"dependencies.html":{}}}],["asynclocalstoragecontextmanager",{"_index":1828,"title":{},"body":{"miscellaneous/variables.html":{}}}],["attempts",{"_index":391,"title":{},"body":{"modules/AuthModule.html":{},"modules/PaymentModule.html":{}}}],["auth",{"_index":102,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/EmailModule.html":{},"dependencies.html":{}}}],["auth.controller",{"_index":367,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.guard",{"_index":318,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["auth.guard.ts",{"_index":981,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/LocalAuthGuard.html":{},"coverage.html":{}}}],["auth.guard.ts:11",{"_index":987,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["auth.guard.ts:16",{"_index":990,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["auth.guard.ts:27",{"_index":992,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["auth.jwt.refreshexpiresin",{"_index":470,"title":{},"body":{"injectables/AuthService.html":{}}}],["auth.jwt.refreshsecret",{"_index":472,"title":{},"body":{"injectables/AuthService.html":{}}}],["auth.service",{"_index":320,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/LocalStrategy.html":{}}}],["auth/decorators/public.decorator",{"_index":1480,"title":{},"body":{"controllers/UserController.html":{}}}],["authcontroller",{"_index":279,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authenticated",{"_index":405,"title":{},"body":{"classes/AuthResponseDto.html":{}}}],["authguard",{"_index":994,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/LocalAuthGuard.html":{}}}],["authguard('jwt",{"_index":982,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authguard('local",{"_index":1050,"title":{},"body":{"injectables/LocalAuthGuard.html":{}}}],["authmodule",{"_index":63,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":1812,"title":{},"body":{"properties.html":{}}}],["authresponsedto",{"_index":400,"title":{"classes/AuthResponseDto.html":{}},"body":{"classes/AuthResponseDto.html":{},"coverage.html":{}}}],["authservice",{"_index":319,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["authtokens",{"_index":455,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["auto",{"_index":720,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["available",{"_index":1012,"title":{},"body":{"injectables/JwtStrategy.html":{},"modules.html":{}}}],["avatar",{"_index":1082,"title":{},"body":{"classes/Migration20250730220636.html":{},"entities/User.html":{},"classes/UserFactory.html":{},"miscellaneous/enumerations.html":{}}}],["avatars",{"_index":1765,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["await",{"_index":252,"title":{},"body":{"injectables/AppRedisService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CreateUserCommand.html":{},"classes/EmailService.html":{},"injectables/HttpClientService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/PasswordResetEmailConsumer.html":{},"injectables/S3Service.html":{},"injectables/SchemaService.html":{},"injectables/StripeService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"injectables/UserSubscriber.html":{}}}],["aws",{"_index":1308,"title":{},"body":{"injectables/S3Service.html":{},"dependencies.html":{}}}],["aws.s3.secretaccesskey",{"_index":1370,"title":{},"body":{"modules/StorageModule.html":{}}}],["axios",{"_index":608,"title":{},"body":{"classes/CatchAllFilter.html":{},"injectables/HttpClientService.html":{},"dependencies.html":{}}}],["axioserror",{"_index":607,"title":{},"body":{"classes/CatchAllFilter.html":{},"miscellaneous/typealiases.html":{}}}],["axiosrequestconfig",{"_index":941,"title":{},"body":{"injectables/HttpClientService.html":{}}}],["b3",{"_index":1705,"title":{},"body":{"dependencies.html":{}}}],["b3propagator",{"_index":1835,"title":{},"body":{"miscellaneous/variables.html":{}}}],["backoff",{"_index":393,"title":{},"body":{"modules/AuthModule.html":{},"modules/PaymentModule.html":{}}}],["badrequestexception",{"_index":446,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["badrequestexception('malformed",{"_index":509,"title":{},"body":{"injectables/AuthService.html":{}}}],["badrequestexception('passwords",{"_index":530,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["badrequestexception('refresh",{"_index":499,"title":{},"body":{"injectables/AuthService.html":{}}}],["baseentity",{"_index":541,"title":{"classes/BaseEntity.html":{}},"body":{"classes/BaseEntity.html":{},"entities/User.html":{},"coverage.html":{}}}],["basic",{"_index":101,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["basicauth",{"_index":99,"title":{},"body":{"modules/AppModule.html":{}}}],["bcrypt",{"_index":445,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserSubscriber.html":{},"dependencies.html":{}}}],["bcrypt.compare(pass",{"_index":479,"title":{},"body":{"injectables/AuthService.html":{}}}],["bcrypt.gensalt(this.saltrounds",{"_index":538,"title":{},"body":{"injectables/AuthService.html":{}}}],["bcrypt.hash(newpassword",{"_index":540,"title":{},"body":{"injectables/AuthService.html":{}}}],["bcrypt.hash(user.password",{"_index":1622,"title":{},"body":{"injectables/UserSubscriber.html":{}}}],["beforecreate",{"_index":1448,"title":{},"body":{"entities/User.html":{},"injectables/UserSubscriber.html":{}}}],["beforecreate(args",{"_index":1598,"title":{},"body":{"injectables/UserSubscriber.html":{}}}],["beforeupdate",{"_index":1449,"title":{},"body":{"entities/User.html":{},"injectables/UserSubscriber.html":{}}}],["beforeupdate(args",{"_index":1601,"title":{},"body":{"injectables/UserSubscriber.html":{}}}],["blacklisted",{"_index":500,"title":{},"body":{"injectables/AuthService.html":{}}}],["board/api",{"_index":1676,"title":{},"body":{"dependencies.html":{}}}],["board/api/bullmqadapter",{"_index":381,"title":{},"body":{"modules/AuthModule.html":{},"modules/PaymentModule.html":{}}}],["board/express",{"_index":112,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["board/nestjs",{"_index":110,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PaymentModule.html":{},"dependencies.html":{}}}],["body",{"_index":294,"title":{},"body":{"controllers/AuthController.html":{},"classes/CatchAllFilter.html":{},"injectables/S3Service.html":{},"controllers/UserController.html":{}}}],["boilerplate",{"_index":35,"title":{},"body":{"controllers/AppController.html":{},"miscellaneous/variables.html":{}}}],["boolean",{"_index":219,"title":{},"body":{"injectables/AppRedisService.html":{},"classes/CreateUserDto.html":{},"classes/Migration20250730220636.html":{},"guards/RoleGuard.html":{},"entities/User.html":{},"injectables/UserSubscriber.html":{}}}],["bootstrap",{"_index":57,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRedisModule.html":{},"modules/AuthModule.html":{},"modules/EmailModule.html":{},"modules/HttpClientModule.html":{},"modules/UserModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["browse",{"_index":1802,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1800,"title":{},"body":{"modules.html":{}}}],["bucket",{"_index":1327,"title":{},"body":{"injectables/S3Service.html":{}}}],["buffer",{"_index":1712,"title":{},"body":{"dependencies.html":{}}}],["bull",{"_index":109,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PaymentModule.html":{},"dependencies.html":{}}}],["bullboardmodule",{"_index":108,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PaymentModule.html":{}}}],["bullboardmodule.forfeature",{"_index":397,"title":{},"body":{"modules/AuthModule.html":{},"modules/PaymentModule.html":{}}}],["bullboardmodule.forroot",{"_index":136,"title":{},"body":{"modules/AppModule.html":{}}}],["bullmodule",{"_index":106,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PaymentModule.html":{}}}],["bullmodule.forrootasync",{"_index":131,"title":{},"body":{"modules/AppModule.html":{}}}],["bullmodule.registerqueue",{"_index":389,"title":{},"body":{"modules/AuthModule.html":{},"modules/PaymentModule.html":{}}}],["bullmq",{"_index":454,"title":{},"body":{"injectables/AuthService.html":{},"classes/PasswordResetEmailConsumer.html":{},"modules/PaymentModule.html":{},"injectables/StripeService.html":{},"dependencies.html":{}}}],["bullmqadapter",{"_index":380,"title":{},"body":{"modules/AuthModule.html":{},"modules/PaymentModule.html":{}}}],["bytes",{"_index":711,"title":{},"body":{"injectables/CloudinaryService.html":{},"injectables/S3Service.html":{}}}],["cache",{"_index":125,"title":{},"body":{"modules/AppModule.html":{}}}],["cached",{"_index":1573,"title":{},"body":{"injectables/UserService.html":{}}}],["cachekey",{"_index":494,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["callhandler",{"_index":1231,"title":{},"body":{"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/SuccessResponseInterceptor.html":{}}}],["canactivate",{"_index":983,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/RoleGuard.html":{}}}],["canactivate(context",{"_index":988,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/RoleGuard.html":{}}}],["catch",{"_index":503,"title":{},"body":{"injectables/AuthService.html":{},"classes/CatchAllFilter.html":{},"injectables/CreateUserCommand.html":{}}}],["catch(exception",{"_index":588,"title":{},"body":{"classes/CatchAllFilter.html":{}}}],["catchallfilter",{"_index":575,"title":{"classes/CatchAllFilter.html":{}},"body":{"classes/CatchAllFilter.html":{},"coverage.html":{}}}],["catchallfilter.name",{"_index":587,"title":{},"body":{"classes/CatchAllFilter.html":{}}}],["category=${filecategory",{"_index":712,"title":{},"body":{"injectables/CloudinaryService.html":{},"injectables/S3Service.html":{}}}],["caught",{"_index":645,"title":{},"body":{"classes/CatchAllFilter.html":{}}}],["chalk",{"_index":770,"title":{},"body":{"injectables/CreateUserCommand.html":{},"dependencies.html":{}}}],["chalk.red.bold",{"_index":788,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["challenge",{"_index":152,"title":{},"body":{"modules/AppModule.html":{}}}],["change",{"_index":1126,"title":{},"body":{"classes/Migration20250730220636.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["change_password",{"_index":1095,"title":{},"body":{"classes/Migration20250730220636.html":{}}}],["changed",{"_index":1501,"title":{},"body":{"controllers/UserController.html":{}}}],["changepassword",{"_index":794,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["changepassword(data",{"_index":1461,"title":{},"body":{"controllers/UserController.html":{}}}],["changepassword(userid",{"_index":1540,"title":{},"body":{"injectables/UserService.html":{}}}],["changepassworddto",{"_index":652,"title":{"classes/ChangePasswordDto.html":{}},"body":{"classes/ChangePasswordDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["characters",{"_index":663,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/ResetPasswordDto.html":{}}}],["check",{"_index":1093,"title":{},"body":{"classes/Migration20250730220636.html":{}}}],["checking",{"_index":267,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["checkout",{"_index":1394,"title":{},"body":{"injectables/StripeService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["city",{"_index":795,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/Migration20250730220636.html":{},"entities/User.html":{},"classes/UserFactory.html":{}}}],["class",{"_index":47,"title":{"classes/AuthResponseDto.html":{},"classes/BaseEntity.html":{},"classes/CatchAllFilter.html":{},"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserResponseDto.html":{},"classes/DatabaseSeeder.html":{},"classes/EmailService.html":{},"classes/ForgotPasswordDto.html":{},"classes/GetProfileResponseDto.html":{},"classes/LoginDto.html":{},"classes/Migration20250730220636.html":{},"classes/PasswordResetEmailConsumer.html":{},"classes/RefreshTokenDto.html":{},"classes/ResetPasswordDto.html":{},"classes/UpdateProfileDto.html":{},"classes/UserFactory.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AppRedisModule.html":{},"injectables/AppRedisService.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/AuthResponseDto.html":{},"injectables/AuthService.html":{},"classes/BaseEntity.html":{},"classes/CatchAllFilter.html":{},"classes/ChangePasswordDto.html":{},"injectables/CloudinaryService.html":{},"injectables/CreateUserCommand.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserResponseDto.html":{},"classes/DatabaseSeeder.html":{},"modules/EmailModule.html":{},"classes/EmailService.html":{},"classes/ForgotPasswordDto.html":{},"classes/GetProfileResponseDto.html":{},"modules/HttpClientModule.html":{},"injectables/HttpClientService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"classes/Migration20250730220636.html":{},"injectables/MorganMiddleware.html":{},"classes/PasswordResetEmailConsumer.html":{},"modules/PaymentModule.html":{},"classes/RefreshTokenDto.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/RequestContextMiddleware.html":{},"classes/ResetPasswordDto.html":{},"guards/RoleGuard.html":{},"injectables/S3Service.html":{},"injectables/SchemaService.html":{},"modules/StorageModule.html":{},"injectables/StripeService.html":{},"injectables/SuccessResponseInterceptor.html":{},"classes/UpdateProfileDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"classes/UserFactory.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"injectables/UserSubscriber.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":401,"title":{},"body":{"classes/AuthResponseDto.html":{},"classes/BaseEntity.html":{},"classes/CatchAllFilter.html":{},"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserResponseDto.html":{},"classes/DatabaseSeeder.html":{},"classes/EmailService.html":{},"classes/ForgotPasswordDto.html":{},"classes/GetProfileResponseDto.html":{},"classes/LoginDto.html":{},"classes/Migration20250730220636.html":{},"classes/PasswordResetEmailConsumer.html":{},"classes/RefreshTokenDto.html":{},"classes/ResetPasswordDto.html":{},"classes/UpdateProfileDto.html":{},"classes/UserFactory.html":{},"overview.html":{}}}],["cleaned",{"_index":848,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["client.module.ts",{"_index":928,"title":{},"body":{"modules/HttpClientModule.html":{}}}],["client.service",{"_index":932,"title":{},"body":{"modules/HttpClientModule.html":{}}}],["client.service.ts",{"_index":933,"title":{},"body":{"injectables/HttpClientService.html":{},"coverage.html":{}}}],["client.service.ts:10",{"_index":945,"title":{},"body":{"injectables/HttpClientService.html":{}}}],["client.service.ts:11",{"_index":939,"title":{},"body":{"injectables/HttpClientService.html":{}}}],["client.service.ts:21",{"_index":942,"title":{},"body":{"injectables/HttpClientService.html":{}}}],["client/http",{"_index":927,"title":{},"body":{"modules/HttpClientModule.html":{},"injectables/HttpClientService.html":{},"coverage.html":{}}}],["cloud_name",{"_index":702,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["cloudinary",{"_index":690,"title":{},"body":{"injectables/CloudinaryService.html":{},"interfaces/IStrorageService.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{}}}],["cloudinary.config",{"_index":701,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["cloudinary.service",{"_index":1359,"title":{},"body":{"modules/StorageModule.html":{}}}],["cloudinary.uploader.upload_stream",{"_index":716,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["cloudinaryservice",{"_index":679,"title":{"injectables/CloudinaryService.html":{}},"body":{"injectables/CloudinaryService.html":{},"modules/StorageModule.html":{},"coverage.html":{}}}],["cloudinaryservice(configservice",{"_index":1374,"title":{},"body":{"modules/StorageModule.html":{}}}],["cloudinaryservice.name",{"_index":713,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["cluster_appmodule",{"_index":60,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":61,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":62,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appredismodule",{"_index":159,"title":{},"body":{"modules/AppRedisModule.html":{},"overview.html":{}}}],["cluster_appredismodule_exports",{"_index":161,"title":{},"body":{"modules/AppRedisModule.html":{},"overview.html":{}}}],["cluster_appredismodule_providers",{"_index":160,"title":{},"body":{"modules/AppRedisModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":358,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":361,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":359,"title":{},"body":{"modules/AuthModule.html":{}}}],["cluster_authmodule_providers",{"_index":360,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_emailmodule",{"_index":874,"title":{},"body":{"modules/EmailModule.html":{},"overview.html":{}}}],["cluster_emailmodule_exports",{"_index":875,"title":{},"body":{"modules/EmailModule.html":{},"overview.html":{}}}],["cluster_httpclientmodule",{"_index":922,"title":{},"body":{"modules/HttpClientModule.html":{},"overview.html":{}}}],["cluster_httpclientmodule_exports",{"_index":924,"title":{},"body":{"modules/HttpClientModule.html":{},"overview.html":{}}}],["cluster_httpclientmodule_providers",{"_index":923,"title":{},"body":{"modules/HttpClientModule.html":{},"overview.html":{}}}],["cluster_usermodule",{"_index":1524,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_exports",{"_index":1526,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_imports",{"_index":1525,"title":{},"body":{"modules/UserModule.html":{}}}],["cluster_usermodule_providers",{"_index":1527,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["code",{"_index":811,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/Migration20250730220636.html":{},"entities/User.html":{}}}],["column",{"_index":1101,"title":{},"body":{"classes/Migration20250730220636.html":{}}}],["command",{"_index":766,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["commander",{"_index":767,"title":{},"body":{"injectables/CreateUserCommand.html":{},"dependencies.html":{}}}],["commandrunner",{"_index":732,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["commands/create",{"_index":113,"title":{},"body":{"modules/AppModule.html":{}}}],["comment",{"_index":551,"title":{},"body":{"classes/BaseEntity.html":{},"classes/Migration20250730220636.html":{},"entities/User.html":{}}}],["common/constants",{"_index":379,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CreateUserCommand.html":{},"modules/EmailModule.html":{},"classes/PasswordResetEmailConsumer.html":{},"modules/PaymentModule.html":{},"injectables/SchemaService.html":{},"modules/StorageModule.html":{},"injectables/StripeService.html":{}}}],["common/entities/base.entity",{"_index":1450,"title":{},"body":{"entities/User.html":{}}}],["common/enums",{"_index":698,"title":{},"body":{"injectables/CloudinaryService.html":{},"injectables/CreateUserCommand.html":{},"classes/CreateUserDto.html":{},"interfaces/IStrorageService.html":{},"classes/PasswordResetEmailConsumer.html":{},"modules/PaymentModule.html":{},"injectables/S3Service.html":{},"modules/StorageModule.html":{},"entities/User.html":{},"classes/UserFactory.html":{}}}],["common/interfaces/api",{"_index":329,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{}}}],["common/middlewares/morgan.middleware",{"_index":94,"title":{},"body":{"modules/AppModule.html":{}}}],["common/middlewares/request",{"_index":116,"title":{},"body":{"modules/AppModule.html":{}}}],["common/utils/user.util",{"_index":1452,"title":{},"body":{"entities/User.html":{},"injectables/UserSubscriber.html":{}}}],["compare",{"_index":1021,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["compositepropagator",{"_index":1830,"title":{},"body":{"miscellaneous/variables.html":{}}}],["concurrency",{"_index":1178,"title":{},"body":{"classes/PasswordResetEmailConsumer.html":{}}}],["cond",{"_index":573,"title":{},"body":{"classes/BaseEntity.html":{}}}],["config",{"_index":172,"title":{},"body":{"modules/AppRedisModule.html":{},"modules/StorageModule.html":{}}}],["config/index",{"_index":87,"title":{},"body":{"modules/AppModule.html":{}}}],["config/mikro",{"_index":119,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule",{"_index":88,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule.forroot",{"_index":121,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":89,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRedisModule.html":{},"injectables/AppRedisService.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CloudinaryService.html":{},"modules/EmailModule.html":{},"injectables/JwtStrategy.html":{},"modules/PaymentModule.html":{},"injectables/S3Service.html":{},"injectables/SchemaService.html":{},"modules/StorageModule.html":{},"injectables/StripeService.html":{},"injectables/UserSubscriber.html":{}}}],["configservice.get",{"_index":1369,"title":{},"body":{"modules/StorageModule.html":{}}}],["configservice.get('auth.jwt.expiresin",{"_index":388,"title":{},"body":{"modules/AuthModule.html":{}}}],["configservice.get('auth.jwt.secret",{"_index":385,"title":{},"body":{"modules/AuthModule.html":{}}}],["configservice.get('aws.s3.accesskeyid",{"_index":1367,"title":{},"body":{"modules/StorageModule.html":{}}}],["configservice.get('aws.s3.region",{"_index":1371,"title":{},"body":{"modules/StorageModule.html":{}}}],["configservice.getorthrow",{"_index":1209,"title":{},"body":{"modules/PaymentModule.html":{}}}],["configservice.getorthrow('auth.jwt.secret",{"_index":1047,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["configservice.getorthrow('driver.payment",{"_index":1218,"title":{},"body":{"modules/PaymentModule.html":{}}}],["configservice.getorthrow('driver.storage",{"_index":1372,"title":{},"body":{"modules/StorageModule.html":{}}}],["configservice.getorthrow('redis.namespace",{"_index":174,"title":{},"body":{"modules/AppRedisModule.html":{}}}],["configservice.getorthrow('redis.url",{"_index":135,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRedisModule.html":{}}}],["configservice.getorthrow('smtp.auth.pass",{"_index":893,"title":{},"body":{"modules/EmailModule.html":{}}}],["configservice.getorthrow('smtp.auth.user",{"_index":892,"title":{},"body":{"modules/EmailModule.html":{}}}],["configservice.getorthrow('smtp.host",{"_index":887,"title":{},"body":{"modules/EmailModule.html":{}}}],["configservice.getorthrow('smtp.port",{"_index":889,"title":{},"body":{"modules/EmailModule.html":{}}}],["configservice.getorthrow('smtp.secure",{"_index":891,"title":{},"body":{"modules/EmailModule.html":{}}}],["configservice.getorthrow('stripe.secretkey",{"_index":1205,"title":{},"body":{"modules/PaymentModule.html":{}}}],["configuration",{"_index":86,"title":{},"body":{"modules/AppModule.html":{}}}],["configure",{"_index":73,"title":{},"body":{"modules/AppModule.html":{}}}],["configure(consumer",{"_index":74,"title":{},"body":{"modules/AppModule.html":{}}}],["confirmation",{"_index":655,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/ResetPasswordDto.html":{}}}],["confirmpassword",{"_index":356,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ChangePasswordDto.html":{},"classes/ResetPasswordDto.html":{},"injectables/UserService.html":{}}}],["conflictexception",{"_index":1554,"title":{},"body":{"injectables/UserService.html":{}}}],["conflictexception('user",{"_index":1563,"title":{},"body":{"injectables/UserService.html":{}}}],["connect",{"_index":1761,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["connection",{"_index":133,"title":{},"body":{"modules/AppModule.html":{}}}],["console.error",{"_index":787,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["console.log('prometheus",{"_index":1838,"title":{},"body":{"miscellaneous/variables.html":{}}}],["console.log(chalk.green.bold",{"_index":785,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["const",{"_index":239,"title":{},"body":{"injectables/AppRedisService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CatchAllFilter.html":{},"injectables/CloudinaryService.html":{},"injectables/CreateUserCommand.html":{},"classes/CreateUserDto.html":{},"injectables/HttpClientService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/MorganMiddleware.html":{},"classes/PasswordResetEmailConsumer.html":{},"modules/PaymentModule.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"guards/RoleGuard.html":{},"injectables/S3Service.html":{},"injectables/SchemaService.html":{},"modules/StorageModule.html":{},"injectables/StripeService.html":{},"injectables/SuccessResponseInterceptor.html":{},"classes/UpdateProfileDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"injectables/UserSubscriber.html":{}}}],["constraint",{"_index":1098,"title":{},"body":{"classes/Migration20250730220636.html":{}}}],["constructor",{"_index":186,"title":{},"body":{"injectables/AppRedisService.html":{},"injectables/AuthService.html":{},"classes/CatchAllFilter.html":{},"injectables/CloudinaryService.html":{},"injectables/CreateUserCommand.html":{},"classes/EmailService.html":{},"injectables/HttpClientService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/MorganMiddleware.html":{},"classes/PasswordResetEmailConsumer.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/RequestContextMiddleware.html":{},"guards/RoleGuard.html":{},"injectables/S3Service.html":{},"injectables/SchemaService.html":{},"injectables/StripeService.html":{},"injectables/UserService.html":{},"injectables/UserSubscriber.html":{}}}],["constructor(@inject(logger",{"_index":1144,"title":{},"body":{"injectables/MorganMiddleware.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/SuccessResponseInterceptor.html":{}}}],["constructor(appredisservice",{"_index":422,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["constructor(authservice",{"_index":1052,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["constructor(configservice",{"_index":682,"title":{},"body":{"injectables/CloudinaryService.html":{},"injectables/JwtStrategy.html":{},"injectables/S3Service.html":{},"injectables/StripeService.html":{}}}],["constructor(em",{"_index":739,"title":{},"body":{"injectables/CreateUserCommand.html":{},"injectables/UserSubscriber.html":{}}}],["constructor(emailservice",{"_index":1166,"title":{},"body":{"classes/PasswordResetEmailConsumer.html":{}}}],["constructor(httpadapterhost",{"_index":584,"title":{},"body":{"classes/CatchAllFilter.html":{}}}],["constructor(httpservice",{"_index":937,"title":{},"body":{"injectables/HttpClientService.html":{}}}],["constructor(loggerservice",{"_index":187,"title":{},"body":{"injectables/AppRedisService.html":{},"injectables/MorganMiddleware.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{}}}],["constructor(mailerservice",{"_index":903,"title":{},"body":{"classes/EmailService.html":{}}}],["constructor(orm",{"_index":1260,"title":{},"body":{"injectables/RequestContextMiddleware.html":{},"injectables/SchemaService.html":{}}}],["constructor(private",{"_index":141,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/JwtAuthGuard.html":{},"injectables/RequestContextMiddleware.html":{},"guards/RoleGuard.html":{},"controllers/UserController.html":{}}}],["constructor(reflector",{"_index":985,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/RoleGuard.html":{}}}],["consumer",{"_index":79,"title":{},"body":{"modules/AppModule.html":{}}}],["consumer.apply(morganmiddleware).forroutes",{"_index":156,"title":{},"body":{"modules/AppModule.html":{}}}],["consumer.apply(requestcontextmiddleware).forroutes",{"_index":157,"title":{},"body":{"modules/AppModule.html":{}}}],["contenttype",{"_index":1329,"title":{},"body":{"injectables/S3Service.html":{}}}],["context",{"_index":908,"title":{},"body":{"classes/EmailService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"guards/RoleGuard.html":{},"injectables/SuccessResponseInterceptor.html":{}}}],["context.getclass",{"_index":999,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["context.gethandler",{"_index":998,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/RoleGuard.html":{}}}],["context.gettype",{"_index":1241,"title":{},"body":{"injectables/RequestBodyAndResponseInterceptor.html":{},"guards/RoleGuard.html":{},"injectables/SuccessResponseInterceptor.html":{}}}],["context.middleware",{"_index":117,"title":{},"body":{"modules/AppModule.html":{}}}],["context.middleware.ts",{"_index":1259,"title":{},"body":{"injectables/RequestContextMiddleware.html":{},"coverage.html":{}}}],["context.middleware.ts:6",{"_index":1262,"title":{},"body":{"injectables/RequestContextMiddleware.html":{}}}],["context.middleware.ts:9",{"_index":1265,"title":{},"body":{"injectables/RequestContextMiddleware.html":{}}}],["context.switchtohttp().getrequest",{"_index":1255,"title":{},"body":{"injectables/RequestBodyAndResponseInterceptor.html":{},"guards/RoleGuard.html":{},"injectables/SuccessResponseInterceptor.html":{}}}],["context.switchtohttp().getresponse",{"_index":1246,"title":{},"body":{"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/SuccessResponseInterceptor.html":{}}}],["contextmanager",{"_index":1827,"title":{},"body":{"miscellaneous/variables.html":{}}}],["contexttype",{"_index":1240,"title":{},"body":{"injectables/RequestBodyAndResponseInterceptor.html":{},"guards/RoleGuard.html":{},"injectables/SuccessResponseInterceptor.html":{}}}],["controller",{"_index":24,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/UserController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/JwtStrategy.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":332,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('users",{"_index":1486,"title":{},"body":{"controllers/UserController.html":{}}}],["controllers",{"_index":26,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"modules/EmailModule.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["country",{"_index":796,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/Migration20250730220636.html":{},"entities/User.html":{},"classes/UserFactory.html":{}}}],["country_code",{"_index":1090,"title":{},"body":{"classes/Migration20250730220636.html":{}}}],["countrycode",{"_index":797,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateProfileDto.html":{},"entities/User.html":{},"classes/UserFactory.html":{}}}],["coverage",{"_index":1623,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":774,"title":{},"body":{"injectables/CreateUserCommand.html":{},"classes/Migration20250730220636.html":{},"classes/UpdateProfileDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["create(@body",{"_index":1488,"title":{},"body":{"controllers/UserController.html":{}}}],["create(user",{"_index":1464,"title":{},"body":{"controllers/UserController.html":{}}}],["create(userdata",{"_index":1542,"title":{},"body":{"injectables/UserService.html":{}}}],["create:user",{"_index":773,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["createcheckoutsession",{"_index":959,"title":{},"body":{"interfaces/IPaymentService.html":{},"injectables/StripeService.html":{}}}],["createcheckoutsession(params",{"_index":961,"title":{},"body":{"interfaces/IPaymentService.html":{},"injectables/StripeService.html":{}}}],["created",{"_index":786,"title":{},"body":{"injectables/CreateUserCommand.html":{},"classes/CreateUserResponseDto.html":{},"classes/GetProfileResponseDto.html":{},"injectables/StripeService.html":{},"controllers/UserController.html":{}}}],["created_at",{"_index":1079,"title":{},"body":{"classes/Migration20250730220636.html":{}}}],["createdat",{"_index":543,"title":{},"body":{"classes/BaseEntity.html":{}}}],["createpaymentintent",{"_index":960,"title":{},"body":{"interfaces/IPaymentService.html":{},"injectables/StripeService.html":{}}}],["createpaymentintent(params",{"_index":966,"title":{},"body":{"interfaces/IPaymentService.html":{},"injectables/StripeService.html":{}}}],["createpresignedurlwithoutclient",{"_index":971,"title":{},"body":{"interfaces/IStrorageService.html":{},"injectables/S3Service.html":{}}}],["createpresignedurlwithoutclient(key",{"_index":972,"title":{},"body":{"interfaces/IStrorageService.html":{},"injectables/S3Service.html":{}}}],["createusercommand",{"_index":66,"title":{"injectables/CreateUserCommand.html":{}},"body":{"modules/AppModule.html":{},"injectables/CreateUserCommand.html":{},"coverage.html":{},"overview.html":{}}}],["createuserdto",{"_index":790,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/CreateUserDto.html":{},"classes/UpdateProfileDto.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["createuserresponsedto",{"_index":855,"title":{"classes/CreateUserResponseDto.html":{}},"body":{"classes/CreateUserResponseDto.html":{},"classes/GetProfileResponseDto.html":{},"coverage.html":{}}}],["createwinstonlogger",{"_index":1651,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["creating",{"_index":1393,"title":{},"body":{"injectables/StripeService.html":{}}}],["creation",{"_index":553,"title":{},"body":{"classes/BaseEntity.html":{},"classes/Migration20250730220636.html":{}}}],["credentials",{"_index":1063,"title":{},"body":{"injectables/LocalStrategy.html":{},"injectables/S3Service.html":{},"modules/StorageModule.html":{}}}],["ctx",{"_index":614,"title":{},"body":{"classes/CatchAllFilter.html":{}}}],["ctx.getrequest",{"_index":616,"title":{},"body":{"classes/CatchAllFilter.html":{}}}],["ctx.getresponse",{"_index":618,"title":{},"body":{"classes/CatchAllFilter.html":{}}}],["current_timestamp",{"_index":550,"title":{},"body":{"classes/BaseEntity.html":{},"classes/Migration20250730220636.html":{}}}],["currently",{"_index":1034,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["customalphabet",{"_index":771,"title":{},"body":{"injectables/CreateUserCommand.html":{},"injectables/S3Service.html":{}}}],["customalphabet(hexadecimallowercase",{"_index":1298,"title":{},"body":{"injectables/S3Service.html":{}}}],["customalphabet(password_character_set",{"_index":765,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["data",{"_index":11,"title":{},"body":{"interfaces/ApiResponse.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/CloudinaryService.html":{},"classes/CreateUserResponseDto.html":{},"classes/GetProfileResponseDto.html":{},"injectables/HttpClientService.html":{},"interfaces/IStrorageService.html":{},"classes/PasswordResetEmailConsumer.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/S3Service.html":{},"injectables/StripeService.html":{},"injectables/SuccessResponseInterceptor.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["data.id",{"_index":1586,"title":{},"body":{"injectables/UserService.html":{}}}],["data.object",{"_index":1404,"title":{},"body":{"injectables/StripeService.html":{}}}],["data?.email",{"_index":1182,"title":{},"body":{"classes/PasswordResetEmailConsumer.html":{}}}],["data?.firstname",{"_index":1187,"title":{},"body":{"classes/PasswordResetEmailConsumer.html":{}}}],["data?.reseturl",{"_index":1186,"title":{},"body":{"classes/PasswordResetEmailConsumer.html":{}}}],["database",{"_index":1352,"title":{},"body":{"injectables/SchemaService.html":{}}}],["databaseseeder",{"_index":864,"title":{"classes/DatabaseSeeder.html":{}},"body":{"classes/DatabaseSeeder.html":{},"coverage.html":{}}}],["date",{"_index":546,"title":{},"body":{"classes/BaseEntity.html":{},"entities/User.html":{}}}],["date().toisostring",{"_index":643,"title":{},"body":{"classes/CatchAllFilter.html":{}}}],["dayjs",{"_index":1057,"title":{},"body":{"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["dayjs().utc().todate",{"_index":1065,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["dayjs.extend(utc",{"_index":1060,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["dayjs/plugin/utc",{"_index":1059,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["declarations",{"_index":56,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRedisModule.html":{},"modules/AuthModule.html":{},"modules/EmailModule.html":{},"modules/HttpClientModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["decorators",{"_index":30,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/AuthResponseDto.html":{},"classes/BaseEntity.html":{},"classes/ChangePasswordDto.html":{},"injectables/CreateUserCommand.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserResponseDto.html":{},"classes/ForgotPasswordDto.html":{},"classes/GetProfileResponseDto.html":{},"classes/LoginDto.html":{},"modules/PaymentModule.html":{},"classes/RefreshTokenDto.html":{},"classes/ResetPasswordDto.html":{},"guards/RoleGuard.html":{},"injectables/StripeService.html":{},"entities/User.html":{},"controllers/UserController.html":{}}}],["decorators/public.decorator",{"_index":321,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtAuthGuard.html":{}}}],["decrement",{"_index":180,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["decrement(key",{"_index":191,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["default",{"_index":221,"title":{},"body":{"injectables/AppRedisService.html":{},"classes/BaseEntity.html":{},"classes/CatchAllFilter.html":{},"injectables/CreateUserCommand.html":{},"injectables/HttpClientService.html":{},"classes/Migration20250730220636.html":{},"injectables/S3Service.html":{},"entities/User.html":{},"classes/UserFactory.html":{},"miscellaneous/variables.html":{}}}],["defaultjoboptions",{"_index":390,"title":{},"body":{"modules/AuthModule.html":{},"modules/PaymentModule.html":{}}}],["defaultraw",{"_index":549,"title":{},"body":{"classes/BaseEntity.html":{},"entities/User.html":{}}}],["defaults",{"_index":894,"title":{},"body":{"modules/EmailModule.html":{}}}],["defined",{"_index":36,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppRedisService.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthResponseDto.html":{},"injectables/AuthService.html":{},"classes/BaseEntity.html":{},"classes/CatchAllFilter.html":{},"classes/ChangePasswordDto.html":{},"injectables/CloudinaryService.html":{},"injectables/CreateUserCommand.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserResponseDto.html":{},"classes/DatabaseSeeder.html":{},"classes/EmailService.html":{},"classes/ForgotPasswordDto.html":{},"classes/GetProfileResponseDto.html":{},"injectables/HttpClientService.html":{},"interfaces/IPaymentService.html":{},"interfaces/IStrorageService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"classes/Migration20250730220636.html":{},"injectables/MorganMiddleware.html":{},"classes/PasswordResetEmailConsumer.html":{},"modules/PaymentModule.html":{},"classes/RefreshTokenDto.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/RequestContextMiddleware.html":{},"classes/ResetPasswordDto.html":{},"guards/RoleGuard.html":{},"injectables/S3Service.html":{},"injectables/SchemaService.html":{},"modules/StorageModule.html":{},"injectables/StripeService.html":{},"injectables/SuccessResponseInterceptor.html":{},"entities/User.html":{},"controllers/UserController.html":{},"classes/UserFactory.html":{},"injectables/UserService.html":{},"injectables/UserSubscriber.html":{}}}],["definition",{"_index":1505,"title":{},"body":{"classes/UserFactory.html":{}}}],["delay",{"_index":395,"title":{},"body":{"modules/AuthModule.html":{},"modules/PaymentModule.html":{}}}],["delete",{"_index":181,"title":{},"body":{"injectables/AppRedisService.html":{},"classes/BaseEntity.html":{},"classes/Migration20250730220636.html":{},"miscellaneous/enumerations.html":{}}}],["delete(key",{"_index":195,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["deleted",{"_index":201,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["deleted_at",{"_index":1078,"title":{},"body":{"classes/Migration20250730220636.html":{}}}],["deletedat",{"_index":544,"title":{},"body":{"classes/BaseEntity.html":{}}}],["deletemany",{"_index":182,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["deletemany(keys",{"_index":204,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["deleting",{"_index":271,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["dependencies",{"_index":54,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AppRedisModule.html":{},"modules/AuthModule.html":{},"modules/EmailModule.html":{},"modules/HttpClientModule.html":{},"modules/UserModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":197,"title":{},"body":{"injectables/AppRedisService.html":{},"controllers/AuthController.html":{},"classes/AuthResponseDto.html":{},"classes/ChangePasswordDto.html":{},"injectables/CreateUserCommand.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserResponseDto.html":{},"classes/GetProfileResponseDto.html":{},"classes/LoginDto.html":{},"classes/RefreshTokenDto.html":{},"classes/ResetPasswordDto.html":{},"index.html":{},"properties.html":{}}}],["details",{"_index":1029,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["development",{"_index":1788,"title":{},"body":{"index.html":{}}}],["dictionary",{"_index":1303,"title":{},"body":{"injectables/S3Service.html":{},"dependencies.html":{}}}],["dir",{"_index":897,"title":{},"body":{"modules/EmailModule.html":{}}}],["disable",{"_index":482,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["document",{"_index":1023,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["documentation",{"_index":1624,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["doe",{"_index":843,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["doe'})@isstring()@isnotempty",{"_index":818,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["don't",{"_index":1024,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["driver",{"_index":1217,"title":{},"body":{"modules/PaymentModule.html":{},"modules/StorageModule.html":{}}}],["dto",{"_index":325,"title":{},"body":{"controllers/AuthController.html":{}}}],["dto.ts",{"_index":1222,"title":{},"body":{"classes/RefreshTokenDto.html":{},"coverage.html":{}}}],["dto.ts:11",{"_index":1225,"title":{},"body":{"classes/RefreshTokenDto.html":{}}}],["dto/change",{"_index":1482,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["dto/create",{"_index":1481,"title":{},"body":{"controllers/UserController.html":{}}}],["dto/forgot",{"_index":326,"title":{},"body":{"controllers/AuthController.html":{}}}],["dto/login.dto",{"_index":322,"title":{},"body":{"controllers/AuthController.html":{}}}],["dto/refresh",{"_index":323,"title":{},"body":{"controllers/AuthController.html":{}}}],["dto/reset",{"_index":328,"title":{},"body":{"controllers/AuthController.html":{}}}],["dto/update",{"_index":1483,"title":{},"body":{"controllers/UserController.html":{}}}],["during",{"_index":1030,"title":{},"body":{"injectables/JwtStrategy.html":{},"classes/RefreshTokenDto.html":{}}}],["dynamicmodule",{"_index":1194,"title":{},"body":{"modules/PaymentModule.html":{},"modules/StorageModule.html":{}}}],["e",{"_index":745,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["e.g",{"_index":669,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/ResetPasswordDto.html":{}}}],["e2e",{"_index":1797,"title":{},"body":{"index.html":{}}}],["elsewhere",{"_index":1027,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["em",{"_index":742,"title":{},"body":{"injectables/CreateUserCommand.html":{},"classes/DatabaseSeeder.html":{},"injectables/UserSubscriber.html":{}}}],["em.geteventmanager().registersubscriber(this",{"_index":1612,"title":{},"body":{"injectables/UserSubscriber.html":{}}}],["email",{"_index":350,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CreateUserCommand.html":{},"classes/CreateUserDto.html":{},"classes/EmailService.html":{},"classes/ForgotPasswordDto.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"classes/Migration20250730220636.html":{},"classes/PasswordResetEmailConsumer.html":{},"classes/UpdateProfileDto.html":{},"entities/User.html":{},"classes/UserFactory.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["email.service",{"_index":878,"title":{},"body":{"modules/EmailModule.html":{}}}],["email_from_name",{"_index":881,"title":{},"body":{"modules/EmailModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["emailmodule",{"_index":873,"title":{"modules/EmailModule.html":{}},"body":{"modules/EmailModule.html":{},"modules.html":{},"overview.html":{}}}],["emailregex",{"_index":777,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["emailregex.test(email",{"_index":779,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["emailservice",{"_index":876,"title":{"classes/EmailService.html":{}},"body":{"modules/EmailModule.html":{},"classes/EmailService.html":{},"classes/PasswordResetEmailConsumer.html":{},"coverage.html":{},"overview.html":{}}}],["emailsubjectenum",{"_index":1175,"title":{},"body":{"classes/PasswordResetEmailConsumer.html":{},"miscellaneous/enumerations.html":{}}}],["emailsubjectenum.password_reset",{"_index":1184,"title":{},"body":{"classes/PasswordResetEmailConsumer.html":{}}}],["emailtemplateenum",{"_index":1176,"title":{},"body":{"classes/PasswordResetEmailConsumer.html":{},"miscellaneous/enumerations.html":{}}}],["emailtemplateenum.password_reset",{"_index":1185,"title":{},"body":{"classes/PasswordResetEmailConsumer.html":{}}}],["enforcing",{"_index":1017,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["entities",{"_index":1423,"title":{},"body":{"entities/User.html":{},"overview.html":{}}}],["entities/user.entity",{"_index":860,"title":{},"body":{"classes/CreateUserResponseDto.html":{},"classes/GetProfileResponseDto.html":{},"classes/UserFactory.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"injectables/UserSubscriber.html":{}}}],["entity",{"_index":1422,"title":{"entities/User.html":{}},"body":{"entities/User.html":{},"coverage.html":{}}}],["entitydata",{"_index":1551,"title":{},"body":{"injectables/UserService.html":{}}}],["entitymanager",{"_index":740,"title":{},"body":{"injectables/CreateUserCommand.html":{},"classes/DatabaseSeeder.html":{},"injectables/UserSubscriber.html":{}}}],["entityname",{"_index":1604,"title":{},"body":{"injectables/UserSubscriber.html":{}}}],["entityrepository",{"_index":1538,"title":{},"body":{"injectables/UserService.html":{}}}],["enum",{"_index":828,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/User.html":{}}}],["enum({items",{"_index":1445,"title":{},"body":{"entities/User.html":{}}}],["enumerations",{"_index":1751,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["err",{"_index":993,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["error",{"_index":504,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CloudinaryService.html":{},"injectables/CreateUserCommand.html":{},"injectables/JwtAuthGuard.html":{},"miscellaneous/typealiases.html":{}}}],["error('invalid",{"_index":780,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["error(`unsupported",{"_index":1377,"title":{},"body":{"modules/StorageModule.html":{}}}],["error.message",{"_index":506,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CreateUserCommand.html":{}}}],["error.stack",{"_index":723,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["error=${error.message",{"_index":722,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["errorcode",{"_index":641,"title":{},"body":{"classes/CatchAllFilter.html":{},"interfaces/ErrorResponse.html":{}}}],["errorlog",{"_index":171,"title":{},"body":{"modules/AppRedisModule.html":{}}}],["errormessage",{"_index":638,"title":{},"body":{"classes/CatchAllFilter.html":{}}}],["errorobject",{"_index":1001,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["errorresponse",{"_index":610,"title":{"interfaces/ErrorResponse.html":{}},"body":{"classes/CatchAllFilter.html":{},"interfaces/ErrorResponse.html":{},"coverage.html":{}}}],["eslint",{"_index":481,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["eslint/no",{"_index":486,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["event",{"_index":1411,"title":{},"body":{"injectables/StripeService.html":{}}}],["eventargs",{"_index":1599,"title":{},"body":{"injectables/UserSubscriber.html":{}}}],["eventid",{"_index":1407,"title":{},"body":{"injectables/StripeService.html":{}}}],["eventsubscriber",{"_index":1611,"title":{},"body":{"injectables/UserSubscriber.html":{}}}],["evt",{"_index":1388,"title":{},"body":{"injectables/StripeService.html":{}}}],["evt?.id",{"_index":1408,"title":{},"body":{"injectables/StripeService.html":{}}}],["ex",{"_index":259,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["example",{"_index":406,"title":{},"body":{"classes/AuthResponseDto.html":{},"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserResponseDto.html":{},"classes/ForgotPasswordDto.html":{},"classes/GetProfileResponseDto.html":{},"classes/LoginDto.html":{},"classes/RefreshTokenDto.html":{},"classes/ResetPasswordDto.html":{},"index.html":{}}}],["exception",{"_index":593,"title":{},"body":{"classes/CatchAllFilter.html":{}}}],["exception.getresponse",{"_index":622,"title":{},"body":{"classes/CatchAllFilter.html":{}}}],["exception.getstatus",{"_index":647,"title":{},"body":{"classes/CatchAllFilter.html":{}}}],["exception.message",{"_index":624,"title":{},"body":{"classes/CatchAllFilter.html":{}}}],["exception.response?.status",{"_index":649,"title":{},"body":{"classes/CatchAllFilter.html":{}}}],["exceptionfilter",{"_index":577,"title":{},"body":{"classes/CatchAllFilter.html":{}}}],["exceptionresponse",{"_index":621,"title":{},"body":{"classes/CatchAllFilter.html":{}}}],["exceptionresponse?.error",{"_index":630,"title":{},"body":{"classes/CatchAllFilter.html":{}}}],["exceptionresponse?.message",{"_index":623,"title":{},"body":{"classes/CatchAllFilter.html":{}}}],["executioncontext",{"_index":989,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"guards/RoleGuard.html":{},"injectables/SuccessResponseInterceptor.html":{}}}],["exist",{"_index":228,"title":{},"body":{"injectables/AppRedisService.html":{},"classes/CatchAllFilter.html":{}}}],["existence",{"_index":268,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["exists",{"_index":183,"title":{},"body":{"injectables/AppRedisService.html":{},"injectables/UserService.html":{}}}],["exists(key",{"_index":208,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["expiresin",{"_index":387,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/S3Service.html":{}}}],["exponential",{"_index":394,"title":{},"body":{"modules/AuthModule.html":{},"modules/PaymentModule.html":{}}}],["export",{"_index":21,"title":{},"body":{"interfaces/ApiResponse.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AppRedisModule.html":{},"injectables/AppRedisService.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/AuthResponseDto.html":{},"injectables/AuthService.html":{},"classes/BaseEntity.html":{},"classes/CatchAllFilter.html":{},"classes/ChangePasswordDto.html":{},"injectables/CloudinaryService.html":{},"injectables/CreateUserCommand.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserResponseDto.html":{},"classes/DatabaseSeeder.html":{},"modules/EmailModule.html":{},"classes/EmailService.html":{},"interfaces/ErrorResponse.html":{},"classes/ForgotPasswordDto.html":{},"classes/GetProfileResponseDto.html":{},"modules/HttpClientModule.html":{},"injectables/HttpClientService.html":{},"interfaces/IPaymentService.html":{},"interfaces/IStrorageService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"classes/Migration20250730220636.html":{},"injectables/MorganMiddleware.html":{},"classes/PasswordResetEmailConsumer.html":{},"modules/PaymentModule.html":{},"classes/RefreshTokenDto.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/RequestContextMiddleware.html":{},"classes/ResetPasswordDto.html":{},"guards/RoleGuard.html":{},"injectables/S3Service.html":{},"injectables/SchemaService.html":{},"modules/StorageModule.html":{},"injectables/StripeService.html":{},"injectables/SuccessResponseInterceptor.html":{},"classes/UpdateProfileDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"classes/UserFactory.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"injectables/UserSubscriber.html":{}}}],["exporter",{"_index":1839,"title":{},"body":{"miscellaneous/variables.html":{}}}],["exports",{"_index":59,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRedisModule.html":{},"modules/AuthModule.html":{},"modules/EmailModule.html":{},"modules/HttpClientModule.html":{},"modules/PaymentModule.html":{},"modules/StorageModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["express",{"_index":100,"title":{},"body":{"modules/AppModule.html":{},"injectables/RequestContextMiddleware.html":{},"dependencies.html":{}}}],["expressadapter",{"_index":111,"title":{},"body":{"modules/AppModule.html":{}}}],["extends",{"_index":731,"title":{},"body":{"injectables/CreateUserCommand.html":{},"classes/DatabaseSeeder.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/Migration20250730220636.html":{},"classes/PasswordResetEmailConsumer.html":{},"classes/UpdateProfileDto.html":{},"entities/User.html":{},"classes/UserFactory.html":{}}}],["extract",{"_index":1014,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt",{"_index":1039,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":1044,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["eyjhbgcioijiuzi1niisinr5cci6ikpxvcj9",{"_index":407,"title":{},"body":{"classes/AuthResponseDto.html":{},"classes/RefreshTokenDto.html":{},"classes/ResetPasswordDto.html":{}}}],["eyjhbgcioijiuzi1niisinr5cci6ikpxvcj9'})@isstring()@isnotempty",{"_index":1224,"title":{},"body":{"classes/RefreshTokenDto.html":{}}}],["eyjhbgcioijiuzi1niisinr5cci6ikpxvcj9...'})@isstring()@isjwt()@isnotempty",{"_index":1273,"title":{},"body":{"classes/ResetPasswordDto.html":{}}}],["f",{"_index":750,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["factory",{"_index":1503,"title":{},"body":{"classes/UserFactory.html":{}}}],["failed",{"_index":721,"title":{},"body":{"injectables/CloudinaryService.html":{},"injectables/CreateUserCommand.html":{}}}],["failhandler",{"_index":476,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/UserService.html":{}}}],["faker",{"_index":1509,"title":{},"body":{"classes/UserFactory.html":{}}}],["faker.helpers.enumvalue(userroleenum",{"_index":1523,"title":{},"body":{"classes/UserFactory.html":{}}}],["faker.image.avatar",{"_index":1515,"title":{},"body":{"classes/UserFactory.html":{}}}],["faker.internet.email",{"_index":1511,"title":{},"body":{"classes/UserFactory.html":{}}}],["faker.internet.password",{"_index":1514,"title":{},"body":{"classes/UserFactory.html":{}}}],["faker.location.city",{"_index":1517,"title":{},"body":{"classes/UserFactory.html":{}}}],["faker.location.country",{"_index":1520,"title":{},"body":{"classes/UserFactory.html":{}}}],["faker.location.countrycode",{"_index":1521,"title":{},"body":{"classes/UserFactory.html":{}}}],["faker.location.state",{"_index":1519,"title":{},"body":{"classes/UserFactory.html":{}}}],["faker.location.streetaddress",{"_index":1516,"title":{},"body":{"classes/UserFactory.html":{}}}],["faker.location.zipcode",{"_index":1518,"title":{},"body":{"classes/UserFactory.html":{}}}],["faker.person.firstname",{"_index":1512,"title":{},"body":{"classes/UserFactory.html":{}}}],["faker.person.lastname",{"_index":1513,"title":{},"body":{"classes/UserFactory.html":{}}}],["faker.phone.number",{"_index":1522,"title":{},"body":{"classes/UserFactory.html":{}}}],["false",{"_index":226,"title":{},"body":{"injectables/AppRedisService.html":{},"injectables/AuthService.html":{},"injectables/HttpClientService.html":{},"injectables/JwtStrategy.html":{},"classes/Migration20250730220636.html":{},"entities/User.html":{},"injectables/UserService.html":{}}}],["fetched",{"_index":863,"title":{},"body":{"classes/CreateUserResponseDto.html":{},"classes/GetProfileResponseDto.html":{},"controllers/UserController.html":{}}}],["file",{"_index":5,"title":{},"body":{"interfaces/ApiResponse.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AppRedisModule.html":{},"injectables/AppRedisService.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/AuthResponseDto.html":{},"injectables/AuthService.html":{},"classes/BaseEntity.html":{},"classes/CatchAllFilter.html":{},"classes/ChangePasswordDto.html":{},"injectables/CloudinaryService.html":{},"injectables/CreateUserCommand.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserResponseDto.html":{},"classes/DatabaseSeeder.html":{},"modules/EmailModule.html":{},"classes/EmailService.html":{},"interfaces/ErrorResponse.html":{},"classes/ForgotPasswordDto.html":{},"classes/GetProfileResponseDto.html":{},"modules/HttpClientModule.html":{},"injectables/HttpClientService.html":{},"interfaces/IPaymentService.html":{},"interfaces/IStrorageService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"classes/Migration20250730220636.html":{},"injectables/MorganMiddleware.html":{},"classes/PasswordResetEmailConsumer.html":{},"modules/PaymentModule.html":{},"classes/RefreshTokenDto.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/RequestContextMiddleware.html":{},"classes/ResetPasswordDto.html":{},"guards/RoleGuard.html":{},"injectables/S3Service.html":{},"injectables/SchemaService.html":{},"modules/StorageModule.html":{},"injectables/StripeService.html":{},"injectables/SuccessResponseInterceptor.html":{},"classes/UpdateProfileDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"classes/UserFactory.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"injectables/UserSubscriber.html":{},"coverage.html":{}}}],["file.buffer",{"_index":1328,"title":{},"body":{"injectables/S3Service.html":{}}}],["file.mimetype",{"_index":1330,"title":{},"body":{"injectables/S3Service.html":{}}}],["filecategory",{"_index":686,"title":{},"body":{"injectables/CloudinaryService.html":{},"interfaces/IStrorageService.html":{},"injectables/S3Service.html":{}}}],["filecategory}/${this.nanoid()}_${file.originalname",{"_index":1324,"title":{},"body":{"injectables/S3Service.html":{}}}],["filename=\"${file.originalname",{"_index":709,"title":{},"body":{"injectables/CloudinaryService.html":{},"injectables/S3Service.html":{}}}],["filter",{"_index":567,"title":{},"body":{"classes/BaseEntity.html":{}}}],["filterquery",{"_index":1546,"title":{},"body":{"injectables/UserService.html":{}}}],["find",{"_index":629,"title":{},"body":{"classes/CatchAllFilter.html":{}}}],["findone",{"_index":1536,"title":{},"body":{"injectables/UserService.html":{}}}],["findone(query",{"_index":1545,"title":{},"body":{"injectables/UserService.html":{}}}],["findoneorfailoptions",{"_index":1547,"title":{},"body":{"injectables/UserService.html":{}}}],["first",{"_index":751,"title":{},"body":{"injectables/CreateUserCommand.html":{},"classes/CreateUserDto.html":{},"classes/Migration20250730220636.html":{},"entities/User.html":{}}}],["first_name",{"_index":1084,"title":{},"body":{"classes/Migration20250730220636.html":{}}}],["firstname",{"_index":526,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CreateUserCommand.html":{},"classes/CreateUserDto.html":{},"classes/PasswordResetEmailConsumer.html":{},"entities/User.html":{},"classes/UserFactory.html":{}}}],["flags",{"_index":789,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["folder",{"_index":717,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["forbiddenexception",{"_index":606,"title":{},"body":{"classes/CatchAllFilter.html":{},"guards/RoleGuard.html":{},"miscellaneous/typealiases.html":{}}}],["forgotpassword",{"_index":282,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["forgotpassword(body",{"_index":286,"title":{},"body":{"controllers/AuthController.html":{}}}],["forgotpassword(email",{"_index":428,"title":{},"body":{"injectables/AuthService.html":{}}}],["forgotpassworddto",{"_index":287,"title":{"classes/ForgotPasswordDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/ForgotPasswordDto.html":{},"coverage.html":{}}}],["form",{"_index":700,"title":{},"body":{"injectables/CloudinaryService.html":{},"interfaces/IStrorageService.html":{},"injectables/S3Service.html":{},"dependencies.html":{}}}],["format",{"_index":781,"title":{},"body":{"injectables/CreateUserCommand.html":{},"injectables/S3Service.html":{},"dependencies.html":{}}}],["formaturl",{"_index":1318,"title":{},"body":{"injectables/S3Service.html":{}}}],["formaturl(signedurlobject",{"_index":1342,"title":{},"body":{"injectables/S3Service.html":{}}}],["forroutes",{"_index":155,"title":{},"body":{"modules/AppModule.html":{}}}],["found",{"_index":255,"title":{},"body":{"injectables/AppRedisService.html":{},"injectables/AuthService.html":{},"classes/CatchAllFilter.html":{},"injectables/JwtStrategy.html":{},"injectables/UserService.html":{}}}],["framework",{"_index":1781,"title":{},"body":{"index.html":{}}}],["fromenv",{"_index":1311,"title":{},"body":{"injectables/S3Service.html":{}}}],["function",{"_index":1141,"title":{},"body":{"injectables/MorganMiddleware.html":{},"coverage.html":{}}}],["functions",{"_index":1766,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["generateslug",{"_index":1642,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["generateslug(text",{"_index":1774,"title":{},"body":{"miscellaneous/functions.html":{}}}],["generator",{"_index":1349,"title":{},"body":{"injectables/SchemaService.html":{}}}],["generator.updateschema",{"_index":1351,"title":{},"body":{"injectables/SchemaService.html":{}}}],["get('profile",{"_index":1492,"title":{},"body":{"controllers/UserController.html":{}}}],["get('profile')@httpcode(httpstatus.ok)@apioperation({summary",{"_index":1471,"title":{},"body":{"controllers/UserController.html":{}}}],["get()@httpcode(httpstatus.ok)@public()@apioperation({summary",{"_index":31,"title":{},"body":{"controllers/AppController.html":{}}}],["get(key",{"_index":210,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["geterrorcode",{"_index":579,"title":{},"body":{"classes/CatchAllFilter.html":{}}}],["geterrorcode(exception",{"_index":594,"title":{},"body":{"classes/CatchAllFilter.html":{}}}],["geterrormessage",{"_index":580,"title":{},"body":{"classes/CatchAllFilter.html":{}}}],["geterrormessage(exception",{"_index":597,"title":{},"body":{"classes/CatchAllFilter.html":{}}}],["geterrorname",{"_index":581,"title":{},"body":{"classes/CatchAllFilter.html":{}}}],["geterrorname(exception",{"_index":599,"title":{},"body":{"classes/CatchAllFilter.html":{}}}],["gethello",{"_index":275,"title":{},"body":{"injectables/AppService.html":{}}}],["gethttpstatus",{"_index":582,"title":{},"body":{"classes/CatchAllFilter.html":{}}}],["gethttpstatus(exception",{"_index":601,"title":{},"body":{"classes/CatchAllFilter.html":{}}}],["getnodeautoinstrumentations",{"_index":1836,"title":{},"body":{"miscellaneous/variables.html":{}}}],["getprofile",{"_index":1459,"title":{},"body":{"controllers/UserController.html":{}}}],["getprofile(@request",{"_index":1493,"title":{},"body":{"controllers/UserController.html":{}}}],["getprofile(req",{"_index":1470,"title":{},"body":{"controllers/UserController.html":{}}}],["getprofileresponsedto",{"_index":861,"title":{"classes/GetProfileResponseDto.html":{}},"body":{"classes/CreateUserResponseDto.html":{},"classes/GetProfileResponseDto.html":{},"coverage.html":{}}}],["getqueuetoken",{"_index":1202,"title":{},"body":{"modules/PaymentModule.html":{}}}],["getqueuetoken(template_queue_name",{"_index":1220,"title":{},"body":{"modules/PaymentModule.html":{}}}],["gets3connectiontoken",{"_index":1363,"title":{},"body":{"modules/StorageModule.html":{}}}],["getsubscribedentities",{"_index":1594,"title":{},"body":{"injectables/UserSubscriber.html":{}}}],["getting",{"_index":254,"title":{"index.html":{}},"body":{"injectables/AppRedisService.html":{}}}],["global",{"_index":383,"title":{},"body":{"modules/AuthModule.html":{}}}],["golevelup/nestjs",{"_index":104,"title":{},"body":{"modules/AppModule.html":{},"modules/PaymentModule.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"guards/RoleGuard.html":{},"injectables/StripeService.html":{},"injectables/SuccessResponseInterceptor.html":{},"dependencies.html":{}}}],["graph",{"_index":1803,"title":{},"body":{"modules.html":{}}}],["guard",{"_index":1277,"title":{"guards/RoleGuard.html":{}},"body":{"coverage.html":{},"overview.html":{}}}],["guards",{"_index":1279,"title":{},"body":{"guards/RoleGuard.html":{}}}],["guards/jwt",{"_index":376,"title":{},"body":{"modules/AuthModule.html":{}}}],["guards/local",{"_index":317,"title":{},"body":{"controllers/AuthController.html":{}}}],["handledexception",{"_index":589,"title":{},"body":{"classes/CatchAllFilter.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["handlepaymentintentsucceeded",{"_index":1380,"title":{},"body":{"injectables/StripeService.html":{}}}],["handlepaymentintentsucceeded(evt",{"_index":1384,"title":{},"body":{"injectables/StripeService.html":{}}}],["handlerequest",{"_index":984,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["handlerequest(err",{"_index":991,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["hash",{"_index":1313,"title":{},"body":{"injectables/S3Service.html":{}}}],["hash.bind(null",{"_index":1339,"title":{},"body":{"injectables/S3Service.html":{}}}],["hashed",{"_index":1122,"title":{},"body":{"classes/Migration20250730220636.html":{},"entities/User.html":{}}}],["hashedpassword",{"_index":539,"title":{},"body":{"injectables/AuthService.html":{}}}],["hashpassword",{"_index":1595,"title":{},"body":{"injectables/UserSubscriber.html":{}}}],["hashpassword(user",{"_index":1605,"title":{},"body":{"injectables/UserSubscriber.html":{}}}],["head",{"_index":1759,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["hello",{"_index":277,"title":{},"body":{"injectables/AppService.html":{}}}],["helmet",{"_index":1722,"title":{},"body":{"dependencies.html":{}}}],["here",{"_index":1013,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["hexadecimallowercase",{"_index":1302,"title":{},"body":{"injectables/S3Service.html":{}}}],["hooks",{"_index":1698,"title":{},"body":{"dependencies.html":{}}}],["host",{"_index":590,"title":{},"body":{"classes/CatchAllFilter.html":{},"modules/EmailModule.html":{}}}],["host.switchtohttp",{"_index":615,"title":{},"body":{"classes/CatchAllFilter.html":{}}}],["http",{"_index":931,"title":{},"body":{"modules/HttpClientModule.html":{},"injectables/HttpClientService.html":{},"injectables/MorganMiddleware.html":{},"injectables/S3Service.html":{},"dependencies.html":{}}}],["http.agent",{"_index":943,"title":{},"body":{"injectables/HttpClientService.html":{}}}],["httpadapter",{"_index":612,"title":{},"body":{"classes/CatchAllFilter.html":{}}}],["httpadapter.getrequesturl(request",{"_index":620,"title":{},"body":{"classes/CatchAllFilter.html":{}}}],["httpadapter.reply(response",{"_index":636,"title":{},"body":{"classes/CatchAllFilter.html":{}}}],["httpadapterhost",{"_index":585,"title":{},"body":{"classes/CatchAllFilter.html":{}}}],["httpagent",{"_index":934,"title":{},"body":{"injectables/HttpClientService.html":{}}}],["httpclientmodule",{"_index":921,"title":{"modules/HttpClientModule.html":{}},"body":{"modules/HttpClientModule.html":{},"modules.html":{},"overview.html":{}}}],["httpclientservice",{"_index":925,"title":{"injectables/HttpClientService.html":{}},"body":{"modules/HttpClientModule.html":{},"injectables/HttpClientService.html":{},"coverage.html":{},"overview.html":{}}}],["httpclientservice.name",{"_index":955,"title":{},"body":{"injectables/HttpClientService.html":{}}}],["httpcode",{"_index":40,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/UserController.html":{}}}],["httpcode(httpstatus.ok",{"_index":48,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/UserController.html":{}}}],["httpexception",{"_index":605,"title":{},"body":{"classes/CatchAllFilter.html":{},"miscellaneous/typealiases.html":{}}}],["httpmethod",{"_index":1333,"title":{},"body":{"injectables/S3Service.html":{}}}],["httpmodule",{"_index":929,"title":{},"body":{"modules/HttpClientModule.html":{}}}],["httprequest",{"_index":1316,"title":{},"body":{"injectables/S3Service.html":{}}}],["httprequestmethodenum",{"_index":973,"title":{},"body":{"interfaces/IStrorageService.html":{},"injectables/S3Service.html":{},"miscellaneous/enumerations.html":{}}}],["httprequestmethodenum.get",{"_index":1334,"title":{},"body":{"injectables/S3Service.html":{}}}],["httpresponse",{"_index":1245,"title":{},"body":{"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/SuccessResponseInterceptor.html":{}}}],["httpresponse.statuscode",{"_index":1250,"title":{},"body":{"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/SuccessResponseInterceptor.html":{}}}],["https",{"_index":947,"title":{},"body":{"injectables/HttpClientService.html":{}}}],["https.agent",{"_index":946,"title":{},"body":{"injectables/HttpClientService.html":{}}}],["https://${this.s3bucket}.s3.${this.s3region}.amazonaws.com/${key",{"_index":1331,"title":{},"body":{"injectables/S3Service.html":{}}}],["httpsagent",{"_index":935,"title":{},"body":{"injectables/HttpClientService.html":{}}}],["httpservice",{"_index":938,"title":{},"body":{"injectables/HttpClientService.html":{}}}],["httpstatus",{"_index":18,"title":{},"body":{"interfaces/ApiResponse.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/CatchAllFilter.html":{},"controllers/UserController.html":{}}}],["httpstatus.bad_gateway",{"_index":650,"title":{},"body":{"classes/CatchAllFilter.html":{}}}],["httpstatus.created",{"_index":1491,"title":{},"body":{"controllers/UserController.html":{}}}],["httpstatus.not_found",{"_index":632,"title":{},"body":{"classes/CatchAllFilter.html":{}}}],["httpstatus.ok",{"_index":340,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{}}}],["i.e",{"_index":1025,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["ianatimezonedatabaseenum",{"_index":1753,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["id",{"_index":513,"title":{},"body":{"injectables/AuthService.html":{},"classes/BaseEntity.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/Migration20250730220636.html":{},"injectables/StripeService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["id=\"${intent.id",{"_index":1412,"title":{},"body":{"injectables/StripeService.html":{}}}],["identifier",{"_index":1625,"title":{},"body":{"coverage.html":{}}}],["ignoreenvfile",{"_index":126,"title":{},"body":{"modules/AppModule.html":{}}}],["ignoreexpiration",{"_index":1045,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["illinois",{"_index":846,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["illinois'})@isstring()@isoptional",{"_index":832,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["implementation",{"_index":1028,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["implemented",{"_index":1032,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["implements",{"_index":140,"title":{},"body":{"modules/AppModule.html":{},"classes/CatchAllFilter.html":{},"injectables/CloudinaryService.html":{},"injectables/MorganMiddleware.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/RequestContextMiddleware.html":{},"guards/RoleGuard.html":{},"injectables/S3Service.html":{},"injectables/SchemaService.html":{},"injectables/StripeService.html":{},"injectables/SuccessResponseInterceptor.html":{},"injectables/UserSubscriber.html":{}}}],["import",{"_index":19,"title":{},"body":{"interfaces/ApiResponse.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AppRedisModule.html":{},"injectables/AppRedisService.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/AuthResponseDto.html":{},"injectables/AuthService.html":{},"classes/BaseEntity.html":{},"classes/CatchAllFilter.html":{},"classes/ChangePasswordDto.html":{},"injectables/CloudinaryService.html":{},"injectables/CreateUserCommand.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserResponseDto.html":{},"classes/DatabaseSeeder.html":{},"modules/EmailModule.html":{},"classes/EmailService.html":{},"classes/ForgotPasswordDto.html":{},"classes/GetProfileResponseDto.html":{},"modules/HttpClientModule.html":{},"injectables/HttpClientService.html":{},"interfaces/IPaymentService.html":{},"interfaces/IStrorageService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"classes/Migration20250730220636.html":{},"injectables/MorganMiddleware.html":{},"classes/PasswordResetEmailConsumer.html":{},"modules/PaymentModule.html":{},"classes/RefreshTokenDto.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/RequestContextMiddleware.html":{},"classes/ResetPasswordDto.html":{},"guards/RoleGuard.html":{},"injectables/S3Service.html":{},"injectables/SchemaService.html":{},"modules/StorageModule.html":{},"injectables/StripeService.html":{},"injectables/SuccessResponseInterceptor.html":{},"classes/UpdateProfileDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"classes/UserFactory.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"injectables/UserSubscriber.html":{}}}],["imports",{"_index":72,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRedisModule.html":{},"modules/AuthModule.html":{},"modules/EmailModule.html":{},"modules/HttpClientModule.html":{},"modules/PaymentModule.html":{},"modules/StorageModule.html":{},"modules/UserModule.html":{}}}],["include",{"_index":665,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/ResetPasswordDto.html":{}}}],["increment",{"_index":184,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["increment(key",{"_index":212,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["incrresult",{"_index":262,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["incrresult[1",{"_index":264,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["index",{"_index":8,"title":{"index.html":{}},"body":{"interfaces/ApiResponse.html":{},"controllers/AppController.html":{},"injectables/AppRedisService.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthResponseDto.html":{},"injectables/AuthService.html":{},"classes/BaseEntity.html":{},"classes/CatchAllFilter.html":{},"classes/ChangePasswordDto.html":{},"injectables/CloudinaryService.html":{},"injectables/CreateUserCommand.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserResponseDto.html":{},"classes/DatabaseSeeder.html":{},"classes/EmailService.html":{},"interfaces/ErrorResponse.html":{},"classes/ForgotPasswordDto.html":{},"classes/GetProfileResponseDto.html":{},"injectables/HttpClientService.html":{},"interfaces/IPaymentService.html":{},"interfaces/IStrorageService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"classes/Migration20250730220636.html":{},"injectables/MorganMiddleware.html":{},"classes/PasswordResetEmailConsumer.html":{},"classes/RefreshTokenDto.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/RequestContextMiddleware.html":{},"classes/ResetPasswordDto.html":{},"guards/RoleGuard.html":{},"injectables/S3Service.html":{},"injectables/SchemaService.html":{},"injectables/StripeService.html":{},"injectables/SuccessResponseInterceptor.html":{},"entities/User.html":{},"controllers/UserController.html":{},"classes/UserFactory.html":{},"injectables/UserService.html":{},"injectables/UserSubscriber.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["indicating",{"_index":409,"title":{},"body":{"classes/AuthResponseDto.html":{},"classes/CreateUserResponseDto.html":{},"classes/GetProfileResponseDto.html":{}}}],["inestapplication",{"_index":1777,"title":{},"body":{"miscellaneous/functions.html":{}}}],["info",{"_index":3,"title":{},"body":{"interfaces/ApiResponse.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AppRedisModule.html":{},"injectables/AppRedisService.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/AuthResponseDto.html":{},"injectables/AuthService.html":{},"classes/BaseEntity.html":{},"classes/CatchAllFilter.html":{},"classes/ChangePasswordDto.html":{},"injectables/CloudinaryService.html":{},"injectables/CreateUserCommand.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserResponseDto.html":{},"classes/DatabaseSeeder.html":{},"modules/EmailModule.html":{},"classes/EmailService.html":{},"interfaces/ErrorResponse.html":{},"classes/ForgotPasswordDto.html":{},"classes/GetProfileResponseDto.html":{},"modules/HttpClientModule.html":{},"injectables/HttpClientService.html":{},"interfaces/IPaymentService.html":{},"interfaces/IStrorageService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"classes/Migration20250730220636.html":{},"injectables/MorganMiddleware.html":{},"classes/PasswordResetEmailConsumer.html":{},"modules/PaymentModule.html":{},"classes/RefreshTokenDto.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/RequestContextMiddleware.html":{},"classes/ResetPasswordDto.html":{},"guards/RoleGuard.html":{},"injectables/S3Service.html":{},"injectables/SchemaService.html":{},"modules/StorageModule.html":{},"injectables/StripeService.html":{},"injectables/SuccessResponseInterceptor.html":{},"classes/UpdateProfileDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"classes/UserFactory.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"injectables/UserSubscriber.html":{}}}],["info?.message",{"_index":1003,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["info?.name",{"_index":1002,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["initialized",{"_index":1840,"title":{},"body":{"miscellaneous/variables.html":{}}}],["inject",{"_index":132,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRedisModule.html":{},"injectables/AppRedisService.html":{},"modules/AuthModule.html":{},"classes/CatchAllFilter.html":{},"injectables/CloudinaryService.html":{},"modules/EmailModule.html":{},"classes/EmailService.html":{},"injectables/HttpClientService.html":{},"injectables/MorganMiddleware.html":{},"classes/PasswordResetEmailConsumer.html":{},"modules/PaymentModule.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/S3Service.html":{},"injectables/SchemaService.html":{},"modules/StorageModule.html":{},"injectables/StripeService.html":{},"injectables/SuccessResponseInterceptor.html":{}}}],["inject(logger",{"_index":234,"title":{},"body":{"injectables/AppRedisService.html":{},"classes/CatchAllFilter.html":{},"injectables/CloudinaryService.html":{},"classes/EmailService.html":{},"injectables/HttpClientService.html":{},"classes/PasswordResetEmailConsumer.html":{},"injectables/S3Service.html":{},"injectables/SchemaService.html":{},"injectables/StripeService.html":{}}}],["inject(mailerservice",{"_index":910,"title":{},"body":{"classes/EmailService.html":{}}}],["injectable",{"_index":175,"title":{"injectables/AppRedisService.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/CloudinaryService.html":{},"injectables/CreateUserCommand.html":{},"injectables/HttpClientService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/MorganMiddleware.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/RequestContextMiddleware.html":{},"injectables/S3Service.html":{},"injectables/SchemaService.html":{},"injectables/StripeService.html":{},"injectables/SuccessResponseInterceptor.html":{},"injectables/UserService.html":{},"injectables/UserSubscriber.html":{}},"body":{"injectables/AppRedisService.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/CloudinaryService.html":{},"injectables/CreateUserCommand.html":{},"injectables/HttpClientService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/MorganMiddleware.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/RequestContextMiddleware.html":{},"guards/RoleGuard.html":{},"injectables/S3Service.html":{},"injectables/SchemaService.html":{},"injectables/StripeService.html":{},"injectables/SuccessResponseInterceptor.html":{},"injectables/UserService.html":{},"injectables/UserSubscriber.html":{},"coverage.html":{}}}],["injectables",{"_index":176,"title":{},"body":{"injectables/AppRedisService.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/CloudinaryService.html":{},"injectables/CreateUserCommand.html":{},"injectables/HttpClientService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/MorganMiddleware.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/RequestContextMiddleware.html":{},"injectables/S3Service.html":{},"injectables/SchemaService.html":{},"injectables/StripeService.html":{},"injectables/SuccessResponseInterceptor.html":{},"injectables/UserService.html":{},"injectables/UserSubscriber.html":{},"overview.html":{}}}],["injectqueue",{"_index":453,"title":{},"body":{"injectables/AuthService.html":{},"injectables/StripeService.html":{}}}],["injectqueue(password_reset_email_queue_name",{"_index":459,"title":{},"body":{"injectables/AuthService.html":{}}}],["injectqueue(template_queue_name",{"_index":1392,"title":{},"body":{"injectables/StripeService.html":{}}}],["injectrepository",{"_index":1555,"title":{},"body":{"injectables/UserService.html":{}}}],["injectrepository(user",{"_index":1556,"title":{},"body":{"injectables/UserService.html":{}}}],["injects3",{"_index":1301,"title":{},"body":{"injectables/S3Service.html":{}}}],["injectstripeclient",{"_index":1389,"title":{},"body":{"injectables/StripeService.html":{}}}],["inputs",{"_index":764,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["installcompile",{"_index":1787,"title":{},"body":{"index.html":{}}}],["instanceof",{"_index":505,"title":{},"body":{"injectables/AuthService.html":{},"classes/CatchAllFilter.html":{}}}],["instrumentations",{"_index":1695,"title":{},"body":{"dependencies.html":{},"miscellaneous/variables.html":{}}}],["intent",{"_index":1400,"title":{},"body":{"injectables/StripeService.html":{}}}],["intent.ts",{"_index":1664,"title":{},"body":{"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["intercept",{"_index":1228,"title":{},"body":{"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/SuccessResponseInterceptor.html":{}}}],["intercept(context",{"_index":1230,"title":{},"body":{"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/SuccessResponseInterceptor.html":{}}}],["interface",{"_index":0,"title":{"interfaces/ApiResponse.html":{},"interfaces/ErrorResponse.html":{},"interfaces/IPaymentService.html":{},"interfaces/IStrorageService.html":{}},"body":{"interfaces/ApiResponse.html":{},"interfaces/ErrorResponse.html":{},"interfaces/IPaymentService.html":{},"interfaces/IStrorageService.html":{},"coverage.html":{}}}],["interfaces",{"_index":2,"title":{},"body":{"interfaces/ApiResponse.html":{},"interfaces/ErrorResponse.html":{},"interfaces/IPaymentService.html":{},"interfaces/IStrorageService.html":{},"overview.html":{}}}],["interfaces/error",{"_index":611,"title":{},"body":{"classes/CatchAllFilter.html":{}}}],["interfaces/payment.interface",{"_index":1391,"title":{},"body":{"injectables/StripeService.html":{}}}],["interfaces/storage.interface",{"_index":697,"title":{},"body":{"injectables/CloudinaryService.html":{},"injectables/S3Service.html":{}}}],["ioredis",{"_index":233,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["ipaymentservice",{"_index":957,"title":{"interfaces/IPaymentService.html":{}},"body":{"interfaces/IPaymentService.html":{},"injectables/StripeService.html":{},"coverage.html":{}}}],["is_public_key",{"_index":995,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["isblacklisted",{"_index":496,"title":{},"body":{"injectables/AuthService.html":{}}}],["isboolean",{"_index":834,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isboolean()@isoptional",{"_index":806,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isemail",{"_index":835,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/ForgotPasswordDto.html":{},"classes/LoginDto.html":{}}}],["isenum",{"_index":836,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isenum(userroleenum",{"_index":852,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isglobal",{"_index":122,"title":{},"body":{"modules/AppModule.html":{}}}],["isjwt",{"_index":1275,"title":{},"body":{"classes/ResetPasswordDto.html":{}}}],["isnotempty",{"_index":674,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/RefreshTokenDto.html":{},"classes/ResetPasswordDto.html":{}}}],["iso",{"_index":1119,"title":{},"body":{"classes/Migration20250730220636.html":{},"entities/User.html":{}}}],["isoptional",{"_index":837,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["ispasswordmodified",{"_index":1596,"title":{},"body":{"injectables/UserSubscriber.html":{}}}],["ispasswordmodified(user",{"_index":1607,"title":{},"body":{"injectables/UserSubscriber.html":{}}}],["ispublic",{"_index":996,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"miscellaneous/variables.html":{}}}],["isroutingerror",{"_index":625,"title":{},"body":{"classes/CatchAllFilter.html":{}}}],["isstring",{"_index":675,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/RefreshTokenDto.html":{},"classes/ResetPasswordDto.html":{}}}],["istrorageservice",{"_index":696,"title":{"interfaces/IStrorageService.html":{}},"body":{"injectables/CloudinaryService.html":{},"interfaces/IStrorageService.html":{},"injectables/S3Service.html":{},"coverage.html":{}}}],["it's",{"_index":1037,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["items",{"_index":1454,"title":{},"body":{"entities/User.html":{}}}],["jaeger",{"_index":1706,"title":{},"body":{"dependencies.html":{}}}],["jaegerpropagator",{"_index":1832,"title":{},"body":{"miscellaneous/variables.html":{}}}],["job",{"_index":1169,"title":{},"body":{"classes/PasswordResetEmailConsumer.html":{}}}],["job.id",{"_index":1181,"title":{},"body":{"classes/PasswordResetEmailConsumer.html":{}}}],["john",{"_index":842,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["john'})@isstring()@isnotempty",{"_index":816,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["join",{"_index":884,"title":{},"body":{"modules/EmailModule.html":{}}}],["join(process.cwd",{"_index":898,"title":{},"body":{"modules/EmailModule.html":{}}}],["js",{"_index":34,"title":{},"body":{"controllers/AppController.html":{}}}],["js/faker",{"_index":1510,"title":{},"body":{"classes/UserFactory.html":{}}}],["json.parse(cached",{"_index":1576,"title":{},"body":{"injectables/UserService.html":{}}}],["json.stringify(serializable",{"_index":1583,"title":{},"body":{"injectables/UserService.html":{}}}],["json.stringify(user",{"_index":1589,"title":{},"body":{"injectables/UserService.html":{}}}],["jsonwebtokenerror",{"_index":450,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwt",{"_index":507,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["jwtauthguard",{"_index":375,"title":{"injectables/JwtAuthGuard.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["jwtexpiresin",{"_index":415,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtfromrequest",{"_index":1043,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtmodule",{"_index":369,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.registerasync",{"_index":382,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtnotbefore",{"_index":416,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtrefreshexpriresin",{"_index":417,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtrefreshsecret",{"_index":418,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtservice",{"_index":424,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtstrategy",{"_index":362,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["keepalive",{"_index":944,"title":{},"body":{"injectables/HttpClientService.html":{}}}],["key",{"_index":193,"title":{},"body":{"injectables/AppRedisService.html":{},"interfaces/IStrorageService.html":{},"classes/Migration20250730220636.html":{},"injectables/S3Service.html":{}}}],["key=${key",{"_index":1332,"title":{},"body":{"injectables/S3Service.html":{}}}],["keys",{"_index":200,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["keys.length",{"_index":272,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["l",{"_index":754,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["lagos",{"_index":1762,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["last",{"_index":564,"title":{},"body":{"classes/BaseEntity.html":{},"injectables/CreateUserCommand.html":{},"classes/CreateUserDto.html":{},"classes/Migration20250730220636.html":{},"entities/User.html":{}}}],["last_logged_in",{"_index":1097,"title":{},"body":{"classes/Migration20250730220636.html":{}}}],["last_name",{"_index":1086,"title":{},"body":{"classes/Migration20250730220636.html":{}}}],["lastloggedin",{"_index":1064,"title":{},"body":{"injectables/LocalStrategy.html":{},"entities/User.html":{}}}],["lastname",{"_index":776,"title":{},"body":{"injectables/CreateUserCommand.html":{},"classes/CreateUserDto.html":{},"entities/User.html":{},"classes/UserFactory.html":{}}}],["lastvaluefrom",{"_index":948,"title":{},"body":{"injectables/HttpClientService.html":{}}}],["lastvaluefrom(this.httpservice.request",{"_index":956,"title":{},"body":{"injectables/HttpClientService.html":{}}}],["legend",{"_index":55,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRedisModule.html":{},"modules/AuthModule.html":{},"modules/EmailModule.html":{},"modules/HttpClientModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["length",{"_index":1151,"title":{},"body":{"injectables/MorganMiddleware.html":{},"entities/User.html":{}}}],["level",{"_index":1036,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["liaoliaots/nestjs",{"_index":166,"title":{},"body":{"modules/AppRedisModule.html":{},"injectables/AppRedisService.html":{},"dependencies.html":{}}}],["license",{"_index":1810,"title":{},"body":{"properties.html":{}}}],["limit",{"_index":1775,"title":{},"body":{"miscellaneous/functions.html":{}}}],["line",{"_index":484,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["literal",{"_index":39,"title":{},"body":{"controllers/AppController.html":{},"miscellaneous/typealiases.html":{}}}],["live",{"_index":224,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["load",{"_index":124,"title":{},"body":{"modules/AppModule.html":{}}}],["local",{"_index":1056,"title":{},"body":{"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["localauthguard",{"_index":316,"title":{"injectables/LocalAuthGuard.html":{}},"body":{"controllers/AuthController.html":{},"injectables/LocalAuthGuard.html":{},"coverage.html":{}}}],["localstrategy",{"_index":363,"title":{"injectables/LocalStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/LocalStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["logged",{"_index":1026,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["logger",{"_index":81,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRedisModule.html":{},"injectables/AppRedisService.html":{},"classes/CatchAllFilter.html":{},"injectables/CloudinaryService.html":{},"modules/EmailModule.html":{},"classes/EmailService.html":{},"modules/HttpClientModule.html":{},"injectables/HttpClientService.html":{},"injectables/MorganMiddleware.html":{},"classes/PasswordResetEmailConsumer.html":{},"modules/PaymentModule.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/S3Service.html":{},"injectables/SchemaService.html":{},"modules/StorageModule.html":{},"injectables/StripeService.html":{},"injectables/SuccessResponseInterceptor.html":{}}}],["loggercontext",{"_index":578,"title":{},"body":{"classes/CatchAllFilter.html":{}}}],["loggerservice",{"_index":188,"title":{},"body":{"injectables/AppRedisService.html":{},"classes/CatchAllFilter.html":{},"injectables/CloudinaryService.html":{},"classes/EmailService.html":{},"injectables/HttpClientService.html":{},"injectables/MorganMiddleware.html":{},"classes/PasswordResetEmailConsumer.html":{},"modules/PaymentModule.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/S3Service.html":{},"injectables/SchemaService.html":{},"modules/StorageModule.html":{},"injectables/StripeService.html":{},"injectables/SuccessResponseInterceptor.html":{}}}],["loggingconfiguration",{"_index":1213,"title":{},"body":{"modules/PaymentModule.html":{}}}],["logic",{"_index":1031,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["login",{"_index":283,"title":{},"body":{"controllers/AuthController.html":{},"classes/AuthResponseDto.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/Migration20250730220636.html":{},"classes/RefreshTokenDto.html":{},"entities/User.html":{}}}],["login'})@apibody({type",{"_index":298,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(@request",{"_index":335,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(req",{"_index":295,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(user",{"_index":430,"title":{},"body":{"injectables/AuthService.html":{}}}],["logindto",{"_index":299,"title":{"classes/LoginDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/LoginDto.html":{},"coverage.html":{}}}],["logmatchingeventhandlers",{"_index":1214,"title":{},"body":{"modules/PaymentModule.html":{}}}],["long",{"_index":664,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/ResetPasswordDto.html":{}}}],["lowercase",{"_index":667,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/ResetPasswordDto.html":{}}}],["mailermodule",{"_index":879,"title":{},"body":{"modules/EmailModule.html":{}}}],["mailermodule.forrootasync",{"_index":885,"title":{},"body":{"modules/EmailModule.html":{}}}],["mailerservice",{"_index":904,"title":{},"body":{"classes/EmailService.html":{}}}],["main",{"_index":802,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["makehttprequest",{"_index":936,"title":{},"body":{"injectables/HttpClientService.html":{}}}],["makehttprequest(url",{"_index":940,"title":{},"body":{"injectables/HttpClientService.html":{}}}],["making",{"_index":954,"title":{},"body":{"injectables/HttpClientService.html":{}}}],["malformed",{"_index":508,"title":{},"body":{"injectables/AuthService.html":{}}}],["map",{"_index":1236,"title":{},"body":{"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/SuccessResponseInterceptor.html":{}}}],["map((response",{"_index":1244,"title":{},"body":{"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/SuccessResponseInterceptor.html":{}}}],["match",{"_index":531,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/UserService.html":{}}}],["matches",{"_index":676,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/ResetPasswordDto.html":{}}}],["matching",{"_index":23,"title":{},"body":{"interfaces/ApiResponse.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AppRedisModule.html":{},"injectables/AppRedisService.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/AuthResponseDto.html":{},"injectables/AuthService.html":{},"classes/BaseEntity.html":{},"classes/CatchAllFilter.html":{},"classes/ChangePasswordDto.html":{},"injectables/CloudinaryService.html":{},"injectables/CreateUserCommand.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserResponseDto.html":{},"classes/DatabaseSeeder.html":{},"modules/EmailModule.html":{},"classes/EmailService.html":{},"interfaces/ErrorResponse.html":{},"classes/ForgotPasswordDto.html":{},"classes/GetProfileResponseDto.html":{},"modules/HttpClientModule.html":{},"injectables/HttpClientService.html":{},"interfaces/IPaymentService.html":{},"interfaces/IStrorageService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"classes/Migration20250730220636.html":{},"injectables/MorganMiddleware.html":{},"classes/PasswordResetEmailConsumer.html":{},"modules/PaymentModule.html":{},"classes/RefreshTokenDto.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/RequestContextMiddleware.html":{},"classes/ResetPasswordDto.html":{},"guards/RoleGuard.html":{},"injectables/S3Service.html":{},"injectables/SchemaService.html":{},"modules/StorageModule.html":{},"injectables/StripeService.html":{},"injectables/SuccessResponseInterceptor.html":{},"classes/UpdateProfileDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"classes/UserFactory.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"injectables/UserSubscriber.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["memorystoredfile",{"_index":685,"title":{},"body":{"injectables/CloudinaryService.html":{},"interfaces/IStrorageService.html":{},"injectables/S3Service.html":{}}}],["message",{"_index":12,"title":{},"body":{"interfaces/ApiResponse.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/AuthResponseDto.html":{},"classes/CatchAllFilter.html":{},"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserResponseDto.html":{},"interfaces/ErrorResponse.html":{},"classes/GetProfileResponseDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/MorganMiddleware.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"classes/ResetPasswordDto.html":{},"injectables/SuccessResponseInterceptor.html":{},"controllers/UserController.html":{}}}],["message.includes('cannot",{"_index":628,"title":{},"body":{"classes/CatchAllFilter.html":{}}}],["message.startswith('cannot",{"_index":627,"title":{},"body":{"classes/CatchAllFilter.html":{}}}],["metadata",{"_index":1742,"title":{},"body":{"dependencies.html":{}}}],["method",{"_index":144,"title":{},"body":{"modules/AppModule.html":{},"interfaces/IStrorageService.html":{},"injectables/MorganMiddleware.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/S3Service.html":{},"injectables/SuccessResponseInterceptor.html":{}}}],["methods",{"_index":28,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppRedisService.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CatchAllFilter.html":{},"injectables/CloudinaryService.html":{},"injectables/CreateUserCommand.html":{},"classes/DatabaseSeeder.html":{},"classes/EmailService.html":{},"injectables/HttpClientService.html":{},"interfaces/IPaymentService.html":{},"interfaces/IStrorageService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/Migration20250730220636.html":{},"injectables/MorganMiddleware.html":{},"classes/PasswordResetEmailConsumer.html":{},"modules/PaymentModule.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/RequestContextMiddleware.html":{},"guards/RoleGuard.html":{},"injectables/S3Service.html":{},"injectables/SchemaService.html":{},"modules/StorageModule.html":{},"injectables/StripeService.html":{},"injectables/SuccessResponseInterceptor.html":{},"controllers/UserController.html":{},"classes/UserFactory.html":{},"injectables/UserService.html":{},"injectables/UserSubscriber.html":{}}}],["metricreader",{"_index":1826,"title":{},"body":{"miscellaneous/variables.html":{}}}],["middlewareconsumer",{"_index":75,"title":{},"body":{"modules/AppModule.html":{}}}],["migration",{"_index":1071,"title":{},"body":{"classes/Migration20250730220636.html":{}}}],["migration20250730220636",{"_index":1069,"title":{"classes/Migration20250730220636.html":{}},"body":{"classes/Migration20250730220636.html":{},"coverage.html":{}}}],["mikro",{"_index":96,"title":{},"body":{"modules/AppModule.html":{},"classes/BaseEntity.html":{},"injectables/CreateUserCommand.html":{},"classes/DatabaseSeeder.html":{},"classes/Migration20250730220636.html":{},"injectables/RequestContextMiddleware.html":{},"injectables/SchemaService.html":{},"entities/User.html":{},"classes/UserFactory.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"injectables/UserSubscriber.html":{},"dependencies.html":{}}}],["mikroorm",{"_index":1261,"title":{},"body":{"injectables/RequestContextMiddleware.html":{},"injectables/SchemaService.html":{}}}],["mikroormconfig",{"_index":118,"title":{},"body":{"modules/AppModule.html":{}}}],["mikroormmodule",{"_index":95,"title":{},"body":{"modules/AppModule.html":{},"modules/UserModule.html":{}}}],["mikroormmodule.forfeature([user",{"_index":1532,"title":{},"body":{"modules/UserModule.html":{}}}],["mikroormmodule.forrootasync",{"_index":129,"title":{},"body":{"modules/AppModule.html":{}}}],["minimum",{"_index":672,"title":{},"body":{"classes/ChangePasswordDto.html":{}}}],["minlength",{"_index":677,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/ResetPasswordDto.html":{}}}],["minlength(10",{"_index":670,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/ResetPasswordDto.html":{}}}],["miscellaneous",{"_index":1750,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mode",{"_index":1791,"title":{},"body":{"index.html":{}}}],["model",{"_index":1504,"title":{},"body":{"classes/UserFactory.html":{}}}],["module",{"_index":51,"title":{"modules/AppModule.html":{},"modules/AppRedisModule.html":{},"modules/AuthModule.html":{},"modules/EmailModule.html":{},"modules/HttpClientModule.html":{},"modules/PaymentModule.html":{},"modules/StorageModule.html":{},"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AppRedisModule.html":{},"modules/AuthModule.html":{},"modules/EmailModule.html":{},"modules/HttpClientModule.html":{},"modules/PaymentModule.html":{},"modules/StorageModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["modules",{"_index":53,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AppRedisModule.html":{},"modules/AuthModule.html":{},"modules/EmailModule.html":{},"modules/HttpClientModule.html":{},"modules/PaymentModule.html":{},"modules/StorageModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["modules/auth/auth.module",{"_index":92,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/auth/decorators/public.decorator",{"_index":42,"title":{},"body":{"controllers/AppController.html":{},"modules/PaymentModule.html":{}}}],["modules/mailer",{"_index":880,"title":{},"body":{"modules/EmailModule.html":{},"classes/EmailService.html":{},"dependencies.html":{}}}],["modules/mailer/dist/adapters/pug.adapter",{"_index":883,"title":{},"body":{"modules/EmailModule.html":{}}}],["modules/user/factories/user.factory",{"_index":871,"title":{},"body":{"classes/DatabaseSeeder.html":{}}}],["modules/user/user.module",{"_index":91,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/user/user.service",{"_index":768,"title":{},"body":{"injectables/CreateUserCommand.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["moment",{"_index":1724,"title":{},"body":{"dependencies.html":{}}}],["morgan",{"_index":1143,"title":{},"body":{"injectables/MorganMiddleware.html":{},"dependencies.html":{}}}],["morganmiddleware",{"_index":93,"title":{"injectables/MorganMiddleware.html":{}},"body":{"modules/AppModule.html":{},"injectables/MorganMiddleware.html":{},"coverage.html":{}}}],["morganmiddleware.name",{"_index":1161,"title":{},"body":{"injectables/MorganMiddleware.html":{}}}],["ms",{"_index":458,"title":{},"body":{"injectables/AuthService.html":{},"injectables/MorganMiddleware.html":{},"dependencies.html":{}}}],["ms('1m",{"_index":466,"title":{},"body":{"injectables/AuthService.html":{}}}],["ms('1m')}m",{"_index":467,"title":{},"body":{"injectables/AuthService.html":{}}}],["ms('1s",{"_index":518,"title":{},"body":{"injectables/AuthService.html":{}}}],["ms(this.jwtexpiresin",{"_index":465,"title":{},"body":{"injectables/AuthService.html":{}}}],["ms(this.jwtrefreshexpriresin",{"_index":517,"title":{},"body":{"injectables/AuthService.html":{}}}],["multiple",{"_index":206,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["name",{"_index":78,"title":{},"body":{"modules/AppModule.html":{},"injectables/AppRedisService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BaseEntity.html":{},"classes/CatchAllFilter.html":{},"injectables/CloudinaryService.html":{},"injectables/CreateUserCommand.html":{},"classes/CreateUserDto.html":{},"classes/DatabaseSeeder.html":{},"classes/EmailService.html":{},"interfaces/ErrorResponse.html":{},"injectables/HttpClientService.html":{},"interfaces/IPaymentService.html":{},"interfaces/IStrorageService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/Migration20250730220636.html":{},"injectables/MorganMiddleware.html":{},"classes/PasswordResetEmailConsumer.html":{},"modules/PaymentModule.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/RequestContextMiddleware.html":{},"guards/RoleGuard.html":{},"injectables/S3Service.html":{},"injectables/SchemaService.html":{},"injectables/StripeService.html":{},"injectables/SuccessResponseInterceptor.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"injectables/UserSubscriber.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["namespace",{"_index":173,"title":{},"body":{"modules/AppRedisModule.html":{}}}],["nanoid",{"_index":733,"title":{},"body":{"injectables/CreateUserCommand.html":{},"injectables/S3Service.html":{},"dependencies.html":{}}}],["necessary",{"_index":1287,"title":{},"body":{"guards/RoleGuard.html":{}}}],["needs",{"_index":1033,"title":{},"body":{"injectables/JwtStrategy.html":{},"classes/Migration20250730220636.html":{},"entities/User.html":{}}}],["nest",{"_index":33,"title":{},"body":{"controllers/AppController.html":{},"injectables/CreateUserCommand.html":{},"dependencies.html":{},"index.html":{}}}],["nestinterceptor",{"_index":1235,"title":{},"body":{"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/SuccessResponseInterceptor.html":{}}}],["nestjs",{"_index":699,"title":{},"body":{"injectables/CloudinaryService.html":{},"modules/EmailModule.html":{},"classes/EmailService.html":{},"interfaces/IStrorageService.html":{},"injectables/S3Service.html":{},"modules/StorageModule.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["nestjs/axios",{"_index":930,"title":{},"body":{"modules/HttpClientModule.html":{},"injectables/HttpClientService.html":{},"dependencies.html":{}}}],["nestjs/bullmq",{"_index":107,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/PasswordResetEmailConsumer.html":{},"modules/PaymentModule.html":{},"injectables/StripeService.html":{},"dependencies.html":{}}}],["nestjs/common",{"_index":20,"title":{},"body":{"interfaces/ApiResponse.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AppRedisModule.html":{},"injectables/AppRedisService.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CatchAllFilter.html":{},"injectables/CloudinaryService.html":{},"injectables/CreateUserCommand.html":{},"modules/EmailModule.html":{},"classes/EmailService.html":{},"modules/HttpClientModule.html":{},"injectables/HttpClientService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/MorganMiddleware.html":{},"classes/PasswordResetEmailConsumer.html":{},"modules/PaymentModule.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/RequestContextMiddleware.html":{},"guards/RoleGuard.html":{},"injectables/S3Service.html":{},"injectables/SchemaService.html":{},"modules/StorageModule.html":{},"injectables/StripeService.html":{},"injectables/SuccessResponseInterceptor.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"injectables/UserSubscriber.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":90,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRedisModule.html":{},"injectables/AppRedisService.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CloudinaryService.html":{},"modules/EmailModule.html":{},"injectables/JwtStrategy.html":{},"modules/PaymentModule.html":{},"injectables/S3Service.html":{},"injectables/SchemaService.html":{},"modules/StorageModule.html":{},"injectables/StripeService.html":{},"injectables/UserSubscriber.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":366,"title":{},"body":{"modules/AuthModule.html":{},"classes/CatchAllFilter.html":{},"injectables/JwtAuthGuard.html":{},"guards/RoleGuard.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":370,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["nestjs/mapped",{"_index":1690,"title":{},"body":{"dependencies.html":{}}}],["nestjs/passport",{"_index":372,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":1692,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":45,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/AuthResponseDto.html":{},"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserResponseDto.html":{},"classes/ForgotPasswordDto.html":{},"classes/GetProfileResponseDto.html":{},"classes/LoginDto.html":{},"classes/RefreshTokenDto.html":{},"classes/ResetPasswordDto.html":{},"classes/UpdateProfileDto.html":{},"controllers/UserController.html":{},"dependencies.html":{}}}],["nestmiddleware",{"_index":1142,"title":{},"body":{"injectables/MorganMiddleware.html":{},"injectables/RequestContextMiddleware.html":{}}}],["nestmodule",{"_index":82,"title":{},"body":{"modules/AppModule.html":{}}}],["new",{"_index":477,"title":{},"body":{"injectables/AuthService.html":{},"classes/BaseEntity.html":{},"classes/CatchAllFilter.html":{},"classes/ChangePasswordDto.html":{},"injectables/CloudinaryService.html":{},"injectables/CreateUserCommand.html":{},"classes/DatabaseSeeder.html":{},"modules/EmailModule.html":{},"injectables/HttpClientService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"modules/PaymentModule.html":{},"classes/ResetPasswordDto.html":{},"guards/RoleGuard.html":{},"injectables/S3Service.html":{},"modules/StorageModule.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["newly",{"_index":857,"title":{},"body":{"classes/CreateUserResponseDto.html":{},"classes/GetProfileResponseDto.html":{}}}],["newpassword",{"_index":355,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ChangePasswordDto.html":{},"classes/ResetPasswordDto.html":{},"injectables/UserService.html":{}}}],["newpayload",{"_index":515,"title":{},"body":{"injectables/AuthService.html":{}}}],["newuser",{"_index":1489,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["next",{"_index":483,"title":{},"body":{"injectables/AuthService.html":{},"injectables/MorganMiddleware.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/RequestContextMiddleware.html":{},"injectables/SuccessResponseInterceptor.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["next.handle",{"_index":1242,"title":{},"body":{"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/SuccessResponseInterceptor.html":{}}}],["next.handle().pipe",{"_index":1243,"title":{},"body":{"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/SuccessResponseInterceptor.html":{}}}],["nextfunction",{"_index":1264,"title":{},"body":{"injectables/RequestContextMiddleware.html":{}}}],["node",{"_index":1315,"title":{},"body":{"injectables/S3Service.html":{},"dependencies.html":{}}}],["nodeenv",{"_index":1347,"title":{},"body":{"injectables/SchemaService.html":{}}}],["nodemailer",{"_index":1735,"title":{},"body":{"dependencies.html":{}}}],["nodesdk",{"_index":1825,"title":{},"body":{"miscellaneous/variables.html":{}}}],["normalizefields",{"_index":1455,"title":{},"body":{"entities/User.html":{},"injectables/UserSubscriber.html":{}}}],["normalizefields(user",{"_index":1609,"title":{},"body":{"injectables/UserSubscriber.html":{}}}],["normalizeuserfields",{"_index":1451,"title":{},"body":{"entities/User.html":{},"injectables/UserSubscriber.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["normalizeuserfields(this",{"_index":1456,"title":{},"body":{"entities/User.html":{}}}],["normalizeuserfields(user",{"_index":1617,"title":{},"body":{"injectables/UserSubscriber.html":{},"miscellaneous/functions.html":{}}}],["notbefore",{"_index":493,"title":{},"body":{"injectables/AuthService.html":{}}}],["notbeforeerror",{"_index":451,"title":{},"body":{"injectables/AuthService.html":{}}}],["note",{"_index":1011,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["notfoundexception",{"_index":447,"title":{},"body":{"injectables/AuthService.html":{},"classes/CatchAllFilter.html":{},"injectables/JwtStrategy.html":{},"injectables/UserService.html":{}}}],["notfoundexception('password",{"_index":535,"title":{},"body":{"injectables/AuthService.html":{}}}],["notfoundexception('user",{"_index":478,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/UserService.html":{}}}],["null",{"_index":231,"title":{},"body":{"injectables/AppRedisService.html":{},"injectables/AuthService.html":{},"classes/BaseEntity.html":{},"classes/Migration20250730220636.html":{},"injectables/UserService.html":{}}}],["nullable",{"_index":556,"title":{},"body":{"classes/BaseEntity.html":{},"entities/User.html":{}}}],["number",{"_index":199,"title":{},"body":{"injectables/AppRedisService.html":{},"injectables/AuthService.html":{},"classes/CatchAllFilter.html":{},"classes/CreateUserDto.html":{},"interfaces/ErrorResponse.html":{},"interfaces/IStrorageService.html":{},"classes/Migration20250730220636.html":{},"injectables/S3Service.html":{},"entities/User.html":{},"miscellaneous/functions.html":{}}}],["number.isinteger(response.statuscode",{"_index":1248,"title":{},"body":{"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/SuccessResponseInterceptor.html":{}}}],["nx",{"_index":218,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["nxinfo",{"_index":242,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["object",{"_index":979,"title":{},"body":{"interfaces/IStrorageService.html":{},"injectables/S3Service.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["object.values(userroleenum).join",{"_index":854,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["observable",{"_index":1233,"title":{},"body":{"injectables/RequestBodyAndResponseInterceptor.html":{},"guards/RoleGuard.html":{},"injectables/SuccessResponseInterceptor.html":{}}}],["ok",{"_index":229,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["omittype",{"_index":1420,"title":{},"body":{"classes/UpdateProfileDto.html":{}}}],["omittype(createuserdto",{"_index":1419,"title":{},"body":{"classes/UpdateProfileDto.html":{}}}],["one",{"_index":853,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["onmoduleinit",{"_index":1344,"title":{},"body":{"injectables/SchemaService.html":{}}}],["onupdate",{"_index":563,"title":{},"body":{"classes/BaseEntity.html":{}}}],["opentelemetry/auto",{"_index":1694,"title":{},"body":{"dependencies.html":{}}}],["opentelemetry/context",{"_index":1697,"title":{},"body":{"dependencies.html":{}}}],["opentelemetry/core",{"_index":1700,"title":{},"body":{"dependencies.html":{}}}],["opentelemetry/exporter",{"_index":1701,"title":{},"body":{"dependencies.html":{}}}],["opentelemetry/propagator",{"_index":1704,"title":{},"body":{"dependencies.html":{}}}],["opentelemetry/sdk",{"_index":1707,"title":{},"body":{"dependencies.html":{}}}],["operation",{"_index":411,"title":{},"body":{"classes/AuthResponseDto.html":{},"classes/CreateUserResponseDto.html":{},"classes/GetProfileResponseDto.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/SuccessResponseInterceptor.html":{}}}],["option",{"_index":769,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["option({flags",{"_index":744,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["optional",{"_index":10,"title":{},"body":{"interfaces/ApiResponse.html":{},"modules/AppModule.html":{},"injectables/AppRedisService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/BaseEntity.html":{},"classes/CatchAllFilter.html":{},"injectables/CloudinaryService.html":{},"injectables/CreateUserCommand.html":{},"classes/CreateUserDto.html":{},"classes/DatabaseSeeder.html":{},"classes/EmailService.html":{},"interfaces/ErrorResponse.html":{},"injectables/HttpClientService.html":{},"interfaces/IPaymentService.html":{},"interfaces/IStrorageService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/MorganMiddleware.html":{},"classes/PasswordResetEmailConsumer.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/RequestContextMiddleware.html":{},"guards/RoleGuard.html":{},"injectables/S3Service.html":{},"injectables/SchemaService.html":{},"injectables/StripeService.html":{},"injectables/SuccessResponseInterceptor.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"injectables/UserSubscriber.html":{},"miscellaneous/functions.html":{}}}],["options",{"_index":762,"title":{},"body":{"injectables/CreateUserCommand.html":{},"modules/EmailModule.html":{},"injectables/HttpClientService.html":{},"interfaces/IPaymentService.html":{},"injectables/StripeService.html":{},"injectables/UserService.html":{},"miscellaneous/enumerations.html":{}}}],["originaldata",{"_index":1618,"title":{},"body":{"injectables/UserSubscriber.html":{}}}],["originaldata.password",{"_index":1620,"title":{},"body":{"injectables/UserSubscriber.html":{}}}],["orm",{"_index":1263,"title":{},"body":{"injectables/RequestContextMiddleware.html":{},"injectables/SchemaService.html":{}}}],["orm.config",{"_index":120,"title":{},"body":{"modules/AppModule.html":{}}}],["orm.config.ts",{"_index":1645,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["orm/cli",{"_index":1681,"title":{},"body":{"dependencies.html":{}}}],["orm/core",{"_index":570,"title":{},"body":{"classes/BaseEntity.html":{},"injectables/CreateUserCommand.html":{},"classes/DatabaseSeeder.html":{},"injectables/RequestContextMiddleware.html":{},"injectables/SchemaService.html":{},"entities/User.html":{},"injectables/UserService.html":{},"injectables/UserSubscriber.html":{},"dependencies.html":{}}}],["orm/migrations",{"_index":1074,"title":{},"body":{"classes/Migration20250730220636.html":{},"dependencies.html":{}}}],["orm/nestjs",{"_index":97,"title":{},"body":{"modules/AppModule.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["orm/postgresql",{"_index":1684,"title":{},"body":{"dependencies.html":{}}}],["orm/seeder",{"_index":869,"title":{},"body":{"classes/DatabaseSeeder.html":{},"classes/UserFactory.html":{}}}],["os",{"_index":1171,"title":{},"body":{"classes/PasswordResetEmailConsumer.html":{}}}],["os.cpus().length",{"_index":1179,"title":{},"body":{"classes/PasswordResetEmailConsumer.html":{}}}],["otelsdk",{"_index":1669,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["out",{"_index":70,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRedisModule.html":{},"modules/AuthModule.html":{},"modules/EmailModule.html":{},"modules/HttpClientModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["override",{"_index":1075,"title":{},"body":{"classes/Migration20250730220636.html":{}}}],["overview",{"_index":1804,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":1672,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["param",{"_index":238,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["parameters",{"_index":77,"title":{},"body":{"modules/AppModule.html":{},"injectables/AppRedisService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CatchAllFilter.html":{},"injectables/CloudinaryService.html":{},"injectables/CreateUserCommand.html":{},"classes/DatabaseSeeder.html":{},"classes/EmailService.html":{},"injectables/HttpClientService.html":{},"interfaces/IPaymentService.html":{},"interfaces/IStrorageService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/MorganMiddleware.html":{},"classes/PasswordResetEmailConsumer.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/RequestContextMiddleware.html":{},"guards/RoleGuard.html":{},"injectables/S3Service.html":{},"injectables/SchemaService.html":{},"injectables/StripeService.html":{},"injectables/SuccessResponseInterceptor.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"injectables/UserSubscriber.html":{},"miscellaneous/functions.html":{}}}],["params",{"_index":965,"title":{},"body":{"interfaces/IPaymentService.html":{},"injectables/StripeService.html":{}}}],["parsed",{"_index":1575,"title":{},"body":{"injectables/UserService.html":{}}}],["parseemail",{"_index":734,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["parseemail(val",{"_index":743,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["parsefirstname",{"_index":735,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["parsefirstname(val",{"_index":749,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["parselastname",{"_index":736,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["parselastname(val",{"_index":753,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["parser",{"_index":1306,"title":{},"body":{"injectables/S3Service.html":{}}}],["parserole",{"_index":737,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["parserole(val",{"_index":756,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["parseurl",{"_index":1304,"title":{},"body":{"injectables/S3Service.html":{}}}],["partial",{"_index":1508,"title":{},"body":{"classes/UserFactory.html":{}}}],["partialtype",{"_index":1418,"title":{},"body":{"classes/UpdateProfileDto.html":{}}}],["pass",{"_index":437,"title":{},"body":{"injectables/AuthService.html":{},"modules/EmailModule.html":{}}}],["passport",{"_index":1041,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["passportmodule",{"_index":371,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":1042,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["passportstrategy(strategy",{"_index":1006,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["passreqtocallback",{"_index":1048,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["password",{"_index":291,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ChangePasswordDto.html":{},"injectables/CreateUserCommand.html":{},"classes/CreateUserDto.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"classes/Migration20250730220636.html":{},"classes/ResetPasswordDto.html":{},"classes/UpdateProfileDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"classes/UserFactory.html":{},"injectables/UserService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["password')@httpcode(httpstatus.ok)@apioperation({summary",{"_index":289,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{}}}],["password'})@apibody({type",{"_index":311,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{}}}],["password.dto",{"_index":327,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["password.dto.ts",{"_index":654,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/ForgotPasswordDto.html":{},"classes/ResetPasswordDto.html":{},"coverage.html":{}}}],["password.dto.ts:19",{"_index":673,"title":{},"body":{"classes/ChangePasswordDto.html":{}}}],["password.dto.ts:25",{"_index":1272,"title":{},"body":{"classes/ResetPasswordDto.html":{}}}],["password.dto.ts:35",{"_index":671,"title":{},"body":{"classes/ChangePasswordDto.html":{}}}],["password.dto.ts:41",{"_index":1271,"title":{},"body":{"classes/ResetPasswordDto.html":{}}}],["password.dto.ts:50",{"_index":1274,"title":{},"body":{"classes/ResetPasswordDto.html":{}}}],["password.dto.ts:7",{"_index":918,"title":{},"body":{"classes/ForgotPasswordDto.html":{}}}],["password_character_set",{"_index":772,"title":{},"body":{"injectables/CreateUserCommand.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["password_reset",{"_index":1756,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["password_reset_email_queue_name",{"_index":378,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/PasswordResetEmailConsumer.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["password_reset_requested",{"_index":1096,"title":{},"body":{"classes/Migration20250730220636.html":{}}}],["passwordresetemailconsumer",{"_index":1163,"title":{"classes/PasswordResetEmailConsumer.html":{}},"body":{"classes/PasswordResetEmailConsumer.html":{},"coverage.html":{}}}],["passwordresetemailqueue",{"_index":425,"title":{},"body":{"injectables/AuthService.html":{}}}],["passwordresetrequested",{"_index":529,"title":{},"body":{"injectables/AuthService.html":{},"entities/User.html":{}}}],["passwordreseturl",{"_index":419,"title":{},"body":{"injectables/AuthService.html":{}}}],["patch",{"_index":1478,"title":{},"body":{"controllers/UserController.html":{},"miscellaneous/enumerations.html":{}}}],["patch('update",{"_index":1474,"title":{},"body":{"controllers/UserController.html":{}}}],["path",{"_index":146,"title":{},"body":{"modules/AppModule.html":{},"classes/CatchAllFilter.html":{},"modules/EmailModule.html":{},"interfaces/ErrorResponse.html":{},"classes/Migration20250730220636.html":{},"entities/User.html":{}}}],["path/webhook",{"_index":147,"title":{},"body":{"modules/AppModule.html":{}}}],["payload",{"_index":489,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["payload.email",{"_index":533,"title":{},"body":{"injectables/AuthService.html":{}}}],["payload.sub",{"_index":514,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["payment",{"_index":1399,"title":{},"body":{"injectables/StripeService.html":{}}}],["payment_intent.succeeded",{"_index":1410,"title":{},"body":{"injectables/StripeService.html":{}}}],["payment_provider",{"_index":1198,"title":{},"body":{"modules/PaymentModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["paymentdriverenum",{"_index":1199,"title":{},"body":{"modules/PaymentModule.html":{},"miscellaneous/enumerations.html":{}}}],["paymentdriverenum.stripe",{"_index":1219,"title":{},"body":{"modules/PaymentModule.html":{}}}],["paymentintent",{"_index":1401,"title":{},"body":{"injectables/StripeService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["paymentmodule",{"_index":1189,"title":{"modules/PaymentModule.html":{}},"body":{"modules/PaymentModule.html":{},"modules.html":{}}}],["per",{"_index":1020,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["permission",{"_index":1288,"title":{},"body":{"guards/RoleGuard.html":{}}}],["phone",{"_index":821,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/Migration20250730220636.html":{},"entities/User.html":{}}}],["phone_number",{"_index":1092,"title":{},"body":{"classes/Migration20250730220636.html":{}}}],["phonenumber",{"_index":798,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateProfileDto.html":{},"entities/User.html":{},"classes/UserFactory.html":{}}}],["pipeline",{"_index":256,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["pipeline.exec",{"_index":261,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["pipeline.incr(key",{"_index":260,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["pipeline.set(key",{"_index":258,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["port",{"_index":888,"title":{},"body":{"modules/EmailModule.html":{}}}],["post",{"_index":313,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{},"miscellaneous/enumerations.html":{}}}],["post('change",{"_index":1462,"title":{},"body":{"controllers/UserController.html":{}}}],["post('forgot",{"_index":349,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('login",{"_index":334,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('refresh",{"_index":344,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('reset",{"_index":353,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('sign",{"_index":1487,"title":{},"body":{"controllers/UserController.html":{}}}],["postal",{"_index":824,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["postal/zip",{"_index":1114,"title":{},"body":{"classes/Migration20250730220636.html":{},"entities/User.html":{}}}],["postal_code",{"_index":1088,"title":{},"body":{"classes/Migration20250730220636.html":{}}}],["postalcode",{"_index":799,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/User.html":{},"classes/UserFactory.html":{}}}],["prefix",{"_index":281,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{}}}],["presigner",{"_index":1310,"title":{},"body":{"injectables/S3Service.html":{},"dependencies.html":{}}}],["presigner.presign",{"_index":1341,"title":{},"body":{"injectables/S3Service.html":{}}}],["preventserverstart",{"_index":1837,"title":{},"body":{"miscellaneous/variables.html":{}}}],["primary",{"_index":1100,"title":{},"body":{"classes/Migration20250730220636.html":{}}}],["primarykey",{"_index":568,"title":{},"body":{"classes/BaseEntity.html":{}}}],["primarykey({type",{"_index":560,"title":{},"body":{"classes/BaseEntity.html":{}}}],["private",{"_index":178,"title":{},"body":{"injectables/AppRedisService.html":{},"injectables/AuthService.html":{},"classes/CatchAllFilter.html":{},"injectables/CloudinaryService.html":{},"injectables/CreateUserCommand.html":{},"classes/EmailService.html":{},"injectables/HttpClientService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/MorganMiddleware.html":{},"classes/PasswordResetEmailConsumer.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/S3Service.html":{},"injectables/SchemaService.html":{},"injectables/StripeService.html":{},"injectables/SuccessResponseInterceptor.html":{},"entities/User.html":{},"injectables/UserService.html":{},"injectables/UserSubscriber.html":{}}}],["process",{"_index":1165,"title":{},"body":{"classes/PasswordResetEmailConsumer.html":{}}}],["process(job",{"_index":1168,"title":{},"body":{"classes/PasswordResetEmailConsumer.html":{}}}],["process.env.db_ssl",{"_index":1842,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.node_env",{"_index":127,"title":{},"body":{"modules/AppModule.html":{}}}],["processed",{"_index":1188,"title":{},"body":{"classes/PasswordResetEmailConsumer.html":{}}}],["processing",{"_index":1180,"title":{},"body":{"classes/PasswordResetEmailConsumer.html":{}}}],["processor",{"_index":1172,"title":{},"body":{"classes/PasswordResetEmailConsumer.html":{}}}],["processor(password_reset_email_queue_name",{"_index":1177,"title":{},"body":{"classes/PasswordResetEmailConsumer.html":{}}}],["production",{"_index":128,"title":{},"body":{"modules/AppModule.html":{},"injectables/SchemaService.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["profile",{"_index":862,"title":{},"body":{"classes/CreateUserResponseDto.html":{},"classes/GetProfileResponseDto.html":{},"controllers/UserController.html":{}}}],["profile')@httpcode(httpstatus.ok)@apioperation({summary",{"_index":1475,"title":{},"body":{"controllers/UserController.html":{}}}],["profile'})@apibody({type",{"_index":1476,"title":{},"body":{"controllers/UserController.html":{}}}],["profile.dto",{"_index":1484,"title":{},"body":{"controllers/UserController.html":{}}}],["profile.dto.ts",{"_index":1417,"title":{},"body":{"classes/UpdateProfileDto.html":{},"coverage.html":{}}}],["project",{"_index":1784,"title":{},"body":{"index.html":{}}}],["prometheus",{"_index":1702,"title":{},"body":{"dependencies.html":{}}}],["prometheusexporter",{"_index":1670,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["promise",{"_index":198,"title":{},"body":{"injectables/AppRedisService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CloudinaryService.html":{},"injectables/CreateUserCommand.html":{},"classes/DatabaseSeeder.html":{},"classes/EmailService.html":{},"injectables/HttpClientService.html":{},"interfaces/IPaymentService.html":{},"interfaces/IStrorageService.html":{},"injectables/LocalStrategy.html":{},"classes/Migration20250730220636.html":{},"guards/RoleGuard.html":{},"injectables/S3Service.html":{},"injectables/StripeService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["promise((resolve",{"_index":714,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["promise.all",{"_index":1581,"title":{},"body":{"injectables/UserService.html":{}}}],["propagators",{"_index":1831,"title":{},"body":{"miscellaneous/variables.html":{}}}],["properties",{"_index":9,"title":{"properties.html":{}},"body":{"interfaces/ApiResponse.html":{},"injectables/AppRedisService.html":{},"classes/AuthResponseDto.html":{},"injectables/AuthService.html":{},"classes/BaseEntity.html":{},"classes/CatchAllFilter.html":{},"classes/ChangePasswordDto.html":{},"injectables/CreateUserCommand.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserResponseDto.html":{},"interfaces/ErrorResponse.html":{},"classes/ForgotPasswordDto.html":{},"classes/GetProfileResponseDto.html":{},"injectables/HttpClientService.html":{},"classes/LoginDto.html":{},"classes/RefreshTokenDto.html":{},"classes/ResetPasswordDto.html":{},"injectables/S3Service.html":{},"entities/User.html":{},"classes/UserFactory.html":{},"injectables/UserService.html":{},"properties.html":{}}}],["property",{"_index":569,"title":{},"body":{"classes/BaseEntity.html":{},"entities/User.html":{}}}],["property({type",{"_index":547,"title":{},"body":{"classes/BaseEntity.html":{},"entities/User.html":{}}}],["property({unique",{"_index":1434,"title":{},"body":{"entities/User.html":{}}}],["provide",{"_index":398,"title":{},"body":{"modules/AuthModule.html":{},"modules/PaymentModule.html":{},"modules/StorageModule.html":{}}}],["provided",{"_index":1223,"title":{},"body":{"classes/RefreshTokenDto.html":{}}}],["providers",{"_index":58,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRedisModule.html":{},"modules/AuthModule.html":{},"modules/EmailModule.html":{},"modules/HttpClientModule.html":{},"modules/PaymentModule.html":{},"injectables/S3Service.html":{},"modules/StorageModule.html":{},"modules/UserModule.html":{},"dependencies.html":{},"overview.html":{}}}],["public",{"_index":41,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"modules/PaymentModule.html":{},"controllers/UserController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["public()@post('forgot",{"_index":288,"title":{},"body":{"controllers/AuthController.html":{}}}],["public()@post('refresh')@httpcode(httpstatus.ok)@apioperation({summary",{"_index":303,"title":{},"body":{"controllers/AuthController.html":{}}}],["public()@post('reset",{"_index":310,"title":{},"body":{"controllers/AuthController.html":{}}}],["public()@post('sign",{"_index":1465,"title":{},"body":{"controllers/UserController.html":{}}}],["public_id=${result.public_id",{"_index":725,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["pug",{"_index":1739,"title":{},"body":{"dependencies.html":{}}}],["pugadapter",{"_index":882,"title":{},"body":{"modules/EmailModule.html":{}}}],["put",{"_index":978,"title":{},"body":{"interfaces/IStrorageService.html":{},"injectables/S3Service.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["query",{"_index":1549,"title":{},"body":{"injectables/UserService.html":{}}}],["query?.email",{"_index":1571,"title":{},"body":{"injectables/UserService.html":{}}}],["query?.id",{"_index":1569,"title":{},"body":{"injectables/UserService.html":{}}}],["queue",{"_index":426,"title":{},"body":{"injectables/AuthService.html":{},"modules/PaymentModule.html":{},"injectables/StripeService.html":{},"miscellaneous/variables.html":{}}}],["queued",{"_index":1413,"title":{},"body":{"injectables/StripeService.html":{}}}],["queues",{"_index":139,"title":{},"body":{"modules/AppModule.html":{}}}],["quickly",{"_index":1757,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["r",{"_index":757,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["raw",{"_index":1015,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["readonly",{"_index":142,"title":{},"body":{"modules/AppModule.html":{},"injectables/AppRedisService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CatchAllFilter.html":{},"injectables/CloudinaryService.html":{},"injectables/CreateUserCommand.html":{},"classes/EmailService.html":{},"injectables/HttpClientService.html":{},"injectables/MorganMiddleware.html":{},"classes/PasswordResetEmailConsumer.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/RequestContextMiddleware.html":{},"guards/RoleGuard.html":{},"injectables/S3Service.html":{},"injectables/SchemaService.html":{},"injectables/StripeService.html":{},"injectables/SuccessResponseInterceptor.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"injectables/UserSubscriber.html":{}}}],["readylog",{"_index":170,"title":{},"body":{"modules/AppRedisModule.html":{}}}],["received",{"_index":1409,"title":{},"body":{"injectables/StripeService.html":{}}}],["record",{"_index":552,"title":{},"body":{"classes/BaseEntity.html":{},"injectables/CreateUserCommand.html":{},"classes/EmailService.html":{},"classes/Migration20250730220636.html":{}}}],["redis",{"_index":167,"title":{},"body":{"modules/AppRedisModule.html":{},"injectables/AppRedisService.html":{},"dependencies.html":{}}}],["redis.service",{"_index":164,"title":{},"body":{"modules/AppRedisModule.html":{}}}],["redismodule",{"_index":165,"title":{},"body":{"modules/AppRedisModule.html":{}}}],["redismodule.forrootasync",{"_index":168,"title":{},"body":{"modules/AppRedisModule.html":{}}}],["redisservice",{"_index":189,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["referrer",{"_index":1153,"title":{},"body":{"injectables/MorganMiddleware.html":{}}}],["reflect",{"_index":1741,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":986,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/RoleGuard.html":{}}}],["reflector.createdecorator",{"_index":1841,"title":{},"body":{"miscellaneous/variables.html":{}}}],["refresh",{"_index":284,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/RefreshTokenDto.html":{}}}],["refresh(@body",{"_index":345,"title":{},"body":{"controllers/AuthController.html":{}}}],["refresh(body",{"_index":302,"title":{},"body":{"controllers/AuthController.html":{}}}],["refresh(refreshtoken",{"_index":432,"title":{},"body":{"injectables/AuthService.html":{}}}],["refresh_token",{"_index":337,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["refreshed",{"_index":348,"title":{},"body":{"controllers/AuthController.html":{}}}],["refreshtoken",{"_index":343,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/RefreshTokenDto.html":{}}}],["refreshtokendto",{"_index":306,"title":{"classes/RefreshTokenDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/RefreshTokenDto.html":{},"coverage.html":{}}}],["region",{"_index":1337,"title":{},"body":{"injectables/S3Service.html":{},"modules/StorageModule.html":{}}}],["register",{"_index":1192,"title":{},"body":{"modules/PaymentModule.html":{},"modules/StorageModule.html":{}}}],["reject",{"_index":715,"title":{},"body":{"injectables/CloudinaryService.html":{},"injectables/JwtStrategy.html":{}}}],["reject(error",{"_index":724,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["remote",{"_index":1147,"title":{},"body":{"injectables/MorganMiddleware.html":{}}}],["repository",{"_index":1783,"title":{},"body":{"index.html":{}}}],["req",{"_index":301,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtStrategy.html":{},"injectables/MorganMiddleware.html":{},"injectables/RequestContextMiddleware.html":{},"controllers/UserController.html":{}}}],["req.url",{"_index":1145,"title":{},"body":{"injectables/MorganMiddleware.html":{}}}],["req.url.match(/\\/v1\\/queues",{"_index":1146,"title":{},"body":{"injectables/MorganMiddleware.html":{}}}],["req.user",{"_index":339,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{}}}],["req.user.id",{"_index":1499,"title":{},"body":{"controllers/UserController.html":{}}}],["req?.user?.id",{"_index":1496,"title":{},"body":{"controllers/UserController.html":{}}}],["req[body",{"_index":1156,"title":{},"body":{"injectables/MorganMiddleware.html":{}}}],["req[header",{"_index":1155,"title":{},"body":{"injectables/MorganMiddleware.html":{}}}],["request",{"_index":290,"title":{},"body":{"controllers/AuthController.html":{},"classes/CatchAllFilter.html":{},"injectables/HttpClientService.html":{},"injectables/JwtStrategy.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/RequestContextMiddleware.html":{},"guards/RoleGuard.html":{},"injectables/S3Service.html":{},"injectables/SuccessResponseInterceptor.html":{},"controllers/UserController.html":{},"dependencies.html":{}}}],["request.method",{"_index":633,"title":{},"body":{"classes/CatchAllFilter.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/SuccessResponseInterceptor.html":{}}}],["request.url",{"_index":634,"title":{},"body":{"classes/CatchAllFilter.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/SuccessResponseInterceptor.html":{}}}],["request?.user?.role",{"_index":1286,"title":{},"body":{"guards/RoleGuard.html":{}}}],["requestbodyandresponseinterceptor",{"_index":1226,"title":{"injectables/RequestBodyAndResponseInterceptor.html":{}},"body":{"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/SuccessResponseInterceptor.html":{},"coverage.html":{}}}],["requestcontext",{"_index":1266,"title":{},"body":{"injectables/RequestContextMiddleware.html":{}}}],["requestcontext.create(this.orm.em",{"_index":1267,"title":{},"body":{"injectables/RequestContextMiddleware.html":{}}}],["requestcontextmiddleware",{"_index":115,"title":{"injectables/RequestContextMiddleware.html":{}},"body":{"modules/AppModule.html":{},"injectables/RequestContextMiddleware.html":{},"coverage.html":{}}}],["requested",{"_index":536,"title":{},"body":{"injectables/AuthService.html":{},"classes/Migration20250730220636.html":{},"entities/User.html":{}}}],["requestmethod",{"_index":83,"title":{},"body":{"modules/AppModule.html":{}}}],["requestmethod.all",{"_index":145,"title":{},"body":{"modules/AppModule.html":{}}}],["requesturl",{"_index":619,"title":{},"body":{"classes/CatchAllFilter.html":{}}}],["require('buffer",{"_index":694,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["required",{"_index":746,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["requiredrole",{"_index":1283,"title":{},"body":{"guards/RoleGuard.html":{}}}],["res",{"_index":1139,"title":{},"body":{"injectables/MorganMiddleware.html":{},"injectables/RequestContextMiddleware.html":{}}}],["res.statuscode",{"_index":1158,"title":{},"body":{"injectables/MorganMiddleware.html":{}}}],["res[content",{"_index":1150,"title":{},"body":{"injectables/MorganMiddleware.html":{}}}],["reset",{"_index":69,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRedisModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/EmailModule.html":{},"modules/HttpClientModule.html":{},"classes/Migration20250730220636.html":{},"classes/ResetPasswordDto.html":{},"entities/User.html":{},"modules/UserModule.html":{},"miscellaneous/enumerations.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["reset'})@apibody({type",{"_index":292,"title":{},"body":{"controllers/AuthController.html":{}}}],["resetpassword",{"_index":285,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["resetpassword(body",{"_index":308,"title":{},"body":{"controllers/AuthController.html":{}}}],["resetpassword(resettoken",{"_index":434,"title":{},"body":{"injectables/AuthService.html":{}}}],["resetpassworddto",{"_index":309,"title":{"classes/ResetPasswordDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/ResetPasswordDto.html":{},"coverage.html":{}}}],["resettoken",{"_index":354,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ResetPasswordDto.html":{}}}],["reseturl",{"_index":522,"title":{},"body":{"injectables/AuthService.html":{},"classes/PasswordResetEmailConsumer.html":{}}}],["resolve(result",{"_index":727,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["resource_type",{"_index":719,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["response",{"_index":617,"title":{},"body":{"classes/CatchAllFilter.html":{},"interfaces/IStrorageService.html":{},"injectables/MorganMiddleware.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/RequestContextMiddleware.html":{},"injectables/S3Service.html":{},"injectables/SuccessResponseInterceptor.html":{}}}],["response.dto.ts",{"_index":403,"title":{},"body":{"classes/AuthResponseDto.html":{},"coverage.html":{}}}],["response.dto.ts:14",{"_index":412,"title":{},"body":{"classes/AuthResponseDto.html":{}}}],["response.dto.ts:8",{"_index":408,"title":{},"body":{"classes/AuthResponseDto.html":{}}}],["response.interface",{"_index":330,"title":{},"body":{"controllers/AuthController.html":{},"classes/CatchAllFilter.html":{},"controllers/UserController.html":{}}}],["response.interface.ts",{"_index":7,"title":{},"body":{"interfaces/ApiResponse.html":{},"interfaces/ErrorResponse.html":{},"coverage.html":{}}}],["response.message",{"_index":1252,"title":{},"body":{"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/SuccessResponseInterceptor.html":{}}}],["response.statuscode",{"_index":1249,"title":{},"body":{"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/SuccessResponseInterceptor.html":{}}}],["response.ts",{"_index":1667,"title":{},"body":{"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["response?.data",{"_index":1254,"title":{},"body":{"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/SuccessResponseInterceptor.html":{}}}],["response?.message",{"_index":1251,"title":{},"body":{"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/SuccessResponseInterceptor.html":{}}}],["response?.statuscode",{"_index":1247,"title":{},"body":{"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/SuccessResponseInterceptor.html":{}}}],["responsebody",{"_index":631,"title":{},"body":{"classes/CatchAllFilter.html":{}}}],["responsedata",{"_index":1253,"title":{},"body":{"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/SuccessResponseInterceptor.html":{}}}],["result",{"_index":269,"title":{},"body":{"injectables/AppRedisService.html":{},"injectables/AuthService.html":{},"injectables/CloudinaryService.html":{},"injectables/UserService.html":{}}}],["results",{"_index":22,"title":{},"body":{"interfaces/ApiResponse.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AppRedisModule.html":{},"injectables/AppRedisService.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/AuthResponseDto.html":{},"injectables/AuthService.html":{},"classes/BaseEntity.html":{},"classes/CatchAllFilter.html":{},"classes/ChangePasswordDto.html":{},"injectables/CloudinaryService.html":{},"injectables/CreateUserCommand.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserResponseDto.html":{},"classes/DatabaseSeeder.html":{},"modules/EmailModule.html":{},"classes/EmailService.html":{},"interfaces/ErrorResponse.html":{},"classes/ForgotPasswordDto.html":{},"classes/GetProfileResponseDto.html":{},"modules/HttpClientModule.html":{},"injectables/HttpClientService.html":{},"interfaces/IPaymentService.html":{},"interfaces/IStrorageService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"classes/Migration20250730220636.html":{},"injectables/MorganMiddleware.html":{},"classes/PasswordResetEmailConsumer.html":{},"modules/PaymentModule.html":{},"classes/RefreshTokenDto.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/RequestContextMiddleware.html":{},"classes/ResetPasswordDto.html":{},"guards/RoleGuard.html":{},"injectables/S3Service.html":{},"injectables/SchemaService.html":{},"modules/StorageModule.html":{},"injectables/StripeService.html":{},"injectables/SuccessResponseInterceptor.html":{},"classes/UpdateProfileDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"classes/UserFactory.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"injectables/UserSubscriber.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["results[ttl",{"_index":263,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["return",{"_index":50,"title":{},"body":{"controllers/AppController.html":{},"modules/AppRedisModule.html":{},"injectables/AppRedisService.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CatchAllFilter.html":{},"injectables/CloudinaryService.html":{},"injectables/CreateUserCommand.html":{},"classes/CreateUserDto.html":{},"injectables/HttpClientService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/MorganMiddleware.html":{},"modules/PaymentModule.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"guards/RoleGuard.html":{},"injectables/S3Service.html":{},"modules/StorageModule.html":{},"injectables/StripeService.html":{},"injectables/SuccessResponseInterceptor.html":{},"controllers/UserController.html":{},"classes/UserFactory.html":{},"injectables/UserService.html":{},"injectables/UserSubscriber.html":{}}}],["returns",{"_index":38,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppRedisService.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CatchAllFilter.html":{},"injectables/CloudinaryService.html":{},"injectables/CreateUserCommand.html":{},"classes/DatabaseSeeder.html":{},"classes/EmailService.html":{},"injectables/HttpClientService.html":{},"interfaces/IPaymentService.html":{},"interfaces/IStrorageService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/Migration20250730220636.html":{},"injectables/MorganMiddleware.html":{},"classes/PasswordResetEmailConsumer.html":{},"modules/PaymentModule.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/RequestContextMiddleware.html":{},"guards/RoleGuard.html":{},"injectables/S3Service.html":{},"injectables/SchemaService.html":{},"modules/StorageModule.html":{},"injectables/StripeService.html":{},"injectables/SuccessResponseInterceptor.html":{},"controllers/UserController.html":{},"classes/UserFactory.html":{},"injectables/UserService.html":{},"injectables/UserSubscriber.html":{},"miscellaneous/functions.html":{}}}],["role",{"_index":758,"title":{},"body":{"injectables/CreateUserCommand.html":{},"classes/CreateUserDto.html":{},"classes/Migration20250730220636.html":{},"guards/RoleGuard.html":{},"classes/UpdateProfileDto.html":{},"entities/User.html":{},"classes/UserFactory.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["roleguard",{"_index":1278,"title":{"guards/RoleGuard.html":{}},"body":{"guards/RoleGuard.html":{},"coverage.html":{}}}],["route",{"_index":138,"title":{},"body":{"modules/AppModule.html":{},"classes/CatchAllFilter.html":{},"guards/RoleGuard.html":{}}}],["run",{"_index":738,"title":{},"body":{"injectables/CreateUserCommand.html":{},"classes/DatabaseSeeder.html":{},"index.html":{}}}],["run(em",{"_index":867,"title":{},"body":{"classes/DatabaseSeeder.html":{}}}],["run(inputs",{"_index":761,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["rxjs",{"_index":949,"title":{},"body":{"injectables/HttpClientService.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"guards/RoleGuard.html":{},"injectables/SuccessResponseInterceptor.html":{},"dependencies.html":{}}}],["rxjs/operators",{"_index":1238,"title":{},"body":{"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/SuccessResponseInterceptor.html":{}}}],["s3",{"_index":1294,"title":{},"body":{"injectables/S3Service.html":{},"modules/StorageModule.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{}}}],["s3.service",{"_index":1362,"title":{},"body":{"modules/StorageModule.html":{}}}],["s3bucket",{"_index":1291,"title":{},"body":{"injectables/S3Service.html":{}}}],["s3client",{"_index":1293,"title":{},"body":{"injectables/S3Service.html":{},"modules/StorageModule.html":{}}}],["s3module",{"_index":1364,"title":{},"body":{"modules/StorageModule.html":{}}}],["s3module.forrootasync",{"_index":1365,"title":{},"body":{"modules/StorageModule.html":{}}}],["s3putobjectresponse",{"_index":976,"title":{},"body":{"interfaces/IStrorageService.html":{},"injectables/S3Service.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["s3region",{"_index":1292,"title":{},"body":{"injectables/S3Service.html":{}}}],["s3requestpresigner",{"_index":1307,"title":{},"body":{"injectables/S3Service.html":{}}}],["s3service",{"_index":1289,"title":{"injectables/S3Service.html":{}},"body":{"injectables/S3Service.html":{},"modules/StorageModule.html":{},"coverage.html":{}}}],["s3service(configservice",{"_index":1376,"title":{},"body":{"modules/StorageModule.html":{}}}],["s3service.name",{"_index":1325,"title":{},"body":{"injectables/S3Service.html":{}}}],["s@]+@[^\\s@]+\\.[^\\s@]{2,}$/i",{"_index":778,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["safeuser",{"_index":1494,"title":{},"body":{"controllers/UserController.html":{}}}],["salt",{"_index":537,"title":{},"body":{"injectables/AuthService.html":{}}}],["saltrounds",{"_index":420,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserSubscriber.html":{}}}],["sanitizebody",{"_index":583,"title":{},"body":{"classes/CatchAllFilter.html":{}}}],["sanitizebody(body",{"_index":603,"title":{},"body":{"classes/CatchAllFilter.html":{}}}],["schema",{"_index":1353,"title":{},"body":{"injectables/SchemaService.html":{}}}],["schema.service",{"_index":98,"title":{},"body":{"modules/AppModule.html":{}}}],["schemaservice",{"_index":67,"title":{"injectables/SchemaService.html":{}},"body":{"modules/AppModule.html":{},"injectables/SchemaService.html":{},"coverage.html":{},"overview.html":{}}}],["schemaservice.name",{"_index":1355,"title":{},"body":{"injectables/SchemaService.html":{}}}],["sdk/credential",{"_index":1312,"title":{},"body":{"injectables/S3Service.html":{},"dependencies.html":{}}}],["sdk/s3",{"_index":1309,"title":{},"body":{"injectables/S3Service.html":{},"dependencies.html":{}}}],["sdk/util",{"_index":1319,"title":{},"body":{"injectables/S3Service.html":{},"dependencies.html":{}}}],["seconds",{"_index":225,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["secret",{"_index":384,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{}}}],["secretaccesskey",{"_index":1368,"title":{},"body":{"modules/StorageModule.html":{}}}],["secretorkey",{"_index":1046,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["secure",{"_index":890,"title":{},"body":{"modules/EmailModule.html":{}}}],["securely",{"_index":1758,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["seeder",{"_index":866,"title":{},"body":{"classes/DatabaseSeeder.html":{}}}],["sendemail",{"_index":902,"title":{},"body":{"classes/EmailService.html":{}}}],["sendemail(to",{"_index":906,"title":{},"body":{"classes/EmailService.html":{}}}],["sending",{"_index":911,"title":{},"body":{"classes/EmailService.html":{}}}],["sent",{"_index":352,"title":{},"body":{"controllers/AuthController.html":{},"classes/EmailService.html":{},"classes/ResetPasswordDto.html":{}}}],["serializable",{"_index":1580,"title":{},"body":{"injectables/UserService.html":{}}}],["services/email/email.service",{"_index":1174,"title":{},"body":{"classes/PasswordResetEmailConsumer.html":{}}}],["services/redis/redis.module",{"_index":377,"title":{},"body":{"modules/AuthModule.html":{},"modules/UserModule.html":{}}}],["services/redis/redis.service",{"_index":457,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["session",{"_index":1019,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/StripeService.html":{}}}],["session.id",{"_index":1397,"title":{},"body":{"injectables/StripeService.html":{}}}],["set",{"_index":185,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["set(key",{"_index":216,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["setmetadata(is_public_key",{"_index":1824,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setting",{"_index":246,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["setup",{"_index":1785,"title":{},"body":{"index.html":{}}}],["setupswagger",{"_index":1649,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["setupswagger(app",{"_index":1776,"title":{},"body":{"miscellaneous/functions.html":{}}}],["sha256",{"_index":1338,"title":{},"body":{"injectables/S3Service.html":{}}}],["sign",{"_index":1467,"title":{},"body":{"controllers/UserController.html":{}}}],["signedurlobject",{"_index":1340,"title":{},"body":{"injectables/S3Service.html":{}}}],["signoptions",{"_index":386,"title":{},"body":{"modules/AuthModule.html":{}}}],["single",{"_index":1018,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["size=${file.size",{"_index":710,"title":{},"body":{"injectables/CloudinaryService.html":{},"injectables/S3Service.html":{}}}],["smithy/hash",{"_index":1314,"title":{},"body":{"injectables/S3Service.html":{},"dependencies.html":{}}}],["smithy/protocol",{"_index":1317,"title":{},"body":{"injectables/S3Service.html":{},"dependencies.html":{}}}],["smithy/url",{"_index":1305,"title":{},"body":{"injectables/S3Service.html":{}}}],["smtp.auth.user",{"_index":895,"title":{},"body":{"modules/EmailModule.html":{}}}],["soft",{"_index":557,"title":{},"body":{"classes/BaseEntity.html":{},"classes/Migration20250730220636.html":{}}}],["softdelete",{"_index":572,"title":{},"body":{"classes/BaseEntity.html":{}}}],["source",{"_index":4,"title":{},"body":{"interfaces/ApiResponse.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AppRedisModule.html":{},"injectables/AppRedisService.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/AuthResponseDto.html":{},"injectables/AuthService.html":{},"classes/BaseEntity.html":{},"classes/CatchAllFilter.html":{},"classes/ChangePasswordDto.html":{},"injectables/CloudinaryService.html":{},"injectables/CreateUserCommand.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserResponseDto.html":{},"classes/DatabaseSeeder.html":{},"modules/EmailModule.html":{},"classes/EmailService.html":{},"interfaces/ErrorResponse.html":{},"classes/ForgotPasswordDto.html":{},"classes/GetProfileResponseDto.html":{},"modules/HttpClientModule.html":{},"injectables/HttpClientService.html":{},"interfaces/IPaymentService.html":{},"interfaces/IStrorageService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"classes/Migration20250730220636.html":{},"injectables/MorganMiddleware.html":{},"classes/PasswordResetEmailConsumer.html":{},"modules/PaymentModule.html":{},"classes/RefreshTokenDto.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/RequestContextMiddleware.html":{},"classes/ResetPasswordDto.html":{},"guards/RoleGuard.html":{},"injectables/S3Service.html":{},"injectables/SchemaService.html":{},"modules/StorageModule.html":{},"injectables/StripeService.html":{},"injectables/SuccessResponseInterceptor.html":{},"classes/UpdateProfileDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"classes/UserFactory.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"injectables/UserSubscriber.html":{}}}],["springfield",{"_index":844,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["springfield'})@isstring()@isoptional",{"_index":804,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["src/.../auth",{"_index":1815,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../checkout.ts",{"_index":1816,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../common.utils.ts",{"_index":1770,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../index.ts",{"_index":1752,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../main.cli.ts",{"_index":1767,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../main.ts",{"_index":1768,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../mikro",{"_index":1822,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../payment",{"_index":1817,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../public.decorator.ts",{"_index":1820,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../s3",{"_index":1818,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../swagger.config.ts",{"_index":1772,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../tracing.ts",{"_index":1821,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../user.util.ts",{"_index":1771,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../winston.config.ts",{"_index":1769,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/app.controller.ts",{"_index":27,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:12",{"_index":37,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":71,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.module.ts:59",{"_index":76,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":274,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":276,"title":{},"body":{"injectables/AppService.html":{}}}],["src/commands/create",{"_index":729,"title":{},"body":{"injectables/CreateUserCommand.html":{},"coverage.html":{}}}],["src/common/constants/index.ts",{"_index":1629,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/common/decorators/index.ts",{"_index":1633,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/common/entities/base.entity.ts",{"_index":542,"title":{},"body":{"classes/BaseEntity.html":{},"coverage.html":{}}}],["src/common/entities/base.entity.ts:15",{"_index":558,"title":{},"body":{"classes/BaseEntity.html":{}}}],["src/common/entities/base.entity.ts:22",{"_index":555,"title":{},"body":{"classes/BaseEntity.html":{}}}],["src/common/entities/base.entity.ts:30",{"_index":566,"title":{},"body":{"classes/BaseEntity.html":{}}}],["src/common/entities/base.entity.ts:8",{"_index":562,"title":{},"body":{"classes/BaseEntity.html":{}}}],["src/common/enums/index.ts",{"_index":1755,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/common/filters/exception.filter.ts",{"_index":576,"title":{},"body":{"classes/CatchAllFilter.html":{},"coverage.html":{}}}],["src/common/filters/exception.filter.ts:108",{"_index":600,"title":{},"body":{"classes/CatchAllFilter.html":{}}}],["src/common/filters/exception.filter.ts:119",{"_index":595,"title":{},"body":{"classes/CatchAllFilter.html":{}}}],["src/common/filters/exception.filter.ts:123",{"_index":604,"title":{},"body":{"classes/CatchAllFilter.html":{}}}],["src/common/filters/exception.filter.ts:20",{"_index":586,"title":{},"body":{"classes/CatchAllFilter.html":{}}}],["src/common/filters/exception.filter.ts:27",{"_index":592,"title":{},"body":{"classes/CatchAllFilter.html":{}}}],["src/common/filters/exception.filter.ts:78",{"_index":602,"title":{},"body":{"classes/CatchAllFilter.html":{}}}],["src/common/filters/exception.filter.ts:92",{"_index":598,"title":{},"body":{"classes/CatchAllFilter.html":{}}}],["src/common/guards/role.guard.ts",{"_index":1280,"title":{},"body":{"guards/RoleGuard.html":{},"coverage.html":{}}}],["src/common/guards/role.guard.ts:13",{"_index":1281,"title":{},"body":{"guards/RoleGuard.html":{}}}],["src/common/guards/role.guard.ts:16",{"_index":1282,"title":{},"body":{"guards/RoleGuard.html":{}}}],["src/common/interceptors/response.interceptor.ts",{"_index":1227,"title":{},"body":{"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/SuccessResponseInterceptor.html":{},"coverage.html":{}}}],["src/common/interceptors/response.interceptor.ts:16",{"_index":1414,"title":{},"body":{"injectables/SuccessResponseInterceptor.html":{}}}],["src/common/interceptors/response.interceptor.ts:53",{"_index":1229,"title":{},"body":{"injectables/RequestBodyAndResponseInterceptor.html":{}}}],["src/common/interceptors/response.interceptor.ts:56",{"_index":1232,"title":{},"body":{"injectables/RequestBodyAndResponseInterceptor.html":{}}}],["src/common/interfaces/api",{"_index":6,"title":{},"body":{"interfaces/ApiResponse.html":{},"coverage.html":{}}}],["src/common/interfaces/error",{"_index":914,"title":{},"body":{"interfaces/ErrorResponse.html":{},"coverage.html":{}}}],["src/common/middlewares/morgan.middleware.ts",{"_index":1136,"title":{},"body":{"injectables/MorganMiddleware.html":{},"coverage.html":{}}}],["src/common/middlewares/morgan.middleware.ts:11",{"_index":1137,"title":{},"body":{"injectables/MorganMiddleware.html":{}}}],["src/common/middlewares/morgan.middleware.ts:14",{"_index":1140,"title":{},"body":{"injectables/MorganMiddleware.html":{}}}],["src/common/middlewares/request",{"_index":1258,"title":{},"body":{"injectables/RequestContextMiddleware.html":{},"coverage.html":{}}}],["src/common/types/index.ts",{"_index":1639,"title":{},"body":{"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/common/utils/common.utils.ts",{"_index":1641,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/common/utils/user.util.ts",{"_index":1643,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/config/mikro",{"_index":1644,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/config/swagger.config.ts",{"_index":1648,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/config/winston.config.ts",{"_index":1650,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/main.cli.ts",{"_index":1652,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/main.ts",{"_index":1653,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/migrations/migration20250730220636.ts",{"_index":1070,"title":{},"body":{"classes/Migration20250730220636.html":{},"coverage.html":{}}}],["src/migrations/migration20250730220636.ts:4",{"_index":1073,"title":{},"body":{"classes/Migration20250730220636.html":{}}}],["src/modules/auth/auth.controller.ts",{"_index":280,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/modules/auth/auth.controller.ts:31",{"_index":300,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/modules/auth/auth.controller.ts:47",{"_index":307,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/modules/auth/auth.controller.ts:63",{"_index":293,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/modules/auth/auth.controller.ts:79",{"_index":312,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/modules/auth/auth.module.ts",{"_index":364,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/modules/auth/auth.service.ts",{"_index":414,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/modules/auth/auth.service.ts:135",{"_index":429,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:160",{"_index":435,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:21",{"_index":444,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:22",{"_index":440,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:23",{"_index":441,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:24",{"_index":443,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:25",{"_index":442,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:26",{"_index":427,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:50",{"_index":438,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:68",{"_index":431,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:83",{"_index":433,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/consumers/auth.consumer.ts",{"_index":1164,"title":{},"body":{"classes/PasswordResetEmailConsumer.html":{},"coverage.html":{}}}],["src/modules/auth/consumers/auth.consumer.ts:12",{"_index":1167,"title":{},"body":{"classes/PasswordResetEmailConsumer.html":{}}}],["src/modules/auth/consumers/auth.consumer.ts:20",{"_index":1170,"title":{},"body":{"classes/PasswordResetEmailConsumer.html":{}}}],["src/modules/auth/decorators/public.decorator.ts",{"_index":1655,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/modules/auth/dto/auth",{"_index":402,"title":{},"body":{"classes/AuthResponseDto.html":{},"coverage.html":{}}}],["src/modules/auth/dto/forgot",{"_index":915,"title":{},"body":{"classes/ForgotPasswordDto.html":{},"coverage.html":{}}}],["src/modules/auth/dto/login.dto.ts",{"_index":1066,"title":{},"body":{"classes/LoginDto.html":{},"coverage.html":{}}}],["src/modules/auth/dto/login.dto.ts:10",{"_index":1067,"title":{},"body":{"classes/LoginDto.html":{}}}],["src/modules/auth/dto/login.dto.ts:16",{"_index":1068,"title":{},"body":{"classes/LoginDto.html":{}}}],["src/modules/auth/dto/refresh",{"_index":1221,"title":{},"body":{"classes/RefreshTokenDto.html":{},"coverage.html":{}}}],["src/modules/auth/dto/reset",{"_index":1268,"title":{},"body":{"classes/ResetPasswordDto.html":{},"coverage.html":{}}}],["src/modules/auth/guards/jwt",{"_index":980,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["src/modules/auth/guards/local",{"_index":1049,"title":{},"body":{"injectables/LocalAuthGuard.html":{},"coverage.html":{}}}],["src/modules/auth/strategies/jwt.strategy.ts",{"_index":1005,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/modules/auth/strategies/jwt.strategy.ts:34",{"_index":1010,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/modules/auth/strategies/jwt.strategy.ts:8",{"_index":1008,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/modules/auth/strategies/local.strategy.ts",{"_index":1051,"title":{},"body":{"injectables/LocalStrategy.html":{},"coverage.html":{}}}],["src/modules/auth/strategies/local.strategy.ts:12",{"_index":1053,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/modules/auth/strategies/local.strategy.ts:20",{"_index":1055,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/modules/auth/types/auth",{"_index":1658,"title":{},"body":{"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/modules/user/dto/change",{"_index":653,"title":{},"body":{"classes/ChangePasswordDto.html":{},"coverage.html":{}}}],["src/modules/user/dto/create",{"_index":791,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/modules/user/dto/responses.dto.ts",{"_index":856,"title":{},"body":{"classes/CreateUserResponseDto.html":{},"classes/GetProfileResponseDto.html":{},"coverage.html":{}}}],["src/modules/user/dto/responses.dto.ts:15",{"_index":858,"title":{},"body":{"classes/CreateUserResponseDto.html":{}}}],["src/modules/user/dto/responses.dto.ts:23",{"_index":920,"title":{},"body":{"classes/GetProfileResponseDto.html":{}}}],["src/modules/user/dto/responses.dto.ts:29",{"_index":919,"title":{},"body":{"classes/GetProfileResponseDto.html":{}}}],["src/modules/user/dto/responses.dto.ts:9",{"_index":859,"title":{},"body":{"classes/CreateUserResponseDto.html":{}}}],["src/modules/user/dto/update",{"_index":1416,"title":{},"body":{"classes/UpdateProfileDto.html":{},"coverage.html":{}}}],["src/modules/user/entities/user.entity.ts",{"_index":1424,"title":{},"body":{"entities/User.html":{},"coverage.html":{}}}],["src/modules/user/entities/user.entity.ts:106",{"_index":1440,"title":{},"body":{"entities/User.html":{}}}],["src/modules/user/entities/user.entity.ts:115",{"_index":1446,"title":{},"body":{"entities/User.html":{}}}],["src/modules/user/entities/user.entity.ts:122",{"_index":1428,"title":{},"body":{"entities/User.html":{}}}],["src/modules/user/entities/user.entity.ts:129",{"_index":1441,"title":{},"body":{"entities/User.html":{}}}],["src/modules/user/entities/user.entity.ts:136",{"_index":1438,"title":{},"body":{"entities/User.html":{}}}],["src/modules/user/entities/user.entity.ts:22",{"_index":1436,"title":{},"body":{"entities/User.html":{}}}],["src/modules/user/entities/user.entity.ts:30",{"_index":1427,"title":{},"body":{"entities/User.html":{}}}],["src/modules/user/entities/user.entity.ts:37",{"_index":1437,"title":{},"body":{"entities/User.html":{}}}],["src/modules/user/entities/user.entity.ts:44",{"_index":1439,"title":{},"body":{"entities/User.html":{}}}],["src/modules/user/entities/user.entity.ts:51",{"_index":1425,"title":{},"body":{"entities/User.html":{}}}],["src/modules/user/entities/user.entity.ts:59",{"_index":1430,"title":{},"body":{"entities/User.html":{}}}],["src/modules/user/entities/user.entity.ts:67",{"_index":1444,"title":{},"body":{"entities/User.html":{}}}],["src/modules/user/entities/user.entity.ts:75",{"_index":1447,"title":{},"body":{"entities/User.html":{}}}],["src/modules/user/entities/user.entity.ts:83",{"_index":1431,"title":{},"body":{"entities/User.html":{}}}],["src/modules/user/entities/user.entity.ts:91",{"_index":1433,"title":{},"body":{"entities/User.html":{}}}],["src/modules/user/entities/user.entity.ts:99",{"_index":1443,"title":{},"body":{"entities/User.html":{}}}],["src/modules/user/factories/user.factory.ts",{"_index":1502,"title":{},"body":{"classes/UserFactory.html":{},"coverage.html":{}}}],["src/modules/user/factories/user.factory.ts:7",{"_index":1506,"title":{},"body":{"classes/UserFactory.html":{}}}],["src/modules/user/factories/user.factory.ts:9",{"_index":1507,"title":{},"body":{"classes/UserFactory.html":{}}}],["src/modules/user/subscribers/user.subscriber.ts",{"_index":1593,"title":{},"body":{"injectables/UserSubscriber.html":{},"coverage.html":{}}}],["src/modules/user/subscribers/user.subscriber.ts:14",{"_index":1597,"title":{},"body":{"injectables/UserSubscriber.html":{}}}],["src/modules/user/subscribers/user.subscriber.ts:22",{"_index":1603,"title":{},"body":{"injectables/UserSubscriber.html":{}}}],["src/modules/user/subscribers/user.subscriber.ts:26",{"_index":1600,"title":{},"body":{"injectables/UserSubscriber.html":{}}}],["src/modules/user/subscribers/user.subscriber.ts:34",{"_index":1602,"title":{},"body":{"injectables/UserSubscriber.html":{}}}],["src/modules/user/subscribers/user.subscriber.ts:44",{"_index":1610,"title":{},"body":{"injectables/UserSubscriber.html":{}}}],["src/modules/user/subscribers/user.subscriber.ts:48",{"_index":1608,"title":{},"body":{"injectables/UserSubscriber.html":{}}}],["src/modules/user/subscribers/user.subscriber.ts:56",{"_index":1606,"title":{},"body":{"injectables/UserSubscriber.html":{}}}],["src/modules/user/user.controller.ts",{"_index":1458,"title":{},"body":{"controllers/UserController.html":{},"coverage.html":{}}}],["src/modules/user/user.controller.ts:28",{"_index":1469,"title":{},"body":{"controllers/UserController.html":{}}}],["src/modules/user/user.controller.ts:40",{"_index":1472,"title":{},"body":{"controllers/UserController.html":{}}}],["src/modules/user/user.controller.ts:55",{"_index":1477,"title":{},"body":{"controllers/UserController.html":{}}}],["src/modules/user/user.controller.ts:72",{"_index":1463,"title":{},"body":{"controllers/UserController.html":{}}}],["src/modules/user/user.module.ts",{"_index":1529,"title":{},"body":{"modules/UserModule.html":{}}}],["src/modules/user/user.service.ts",{"_index":1533,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{}}}],["src/modules/user/user.service.ts:127",{"_index":1541,"title":{},"body":{"injectables/UserService.html":{}}}],["src/modules/user/user.service.ts:20",{"_index":1553,"title":{},"body":{"injectables/UserService.html":{}}}],["src/modules/user/user.service.ts:21",{"_index":1539,"title":{},"body":{"injectables/UserService.html":{}}}],["src/modules/user/user.service.ts:32",{"_index":1543,"title":{},"body":{"injectables/UserService.html":{}}}],["src/modules/user/user.service.ts:49",{"_index":1548,"title":{},"body":{"injectables/UserService.html":{}}}],["src/modules/user/user.service.ts:97",{"_index":1552,"title":{},"body":{"injectables/UserService.html":{}}}],["src/schema.service.ts",{"_index":1343,"title":{},"body":{"injectables/SchemaService.html":{},"coverage.html":{}}}],["src/schema.service.ts:13",{"_index":1345,"title":{},"body":{"injectables/SchemaService.html":{}}}],["src/schema.service.ts:20",{"_index":1346,"title":{},"body":{"injectables/SchemaService.html":{}}}],["src/seeders/databaseseeder.ts",{"_index":865,"title":{},"body":{"classes/DatabaseSeeder.html":{},"coverage.html":{}}}],["src/seeders/databaseseeder.ts:6",{"_index":868,"title":{},"body":{"classes/DatabaseSeeder.html":{}}}],["src/services/email/email.module.ts",{"_index":877,"title":{},"body":{"modules/EmailModule.html":{}}}],["src/services/email/email.service.ts",{"_index":901,"title":{},"body":{"classes/EmailService.html":{},"coverage.html":{}}}],["src/services/email/email.service.ts:11",{"_index":909,"title":{},"body":{"classes/EmailService.html":{}}}],["src/services/email/email.service.ts:4",{"_index":905,"title":{},"body":{"classes/EmailService.html":{}}}],["src/services/http",{"_index":926,"title":{},"body":{"modules/HttpClientModule.html":{},"injectables/HttpClientService.html":{},"coverage.html":{}}}],["src/services/payment/interfaces/payment.interface.ts",{"_index":958,"title":{},"body":{"interfaces/IPaymentService.html":{},"coverage.html":{}}}],["src/services/payment/interfaces/payment.interface.ts:4",{"_index":964,"title":{},"body":{"interfaces/IPaymentService.html":{}}}],["src/services/payment/interfaces/payment.interface.ts:9",{"_index":968,"title":{},"body":{"interfaces/IPaymentService.html":{}}}],["src/services/payment/payment.module.ts",{"_index":1190,"title":{},"body":{"modules/PaymentModule.html":{}}}],["src/services/payment/payment.module.ts:16",{"_index":1193,"title":{},"body":{"modules/PaymentModule.html":{}}}],["src/services/payment/stripe.service.ts",{"_index":1379,"title":{},"body":{"injectables/StripeService.html":{},"coverage.html":{}}}],["src/services/payment/stripe.service.ts:14",{"_index":1381,"title":{},"body":{"injectables/StripeService.html":{}}}],["src/services/payment/stripe.service.ts:23",{"_index":1382,"title":{},"body":{"injectables/StripeService.html":{}}}],["src/services/payment/stripe.service.ts:45",{"_index":1383,"title":{},"body":{"injectables/StripeService.html":{}}}],["src/services/payment/stripe.service.ts:60",{"_index":1387,"title":{},"body":{"injectables/StripeService.html":{}}}],["src/services/payment/types/checkout.ts",{"_index":1662,"title":{},"body":{"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/services/payment/types/payment",{"_index":1663,"title":{},"body":{"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/services/redis/redis.module.ts",{"_index":163,"title":{},"body":{"modules/AppRedisModule.html":{}}}],["src/services/redis/redis.service.ts",{"_index":177,"title":{},"body":{"injectables/AppRedisService.html":{},"coverage.html":{}}}],["src/services/redis/redis.service.ts:106",{"_index":205,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["src/services/redis/redis.service.ts:29",{"_index":220,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["src/services/redis/redis.service.ts:46",{"_index":211,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["src/services/redis/redis.service.ts:57",{"_index":214,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["src/services/redis/redis.service.ts:72",{"_index":192,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["src/services/redis/redis.service.ts:76",{"_index":209,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["src/services/redis/redis.service.ts:8",{"_index":190,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["src/services/redis/redis.service.ts:90",{"_index":196,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["src/services/storage/cloudinary.service.ts",{"_index":680,"title":{},"body":{"injectables/CloudinaryService.html":{},"coverage.html":{}}}],["src/services/storage/cloudinary.service.ts:14",{"_index":683,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["src/services/storage/cloudinary.service.ts:26",{"_index":688,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["src/services/storage/interfaces/storage.interface.ts",{"_index":970,"title":{},"body":{"interfaces/IStrorageService.html":{},"coverage.html":{}}}],["src/services/storage/interfaces/storage.interface.ts:12",{"_index":974,"title":{},"body":{"interfaces/IStrorageService.html":{}}}],["src/services/storage/interfaces/storage.interface.ts:7",{"_index":975,"title":{},"body":{"interfaces/IStrorageService.html":{}}}],["src/services/storage/s3.service.ts",{"_index":1290,"title":{},"body":{"injectables/S3Service.html":{},"coverage.html":{}}}],["src/services/storage/s3.service.ts:19",{"_index":1299,"title":{},"body":{"injectables/S3Service.html":{}}}],["src/services/storage/s3.service.ts:20",{"_index":1300,"title":{},"body":{"injectables/S3Service.html":{}}}],["src/services/storage/s3.service.ts:21",{"_index":1295,"title":{},"body":{"injectables/S3Service.html":{}}}],["src/services/storage/s3.service.ts:32",{"_index":1297,"title":{},"body":{"injectables/S3Service.html":{}}}],["src/services/storage/s3.service.ts:62",{"_index":1296,"title":{},"body":{"injectables/S3Service.html":{}}}],["src/services/storage/storage.module.ts",{"_index":1357,"title":{},"body":{"modules/StorageModule.html":{}}}],["src/services/storage/storage.module.ts:11",{"_index":1358,"title":{},"body":{"modules/StorageModule.html":{}}}],["src/services/storage/types/s3",{"_index":1666,"title":{},"body":{"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/templates/email",{"_index":899,"title":{},"body":{"modules/EmailModule.html":{}}}],["src/tracing.ts",{"_index":1668,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["sslenabled",{"_index":1646,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["st",{"_index":803,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["start",{"_index":1789,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":1792,"title":{},"body":{"index.html":{}}}],["start:prodrun",{"_index":1793,"title":{},"body":{"index.html":{}}}],["started",{"_index":1779,"title":{"index.html":{}},"body":{}}],["starter",{"_index":1782,"title":{},"body":{"index.html":{}}}],["starting",{"_index":708,"title":{},"body":{"injectables/CloudinaryService.html":{},"injectables/S3Service.html":{}}}],["state",{"_index":800,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/Migration20250730220636.html":{},"entities/User.html":{},"classes/UserFactory.html":{}}}],["state/province",{"_index":1116,"title":{},"body":{"classes/Migration20250730220636.html":{},"entities/User.html":{}}}],["statements",{"_index":1626,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":1191,"title":{},"body":{"modules/PaymentModule.html":{},"modules/StorageModule.html":{}}}],["status",{"_index":648,"title":{},"body":{"classes/CatchAllFilter.html":{},"injectables/MorganMiddleware.html":{}}}],["statuscode",{"_index":13,"title":{},"body":{"interfaces/ApiResponse.html":{},"controllers/AuthController.html":{},"classes/CatchAllFilter.html":{},"interfaces/ErrorResponse.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/SuccessResponseInterceptor.html":{},"controllers/UserController.html":{}}}],["stops",{"_index":1035,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["storage",{"_index":1378,"title":{},"body":{"modules/StorageModule.html":{}}}],["storage_provider",{"_index":1360,"title":{},"body":{"modules/StorageModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["storagedriverenum",{"_index":1361,"title":{},"body":{"modules/StorageModule.html":{},"miscellaneous/enumerations.html":{}}}],["storagedriverenum.cloudinary",{"_index":1373,"title":{},"body":{"modules/StorageModule.html":{}}}],["storagedriverenum.s3",{"_index":1375,"title":{},"body":{"modules/StorageModule.html":{}}}],["storagemodule",{"_index":1356,"title":{"modules/StorageModule.html":{}},"body":{"modules/StorageModule.html":{},"modules.html":{}}}],["store",{"_index":222,"title":{},"body":{"injectables/AppRedisService.html":{},"injectables/JwtStrategy.html":{}}}],["stored",{"_index":1022,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["strategies/jwt.strategy",{"_index":374,"title":{},"body":{"modules/AuthModule.html":{}}}],["strategies/local.strategy",{"_index":373,"title":{},"body":{"modules/AuthModule.html":{}}}],["strategy",{"_index":1040,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["stream",{"_index":695,"title":{},"body":{"injectables/CloudinaryService.html":{},"injectables/MorganMiddleware.html":{},"dependencies.html":{}}}],["street",{"_index":1111,"title":{},"body":{"classes/Migration20250730220636.html":{},"entities/User.html":{}}}],["strict",{"_index":900,"title":{},"body":{"modules/EmailModule.html":{}}}],["string",{"_index":17,"title":{},"body":{"interfaces/ApiResponse.html":{},"controllers/AppController.html":{},"injectables/AppRedisService.html":{},"injectables/AppService.html":{},"classes/AuthResponseDto.html":{},"injectables/AuthService.html":{},"classes/BaseEntity.html":{},"classes/CatchAllFilter.html":{},"classes/ChangePasswordDto.html":{},"injectables/CreateUserCommand.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserResponseDto.html":{},"classes/EmailService.html":{},"interfaces/ErrorResponse.html":{},"classes/ForgotPasswordDto.html":{},"classes/GetProfileResponseDto.html":{},"injectables/HttpClientService.html":{},"interfaces/IStrorageService.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"injectables/MorganMiddleware.html":{},"classes/RefreshTokenDto.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"classes/ResetPasswordDto.html":{},"guards/RoleGuard.html":{},"injectables/S3Service.html":{},"injectables/SuccessResponseInterceptor.html":{},"entities/User.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["stringvalue",{"_index":439,"title":{},"body":{"injectables/AuthService.html":{}}}],["stripe",{"_index":969,"title":{},"body":{"interfaces/IPaymentService.html":{},"modules/PaymentModule.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"guards/RoleGuard.html":{},"injectables/StripeService.html":{},"injectables/SuccessResponseInterceptor.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{}}}],["stripe.checkout.sessioncreateparams",{"_index":962,"title":{},"body":{"interfaces/IPaymentService.html":{},"injectables/StripeService.html":{}}}],["stripe.paymentintent",{"_index":1405,"title":{},"body":{"injectables/StripeService.html":{}}}],["stripe.paymentintentcreateparams",{"_index":967,"title":{},"body":{"interfaces/IPaymentService.html":{},"injectables/StripeService.html":{}}}],["stripe.paymentintentsucceededevent",{"_index":1385,"title":{},"body":{"injectables/StripeService.html":{}}}],["stripe.paymentintentsucceededevent.data",{"_index":1403,"title":{},"body":{"injectables/StripeService.html":{}}}],["stripe.requestoptions",{"_index":963,"title":{},"body":{"interfaces/IPaymentService.html":{},"injectables/StripeService.html":{}}}],["stripe.service",{"_index":1201,"title":{},"body":{"modules/PaymentModule.html":{}}}],["stripe.webhooksecret.account",{"_index":1210,"title":{},"body":{"modules/PaymentModule.html":{}}}],["stripe.webhooksecret.accounttest",{"_index":1212,"title":{},"body":{"modules/PaymentModule.html":{}}}],["stripe_client_token",{"_index":1195,"title":{},"body":{"modules/PaymentModule.html":{}}}],["stripe_webhook_context_type",{"_index":1234,"title":{},"body":{"injectables/RequestBodyAndResponseInterceptor.html":{},"guards/RoleGuard.html":{},"injectables/SuccessResponseInterceptor.html":{}}}],["stripeclient",{"_index":1215,"title":{},"body":{"modules/PaymentModule.html":{},"injectables/StripeService.html":{}}}],["stripecurrencyenum",{"_index":1754,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["stripemodule",{"_index":1196,"title":{},"body":{"modules/PaymentModule.html":{}}}],["stripemodule.forrootasync",{"_index":1203,"title":{},"body":{"modules/PaymentModule.html":{}}}],["stripesecrets",{"_index":1207,"title":{},"body":{"modules/PaymentModule.html":{}}}],["stripeservice",{"_index":1200,"title":{"injectables/StripeService.html":{}},"body":{"modules/PaymentModule.html":{},"injectables/StripeService.html":{},"coverage.html":{}}}],["stripeservice.name",{"_index":1395,"title":{},"body":{"injectables/StripeService.html":{}}}],["stripewebhookhandler",{"_index":1390,"title":{},"body":{"injectables/StripeService.html":{}}}],["stripewebhookhandler('payment_intent.succeeded",{"_index":1386,"title":{},"body":{"injectables/StripeService.html":{}}}],["strong.pass",{"_index":656,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginDto.html":{}}}],["sub",{"_index":490,"title":{},"body":{"injectables/AuthService.html":{}}}],["subject",{"_index":907,"title":{},"body":{"classes/EmailService.html":{}}}],["subscribers/user.subscriber",{"_index":1531,"title":{},"body":{"modules/UserModule.html":{}}}],["success",{"_index":410,"title":{},"body":{"classes/AuthResponseDto.html":{},"classes/CreateUserResponseDto.html":{},"classes/GetProfileResponseDto.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/SuccessResponseInterceptor.html":{}}}],["successful",{"_index":341,"title":{},"body":{"controllers/AuthController.html":{},"classes/AuthResponseDto.html":{},"injectables/CloudinaryService.html":{},"injectables/HttpClientService.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/S3Service.html":{},"injectables/SuccessResponseInterceptor.html":{}}}],["successfully",{"_index":230,"title":{},"body":{"injectables/AppRedisService.html":{},"classes/CreateUserResponseDto.html":{},"classes/EmailService.html":{},"classes/GetProfileResponseDto.html":{},"classes/PasswordResetEmailConsumer.html":{},"injectables/StripeService.html":{},"controllers/UserController.html":{}}}],["successresponseinterceptor",{"_index":1239,"title":{"injectables/SuccessResponseInterceptor.html":{}},"body":{"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/SuccessResponseInterceptor.html":{},"coverage.html":{}}}],["summary",{"_index":49,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/UserController.html":{}}}],["super",{"_index":775,"title":{},"body":{"injectables/CreateUserCommand.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/PasswordResetEmailConsumer.html":{}}}],["super.canactivate(context",{"_index":1000,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["support",{"_index":1016,"title":{},"body":{"injectables/JwtStrategy.html":{},"modules.html":{}}}],["svg",{"_index":1801,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":1780,"title":{},"body":{"index.html":{}}}],["symbol",{"_index":668,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/ResetPasswordDto.html":{}}}],["synchronized",{"_index":1354,"title":{},"body":{"injectables/SchemaService.html":{}}}],["system",{"_index":1565,"title":{},"body":{"injectables/UserService.html":{}}}],["t",{"_index":14,"title":{},"body":{"interfaces/ApiResponse.html":{}}}],["table",{"_index":1077,"title":{},"body":{"classes/Migration20250730220636.html":{},"coverage.html":{}}}],["tablename",{"_index":1453,"title":{},"body":{"entities/User.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":1671,"title":{},"body":{"coverage.html":{}}}],["tap",{"_index":1237,"title":{},"body":{"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/SuccessResponseInterceptor.html":{}}}],["tap((response",{"_index":1256,"title":{},"body":{"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/SuccessResponseInterceptor.html":{}}}],["template",{"_index":896,"title":{},"body":{"modules/EmailModule.html":{},"classes/EmailService.html":{},"miscellaneous/variables.html":{}}}],["template_queue_name",{"_index":1197,"title":{},"body":{"modules/PaymentModule.html":{},"injectables/StripeService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["templatequeue",{"_index":1216,"title":{},"body":{"modules/PaymentModule.html":{},"injectables/StripeService.html":{}}}],["test",{"_index":1796,"title":{},"body":{"index.html":{}}}],["test:cov",{"_index":1799,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":1798,"title":{},"body":{"index.html":{}}}],["tests",{"_index":1794,"title":{},"body":{"index.html":{}}}],["text",{"_index":1087,"title":{},"body":{"classes/Migration20250730220636.html":{},"entities/User.html":{},"miscellaneous/functions.html":{}}}],["textmappropagator",{"_index":1829,"title":{},"body":{"miscellaneous/variables.html":{}}}],["this.addsql",{"_index":1076,"title":{},"body":{"classes/Migration20250730220636.html":{}}}],["this.addsql(`comment",{"_index":1105,"title":{},"body":{"classes/Migration20250730220636.html":{}}}],["this.addsql(`create",{"_index":1134,"title":{},"body":{"classes/Migration20250730220636.html":{}}}],["this.appredis",{"_index":235,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["this.appredis.decr(key",{"_index":265,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["this.appredis.del(...keys",{"_index":273,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["this.appredis.del(key",{"_index":270,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["this.appredis.exists(key",{"_index":266,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["this.appredis.get(key",{"_index":253,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["this.appredis.pipeline",{"_index":257,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["this.appredis.set(...(args",{"_index":251,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["this.appredisservice.exists(cachekey",{"_index":497,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.appredisservice.get(cachekey",{"_index":1574,"title":{},"body":{"injectables/UserService.html":{}}}],["this.appredisservice.set",{"_index":516,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["this.authservice.forgotpassword(email",{"_index":351,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.login",{"_index":338,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.refresh(refreshtoken",{"_index":346,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.resetpassword",{"_index":357,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.validateuser(email",{"_index":1062,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["this.configservice.get('auth.saltrounds",{"_index":1621,"title":{},"body":{"injectables/UserSubscriber.html":{}}}],["this.configservice.getorthrow",{"_index":469,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.configservice.getorthrow('auth.jwt.expiresin",{"_index":463,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.configservice.getorthrow('auth.saltrounds",{"_index":474,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.configservice.getorthrow('aws.s3.bucket",{"_index":1321,"title":{},"body":{"injectables/S3Service.html":{}}}],["this.configservice.getorthrow('aws.s3.region",{"_index":1323,"title":{},"body":{"injectables/S3Service.html":{}}}],["this.configservice.getorthrow('cloudinary.apikey",{"_index":705,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["this.configservice.getorthrow('cloudinary.apisecret",{"_index":707,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["this.configservice.getorthrow('cloudinary.cloudname",{"_index":703,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["this.configservice.getorthrow('cloudinary.folder')}/${filecategory",{"_index":718,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["this.configservice.getorthrow('nodeenv",{"_index":1348,"title":{},"body":{"injectables/SchemaService.html":{}}}],["this.configservice.getorthrow('redis.bullboard.password",{"_index":151,"title":{},"body":{"modules/AppModule.html":{}}}],["this.configservice.getorthrow('redis.bullboard.username",{"_index":150,"title":{},"body":{"modules/AppModule.html":{}}}],["this.configservice.getorthrow('redis.namespace",{"_index":237,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["this.configservice.getorthrow('url.passwordreset",{"_index":461,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.em.transactional(async",{"_index":782,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["this.emailservice.sendemail",{"_index":1183,"title":{},"body":{"classes/PasswordResetEmailConsumer.html":{}}}],["this.geterrorcode(exception",{"_index":642,"title":{},"body":{"classes/CatchAllFilter.html":{}}}],["this.geterrormessage(exception",{"_index":639,"title":{},"body":{"classes/CatchAllFilter.html":{}}}],["this.geterrorname(exception",{"_index":640,"title":{},"body":{"classes/CatchAllFilter.html":{}}}],["this.gethttpstatus(exception",{"_index":637,"title":{},"body":{"classes/CatchAllFilter.html":{}}}],["this.hashpassword(user",{"_index":1615,"title":{},"body":{"injectables/UserSubscriber.html":{}}}],["this.httpadapterhost",{"_index":613,"title":{},"body":{"classes/CatchAllFilter.html":{}}}],["this.httpagent",{"_index":951,"title":{},"body":{"injectables/HttpClientService.html":{}}}],["this.httpsagent",{"_index":953,"title":{},"body":{"injectables/HttpClientService.html":{}}}],["this.httpservice.axiosref.defaults.httpagent",{"_index":950,"title":{},"body":{"injectables/HttpClientService.html":{}}}],["this.httpservice.axiosref.defaults.httpsagent",{"_index":952,"title":{},"body":{"injectables/HttpClientService.html":{}}}],["this.ispasswordmodified(user",{"_index":1616,"title":{},"body":{"injectables/UserSubscriber.html":{}}}],["this.jwtexpiresin",{"_index":462,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.jwtnotbefore",{"_index":464,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.jwtrefreshexpriresin",{"_index":468,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.jwtrefreshsecret",{"_index":471,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.jwtservice.sign",{"_index":520,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.jwtservice.sign(newpayload",{"_index":519,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.jwtservice.sign(payload",{"_index":492,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.jwtservice.verify(refreshtoken",{"_index":502,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.jwtservice.verify(resettoken",{"_index":532,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.loggercontext",{"_index":646,"title":{},"body":{"classes/CatchAllFilter.html":{}}}],["this.loggerservice.error",{"_index":644,"title":{},"body":{"classes/CatchAllFilter.html":{},"injectables/CloudinaryService.html":{}}}],["this.loggerservice.log",{"_index":245,"title":{},"body":{"injectables/AppRedisService.html":{},"injectables/CloudinaryService.html":{},"classes/EmailService.html":{},"injectables/HttpClientService.html":{},"classes/PasswordResetEmailConsumer.html":{},"injectables/S3Service.html":{},"injectables/SchemaService.html":{},"injectables/StripeService.html":{}}}],["this.loggerservice.log(`[${method",{"_index":1257,"title":{},"body":{"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/SuccessResponseInterceptor.html":{}}}],["this.loggerservice.log(`creating",{"_index":1398,"title":{},"body":{"injectables/StripeService.html":{}}}],["this.loggerservice.log(`email",{"_index":913,"title":{},"body":{"classes/EmailService.html":{}}}],["this.loggerservice.log(message.trim",{"_index":1162,"title":{},"body":{"injectables/MorganMiddleware.html":{}}}],["this.loggerservice.warn(message.trim",{"_index":1160,"title":{},"body":{"injectables/MorganMiddleware.html":{}}}],["this.mailerservice.sendmail",{"_index":912,"title":{},"body":{"classes/EmailService.html":{}}}],["this.nanoid",{"_index":784,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["this.normalizefields(user",{"_index":1614,"title":{},"body":{"injectables/UserSubscriber.html":{}}}],["this.orm.getschemagenerator",{"_index":1350,"title":{},"body":{"injectables/SchemaService.html":{}}}],["this.passwordresetemailqueue.add('send",{"_index":525,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.passwordreseturl",{"_index":460,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.passwordreseturl}?reset",{"_index":523,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.redisservice.getorthrow",{"_index":236,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["this.reflector.get(role",{"_index":1284,"title":{},"body":{"guards/RoleGuard.html":{}}}],["this.reflector.getallandoverride(is_public_key",{"_index":997,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["this.s3bucket",{"_index":1320,"title":{},"body":{"injectables/S3Service.html":{}}}],["this.s3client.putobject",{"_index":1326,"title":{},"body":{"injectables/S3Service.html":{}}}],["this.s3region",{"_index":1322,"title":{},"body":{"injectables/S3Service.html":{}}}],["this.saltrounds",{"_index":473,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.stripeclient.checkout.sessions.create",{"_index":1396,"title":{},"body":{"injectables/StripeService.html":{}}}],["this.stripeclient.paymentintents.create",{"_index":1402,"title":{},"body":{"injectables/StripeService.html":{}}}],["this.templatequeue.add(template_queue_name",{"_index":1406,"title":{},"body":{"injectables/StripeService.html":{}}}],["this.update",{"_index":1592,"title":{},"body":{"injectables/UserService.html":{}}}],["this.useremailcachekey",{"_index":1559,"title":{},"body":{"injectables/UserService.html":{}}}],["this.useremailcachekey}:${query?.email",{"_index":1572,"title":{},"body":{"injectables/UserService.html":{}}}],["this.useremailcachekey}:${user?.email",{"_index":1584,"title":{},"body":{"injectables/UserService.html":{}}}],["this.useridcachekey",{"_index":1557,"title":{},"body":{"injectables/UserService.html":{}}}],["this.useridcachekey}:${query",{"_index":1568,"title":{},"body":{"injectables/UserService.html":{}}}],["this.useridcachekey}:${query?.id",{"_index":1570,"title":{},"body":{"injectables/UserService.html":{}}}],["this.useridcachekey}:${user?.id",{"_index":1582,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepository.assign(user",{"_index":1587,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepository.create(parsed",{"_index":1577,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepository.create(userdata",{"_index":1566,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepository.findone",{"_index":1561,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepository.findoneorfail",{"_index":1585,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepository.findoneorfail(query",{"_index":1579,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepository.getentitymanager().merge(user",{"_index":1578,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepository.getentitymanager().persistandflush(newuser",{"_index":1567,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepository.getentitymanager().persistandflush(user",{"_index":1588,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userservice.changepassword(userid",{"_index":1500,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.create",{"_index":783,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["this.userservice.create(user",{"_index":1490,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.findone",{"_index":475,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["this.userservice.update",{"_index":528,"title":{},"body":{"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"controllers/UserController.html":{}}}],["throw",{"_index":498,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CreateUserCommand.html":{},"injectables/JwtAuthGuard.html":{},"injectables/LocalStrategy.html":{},"guards/RoleGuard.html":{},"modules/StorageModule.html":{},"injectables/UserService.html":{}}}],["time",{"_index":223,"title":{},"body":{"injectables/AppRedisService.html":{},"injectables/MorganMiddleware.html":{}}}],["timestamp",{"_index":554,"title":{},"body":{"classes/BaseEntity.html":{},"classes/CatchAllFilter.html":{},"interfaces/ErrorResponse.html":{},"classes/Migration20250730220636.html":{},"entities/User.html":{}}}],["timestamptz",{"_index":548,"title":{},"body":{"classes/BaseEntity.html":{},"classes/Migration20250730220636.html":{},"entities/User.html":{}}}],["timezone",{"_index":1725,"title":{},"body":{"dependencies.html":{}}}],["token",{"_index":324,"title":{},"body":{"controllers/AuthController.html":{},"classes/AuthResponseDto.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/RefreshTokenDto.html":{},"classes/ResetPasswordDto.html":{},"coverage.html":{}}}],["token'})@apibody({type",{"_index":305,"title":{},"body":{"controllers/AuthController.html":{}}}],["token=${token",{"_index":524,"title":{},"body":{"injectables/AuthService.html":{}}}],["tokens",{"_index":347,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["tokens.ts",{"_index":1659,"title":{},"body":{"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["tokens:refresh:blacklisted:${refreshtoken",{"_index":495,"title":{},"body":{"injectables/AuthService.html":{}}}],["tostream",{"_index":693,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["tostream(file.buffer).pipe(upload",{"_index":728,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["total",{"_index":1152,"title":{},"body":{"injectables/MorganMiddleware.html":{}}}],["trace",{"_index":1760,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["transform",{"_index":839,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["transformer",{"_index":840,"title":{},"body":{"classes/CreateUserDto.html":{},"dependencies.html":{}}}],["transport",{"_index":886,"title":{},"body":{"modules/EmailModule.html":{}}}],["true",{"_index":123,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRedisModule.html":{},"injectables/AppRedisService.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BaseEntity.html":{},"injectables/CreateUserCommand.html":{},"modules/EmailModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"modules/PaymentModule.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"guards/RoleGuard.html":{},"injectables/SuccessResponseInterceptor.html":{},"entities/User.html":{},"injectables/UserSubscriber.html":{},"miscellaneous/variables.html":{}}}],["try",{"_index":501,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CreateUserCommand.html":{}}}],["ttl",{"_index":213,"title":{},"body":{"injectables/AppRedisService.html":{},"interfaces/IStrorageService.html":{},"injectables/S3Service.html":{}}}],["ttlinfo",{"_index":240,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["ttl}s",{"_index":241,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["type",{"_index":15,"title":{},"body":{"interfaces/ApiResponse.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppRedisService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/AuthResponseDto.html":{},"injectables/AuthService.html":{},"classes/BaseEntity.html":{},"classes/CatchAllFilter.html":{},"classes/ChangePasswordDto.html":{},"injectables/CloudinaryService.html":{},"injectables/CreateUserCommand.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserResponseDto.html":{},"classes/DatabaseSeeder.html":{},"classes/EmailService.html":{},"interfaces/ErrorResponse.html":{},"classes/ForgotPasswordDto.html":{},"classes/GetProfileResponseDto.html":{},"injectables/HttpClientService.html":{},"interfaces/IPaymentService.html":{},"interfaces/IStrorageService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"injectables/MorganMiddleware.html":{},"classes/PasswordResetEmailConsumer.html":{},"modules/PaymentModule.html":{},"classes/RefreshTokenDto.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/RequestContextMiddleware.html":{},"classes/ResetPasswordDto.html":{},"guards/RoleGuard.html":{},"injectables/S3Service.html":{},"injectables/SchemaService.html":{},"injectables/StripeService.html":{},"injectables/SuccessResponseInterceptor.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"injectables/UserSubscriber.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":1813,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typeof",{"_index":626,"title":{},"body":{"classes/CatchAllFilter.html":{},"classes/CreateUserDto.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/SuccessResponseInterceptor.html":{},"injectables/UserService.html":{}}}],["types",{"_index":609,"title":{},"body":{"classes/CatchAllFilter.html":{},"dependencies.html":{}}}],["types/auth",{"_index":456,"title":{},"body":{"injectables/AuthService.html":{}}}],["types/s3",{"_index":977,"title":{},"body":{"interfaces/IStrorageService.html":{},"injectables/S3Service.html":{}}}],["typescript",{"_index":485,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"index.html":{}}}],["unauthorized",{"_index":154,"title":{},"body":{"modules/AppModule.html":{},"injectables/JwtAuthGuard.html":{}}}],["unauthorizedexception",{"_index":448,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/LocalStrategy.html":{}}}],["unauthorizedexception('invalid",{"_index":512,"title":{},"body":{"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{}}}],["unauthorizedexception('refresh",{"_index":510,"title":{},"body":{"injectables/AuthService.html":{}}}],["unauthorizedexception(errorobject",{"_index":1004,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["unauthorizedresponse",{"_index":153,"title":{},"body":{"modules/AppModule.html":{}}}],["undefined",{"_index":596,"title":{},"body":{"classes/CatchAllFilter.html":{},"classes/CreateUserDto.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/SuccessResponseInterceptor.html":{},"entities/User.html":{},"injectables/UserService.html":{}}}],["undefined})@isoptional",{"_index":830,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["unique",{"_index":1132,"title":{},"body":{"classes/Migration20250730220636.html":{},"entities/User.html":{}}}],["unit",{"_index":1795,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":194,"title":{},"body":{"injectables/AppRedisService.html":{},"injectables/JwtStrategy.html":{}}}],["unlicensed",{"_index":1811,"title":{},"body":{"properties.html":{}}}],["unused",{"_index":487,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["up",{"_index":1072,"title":{},"body":{"classes/Migration20250730220636.html":{},"controllers/UserController.html":{}}}],["up')@apioperation({summary",{"_index":1466,"title":{},"body":{"controllers/UserController.html":{}}}],["update",{"_index":565,"title":{},"body":{"classes/BaseEntity.html":{},"injectables/JwtStrategy.html":{},"classes/Migration20250730220636.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["update(data",{"_index":1550,"title":{},"body":{"injectables/UserService.html":{}}}],["updated",{"_index":1498,"title":{},"body":{"controllers/UserController.html":{}}}],["updated_at",{"_index":1080,"title":{},"body":{"classes/Migration20250730220636.html":{}}}],["updatedat",{"_index":545,"title":{},"body":{"classes/BaseEntity.html":{}}}],["updateduser",{"_index":1497,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["updateprofile",{"_index":1460,"title":{},"body":{"controllers/UserController.html":{}}}],["updateprofile(req",{"_index":1473,"title":{},"body":{"controllers/UserController.html":{}}}],["updateprofiledto",{"_index":1415,"title":{"classes/UpdateProfileDto.html":{}},"body":{"classes/UpdateProfileDto.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["upload",{"_index":681,"title":{},"body":{"injectables/CloudinaryService.html":{},"interfaces/IStrorageService.html":{},"injectables/S3Service.html":{}}}],["upload(file",{"_index":684,"title":{},"body":{"injectables/CloudinaryService.html":{},"interfaces/IStrorageService.html":{},"injectables/S3Service.html":{}}}],["uploadapierrorresponse",{"_index":692,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["uploadapiresponse",{"_index":691,"title":{},"body":{"injectables/CloudinaryService.html":{},"interfaces/IStrorageService.html":{}}}],["uploadfilecategoryenum",{"_index":687,"title":{},"body":{"injectables/CloudinaryService.html":{},"interfaces/IStrorageService.html":{},"injectables/S3Service.html":{},"miscellaneous/enumerations.html":{}}}],["uppercase",{"_index":666,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/ResetPasswordDto.html":{}}}],["url",{"_index":134,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRedisModule.html":{},"injectables/HttpClientService.html":{},"classes/Migration20250730220636.html":{},"injectables/MorganMiddleware.html":{},"injectables/RequestBodyAndResponseInterceptor.html":{},"injectables/S3Service.html":{},"injectables/SuccessResponseInterceptor.html":{},"entities/User.html":{},"dependencies.html":{}}}],["url=${result.secure_url",{"_index":726,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["usa",{"_index":847,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["usa'})@isstring()@isoptional",{"_index":809,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["usd",{"_index":1764,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["use",{"_index":227,"title":{},"body":{"injectables/AppRedisService.html":{},"injectables/MorganMiddleware.html":{},"injectables/RequestContextMiddleware.html":{}}}],["use(req",{"_index":1138,"title":{},"body":{"injectables/MorganMiddleware.html":{},"injectables/RequestContextMiddleware.html":{}}}],["useclass",{"_index":399,"title":{},"body":{"modules/AuthModule.html":{}}}],["used",{"_index":232,"title":{},"body":{"injectables/AppRedisService.html":{},"injectables/JwtStrategy.html":{}}}],["usefactory",{"_index":130,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRedisModule.html":{},"modules/AuthModule.html":{},"modules/EmailModule.html":{},"modules/PaymentModule.html":{},"modules/StorageModule.html":{}}}],["useguards",{"_index":314,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(localauthguard",{"_index":333,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(localauthguard)@public()@post('login')@httpcode(httpstatus.ok)@apioperation({summary",{"_index":296,"title":{},"body":{"controllers/AuthController.html":{}}}],["user",{"_index":297,"title":{"entities/User.html":{}},"body":{"controllers/AuthController.html":{},"classes/AuthResponseDto.html":{},"injectables/AuthService.html":{},"classes/ChangePasswordDto.html":{},"injectables/CreateUserCommand.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserResponseDto.html":{},"modules/EmailModule.html":{},"classes/GetProfileResponseDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"classes/Migration20250730220636.html":{},"injectables/MorganMiddleware.html":{},"classes/ResetPasswordDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"classes/UserFactory.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"injectables/UserSubscriber.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["user'})@apibody({type",{"_index":1468,"title":{},"body":{"controllers/UserController.html":{}}}],["user.command",{"_index":114,"title":{},"body":{"modules/AppModule.html":{}}}],["user.command.ts",{"_index":730,"title":{},"body":{"injectables/CreateUserCommand.html":{},"coverage.html":{}}}],["user.command.ts:14",{"_index":741,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["user.command.ts:23",{"_index":763,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["user.command.ts:50",{"_index":747,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["user.command.ts:56",{"_index":752,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["user.command.ts:62",{"_index":755,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["user.command.ts:68",{"_index":759,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["user.controller",{"_index":1530,"title":{},"body":{"modules/UserModule.html":{}}}],["user.dto",{"_index":1421,"title":{},"body":{"classes/UpdateProfileDto.html":{},"controllers/UserController.html":{}}}],["user.dto.ts",{"_index":792,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:115",{"_index":820,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:126",{"_index":831,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:130",{"_index":807,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:22",{"_index":815,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:30",{"_index":817,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:38",{"_index":819,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:46",{"_index":805,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:54",{"_index":808,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:62",{"_index":826,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:70",{"_index":833,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:78",{"_index":810,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:91",{"_index":813,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:99",{"_index":823,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.email",{"_index":521,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.firstname",{"_index":527,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.id",{"_index":491,"title":{},"body":{"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{}}}],["user.password",{"_index":480,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserSubscriber.html":{}}}],["user.passwordresetrequested",{"_index":534,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.service",{"_index":1479,"title":{},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{}}}],["user/entities/user.entity",{"_index":452,"title":{},"body":{"injectables/AuthService.html":{}}}],["user/user.module",{"_index":368,"title":{},"body":{"modules/AuthModule.html":{}}}],["user/user.service",{"_index":449,"title":{},"body":{"injectables/AuthService.html":{}}}],["user?.changepassword",{"_index":1590,"title":{},"body":{"injectables/UserService.html":{}}}],["user@example.com",{"_index":841,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/ForgotPasswordDto.html":{},"classes/LoginDto.html":{}}}],["user@example.com'})@isemail",{"_index":917,"title":{},"body":{"classes/ForgotPasswordDto.html":{},"classes/LoginDto.html":{}}}],["user@example.com'})@isemail()@isnotempty",{"_index":814,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["usercontroller",{"_index":1457,"title":{"controllers/UserController.html":{}},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["userdata",{"_index":1544,"title":{},"body":{"injectables/UserService.html":{}}}],["userdata.email",{"_index":1562,"title":{},"body":{"injectables/UserService.html":{}}}],["useremailcachekey",{"_index":1534,"title":{},"body":{"injectables/UserService.html":{}}}],["userfactory",{"_index":870,"title":{"classes/UserFactory.html":{}},"body":{"classes/DatabaseSeeder.html":{},"classes/UserFactory.html":{},"coverage.html":{}}}],["userfactory(em).make(10",{"_index":872,"title":{},"body":{"classes/DatabaseSeeder.html":{}}}],["userid",{"_index":1495,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["useridcachekey",{"_index":1535,"title":{},"body":{"injectables/UserService.html":{}}}],["usermodule",{"_index":64,"title":{"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["usernamefield",{"_index":1061,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["userrepository",{"_index":1537,"title":{},"body":{"injectables/UserService.html":{}}}],["userrole",{"_index":1285,"title":{},"body":{"guards/RoleGuard.html":{}}}],["userroleenum",{"_index":760,"title":{},"body":{"injectables/CreateUserCommand.html":{},"classes/CreateUserDto.html":{},"entities/User.html":{},"classes/UserFactory.html":{},"miscellaneous/enumerations.html":{}}}],["userroleenum.user",{"_index":851,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/User.html":{}}}],["userroleenum})@isenum(userroleenum",{"_index":829,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["users",{"_index":149,"title":{},"body":{"modules/AppModule.html":{},"classes/Migration20250730220636.html":{},"entities/User.html":{},"controllers/UserController.html":{}}}],["users\".\"address",{"_index":1110,"title":{},"body":{"classes/Migration20250730220636.html":{}}}],["users\".\"avatar",{"_index":1107,"title":{},"body":{"classes/Migration20250730220636.html":{}}}],["users\".\"change_password",{"_index":1124,"title":{},"body":{"classes/Migration20250730220636.html":{}}}],["users\".\"city",{"_index":1112,"title":{},"body":{"classes/Migration20250730220636.html":{}}}],["users\".\"country",{"_index":1117,"title":{},"body":{"classes/Migration20250730220636.html":{}}}],["users\".\"country_code",{"_index":1118,"title":{},"body":{"classes/Migration20250730220636.html":{}}}],["users\".\"created_at",{"_index":1103,"title":{},"body":{"classes/Migration20250730220636.html":{}}}],["users\".\"deleted_at",{"_index":1102,"title":{},"body":{"classes/Migration20250730220636.html":{}}}],["users\".\"email",{"_index":1106,"title":{},"body":{"classes/Migration20250730220636.html":{}}}],["users\".\"first_name",{"_index":1108,"title":{},"body":{"classes/Migration20250730220636.html":{}}}],["users\".\"last_logged_in",{"_index":1128,"title":{},"body":{"classes/Migration20250730220636.html":{}}}],["users\".\"last_name",{"_index":1109,"title":{},"body":{"classes/Migration20250730220636.html":{}}}],["users\".\"password",{"_index":1121,"title":{},"body":{"classes/Migration20250730220636.html":{}}}],["users\".\"password_reset_requested",{"_index":1127,"title":{},"body":{"classes/Migration20250730220636.html":{}}}],["users\".\"phone_number",{"_index":1120,"title":{},"body":{"classes/Migration20250730220636.html":{}}}],["users\".\"postal_code",{"_index":1113,"title":{},"body":{"classes/Migration20250730220636.html":{}}}],["users\".\"role",{"_index":1123,"title":{},"body":{"classes/Migration20250730220636.html":{}}}],["users\".\"state",{"_index":1115,"title":{},"body":{"classes/Migration20250730220636.html":{}}}],["users\".\"updated_at",{"_index":1104,"title":{},"body":{"classes/Migration20250730220636.html":{}}}],["users:email",{"_index":1560,"title":{},"body":{"injectables/UserService.html":{}}}],["users:id",{"_index":1558,"title":{},"body":{"injectables/UserService.html":{}}}],["users_deleted_at_index",{"_index":1133,"title":{},"body":{"classes/Migration20250730220636.html":{}}}],["users_email_index",{"_index":1135,"title":{},"body":{"classes/Migration20250730220636.html":{}}}],["users_email_unique",{"_index":1131,"title":{},"body":{"classes/Migration20250730220636.html":{}}}],["users_pkey",{"_index":1099,"title":{},"body":{"classes/Migration20250730220636.html":{}}}],["userservice",{"_index":423,"title":{"injectables/UserService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/CreateUserCommand.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["usersubscriber",{"_index":1528,"title":{"injectables/UserSubscriber.html":{}},"body":{"modules/UserModule.html":{},"injectables/UserSubscriber.html":{},"coverage.html":{},"overview.html":{}}}],["using",{"_index":243,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["utc",{"_index":1058,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["util",{"_index":1746,"title":{},"body":{"dependencies.html":{}}}],["uuid",{"_index":561,"title":{},"body":{"classes/BaseEntity.html":{},"classes/Migration20250730220636.html":{},"dependencies.html":{}}}],["uuidv7",{"_index":559,"title":{},"body":{"classes/BaseEntity.html":{}}}],["v2",{"_index":689,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["v7",{"_index":571,"title":{},"body":{"classes/BaseEntity.html":{}}}],["val",{"_index":748,"title":{},"body":{"injectables/CreateUserCommand.html":{}}}],["validate",{"_index":1007,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["validate(email",{"_index":1054,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["validate(req",{"_index":1009,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validateuser",{"_index":421,"title":{},"body":{"injectables/AuthService.html":{}}}],["validateuser(email",{"_index":436,"title":{},"body":{"injectables/AuthService.html":{}}}],["validator",{"_index":678,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/ForgotPasswordDto.html":{},"classes/LoginDto.html":{},"classes/RefreshTokenDto.html":{},"classes/ResetPasswordDto.html":{},"dependencies.html":{}}}],["value",{"_index":217,"title":{},"body":{"injectables/AppRedisService.html":{},"classes/BaseEntity.html":{},"classes/CatchAllFilter.html":{},"injectables/CreateUserCommand.html":{},"classes/CreateUserDto.html":{},"injectables/HttpClientService.html":{},"injectables/S3Service.html":{},"entities/User.html":{},"classes/UserFactory.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["value.replace(/\\+/g",{"_index":849,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["varchar",{"_index":1426,"title":{},"body":{"entities/User.html":{}}}],["varchar(100",{"_index":1085,"title":{},"body":{"classes/Migration20250730220636.html":{}}}],["varchar(20",{"_index":1089,"title":{},"body":{"classes/Migration20250730220636.html":{}}}],["varchar(255",{"_index":1081,"title":{},"body":{"classes/Migration20250730220636.html":{}}}],["varchar(3",{"_index":1091,"title":{},"body":{"classes/Migration20250730220636.html":{}}}],["varchar(500",{"_index":1083,"title":{},"body":{"classes/Migration20250730220636.html":{}}}],["variable",{"_index":1630,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":1819,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["vars",{"_index":488,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["version",{"_index":1149,"title":{},"body":{"injectables/MorganMiddleware.html":{},"properties.html":{}}}],["void",{"_index":80,"title":{},"body":{"modules/AppModule.html":{},"classes/CatchAllFilter.html":{},"injectables/MorganMiddleware.html":{},"injectables/RequestContextMiddleware.html":{},"injectables/UserSubscriber.html":{},"miscellaneous/functions.html":{}}}],["w3cbaggagepropagator",{"_index":1834,"title":{},"body":{"miscellaneous/variables.html":{}}}],["w3ctracecontextpropagator",{"_index":1833,"title":{},"body":{"miscellaneous/variables.html":{}}}],["watch",{"_index":1790,"title":{},"body":{"index.html":{}}}],["webhookconfig",{"_index":1206,"title":{},"body":{"modules/PaymentModule.html":{}}}],["webhooks",{"_index":105,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["welcome",{"_index":32,"title":{},"body":{"controllers/AppController.html":{}}}],["welcomemessage",{"_index":29,"title":{},"body":{"controllers/AppController.html":{}}}],["whether",{"_index":1125,"title":{},"body":{"classes/Migration20250730220636.html":{},"entities/User.html":{}}}],["winston",{"_index":1731,"title":{},"body":{"dependencies.html":{}}}],["winston.logger",{"_index":1773,"title":{},"body":{"miscellaneous/functions.html":{}}}],["winstonlogger",{"_index":1647,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["without",{"_index":244,"title":{},"body":{"injectables/AppRedisService.html":{}}}],["word",{"_index":1276,"title":{},"body":{"classes/ResetPasswordDto.html":{}}}],["word.'})@isstring()@isnotempty()@matches(/^(?=.*[a",{"_index":1270,"title":{},"body":{"classes/ResetPasswordDto.html":{}}}],["workerhost",{"_index":1173,"title":{},"body":{"classes/PasswordResetEmailConsumer.html":{}}}],["world",{"_index":278,"title":{},"body":{"injectables/AppService.html":{}}}],["write",{"_index":1157,"title":{},"body":{"injectables/MorganMiddleware.html":{}}}],["wrong",{"_index":1038,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["yarn",{"_index":1786,"title":{},"body":{"index.html":{}}}],["yes",{"_index":215,"title":{},"body":{"injectables/AppRedisService.html":{},"interfaces/IPaymentService.html":{},"interfaces/IStrorageService.html":{},"injectables/S3Service.html":{},"injectables/StripeService.html":{},"injectables/UserService.html":{}}}],["z\\d!@#$%^&*()_",{"_index":661,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/ResetPasswordDto.html":{}}}],["z])(?=.*[!@#$%^&*()_",{"_index":659,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/ResetPasswordDto.html":{}}}],["z])(?=.*[a",{"_index":658,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/ResetPasswordDto.html":{}}}],["za",{"_index":660,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/ResetPasswordDto.html":{}}}],["zoom",{"_index":68,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRedisModule.html":{},"modules/AuthModule.html":{},"modules/EmailModule.html":{},"modules/HttpClientModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"interfaces/ApiResponse.html":{"url":"interfaces/ApiResponse.html","title":"interface - ApiResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ApiResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/interfaces/api-response.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            data\n                                        \n                                \n                                \n                                        \n                                            message\n                                        \n                                \n                                \n                                        \n                                            statusCode\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        data:     T\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     T\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        message\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        message:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        statusCode\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        statusCode:     HttpStatus\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     HttpStatus\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { HttpStatus } from '@nestjs/common';\n\nexport interface ApiResponse {\n  statusCode: HttpStatus;\n  message: string;\n  data?: T;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                welcomeMessage\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        welcomeMessage\n                        \n                    \n                \n            \n            \n                \n                        \n                    welcomeMessage()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@HttpCode(HttpStatus.OK)@Public()@ApiOperation({summary: 'Welcome message for nest-js-boilerplate'})\n                \n            \n\n                    \n                        \n                            Defined in src/app.controller.ts:12\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     literal type\n\n                        \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, HttpCode, HttpStatus } from '@nestjs/common';\nimport { Public } from './modules/auth/decorators/public.decorator';\nimport { ApiOperation, ApiTags } from '@nestjs/swagger';\n\n@ApiTags('app')\n@Controller()\nexport class AppController {\n  @Get()\n  @HttpCode(HttpStatus.OK)\n  @Public()\n  @ApiOperation({ summary: 'Welcome message for nest-js-boilerplate' })\n  welcomeMessage(): { data: string } {\n    return { data: 'Welcome to nest-js-boilerplate! :)' };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nCreateUserCommand\n\nCreateUserCommand\n\nAppModule -->\n\nCreateUserCommand->AppModule\n\n\n\n\n\nSchemaService\n\nSchemaService\n\nAppModule -->\n\nSchemaService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                        \n                            CreateUserCommand\n                        \n                        \n                            SchemaService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        configure\n                        \n                    \n                \n            \n            \n                \nconfigure(consumer: MiddlewareConsumer)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app.module.ts:59\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                consumer\n                                            \n                                                        MiddlewareConsumer\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n    \n\n\n    \n        import {\n  Logger,\n  MiddlewareConsumer,\n  Module,\n  NestModule,\n  RequestMethod,\n} from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport configuration from './config/index.';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { UserModule } from './modules/user/user.module';\nimport { AuthModule } from './modules/auth/auth.module';\nimport { MorganMiddleware } from './common/middlewares/morgan.middleware';\nimport { MikroOrmModule } from '@mikro-orm/nestjs';\nimport { SchemaService } from './schema.service';\nimport basicAuth from 'express-basic-auth';\nimport { applyRawBodyOnlyTo } from '@golevelup/nestjs-webhooks';\nimport { BullModule } from '@nestjs/bullmq';\nimport { BullBoardModule } from '@bull-board/nestjs';\nimport { ExpressAdapter } from '@bull-board/express';\nimport { CreateUserCommand } from './commands/create-user.command';\nimport { RequestContextMiddleware } from './common/middlewares/request-context.middleware';\nimport mikroOrmConfig from '@config/mikro-orm.config';\n\n@Module({\n  imports: [\n    ConfigModule.forRoot({\n      isGlobal: true,\n      load: [configuration],\n      cache: true,\n      ignoreEnvFile: process.env.NODE_ENV === 'production',\n    }),\n    MikroOrmModule.forRootAsync({\n      imports: [ConfigModule],\n      useFactory: () => mikroOrmConfig,\n    }),\n    UserModule,\n    AuthModule,\n    BullModule.forRootAsync({\n      inject: [ConfigService],\n      useFactory: (configService: ConfigService) => ({\n        connection: {\n          url: configService.getOrThrow('redis.url'),\n        },\n      }),\n    }),\n    BullBoardModule.forRoot({\n      adapter: ExpressAdapter,\n      route: '/queues',\n    }),\n  ],\n  controllers: [AppController],\n  providers: [AppService, Logger, SchemaService, CreateUserCommand],\n})\nexport class AppModule implements NestModule {\n  constructor(private readonly configService: ConfigService) {}\n\n  configure(consumer: MiddlewareConsumer) {\n    applyRawBodyOnlyTo(consumer, {\n      method: RequestMethod.ALL,\n      path: '*path/webhook',\n    });\n\n    consumer\n      .apply(\n        basicAuth({\n          users: {\n            [this.configService.getOrThrow('redis.bullBoard.username')]:\n              this.configService.getOrThrow('redis.bullBoard.password'),\n          },\n          challenge: true,\n          unauthorizedResponse: 'Unauthorized',\n        }),\n      )\n      .forRoutes({ path: 'queues', method: RequestMethod.ALL });\n\n    consumer.apply(MorganMiddleware).forRoutes('*');\n\n    consumer.apply(RequestContextMiddleware).forRoutes('*');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppRedisModule.html":{"url":"modules/AppRedisModule.html","title":"module - AppRedisModule","body":"\n                   \n\n\n\n\n    Modules\n    AppRedisModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppRedisModule\n\n\n\ncluster_AppRedisModule_providers\n\n\n\ncluster_AppRedisModule_exports\n\n\n\n\nAppRedisService \n\nAppRedisService \n\n\n\nAppRedisModule\n\nAppRedisModule\n\nAppRedisService  -->\n\nAppRedisModule->AppRedisService \n\n\n\n\n\nAppRedisService\n\nAppRedisService\n\nAppRedisModule -->\n\nAppRedisService->AppRedisModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/services/redis/redis.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppRedisService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AppRedisService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Logger, Module } from '@nestjs/common';\nimport { AppRedisService } from './redis.service';\nimport { RedisModule } from '@liaoliaots/nestjs-redis';\nimport { ConfigService } from '@nestjs/config';\n\n@Module({\n  imports: [\n    RedisModule.forRootAsync({\n      inject: [ConfigService],\n      useFactory: async (configService: ConfigService) => {\n        return {\n          readyLog: true,\n          errorLog: true,\n          config: [\n            {\n              namespace: configService.getOrThrow('redis.namespace'),\n              url: configService.getOrThrow('redis.url'),\n            },\n          ],\n        };\n      },\n    }),\n  ],\n  providers: [AppRedisService, Logger],\n  exports: [AppRedisService],\n})\nexport class AppRedisModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppRedisService.html":{"url":"injectables/AppRedisService.html","title":"injectable - AppRedisService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppRedisService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/redis/redis.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                appRedis\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                decrement\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                deleteMany\n                            \n                            \n                                    Async\n                                exists\n                            \n                            \n                                    Async\n                                get\n                            \n                            \n                                    Async\n                                increment\n                            \n                            \n                                    Async\n                                set\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(loggerService: LoggerService, configService: ConfigService, redisService: RedisService)\n                    \n                \n                        \n                            \n                                Defined in src/services/redis/redis.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        loggerService\n                                                  \n                                                        \n                                                                    LoggerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        redisService\n                                                  \n                                                        \n                                                                    RedisService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        decrement\n                        \n                    \n                \n            \n            \n                \n                        \n                    decrement(key: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/redis/redis.service.ts:72\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(key: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/redis/redis.service.ts:90\n                        \n                    \n\n\n            \n                \n                        Delete a Redis key\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Redis key to delete\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                Number of keys deleted (0 or 1)\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        deleteMany\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteMany(keys: string[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/redis/redis.service.ts:106\n                        \n                    \n\n\n            \n                \n                        Delete multiple Redis keys\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                keys\n                                            \n                                                        string[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Array of Redis keys to delete\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                Number of keys deleted\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        exists\n                        \n                    \n                \n            \n            \n                \n                        \n                    exists(key: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/redis/redis.service.ts:76\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        get\n                        \n                    \n                \n            \n            \n                \n                        \n                    get(key: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/redis/redis.service.ts:46\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        increment\n                        \n                    \n                \n            \n            \n                \n                        \n                    increment(key: string, ttl?: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/redis/redis.service.ts:57\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                ttl\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        set\n                        \n                    \n                \n            \n            \n                \n                        \n                    set(key: string, value: any, ttl?: number, nx: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/redis/redis.service.ts:29\n                        \n                    \n\n\n            \n                \n                        Set a Redis key\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    Redis key\n\n                                            \n                                        \n                                        \n                                                value\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    Value to store\n\n                                            \n                                        \n                                        \n                                                ttl\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    Time-to-live in seconds\n\n                                            \n                                        \n                                        \n                                                nx\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    false\n                                            \n\n                                            \n                                                    Set to true to use NX (only set if key does not exist)\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                'OK' if set successfully, null if not (when NX is used)\n\n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        appRedis\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Redis\n\n                    \n                \n                    \n                        \n                                Defined in src/services/redis/redis.service.ts:8\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable, Logger, LoggerService } from '@nestjs/common';\nimport { RedisService } from '@liaoliaots/nestjs-redis';\nimport Redis from 'ioredis';\nimport { ConfigService } from '@nestjs/config';\n\n@Injectable()\nexport class AppRedisService {\n  private readonly appRedis: Redis;\n\n  constructor(\n    @Inject(Logger)\n    private readonly loggerService: LoggerService,\n    private readonly configService: ConfigService,\n    private readonly redisService: RedisService,\n  ) {\n    this.appRedis = this.redisService.getOrThrow(\n      this.configService.getOrThrow('redis.namespace'),\n    );\n  }\n\n  /**\n   * Set a Redis key\n   * @param key Redis key\n   * @param value Value to store\n   * @param ttl Time-to-live in seconds\n   * @param nx Set to true to use NX (only set if key does not exist)\n   * @returns 'OK' if set successfully, null if not (when NX is used)\n   */\n  async set(key: string, value: any, ttl?: number, nx: boolean = false) {\n    const ttlInfo = ttl ? `TTL: ${ttl}s` : 'no TTL';\n    const nxInfo = nx ? 'using NX' : 'without NX';\n\n    this.loggerService.log(\n      `Setting key \"${key}\" (${ttlInfo}, ${nxInfo})`,\n      AppRedisService.name,\n    );\n\n    const args: (string | number)[] = [key, value];\n\n    if (nx) args.push('NX');\n    if (ttl) args.push('EX', ttl);\n\n    return this.appRedis.set(...(args as Parameters));\n  }\n\n  async get(key: string) {\n    const value = await this.appRedis.get(key);\n\n    this.loggerService.log(\n      `Getting key \"${key}\" - ${value ? 'Found' : 'Not Found'}`,\n      AppRedisService.name,\n    );\n\n    return value;\n  }\n\n  async increment(key: string, ttl?: number): Promise {\n    const pipeline = this.appRedis.pipeline();\n\n    if (ttl) {\n      pipeline.set(key, 0, 'EX', ttl, 'NX');\n    }\n\n    pipeline.incr(key);\n\n    const results = await pipeline.exec();\n    const incrResult = results[ttl ? 1 : 0];\n\n    return incrResult[1];\n  }\n\n  async decrement(key: string) {\n    return this.appRedis.decr(key);\n  }\n\n  async exists(key: string): Promise {\n    const exists = await this.appRedis.exists(key);\n    this.loggerService.log(\n      `Checking existence of key \"${key}\" - ${exists ? 'Exists' : 'Does not exist'}`,\n      AppRedisService.name,\n    );\n    return exists > 0;\n  }\n\n  /**\n   * Delete a Redis key\n   * @param key Redis key to delete\n   * @returns Number of keys deleted (0 or 1)\n   */\n  async delete(key: string): Promise {\n    const result = await this.appRedis.del(key);\n\n    this.loggerService.log(\n      `Deleting key \"${key}\" - ${result > 0 ? 'Deleted' : 'Key not found'}`,\n      AppRedisService.name,\n    );\n\n    return result;\n  }\n\n  /**\n   * Delete multiple Redis keys\n   * @param keys Array of Redis keys to delete\n   * @returns Number of keys deleted\n   */\n  async deleteMany(keys: string[]): Promise {\n    if (keys.length === 0) return 0;\n\n    const result = await this.appRedis.del(...keys);\n\n    this.loggerService.log(\n      `Deleting ${keys.length} keys - ${result} deleted`,\n      AppRedisService.name,\n    );\n\n    return result;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app.service.ts:5\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello World!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                forgotPassword\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                login\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                refresh\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                resetPassword\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        forgotPassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    forgotPassword(body: ForgotPasswordDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Post('forgot-password')@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Request password reset'})@ApiBody({type: ForgotPasswordDto})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/auth/auth.controller.ts:63\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            ForgotPasswordDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(req: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(LocalAuthGuard)@Public()@Post('login')@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'User login'})@ApiBody({type: LoginDto})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/auth/auth.controller.ts:31\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        refresh\n                        \n                    \n                \n            \n            \n                \n                        \n                    refresh(body: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Post('refresh')@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Refresh access token'})@ApiBody({type: RefreshTokenDto})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/auth/auth.controller.ts:47\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        resetPassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    resetPassword(body: ResetPasswordDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Post('reset-password')@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Reset user password'})@ApiBody({type: ResetPasswordDto, description: 'Reset password data'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/auth/auth.controller.ts:79\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            ResetPasswordDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Request,\n  Post,\n  UseGuards,\n  Body,\n  HttpStatus,\n  HttpCode,\n} from '@nestjs/common';\nimport { ApiTags, ApiOperation, ApiBody } from '@nestjs/swagger';\nimport { LocalAuthGuard } from './guards/local-auth.guard';\nimport { AuthService } from './auth.service';\nimport { Public } from './decorators/public.decorator';\nimport { LoginDto } from './dto/login.dto';\nimport { RefreshTokenDto } from './dto/refresh-token-dto';\nimport { ForgotPasswordDto } from './dto/forgot-password.dto';\nimport { ResetPasswordDto } from './dto/reset-password.dto';\nimport { ApiResponse } from '@common/interfaces/api-response.interface';\n\n@ApiTags('auth')\n@Controller('auth')\nexport class AuthController {\n  constructor(private readonly authService: AuthService) {}\n\n  @UseGuards(LocalAuthGuard)\n  @Public()\n  @Post('login')\n  @HttpCode(HttpStatus.OK)\n  @ApiOperation({ summary: 'User login' })\n  @ApiBody({ type: LoginDto })\n  async login(@Request() req: any): Promise> {\n    const { access_token, refresh_token } = await this.authService.login(\n      req.user,\n    );\n    return {\n      statusCode: HttpStatus.OK,\n      message: 'Login Successful',\n      data: { accessToken: access_token, refreshToken: refresh_token },\n    };\n  }\n\n  @Public()\n  @Post('refresh')\n  @HttpCode(HttpStatus.OK)\n  @ApiOperation({ summary: 'Refresh access token' })\n  @ApiBody({ type: RefreshTokenDto })\n  async refresh(@Body() body: any): Promise> {\n    const { refreshToken } = body;\n    const { access_token, refresh_token } =\n      await this.authService.refresh(refreshToken);\n    return {\n      statusCode: HttpStatus.OK,\n      message: 'Tokens refreshed',\n      data: { accessToken: access_token, refreshToken: refresh_token },\n    };\n  }\n\n  @Public()\n  @Post('forgot-password')\n  @HttpCode(HttpStatus.OK)\n  @ApiOperation({ summary: 'Request password reset' })\n  @ApiBody({ type: ForgotPasswordDto })\n  async forgotPassword(\n    @Body() body: ForgotPasswordDto,\n  ): Promise> {\n    const { email } = body;\n    await this.authService.forgotPassword(email);\n    return {\n      statusCode: HttpStatus.OK,\n      message: 'Password reset email sent',\n    };\n  }\n\n  @Public()\n  @Post('reset-password')\n  @HttpCode(HttpStatus.OK)\n  @ApiOperation({ summary: 'Reset user password' })\n  @ApiBody({ type: ResetPasswordDto, description: 'Reset password data' })\n  async resetPassword(\n    @Body() body: ResetPasswordDto,\n  ): Promise> {\n    const { resetToken, newPassword, confirmPassword } = body;\n    await this.authService.resetPassword(\n      resetToken,\n      newPassword,\n      confirmPassword,\n    );\n    return {\n      statusCode: HttpStatus.OK,\n      message: 'Password reset successful',\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_AuthModule_exports\n\n\n\n\nAppRedisModule\n\nAppRedisModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nAppRedisModule->AuthModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAuthModule -->\n\nUserModule->AuthModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthModule -->\n\nLocalStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            JwtStrategy\n                        \n                        \n                            LocalStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AppRedisModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { APP_GUARD } from '@nestjs/core';\nimport { AuthController } from './auth.controller';\nimport { AuthService } from './auth.service';\nimport { UserModule } from '../user/user.module';\nimport { JwtModule } from '@nestjs/jwt';\nimport { PassportModule } from '@nestjs/passport';\nimport { LocalStrategy } from './strategies/local.strategy';\nimport { JwtStrategy } from './strategies/jwt.strategy';\nimport { JwtAuthGuard } from './guards/jwt-auth.guard';\nimport { ConfigService } from '@nestjs/config';\nimport { AppRedisModule } from '@services/redis/redis.module';\nimport { BullModule } from '@nestjs/bullmq';\nimport { BullBoardModule } from '@bull-board/nestjs';\nimport { PASSWORD_RESET_EMAIL_QUEUE_NAME } from '@common/constants';\nimport { BullMQAdapter } from '@bull-board/api/bullMQAdapter';\n\n@Module({\n  imports: [\n    UserModule,\n    PassportModule,\n    JwtModule.registerAsync({\n      useFactory: (configService: ConfigService) => ({\n        global: true,\n        secret: configService.get('auth.jwt.secret'),\n        signOptions: {\n          expiresIn: configService.get('auth.jwt.expiresIn'),\n        },\n      }),\n      inject: [ConfigService],\n    }),\n    BullModule.registerQueue({\n      name: PASSWORD_RESET_EMAIL_QUEUE_NAME,\n      defaultJobOptions: {\n        attempts: 5,\n        backoff: { type: 'exponential', delay: 2000 },\n      },\n    }),\n    BullBoardModule.forFeature({\n      name: PASSWORD_RESET_EMAIL_QUEUE_NAME,\n      adapter: BullMQAdapter,\n    }),\n    AppRedisModule,\n  ],\n  controllers: [AuthController],\n  providers: [\n    AuthService,\n    LocalStrategy,\n    JwtStrategy,\n    {\n      provide: APP_GUARD,\n      useClass: JwtAuthGuard,\n    },\n  ],\n  exports: [AuthService],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AuthResponseDto.html":{"url":"classes/AuthResponseDto.html","title":"class - AuthResponseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AuthResponseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/dto/auth-response.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                accessToken\n                            \n                            \n                                    \n                                message\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        accessToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Access token for authenticated user', example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/dto/auth-response.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        message\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Message indicating the success of the operation', example: 'Login Successful'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/dto/auth-response.dto.ts:14\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\n\nexport class AuthResponseDto {\n  @ApiProperty({\n    description: 'Access token for authenticated user',\n    example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...',\n  })\n  accessToken: string;\n\n  @ApiProperty({\n    description: 'Message indicating the success of the operation',\n    example: 'Login Successful',\n  })\n  message: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                jwtExpiresIn\n                            \n                            \n                                    Private\n                                    Readonly\n                                jwtNotBefore\n                            \n                            \n                                    Private\n                                    Readonly\n                                jwtRefreshExpriresIn\n                            \n                            \n                                    Private\n                                    Readonly\n                                jwtRefreshSecret\n                            \n                            \n                                    Private\n                                    Readonly\n                                passwordResetUrl\n                            \n                            \n                                    Private\n                                    Readonly\n                                saltRounds\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                forgotPassword\n                            \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                refresh\n                            \n                            \n                                    Async\n                                resetPassword\n                            \n                            \n                                    Async\n                                validateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(appRedisService: AppRedisService, userService: UserService, jwtService: JwtService, configService: ConfigService, passwordResetEmailQueue: Queue)\n                    \n                \n                        \n                            \n                                Defined in src/modules/auth/auth.service.ts:26\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        appRedisService\n                                                  \n                                                        \n                                                                        AppRedisService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        passwordResetEmailQueue\n                                                  \n                                                        \n                                                                    Queue\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        forgotPassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    forgotPassword(email: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/auth/auth.service.ts:135\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(user: User)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/auth/auth.service.ts:68\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            User\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        refresh\n                        \n                    \n                \n            \n            \n                \n                        \n                    refresh(refreshToken: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/auth/auth.service.ts:83\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                refreshToken\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        resetPassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    resetPassword(resetToken: string, newPassword: string, confirmPassword: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/auth/auth.service.ts:160\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                resetToken\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                newPassword\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                confirmPassword\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validateUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    validateUser(email: string, pass: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/auth/auth.service.ts:50\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                pass\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        jwtExpiresIn\n                        \n                    \n                \n            \n                \n                    \n                        Type :     StringValue\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/auth.service.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        jwtNotBefore\n                        \n                    \n                \n            \n                \n                    \n                        Type :     StringValue\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/auth.service.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        jwtRefreshExpriresIn\n                        \n                    \n                \n            \n                \n                    \n                        Type :     StringValue\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/auth.service.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        jwtRefreshSecret\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/auth.service.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        passwordResetUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/auth.service.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        saltRounds\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/auth.service.ts:26\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import bcrypt from 'bcrypt';\nimport {\n  BadRequestException,\n  Injectable,\n  NotFoundException,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { UserService } from '../user/user.service';\nimport { JsonWebTokenError, JwtService, NotBeforeError } from '@nestjs/jwt';\nimport { User } from '../user/entities/user.entity';\nimport { ConfigService } from '@nestjs/config';\nimport { InjectQueue } from '@nestjs/bullmq';\nimport { PASSWORD_RESET_EMAIL_QUEUE_NAME } from '@common/constants';\nimport { Queue } from 'bullmq';\nimport { AuthTokens } from './types/auth-tokens';\nimport { AppRedisService } from '@services/redis/redis.service';\nimport ms, { StringValue } from 'ms';\n\n@Injectable()\nexport class AuthService {\n  private readonly passwordResetUrl: string;\n  private readonly jwtExpiresIn: StringValue;\n  private readonly jwtNotBefore: StringValue;\n  private readonly jwtRefreshSecret: string;\n  private readonly jwtRefreshExpriresIn: StringValue;\n  private readonly saltRounds: number;\n\n  constructor(\n    private readonly appRedisService: AppRedisService,\n    private readonly userService: UserService,\n    private readonly jwtService: JwtService,\n    private readonly configService: ConfigService,\n    @InjectQueue(PASSWORD_RESET_EMAIL_QUEUE_NAME)\n    private readonly passwordResetEmailQueue: Queue,\n  ) {\n    this.passwordResetUrl =\n      this.configService.getOrThrow('url.passwordReset');\n    this.jwtExpiresIn =\n      this.configService.getOrThrow('auth.jwt.expiresIn');\n    this.jwtNotBefore = `${(ms(this.jwtExpiresIn) - ms('1m')) / ms('1m')}m`;\n    this.jwtRefreshExpriresIn = this.configService.getOrThrow(\n      'auth.jwt.refreshExpiresIn',\n    );\n    this.jwtRefreshSecret = this.configService.getOrThrow(\n      'auth.jwt.refreshSecret',\n    );\n    this.saltRounds = this.configService.getOrThrow('auth.saltRounds');\n  }\n\n  async validateUser(\n    email: string,\n    pass: string,\n  ): Promise | null> {\n    const user = await this.userService.findOne(\n      { email },\n      { failHandler: () => new NotFoundException('User not found') },\n    );\n\n    if (user && (await bcrypt.compare(pass, user.password))) {\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      const { password, ...result } = user;\n      return result;\n    }\n\n    return null;\n  }\n\n  async login(user: User): Promise {\n    const payload = {\n      sub: user.id,\n    };\n\n    return {\n      access_token: this.jwtService.sign(payload),\n      refresh_token: this.jwtService.sign(payload, {\n        secret: this.jwtRefreshSecret,\n        expiresIn: this.jwtRefreshExpriresIn,\n        notBefore: this.jwtNotBefore,\n      }),\n    };\n  }\n\n  async refresh(refreshToken: string): Promise {\n    let payload: any;\n\n    const cacheKey = `tokens:refresh:blacklisted:${refreshToken}`;\n    const isBlacklisted = await this.appRedisService.exists(cacheKey);\n    if (isBlacklisted) {\n      throw new BadRequestException('Refresh token is blacklisted');\n    }\n\n    try {\n      payload = this.jwtService.verify(refreshToken, {\n        secret: this.jwtRefreshSecret,\n      });\n    } catch (error) {\n      if (\n        error instanceof JsonWebTokenError &&\n        error.message === 'jwt malformed'\n      ) {\n        throw new BadRequestException('Malformed refresh token');\n      } else if (error instanceof NotBeforeError) {\n        throw new UnauthorizedException('Refresh token not active yet');\n      }\n      throw new UnauthorizedException('Invalid refresh token');\n    }\n\n    const user = await this.userService.findOne(\n      {\n        id: payload.sub,\n      },\n      { failHandler: () => new NotFoundException('User not found') },\n    );\n\n    const newPayload = {\n      sub: user.id,\n    };\n\n    await this.appRedisService.set(\n      cacheKey,\n      '1',\n      (ms(this.jwtRefreshExpriresIn) + ms('1m')) / ms('1s'),\n    );\n\n    return {\n      access_token: this.jwtService.sign(newPayload),\n      refresh_token: this.jwtService.sign(newPayload, {\n        secret: this.jwtRefreshSecret,\n        expiresIn: this.jwtRefreshExpriresIn,\n        notBefore: this.jwtNotBefore,\n      }),\n    };\n  }\n\n  async forgotPassword(email: string): Promise {\n    const user = await this.userService.findOne(\n      { email },\n      { failHandler: () => new NotFoundException('User not found') },\n    );\n\n    const token = this.jwtService.sign({\n      email: user.email,\n      sub: user.id,\n    });\n\n    const resetUrl = `${this.passwordResetUrl}?reset-token=${token}`;\n\n    await this.passwordResetEmailQueue.add('send-password-reset-email', {\n      email: user.email,\n      firstName: user.firstName,\n      resetUrl,\n    });\n\n    await this.userService.update({\n      id: user.id,\n      passwordResetRequested: true,\n    });\n  }\n\n  async resetPassword(\n    resetToken: string,\n    newPassword: string,\n    confirmPassword: string,\n  ): Promise {\n    if (newPassword !== confirmPassword) {\n      throw new BadRequestException('Passwords do not match');\n    }\n\n    const payload = this.jwtService.verify(resetToken);\n    const user = await this.userService.findOne(\n      {\n        email: payload.email,\n      },\n      { failHandler: () => new NotFoundException('User not found') },\n    );\n\n    if (!user.passwordResetRequested) {\n      throw new NotFoundException('Password reset not requested');\n    }\n\n    const salt = await bcrypt.genSalt(this.saltRounds);\n    const hashedPassword = await bcrypt.hash(newPassword, salt);\n    await this.userService.update({\n      id: user.id,\n      password: hashedPassword,\n      passwordResetRequested: false,\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/BaseEntity.html":{"url":"classes/BaseEntity.html","title":"class - BaseEntity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  BaseEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/entities/base.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                    Optional\n                                deletedAt\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Default value : new Date()\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Property({type: 'timestamptz', defaultRaw: 'CURRENT_TIMESTAMP', comment: 'Record creation timestamp'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/entities/base.entity.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        deletedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Property({type: 'timestamptz', nullable: true, comment: 'Soft delete timestamp'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/entities/base.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : uuidv7()\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryKey({type: 'uuid'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/entities/base.entity.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Default value : new Date()\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Property({type: 'timestamptz', defaultRaw: 'CURRENT_TIMESTAMP', onUpdate: () => , comment: 'Record last update timestamp'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/entities/base.entity.ts:30\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Filter, Index, PrimaryKey, Property } from '@mikro-orm/core';\nimport { v7 as uuidv7 } from 'uuid';\n\n@Index({ properties: ['deletedAt'] })\n@Filter({ name: 'softDelete', cond: { deletedAt: null }, default: true })\nexport abstract class BaseEntity {\n  @PrimaryKey({ type: 'uuid' })\n  id: string = uuidv7();\n\n  @Property({\n    type: 'timestamptz',\n    nullable: true,\n    comment: 'Soft delete timestamp',\n  })\n  deletedAt?: Date;\n\n  @Property({\n    type: 'timestamptz',\n    defaultRaw: 'CURRENT_TIMESTAMP',\n    comment: 'Record creation timestamp',\n  })\n  createdAt: Date = new Date();\n\n  @Property({\n    type: 'timestamptz',\n    defaultRaw: 'CURRENT_TIMESTAMP',\n    onUpdate: () => new Date(),\n    comment: 'Record last update timestamp',\n  })\n  updatedAt: Date = new Date();\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CatchAllFilter.html":{"url":"classes/CatchAllFilter.html","title":"class - CatchAllFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CatchAllFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/filters/exception.filter.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                loggerContext\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                            \n                                    Private\n                                getErrorCode\n                            \n                            \n                                    Private\n                                getErrorMessage\n                            \n                            \n                                    Private\n                                getErrorName\n                            \n                            \n                                    Private\n                                getHttpStatus\n                            \n                            \n                                    Private\n                                sanitizeBody\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(httpAdapterHost: HttpAdapterHost, loggerService: LoggerService)\n                    \n                \n                        \n                            \n                                Defined in src/common/filters/exception.filter.ts:20\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        httpAdapterHost\n                                                  \n                                                        \n                                                                    HttpAdapterHost\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        loggerService\n                                                  \n                                                        \n                                                                    LoggerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        loggerContext\n                        \n                    \n                \n            \n                \n                    \n                        Default value : CatchAllFilter.name\n                    \n                \n                    \n                        \n                                Defined in src/common/filters/exception.filter.ts:20\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        catch\n                        \n                    \n                \n            \n            \n                \ncatch(exception: HandledException, host: ArgumentsHost)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/filters/exception.filter.ts:27\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                exception\n                                            \n                                                            HandledException\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                host\n                                            \n                                                        ArgumentsHost\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        getErrorCode\n                        \n                    \n                \n            \n            \n                \n                        \n                    getErrorCode(exception: HandledException)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/filters/exception.filter.ts:119\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                exception\n                                            \n                                                            HandledException\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     string | undefined\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        getErrorMessage\n                        \n                    \n                \n            \n            \n                \n                        \n                    getErrorMessage(exception: HandledException)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/filters/exception.filter.ts:92\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                exception\n                                            \n                                                            HandledException\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        getErrorName\n                        \n                    \n                \n            \n            \n                \n                        \n                    getErrorName(exception: HandledException)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/filters/exception.filter.ts:108\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                exception\n                                            \n                                                            HandledException\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        getHttpStatus\n                        \n                    \n                \n            \n            \n                \n                        \n                    getHttpStatus(exception: HandledException)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/filters/exception.filter.ts:78\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                exception\n                                            \n                                                            HandledException\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         number\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        sanitizeBody\n                        \n                    \n                \n            \n            \n                \n                        \n                    sanitizeBody(body: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/filters/exception.filter.ts:123\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  ExceptionFilter,\n  Catch,\n  ArgumentsHost,\n  HttpException,\n  HttpStatus,\n  ForbiddenException,\n  Logger,\n  LoggerService,\n  Inject,\n  NotFoundException,\n} from '@nestjs/common';\nimport { HttpAdapterHost } from '@nestjs/core';\nimport { AxiosError } from 'axios';\nimport { HandledException } from '../types';\nimport { ErrorResponse } from '../interfaces/error-response.interface';\n\n@Catch()\nexport class CatchAllFilter implements ExceptionFilter {\n  private readonly loggerContext = CatchAllFilter.name;\n\n  constructor(\n    private readonly httpAdapterHost: HttpAdapterHost,\n    @Inject(Logger) private readonly loggerService: LoggerService,\n  ) {}\n\n  catch(exception: HandledException, host: ArgumentsHost): void {\n    const { httpAdapter } = this.httpAdapterHost;\n    const ctx = host.switchToHttp();\n    const request = ctx.getRequest();\n    const response = ctx.getResponse();\n    const requestUrl = httpAdapter.getRequestUrl(request);\n\n    if (exception instanceof NotFoundException) {\n      const exceptionResponse = exception.getResponse() as any;\n      const message = exceptionResponse?.message || exception.message;\n\n      const isRoutingError =\n        typeof message === 'string' &&\n        (message.startsWith('Cannot ') ||\n          message.includes('Cannot find') ||\n          (message === 'Not Found' && !exceptionResponse?.error));\n\n      if (isRoutingError) {\n        const responseBody = {\n          statusCode: HttpStatus.NOT_FOUND,\n          message: `Route ${request.method} ${request.url} does not exist ¯\\\\_(ツ)_/¯`,\n        };\n\n        httpAdapter.reply(response, responseBody, HttpStatus.NOT_FOUND);\n        return;\n      }\n    }\n\n    const httpStatus = this.getHttpStatus(exception);\n    const errorMessage = this.getErrorMessage(exception);\n    const name = this.getErrorName(exception);\n    const errorCode = this.getErrorCode(exception);\n\n    const responseBody: ErrorResponse = {\n      statusCode: httpStatus,\n      message: errorMessage,\n      errorCode,\n      timestamp: new Date().toISOString(),\n      path: `${request.method} - ${requestUrl}`,\n      name,\n    };\n\n    this.loggerService.error(\n      `Exception caught: ${name} - ${errorMessage}`,\n      exception,\n      this.loggerContext,\n    );\n\n    httpAdapter.reply(response, responseBody, httpStatus);\n  }\n\n  private getHttpStatus(exception: HandledException): number {\n    if (exception instanceof HttpException) return exception.getStatus();\n    if (exception instanceof AxiosError) {\n      const status = exception.response?.status || HttpStatus.BAD_GATEWAY;\n      return status >= 500 && status \n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ChangePasswordDto.html":{"url":"classes/ChangePasswordDto.html","title":"class - ChangePasswordDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ChangePasswordDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/user/dto/change-password.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                confirmPassword\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                newPassword\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        confirmPassword\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The confirmation of the new password', example: 'Strong.Pass-1'})@IsString()@IsNotEmpty()@Matches(/^(?=.*[a-z])(?=.*[A-Z])(?=.*[!@#$%^&*()_\\-+=\\[\\]{};':\"\\\\|,.<>\\/?])[A-Za-z\\d!@#$%^&*()_\\-+=\\[\\]{};':\"\\\\|,.<>\\/?]{10,}$/, {message: 'Password must be at least 10 characters long and include uppercase, lowercase, and a symbol (e.g. @, #, ., -)'})@MinLength(10)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/dto/change-password.dto.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        newPassword\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The new password for the user. Minimum of 10 characters.', example: 'Strong.Pass-1'})@IsString()@IsNotEmpty()@Matches(/^(?=.*[a-z])(?=.*[A-Z])(?=.*[!@#$%^&*()_\\-+=\\[\\]{};':\"\\\\|,.<>\\/?])[A-Za-z\\d!@#$%^&*()_\\-+=\\[\\]{};':\"\\\\|,.<>\\/?]{10,}$/, {message: 'Password must be at least 10 characters long and include uppercase, lowercase, and a symbol (e.g. @, #, ., -)'})@MinLength(10)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/dto/change-password.dto.ts:19\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsNotEmpty, IsString, Matches, MinLength } from 'class-validator';\n\nexport class ChangePasswordDto {\n  @ApiProperty({\n    description: 'The new password for the user. Minimum of 10 characters.',\n    example: 'Strong.Pass-1',\n  })\n  @IsString()\n  @IsNotEmpty()\n  @Matches(\n    /^(?=.*[a-z])(?=.*[A-Z])(?=.*[!@#$%^&*()_\\-+=\\[\\]{};':\"\\\\|,.<>\\/?])[A-Za-z\\d!@#$%^&*()_\\-+=\\[\\]{};':\"\\\\|,.<>\\/?]{10,}$/,\n    {\n      message:\n        'Password must be at least 10 characters long and include uppercase, lowercase, and a symbol (e.g. @, #, ., -)',\n    },\n  )\n  @MinLength(10)\n  newPassword: string;\n\n  @ApiProperty({\n    description: 'The confirmation of the new password',\n    example: 'Strong.Pass-1',\n  })\n  @IsString()\n  @IsNotEmpty()\n  @Matches(\n    /^(?=.*[a-z])(?=.*[A-Z])(?=.*[!@#$%^&*()_\\-+=\\[\\]{};':\"\\\\|,.<>\\/?])[A-Za-z\\d!@#$%^&*()_\\-+=\\[\\]{};':\"\\\\|,.<>\\/?]{10,}$/,\n    {\n      message:\n        'Password must be at least 10 characters long and include uppercase, lowercase, and a symbol (e.g. @, #, ., -)',\n    },\n  )\n  @MinLength(10)\n  confirmPassword: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CloudinaryService.html":{"url":"injectables/CloudinaryService.html","title":"injectable - CloudinaryService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CloudinaryService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/storage/cloudinary.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                upload\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, loggerService: LoggerService)\n                    \n                \n                        \n                            \n                                Defined in src/services/storage/cloudinary.service.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        loggerService\n                                                  \n                                                        \n                                                                    LoggerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        upload\n                        \n                    \n                \n            \n            \n                \n                        \n                    upload(file: MemoryStoredFile, fileCategory: UploadFileCategoryEnum)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/storage/cloudinary.service.ts:26\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                file\n                                            \n                                                        MemoryStoredFile\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                fileCategory\n                                            \n                                                            UploadFileCategoryEnum\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable, Logger, LoggerService } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport {\n  v2 as cloudinary,\n  UploadApiResponse,\n  UploadApiErrorResponse,\n} from 'cloudinary';\nimport toStream = require('buffer-to-stream');\nimport { IStrorageService } from './interfaces/storage.interface';\nimport { UploadFileCategoryEnum } from '@common/enums';\nimport { MemoryStoredFile } from 'nestjs-form-data';\n\n@Injectable()\nexport class CloudinaryService implements IStrorageService {\n  constructor(\n    private readonly configService: ConfigService,\n    @Inject(Logger) private readonly loggerService: LoggerService,\n  ) {\n    cloudinary.config({\n      cloud_name: this.configService.getOrThrow('cloudinary.cloudName'),\n      api_key: this.configService.getOrThrow('cloudinary.apiKey'),\n      api_secret: this.configService.getOrThrow('cloudinary.apiSecret'),\n    });\n  }\n\n  async upload(\n    file: MemoryStoredFile,\n    fileCategory: UploadFileCategoryEnum,\n  ): Promise {\n    this.loggerService.log(\n      `Starting upload: filename=\"${file.originalName}\", size=${file.size} bytes, category=${fileCategory}`,\n      CloudinaryService.name,\n    );\n\n    return new Promise((resolve, reject) => {\n      const upload = cloudinary.uploader.upload_stream(\n        {\n          folder: `${this.configService.getOrThrow('cloudinary.folder')}/${fileCategory}`,\n          resource_type: 'auto',\n        },\n        (error: UploadApiErrorResponse, result: UploadApiResponse) => {\n          if (error) {\n            this.loggerService.error(\n              `Upload failed: filename=\"${file.originalName}\", error=${error.message}`,\n              error.stack,\n              CloudinaryService.name,\n            );\n            return reject(error);\n          }\n\n          this.loggerService.log(\n            `Upload successful: filename=\"${file.originalName}\", public_id=${result.public_id}, url=${result.secure_url}`,\n            CloudinaryService.name,\n          );\n          return resolve(result);\n        },\n      );\n\n      toStream(file.buffer).pipe(upload);\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CreateUserCommand.html":{"url":"injectables/CreateUserCommand.html","title":"injectable - CreateUserCommand","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CreateUserCommand\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/commands/create-user.command.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        CommandRunner\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                nanoid\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                parseEmail\n                            \n                            \n                                    \n                                parseFirstName\n                            \n                            \n                                    \n                                parseLastName\n                            \n                            \n                                    \n                                parseRole\n                            \n                            \n                                    Async\n                                run\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(em: EntityManager, userService: UserService)\n                    \n                \n                        \n                            \n                                Defined in src/commands/create-user.command.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        em\n                                                  \n                                                        \n                                                                    EntityManager\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        parseEmail\n                        \n                    \n                \n            \n            \n                \n                        \n                    parseEmail(val: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Option({flags: '-e, --email ', required: true})\n                \n            \n\n                    \n                        \n                            Defined in src/commands/create-user.command.ts:50\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                val\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        parseFirstName\n                        \n                    \n                \n            \n            \n                \n                        \n                    parseFirstName(val: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Option({flags: '-f, --first-name ', required: true})\n                \n            \n\n                    \n                        \n                            Defined in src/commands/create-user.command.ts:56\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                val\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        parseLastName\n                        \n                    \n                \n            \n            \n                \n                        \n                    parseLastName(val: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Option({flags: '-l, --last-name ', required: true})\n                \n            \n\n                    \n                        \n                            Defined in src/commands/create-user.command.ts:62\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                val\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        parseRole\n                        \n                    \n                \n            \n            \n                \n                        \n                    parseRole(val: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Option({flags: '-r, --role ', required: true})\n                \n            \n\n                    \n                        \n                            Defined in src/commands/create-user.command.ts:68\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                val\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         UserRoleEnum\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        run\n                        \n                    \n                \n            \n            \n                \n                        \n                    run(inputs: string[], options: Record)\n                \n            \n\n\n                    \n                        \n                            Defined in src/commands/create-user.command.ts:23\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                inputs\n                                            \n                                                        string[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                options\n                                            \n                                                        Record\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        nanoid\n                        \n                    \n                \n            \n                \n                    \n                        Default value : customAlphabet(PASSWORD_CHARACTER_SET, 10)\n                    \n                \n                    \n                        \n                                Defined in src/commands/create-user.command.ts:14\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { Command, CommandRunner } from 'nest-commander';\nimport { UserService } from '@modules/user/user.service';\nimport { Option } from 'nest-commander';\nimport chalk from 'chalk';\nimport { UserRoleEnum } from '@common/enums';\nimport { customAlphabet } from 'nanoid';\nimport { PASSWORD_CHARACTER_SET } from '@common/constants';\nimport { EntityManager } from '@mikro-orm/core';\n\n@Command({ name: 'create:user', description: 'Create a new user' })\n@Injectable()\nexport class CreateUserCommand extends CommandRunner {\n  private readonly nanoid = customAlphabet(PASSWORD_CHARACTER_SET, 10);\n\n  constructor(\n    private readonly em: EntityManager,\n    private readonly userService: UserService,\n  ) {\n    super();\n  }\n\n  async run(inputs: string[], options: Record): Promise {\n    const { email, firstName, lastName, role } = options;\n\n    try {\n      const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]{2,}$/i;\n\n      if (!emailRegex.test(email)) {\n        throw new Error('Invalid email format');\n      }\n\n      await this.em.transactional(async () => {\n        await this.userService.create({\n          email,\n          firstName,\n          lastName,\n          password: this.nanoid(),\n          role,\n        });\n      });\n      console.log(chalk.green.bold(`✅ Created user with email: ${email}`));\n    } catch (error) {\n      console.error(\n        chalk.red.bold(`❌ Failed to create user: ${error.message}`),\n      );\n    }\n  }\n\n  @Option({ flags: '-e, --email ', required: true }) parseEmail(\n    val: string,\n  ) {\n    return val;\n  }\n\n  @Option({ flags: '-f, --first-name ', required: true }) parseFirstName(\n    val: string,\n  ) {\n    return val;\n  }\n\n  @Option({ flags: '-l, --last-name ', required: true }) parseLastName(\n    val: string,\n  ) {\n    return val;\n  }\n\n  @Option({ flags: '-r, --role ', required: true }) parseRole(\n    val: string,\n  ) {\n    return val as UserRoleEnum;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/user/dto/create-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                address\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                changePassword\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                city\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                country\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                countryCode\n                            \n                            \n                                    \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                firstName\n                            \n                            \n                                    \n                                    \n                                    \n                                lastName\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                password\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                phoneNumber\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                postalCode\n                            \n                            \n                                    \n                                    \n                                    \n                                role\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                state\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The address of the user', example: '123 Main St, Springfield'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/dto/create-user.dto.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        changePassword\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsBoolean()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/dto/create-user.dto.ts:130\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        city\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The city of the user', example: 'Springfield'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/dto/create-user.dto.ts:54\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        country\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The country of the user', example: 'USA'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/dto/create-user.dto.ts:78\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        countryCode\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The country code of the user', example: '+1'})@IsString()@IsOptional()@Transform( => )\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/dto/create-user.dto.ts:91\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The email of the user', example: 'user@example.com'})@IsEmail()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/dto/create-user.dto.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The first name of the user', example: 'John'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/dto/create-user.dto.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The last name of the user', example: 'Doe'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/dto/create-user.dto.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The password of the user', example: 'Strong.Pass-1'})@IsString()@IsNotEmpty()@Matches(/^(?=.*[a-z])(?=.*[A-Z])(?=.*[!@#$%^&*()_\\-+=\\[\\]{};':\"\\\\|,.<>\\/?])[A-Za-z\\d!@#$%^&*()_\\-+=\\[\\]{};':\"\\\\|,.<>\\/?]{10,}$/, {message: 'Password must be at least 10 characters long and include uppercase, lowercase, and a symbol (e.g. @, #, ., -)'})@MinLength(10)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/dto/create-user.dto.ts:115\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        phoneNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The phone number of the user', example: '234567890'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/dto/create-user.dto.ts:99\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        postalCode\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The postal code of the user', example: '12345'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/dto/create-user.dto.ts:62\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserRoleEnum\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Role of the user', example: undefined, enum: UserRoleEnum})@IsEnum(UserRoleEnum, {message: undefined})@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/dto/create-user.dto.ts:126\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        state\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The state of the user', example: 'Illinois'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/dto/create-user.dto.ts:70\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsBoolean,\n  IsEmail,\n  IsEnum,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  Matches,\n  MinLength,\n} from 'class-validator';\nimport { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\nimport { UserRoleEnum } from '@common/enums';\nimport { Transform } from 'class-transformer';\n\nexport class CreateUserDto {\n  @ApiProperty({\n    description: 'The email of the user',\n    example: 'user@example.com',\n  })\n  @IsEmail()\n  @IsNotEmpty()\n  email: string;\n\n  @ApiProperty({\n    description: 'The first name of the user',\n    example: 'John',\n  })\n  @IsString()\n  @IsNotEmpty()\n  firstName: string;\n\n  @ApiProperty({\n    description: 'The last name of the user',\n    example: 'Doe',\n  })\n  @IsString()\n  @IsNotEmpty()\n  lastName: string;\n\n  @ApiProperty({\n    description: 'The address of the user',\n    example: '123 Main St, Springfield',\n  })\n  @IsString()\n  @IsOptional()\n  address?: string;\n\n  @ApiProperty({\n    description: 'The city of the user',\n    example: 'Springfield',\n  })\n  @IsString()\n  @IsOptional()\n  city?: string;\n\n  @ApiProperty({\n    description: 'The postal code of the user',\n    example: '12345',\n  })\n  @IsString()\n  @IsOptional()\n  postalCode?: string;\n\n  @ApiProperty({\n    description: 'The state of the user',\n    example: 'Illinois',\n  })\n  @IsString()\n  @IsOptional()\n  state?: string;\n\n  @ApiProperty({\n    description: 'The country of the user',\n    example: 'USA',\n  })\n  @IsString()\n  @IsOptional()\n  country?: string;\n\n  @ApiProperty({\n    description: 'The country code of the user',\n    example: '+1',\n  })\n  @IsString()\n  @IsOptional()\n  @Transform(({ value }) => {\n    if (typeof value !== 'string') return value;\n    const cleaned = value.replace(/\\+/g, '');\n    return cleaned ? `+${cleaned}` : '';\n  })\n  countryCode?: string;\n\n  @ApiProperty({\n    description: 'The phone number of the user',\n    example: '234567890',\n  })\n  @IsString()\n  @IsOptional()\n  phoneNumber?: string;\n\n  @ApiProperty({\n    description: 'The password of the user',\n    example: 'Strong.Pass-1',\n  })\n  @IsString()\n  @IsNotEmpty()\n  @Matches(\n    /^(?=.*[a-z])(?=.*[A-Z])(?=.*[!@#$%^&*()_\\-+=\\[\\]{};':\"\\\\|,.<>\\/?])[A-Za-z\\d!@#$%^&*()_\\-+=\\[\\]{};':\"\\\\|,.<>\\/?]{10,}$/,\n    {\n      message:\n        'Password must be at least 10 characters long and include uppercase, lowercase, and a symbol (e.g. @, #, ., -)',\n    },\n  )\n  @MinLength(10)\n  password: string;\n\n  @ApiPropertyOptional({\n    description: 'Role of the user',\n    example: UserRoleEnum.USER,\n    enum: UserRoleEnum,\n  })\n  @IsEnum(UserRoleEnum, {\n    message: `role must be one of: ${Object.values(UserRoleEnum).join(', ')}`,\n  })\n  @IsOptional()\n  role: UserRoleEnum;\n\n  @IsBoolean()\n  @IsOptional()\n  changePassword?: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserResponseDto.html":{"url":"classes/CreateUserResponseDto.html","title":"class - CreateUserResponseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserResponseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/user/dto/responses.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                data\n                            \n                            \n                                    \n                                message\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        data\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The newly created user', type: User})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/dto/responses.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        message\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Message indicating the success of the operation', example: 'User created successfully'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/dto/responses.dto.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { User } from '../entities/user.entity';\n\nexport class CreateUserResponseDto {\n  @ApiProperty({\n    description: 'Message indicating the success of the operation',\n    example: 'User created successfully',\n  })\n  message: string;\n\n  @ApiProperty({\n    description: 'The newly created user',\n    type: User,\n  })\n  data: User;\n}\n\nexport class GetProfileResponseDto {\n  @ApiProperty({\n    description: 'Message indicating the success of the operation',\n    example: 'Profile fetched successfully',\n  })\n  message: string;\n\n  @ApiProperty({\n    description: 'The profile of the user',\n    type: User,\n  })\n  data: User;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DatabaseSeeder.html":{"url":"classes/DatabaseSeeder.html","title":"class - DatabaseSeeder","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DatabaseSeeder\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/seeders/DatabaseSeeder.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        Seeder\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                run\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        run\n                        \n                    \n                \n            \n            \n                \n                        \n                    run(em: EntityManager)\n                \n            \n\n\n                    \n                        \n                            Defined in src/seeders/DatabaseSeeder.ts:6\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                em\n                                            \n                                                        EntityManager\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import type { EntityManager } from '@mikro-orm/core';\nimport { Seeder } from '@mikro-orm/seeder';\nimport { UserFactory } from '@modules/user/factories/user.factory';\n\nexport class DatabaseSeeder extends Seeder {\n  async run(em: EntityManager): Promise {\n    new UserFactory(em).make(10);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/EmailModule.html":{"url":"modules/EmailModule.html","title":"module - EmailModule","body":"\n                   \n\n\n\n\n    Modules\n    EmailModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_EmailModule\n\n\n\ncluster_EmailModule_exports\n\n\n\n\nEmailService \n\nEmailService \n\n\n\nEmailModule\n\nEmailModule\n\nEmailService  -->\n\nEmailModule->EmailService \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/services/email/email.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Exports\n                    \n                        \n                            EmailService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Logger, Module } from '@nestjs/common';\nimport { EmailService } from './email.service';\nimport { MailerModule } from '@nestjs-modules/mailer';\nimport { ConfigService } from '@nestjs/config';\nimport { EMAIL_FROM_NAME } from '@common/constants';\nimport { PugAdapter } from '@nestjs-modules/mailer/dist/adapters/pug.adapter';\nimport { join } from 'path';\n\n@Module({\n  imports: [\n    MailerModule.forRootAsync({\n      useFactory: (configService: ConfigService) => ({\n        transport: {\n          host: configService.getOrThrow('smtp.host'),\n          port: configService.getOrThrow('smtp.port'),\n          secure: configService.getOrThrow('smtp.secure'),\n          auth: {\n            user: configService.getOrThrow('smtp.auth.user'),\n            pass: configService.getOrThrow('smtp.auth.pass'),\n          },\n        },\n        defaults: {\n          from: `\"${EMAIL_FROM_NAME}\" ('smtp.auth.user')}>`,\n        },\n        template: {\n          dir: join(process.cwd(), 'src/templates/email'),\n          adapter: new PugAdapter(),\n          options: {\n            strict: true,\n          },\n        },\n      }),\n      inject: [ConfigService],\n    }),\n  ],\n  providers: [EmailService, Logger],\n  controllers: [],\n  exports: [EmailService],\n})\nexport class EmailModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/EmailService.html":{"url":"classes/EmailService.html","title":"class - EmailService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  EmailService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/email/email.service.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                sendEmail\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(mailerService: MailerService, loggerService: LoggerService)\n                    \n                \n                        \n                            \n                                Defined in src/services/email/email.service.ts:4\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        mailerService\n                                                  \n                                                        \n                                                                    MailerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        loggerService\n                                                  \n                                                        \n                                                                    LoggerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        sendEmail\n                        \n                    \n                \n            \n            \n                \n                        \n                    sendEmail(to: string | string[], subject: string, template: string, context: Record)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/email/email.service.ts:11\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                to\n                                            \n                                                        string | string[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                subject\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                template\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                context\n                                            \n                                                        Record\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MailerService } from '@nestjs-modules/mailer';\nimport { Inject, Logger, LoggerService } from '@nestjs/common';\n\nexport class EmailService {\n  constructor(\n    @Inject(MailerService)\n    private readonly mailerService: MailerService,\n    @Inject(Logger) private readonly loggerService: LoggerService,\n  ) {}\n\n  async sendEmail(\n    to: string | string[],\n    subject: string,\n    template: string,\n    context: Record,\n  ): Promise {\n    this.loggerService.log(\n      `Sending email to: ${to} with subject: ${subject}`,\n      'EmailService',\n    );\n\n    await this.mailerService.sendMail({\n      to,\n      subject,\n      template,\n      context,\n    });\n\n    this.loggerService.log(`Email sent successfully to: ${to}`, 'EmailService');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ErrorResponse.html":{"url":"interfaces/ErrorResponse.html","title":"interface - ErrorResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ErrorResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/interfaces/error-response.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            errorCode\n                                        \n                                \n                                \n                                        \n                                            message\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                                \n                                        \n                                            path\n                                        \n                                \n                                \n                                        \n                                            statusCode\n                                        \n                                \n                                \n                                        \n                                            timestamp\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        errorCode\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        errorCode:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        message\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        message:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        path\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        path:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        statusCode\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        statusCode:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        timestamp\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        timestamp:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface ErrorResponse {\n  statusCode: number;\n  message: string;\n  errorCode?: string;\n  timestamp: string;\n  path: string;\n  name: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ForgotPasswordDto.html":{"url":"classes/ForgotPasswordDto.html","title":"class - ForgotPasswordDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ForgotPasswordDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/dto/forgot-password.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                email\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'user@example.com'})@IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/dto/forgot-password.dto.ts:7\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail } from 'class-validator';\nimport { ApiProperty } from '@nestjs/swagger';\n\nexport class ForgotPasswordDto {\n  @ApiProperty({ example: 'user@example.com' })\n  @IsEmail()\n  email: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetProfileResponseDto.html":{"url":"classes/GetProfileResponseDto.html","title":"class - GetProfileResponseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetProfileResponseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/user/dto/responses.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                data\n                            \n                            \n                                    \n                                message\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        data\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The profile of the user', type: User})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/dto/responses.dto.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        message\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Message indicating the success of the operation', example: 'Profile fetched successfully'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/dto/responses.dto.ts:23\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { User } from '../entities/user.entity';\n\nexport class CreateUserResponseDto {\n  @ApiProperty({\n    description: 'Message indicating the success of the operation',\n    example: 'User created successfully',\n  })\n  message: string;\n\n  @ApiProperty({\n    description: 'The newly created user',\n    type: User,\n  })\n  data: User;\n}\n\nexport class GetProfileResponseDto {\n  @ApiProperty({\n    description: 'Message indicating the success of the operation',\n    example: 'Profile fetched successfully',\n  })\n  message: string;\n\n  @ApiProperty({\n    description: 'The profile of the user',\n    type: User,\n  })\n  data: User;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/HttpClientModule.html":{"url":"modules/HttpClientModule.html","title":"module - HttpClientModule","body":"\n                   \n\n\n\n\n    Modules\n    HttpClientModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_HttpClientModule\n\n\n\ncluster_HttpClientModule_providers\n\n\n\ncluster_HttpClientModule_exports\n\n\n\n\nHttpClientService \n\nHttpClientService \n\n\n\nHttpClientModule\n\nHttpClientModule\n\nHttpClientService  -->\n\nHttpClientModule->HttpClientService \n\n\n\n\n\nHttpClientService\n\nHttpClientService\n\nHttpClientModule -->\n\nHttpClientService->HttpClientModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/services/http-client/http-client.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            HttpClientService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            HttpClientService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Logger, Module } from '@nestjs/common';\nimport { HttpModule } from '@nestjs/axios';\nimport { HttpClientService } from './http-client.service';\n\n@Module({\n  imports: [HttpModule],\n  providers: [HttpClientService, Logger],\n  exports: [HttpClientService],\n})\nexport class HttpClientModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/HttpClientService.html":{"url":"injectables/HttpClientService.html","title":"injectable - HttpClientService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  HttpClientService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/http-client/http-client.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                httpAgent\n                            \n                            \n                                    Private\n                                    Readonly\n                                httpsAgent\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                makeHttpRequest\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(httpService: HttpService, loggerService: LoggerService)\n                    \n                \n                        \n                            \n                                Defined in src/services/http-client/http-client.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        httpService\n                                                  \n                                                        \n                                                                    HttpService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        loggerService\n                                                  \n                                                        \n                                                                    LoggerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        makeHttpRequest\n                        \n                    \n                \n            \n            \n                \n                        \n                    makeHttpRequest(url: string, options: AxiosRequestConfig)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/http-client/http-client.service.ts:21\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                url\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                options\n                                            \n                                                        AxiosRequestConfig\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        httpAgent\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new http.Agent({ keepAlive: false })\n                    \n                \n                    \n                        \n                                Defined in src/services/http-client/http-client.service.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        httpsAgent\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new https.Agent({ keepAlive: false })\n                    \n                \n                    \n                        \n                                Defined in src/services/http-client/http-client.service.ts:11\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { HttpService } from '@nestjs/axios';\nimport { Inject, Injectable, Logger, LoggerService } from '@nestjs/common';\nimport { AxiosRequestConfig } from 'axios';\nimport http from 'http';\nimport https from 'https';\nimport { lastValueFrom } from 'rxjs';\n\n@Injectable()\nexport class HttpClientService {\n  private readonly httpAgent = new http.Agent({ keepAlive: false });\n  private readonly httpsAgent = new https.Agent({ keepAlive: false });\n\n  constructor(\n    private readonly httpService: HttpService,\n    @Inject(Logger) private readonly loggerService: LoggerService,\n  ) {\n    this.httpService.axiosRef.defaults.httpAgent = this.httpAgent;\n    this.httpService.axiosRef.defaults.httpsAgent = this.httpsAgent;\n  }\n\n  async makeHttpRequest(\n    url: string,\n    options: AxiosRequestConfig,\n  ): Promise {\n    this.loggerService.log(\n      `Making HTTP request to ${url}`,\n      HttpClientService.name,\n    );\n\n    const data =\n      (await lastValueFrom(this.httpService.request({ url, ...options }))) ||\n      {};\n\n    this.loggerService.log(\n      `HTTP request to ${url} successful`,\n      HttpClientService.name,\n    );\n\n    return data;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IPaymentService.html":{"url":"interfaces/IPaymentService.html","title":"interface - IPaymentService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IPaymentService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/payment/interfaces/payment.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        createCheckoutSession\n                                    \n                                \n                                \n                                    \n                                        createPaymentIntent\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        createCheckoutSession\n                        \n                    \n                \n            \n            \n                \ncreateCheckoutSession(params: Stripe.Checkout.SessionCreateParams, options?: Stripe.RequestOptions)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/payment/interfaces/payment.interface.ts:4\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                params\n                                            \n                                                            Stripe.Checkout.SessionCreateParams\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                options\n                                            \n                                                        Stripe.RequestOptions\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createPaymentIntent\n                        \n                    \n                \n            \n            \n                \ncreatePaymentIntent(params: Stripe.PaymentIntentCreateParams, options?: Stripe.RequestOptions)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/payment/interfaces/payment.interface.ts:9\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                params\n                                            \n                                                            Stripe.PaymentIntentCreateParams\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                options\n                                            \n                                                        Stripe.RequestOptions\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import Stripe from 'stripe';\n\nexport interface IPaymentService {\n  createCheckoutSession(\n    params: Stripe.Checkout.SessionCreateParams,\n    options?: Stripe.RequestOptions,\n  ): Promise>;\n\n  createPaymentIntent(\n    params: Stripe.PaymentIntentCreateParams,\n    options?: Stripe.RequestOptions,\n  ): Promise>;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IStrorageService.html":{"url":"interfaces/IStrorageService.html","title":"interface - IStrorageService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IStrorageService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/storage/interfaces/storage.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                        Optional\n                                    \n                                        createPresignedUrlWithoutClient\n                                    \n                                \n                                \n                                    \n                                        upload\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        createPresignedUrlWithoutClient\n                        \n                    \n                \n            \n            \n                \ncreatePresignedUrlWithoutClient(key: string, method?: HttpRequestMethodEnum, ttl?: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/storage/interfaces/storage.interface.ts:12\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                method\n                                            \n                                                            HttpRequestMethodEnum\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                        \n                                                ttl\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        upload\n                        \n                    \n                \n            \n            \n                \nupload(file: MemoryStoredFile, fileCategory: UploadFileCategoryEnum)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/storage/interfaces/storage.interface.ts:7\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                file\n                                            \n                                                        MemoryStoredFile\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                fileCategory\n                                            \n                                                            UploadFileCategoryEnum\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { UploadApiResponse } from 'cloudinary';\nimport { MemoryStoredFile } from 'nestjs-form-data';\nimport { HttpRequestMethodEnum, UploadFileCategoryEnum } from '@common/enums';\nimport { S3PutObjectResponse } from '../types/s3-put-object-response';\n\nexport interface IStrorageService {\n  upload(\n    file: MemoryStoredFile,\n    fileCategory: UploadFileCategoryEnum,\n  ): Promise;\n\n  createPresignedUrlWithoutClient?(\n    key: string,\n    method?: HttpRequestMethodEnum,\n    ttl?: number,\n  ): Promise;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtAuthGuard.html":{"url":"injectables/JwtAuthGuard.html","title":"injectable - JwtAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/guards/jwt-auth.guard.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        AuthGuard('jwt')\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                            \n                                handleRequest\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/modules/auth/guards/jwt-auth.guard.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/auth/guards/jwt-auth.guard.ts:16\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        handleRequest\n                        \n                    \n                \n            \n            \n                \nhandleRequest(err: Error, user: any, info: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/auth/guards/jwt-auth.guard.ts:27\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                err\n                                            \n                                                        Error\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                info\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  ExecutionContext,\n  Injectable,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { AuthGuard } from '@nestjs/passport';\nimport { IS_PUBLIC_KEY } from '../decorators/public.decorator';\n\n@Injectable()\nexport class JwtAuthGuard extends AuthGuard('jwt') {\n  constructor(private reflector: Reflector) {\n    super();\n  }\n\n  canActivate(context: ExecutionContext) {\n    const isPublic = this.reflector.getAllAndOverride(IS_PUBLIC_KEY, [\n      context.getHandler(),\n      context.getClass(),\n    ]);\n    if (isPublic) {\n      return true;\n    }\n    return super.canActivate(context);\n  }\n\n  handleRequest(err: Error, user: any, info: any) {\n    if (err || !user) {\n      let errorObject: Error = {\n        name: info?.name || 'UnauthorizedException',\n        message: info?.message || 'Unauthorized',\n      };\n\n      throw new UnauthorizedException(errorObject);\n    }\n\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/strategies/jwt.strategy.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PassportStrategy(Strategy)\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, userService: UserService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/auth/strategies/jwt.strategy.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                        \n                    validate(req: Request, payload: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/auth/strategies/jwt.strategy.ts:34\n                        \n                    \n\n\n            \n                \n                        NOTE: req is available here and can be used to extract the raw JWT.\nThis can support enforcing a single active session per user:\n\nCompare the JWT in the request with the token stored in the user document.\nReject the request if they don't match (i.e., user is logged in elsewhere).\n\nImplementation details:\n\nStore or update the token in the user document during login and token refresh.\nThis logic should be implemented in the\nlogin() (needs to be implemented as login currently stops at the controller level and no it's not wrong)\n and refresh() methods of the AuthService class.\n\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                payload\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ExtractJwt, Strategy } from 'passport-jwt';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Injectable, NotFoundException } from '@nestjs/common';\nimport { UserService } from '@modules/user/user.service';\nimport { ConfigService } from '@nestjs/config';\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  constructor(\n    configService: ConfigService,\n    private userService: UserService,\n  ) {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      ignoreExpiration: false,\n      secretOrKey: configService.getOrThrow('auth.jwt.secret'),\n      passReqToCallback: true,\n    });\n  }\n\n  /**\n   * NOTE: `req` is available here and can be used to extract the raw JWT.\n   *\n   * This can support enforcing a single active session per user:\n   * - Compare the JWT in the request with the token stored in the user document.\n   * - Reject the request if they don't match (i.e., user is logged in elsewhere).\n   *\n   * Implementation details:\n   * - Store or update the token in the user document during login and token refresh.\n   * - This logic should be implemented in the\n   * `login()` (needs to be implemented as login currently stops at the controller level and no it's not wrong)\n   *  and `refresh()` methods of the `AuthService` class.\n   */\n  async validate(req: Request, payload: any) {\n    const user = await this.userService.findOne(\n      {\n        id: payload.sub,\n      },\n      { failHandler: () => new NotFoundException('User not found') },\n    );\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalAuthGuard.html":{"url":"injectables/LocalAuthGuard.html","title":"injectable - LocalAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LocalAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/guards/local-auth.guard.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        AuthGuard('local')\n            \n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class LocalAuthGuard extends AuthGuard('local') {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalStrategy.html":{"url":"injectables/LocalStrategy.html","title":"injectable - LocalStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LocalStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/strategies/local.strategy.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PassportStrategy(Strategy)\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService, userService: UserService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/auth/strategies/local.strategy.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                        \n                    validate(email: string, password: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/auth/strategies/local.strategy.ts:20\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                password\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Strategy } from 'passport-local';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { AuthService } from '../auth.service';\nimport { UserService } from '@modules/user/user.service';\nimport dayjs from 'dayjs';\nimport utc from 'dayjs/plugin/utc';\n\ndayjs.extend(utc);\n\n@Injectable()\nexport class LocalStrategy extends PassportStrategy(Strategy) {\n  constructor(\n    private authService: AuthService,\n    private userService: UserService,\n  ) {\n    super({ usernameField: 'email' });\n  }\n\n  async validate(email: string, password: string): Promise {\n    const user = await this.authService.validateUser(email, password);\n    if (!user) {\n      throw new UnauthorizedException('Invalid credentials');\n    }\n    await this.userService.update({\n      id: user.id,\n      lastLoggedIn: dayjs().utc().toDate(),\n    });\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginDto.html":{"url":"classes/LoginDto.html","title":"class - LoginDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/dto/login.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The email of the user', example: 'user@example.com'})@IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/dto/login.dto.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The password of the user', example: 'Strong.Pass-1'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/dto/login.dto.ts:16\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsEmail } from 'class-validator';\n\nexport class LoginDto {\n  @ApiProperty({\n    description: 'The email of the user',\n    example: 'user@example.com',\n  })\n  @IsEmail()\n  email: string;\n\n  @ApiProperty({\n    description: 'The password of the user',\n    example: 'Strong.Pass-1',\n  })\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Migration20250730220636.html":{"url":"classes/Migration20250730220636.html","title":"class - Migration20250730220636","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Migration20250730220636\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/migrations/Migration20250730220636.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        Migration\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        up\n                        \n                    \n                \n            \n            \n                \n                        \n                    up()\n                \n            \n\n\n                    \n                        \n                            Defined in src/migrations/Migration20250730220636.ts:4\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     Promise\n\n                        \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Migration } from '@mikro-orm/migrations';\n\nexport class Migration20250730220636 extends Migration {\n  override async up(): Promise {\n    this.addSql(\n      `create table \"users\" (\"id\" uuid not null, \"deleted_at\" timestamptz null, \"created_at\" timestamptz not null default CURRENT_TIMESTAMP, \"updated_at\" timestamptz not null default CURRENT_TIMESTAMP, \"email\" varchar(255) not null, \"avatar\" varchar(500) null, \"first_name\" varchar(100) not null, \"last_name\" varchar(100) not null, \"address\" text null, \"city\" varchar(100) null, \"postal_code\" varchar(20) null, \"state\" varchar(100) null, \"country\" varchar(100) null, \"country_code\" varchar(3) null, \"phone_number\" varchar(20) null, \"password\" varchar(255) not null, \"role\" text check (\"role\" in ('admin', 'user')) not null default 'user', \"change_password\" boolean not null default false, \"password_reset_requested\" boolean not null default false, \"last_logged_in\" timestamptz null, constraint \"users_pkey\" primary key (\"id\"));`,\n    );\n    this.addSql(\n      `comment on column \"users\".\"deleted_at\" is 'Soft delete timestamp';`,\n    );\n    this.addSql(\n      `comment on column \"users\".\"created_at\" is 'Record creation timestamp';`,\n    );\n    this.addSql(\n      `comment on column \"users\".\"updated_at\" is 'Record last update timestamp';`,\n    );\n    this.addSql(`comment on column \"users\".\"email\" is 'User email address';`);\n    this.addSql(`comment on column \"users\".\"avatar\" is 'Avatar URL or path';`);\n    this.addSql(`comment on column \"users\".\"first_name\" is 'User first name';`);\n    this.addSql(`comment on column \"users\".\"last_name\" is 'User last name';`);\n    this.addSql(`comment on column \"users\".\"address\" is 'Street address';`);\n    this.addSql(`comment on column \"users\".\"city\" is 'City name';`);\n    this.addSql(\n      `comment on column \"users\".\"postal_code\" is 'Postal/ZIP code';`,\n    );\n    this.addSql(`comment on column \"users\".\"state\" is 'State/Province';`);\n    this.addSql(`comment on column \"users\".\"country\" is 'Country name';`);\n    this.addSql(\n      `comment on column \"users\".\"country_code\" is 'ISO country code';`,\n    );\n    this.addSql(`comment on column \"users\".\"phone_number\" is 'Phone number';`);\n    this.addSql(`comment on column \"users\".\"password\" is 'Hashed password';`);\n    this.addSql(`comment on column \"users\".\"role\" is 'User role';`);\n    this.addSql(\n      `comment on column \"users\".\"change_password\" is 'Whether user needs to change password';`,\n    );\n    this.addSql(\n      `comment on column \"users\".\"password_reset_requested\" is 'Whether password reset was requested';`,\n    );\n    this.addSql(\n      `comment on column \"users\".\"last_logged_in\" is 'Last login timestamp';`,\n    );\n    this.addSql(\n      `alter table \"users\" add constraint \"users_email_unique\" unique (\"email\");`,\n    );\n    this.addSql(\n      `create index \"users_deleted_at_index\" on \"users\" (\"deleted_at\");`,\n    );\n    this.addSql(`create index \"users_email_index\" on \"users\" (\"email\");`);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MorganMiddleware.html":{"url":"injectables/MorganMiddleware.html","title":"injectable - MorganMiddleware","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  MorganMiddleware\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/middlewares/morgan.middleware.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                use\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(loggerService: LoggerService)\n                    \n                \n                        \n                            \n                                Defined in src/common/middlewares/morgan.middleware.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        loggerService\n                                                  \n                                                        \n                                                                    LoggerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        use\n                        \n                    \n                \n            \n            \n                \nuse(req: any, res: any, next: () => void)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/middlewares/morgan.middleware.ts:14\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                res\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                next\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  Inject,\n  Injectable,\n  Logger,\n  LoggerService,\n  NestMiddleware,\n} from '@nestjs/common';\nimport morgan from 'morgan';\n\n@Injectable()\nexport class MorganMiddleware implements NestMiddleware {\n  constructor(@Inject(Logger) private readonly loggerService: LoggerService) {}\n\n  use(req: any, res: any, next: () => void) {\n    if (req.url === '/' || req.url.match(/\\/v1\\/queues\\/.*$/)) {\n      return next();\n    }\n\n    morgan(\n      ':remote-addr :remote-user :method :url :http-version :status :res[content-length] :response-time ms :total-time ms :referrer :user-agent :req[header] :req[body]',\n      {\n        stream: {\n          write: (message: string) => {\n            const status = res.statusCode;\n            if (status === 404) {\n              this.loggerService.warn(message.trim(), MorganMiddleware.name);\n            } else {\n              this.loggerService.log(message.trim(), MorganMiddleware.name);\n            }\n          },\n        },\n      },\n    )(req, res, next);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PasswordResetEmailConsumer.html":{"url":"classes/PasswordResetEmailConsumer.html","title":"class - PasswordResetEmailConsumer","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PasswordResetEmailConsumer\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/consumers/auth.consumer.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                process\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(emailService: EmailService, loggerService: LoggerService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/auth/consumers/auth.consumer.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        emailService\n                                                  \n                                                        \n                                                                        EmailService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        loggerService\n                                                  \n                                                        \n                                                                    LoggerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        process\n                        \n                    \n                \n            \n            \n                \n                        \n                    process(job: Job)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/auth/consumers/auth.consumer.ts:20\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                job\n                                            \n                                                        Job\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { PASSWORD_RESET_EMAIL_QUEUE_NAME } from '@common/constants';\nimport os from 'os';\nimport { Processor, WorkerHost } from '@nestjs/bullmq';\nimport { Job } from 'bullmq';\nimport { EmailService } from '@services/email/email.service';\nimport { Inject, Logger, LoggerService } from '@nestjs/common';\nimport { EmailSubjectEnum, EmailTemplateEnum } from '@common/enums';\n\n@Processor(PASSWORD_RESET_EMAIL_QUEUE_NAME, {\n  concurrency: os.cpus().length,\n})\nexport class PasswordResetEmailConsumer extends WorkerHost {\n  constructor(\n    private readonly emailService: EmailService,\n    @Inject(Logger) private readonly loggerService: LoggerService,\n  ) {\n    super();\n  }\n\n  async process(job: Job) {\n    const { data } = job;\n\n    this.loggerService.log(\n      `Processing job: ${job.id} for email: ${data?.email}`,\n      'PasswordResetEmailConsumer',\n    );\n\n    await this.emailService.sendEmail(\n      data?.email,\n      EmailSubjectEnum.PASSWORD_RESET,\n      EmailTemplateEnum.PASSWORD_RESET,\n      { resetUrl: data?.resetUrl, firstName: data?.firstName },\n    );\n\n    this.loggerService.log(\n      `Job: ${job.id} processed successfully for email: ${data?.email}`,\n      'PasswordResetEmailConsumer',\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PaymentModule.html":{"url":"modules/PaymentModule.html","title":"module - PaymentModule","body":"\n                   \n\n\n\n\n    Modules\n    PaymentModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/services/payment/payment.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        register\n                        \n                    \n                \n            \n            \n                \n                        \n                    register()\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/payment/payment.module.ts:16\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     DynamicModule\n\n                        \n                \n            \n        \n    \n\n    \n\n\n    \n        import { STRIPE_CLIENT_TOKEN, StripeModule } from '@golevelup/nestjs-stripe';\nimport { DynamicModule, Logger, LoggerService, Module } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { TEMPLATE_QUEUE_NAME, PAYMENT_PROVIDER } from '@common/constants';\nimport { PaymentDriverEnum } from '@common/enums';\nimport Stripe from 'stripe';\nimport { Public } from '@modules/auth/decorators/public.decorator';\nimport { StripeService } from './stripe.service';\nimport { BullModule, getQueueToken } from '@nestjs/bullmq';\nimport { BullBoardModule } from '@bull-board/nestjs';\nimport { BullMQAdapter } from '@bull-board/api/bullMQAdapter';\nimport { Queue } from 'bullmq';\n\n@Module({})\nexport class PaymentModule {\n  static register(): DynamicModule {\n    return {\n      module: PaymentModule,\n      imports: [\n        StripeModule.forRootAsync({\n          useFactory: (configService: ConfigService) => ({\n            apiKey: configService.getOrThrow('stripe.secretKey'),\n            webhookConfig: {\n              stripeSecrets: {\n                account: configService.getOrThrow(\n                  'stripe.webhookSecret.account',\n                ),\n                accountTest: configService.getOrThrow(\n                  'stripe.webhookSecret.accountTest',\n                ),\n              },\n              loggingConfiguration: {\n                logMatchingEventHandlers: true,\n              },\n              decorators: [Public()],\n            },\n          }),\n          inject: [ConfigService],\n        }),\n        BullModule.registerQueue({\n          name: TEMPLATE_QUEUE_NAME,\n          defaultJobOptions: {\n            attempts: 5,\n            backoff: { type: 'exponential', delay: 2000 },\n          },\n        }),\n        BullBoardModule.forFeature({\n          name: TEMPLATE_QUEUE_NAME,\n          adapter: BullMQAdapter,\n        }),\n      ],\n      providers: [\n        {\n          provide: PAYMENT_PROVIDER,\n          useFactory: (\n            configService: ConfigService,\n            loggerService: LoggerService,\n            stripeClient: Stripe,\n            templateQueue: Queue,\n          ) => {\n            const driver = configService.getOrThrow('driver.payment');\n            if (driver === PaymentDriverEnum.STRIPE)\n              return new StripeService(\n                configService,\n                loggerService,\n                stripeClient,\n                templateQueue,\n              );\n          },\n          inject: [\n            ConfigService,\n            Logger,\n            STRIPE_CLIENT_TOKEN,\n            getQueueToken(TEMPLATE_QUEUE_NAME),\n          ],\n        },\n        Logger,\n      ],\n      exports: [PAYMENT_PROVIDER],\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RefreshTokenDto.html":{"url":"classes/RefreshTokenDto.html","title":"class - RefreshTokenDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RefreshTokenDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/dto/refresh-token-dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                refreshToken\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        refreshToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Refresh token provided during login', example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/dto/refresh-token-dto.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsNotEmpty, IsString } from 'class-validator';\n\nexport class RefreshTokenDto {\n  @ApiProperty({\n    description: 'Refresh token provided during login',\n    example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9',\n  })\n  @IsString()\n  @IsNotEmpty()\n  refreshToken: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RequestBodyAndResponseInterceptor.html":{"url":"injectables/RequestBodyAndResponseInterceptor.html","title":"injectable - RequestBodyAndResponseInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RequestBodyAndResponseInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/interceptors/response.interceptor.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(loggerService: LoggerService)\n                    \n                \n                        \n                            \n                                Defined in src/common/interceptors/response.interceptor.ts:53\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        loggerService\n                                                  \n                                                        \n                                                                    LoggerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/interceptors/response.interceptor.ts:56\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                next\n                                            \n                                                        CallHandler\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { STRIPE_WEBHOOK_CONTEXT_TYPE } from '@golevelup/nestjs-stripe';\nimport {\n  CallHandler,\n  ExecutionContext,\n  Inject,\n  Injectable,\n  Logger,\n  LoggerService,\n  NestInterceptor,\n} from '@nestjs/common';\nimport { Observable } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\n\n@Injectable()\nexport class SuccessResponseInterceptor implements NestInterceptor {\n  intercept(context: ExecutionContext, next: CallHandler): Observable {\n    const contextType = context.getType();\n    if (contextType === STRIPE_WEBHOOK_CONTEXT_TYPE) {\n      return next.handle();\n    }\n\n    return next.handle().pipe(\n      map((response) => {\n        const httpResponse = context.switchToHttp().getResponse();\n\n        const statusCode =\n          response?.statusCode && Number.isInteger(response.statusCode)\n            ? response.statusCode\n            : httpResponse.statusCode;\n\n        const message =\n          response?.message && typeof response.message === 'string'\n            ? response.message\n            : 'Operation successful';\n\n        const responseData =\n          response?.data !== undefined ? response?.data : response?.message;\n\n        return {\n          statusCode,\n          success: true,\n          message,\n          data: responseData,\n        };\n      }),\n    );\n  }\n}\n\n@Injectable()\nexport class RequestBodyAndResponseInterceptor implements NestInterceptor {\n  constructor(@Inject(Logger) private readonly loggerService: LoggerService) {}\n\n  intercept(context: ExecutionContext, next: CallHandler): Observable {\n    const request = context.switchToHttp().getRequest();\n    const method = request.method;\n    const url = request.url;\n\n    return next.handle().pipe(\n      tap((response) => {\n        this.loggerService.log(`[${method}] ${url} - Response:`, response);\n      }),\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RequestContextMiddleware.html":{"url":"injectables/RequestContextMiddleware.html","title":"injectable - RequestContextMiddleware","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RequestContextMiddleware\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/middlewares/request-context.middleware.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                use\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(orm: MikroORM)\n                    \n                \n                        \n                            \n                                Defined in src/common/middlewares/request-context.middleware.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        orm\n                                                  \n                                                        \n                                                                    MikroORM\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        use\n                        \n                    \n                \n            \n            \n                \nuse(req: Request, res: Response, next: NextFunction)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/middlewares/request-context.middleware.ts:9\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                res\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                next\n                                            \n                                                        NextFunction\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NestMiddleware } from '@nestjs/common';\nimport { Request, Response, NextFunction } from 'express';\nimport { MikroORM, RequestContext } from '@mikro-orm/core';\n\n@Injectable()\nexport class RequestContextMiddleware implements NestMiddleware {\n  constructor(private readonly orm: MikroORM) {}\n\n  use(req: Request, res: Response, next: NextFunction): void {\n    RequestContext.create(this.orm.em, next);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ResetPasswordDto.html":{"url":"classes/ResetPasswordDto.html","title":"class - ResetPasswordDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ResetPasswordDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/dto/reset-password.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                confirmPassword\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                newPassword\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                resetToken\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        confirmPassword\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The confirmation of the new password', example: 'Asecure-Word.'})@IsString()@IsNotEmpty()@Matches(/^(?=.*[a-z])(?=.*[A-Z])(?=.*[!@#$%^&*()_\\-+=\\[\\]{};':\"\\\\|,.<>\\/?])[A-Za-z\\d!@#$%^&*()_\\-+=\\[\\]{};':\"\\\\|,.<>\\/?]{10,}$/, {message: 'Password must be at least 10 characters long and include uppercase, lowercase, and a symbol (e.g. @, #, ., -)'})@MinLength(10)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/dto/reset-password.dto.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        newPassword\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The new password for the user', example: 'Asecure-Word.'})@IsString()@IsNotEmpty()@Matches(/^(?=.*[a-z])(?=.*[A-Z])(?=.*[!@#$%^&*()_\\-+=\\[\\]{};':\"\\\\|,.<>\\/?])[A-Za-z\\d!@#$%^&*()_\\-+=\\[\\]{};':\"\\\\|,.<>\\/?]{10,}$/, {message: 'Password must be at least 10 characters long and include uppercase, lowercase, and a symbol (e.g. @, #, ., -)'})@MinLength(10)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/dto/reset-password.dto.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        resetToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The reset token sent to the user', example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...'})@IsString()@IsJWT()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/dto/reset-password.dto.ts:50\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport {\n  IsJWT,\n  IsNotEmpty,\n  IsString,\n  Matches,\n  MinLength,\n} from 'class-validator';\n\nexport class ResetPasswordDto {\n  @ApiProperty({\n    description: 'The new password for the user',\n    example: 'Asecure-Word.',\n  })\n  @IsString()\n  @IsNotEmpty()\n  @Matches(\n    /^(?=.*[a-z])(?=.*[A-Z])(?=.*[!@#$%^&*()_\\-+=\\[\\]{};':\"\\\\|,.<>\\/?])[A-Za-z\\d!@#$%^&*()_\\-+=\\[\\]{};':\"\\\\|,.<>\\/?]{10,}$/,\n    {\n      message:\n        'Password must be at least 10 characters long and include uppercase, lowercase, and a symbol (e.g. @, #, ., -)',\n    },\n  )\n  @MinLength(10)\n  newPassword: string;\n\n  @ApiProperty({\n    description: 'The confirmation of the new password',\n    example: 'Asecure-Word.',\n  })\n  @IsString()\n  @IsNotEmpty()\n  @Matches(\n    /^(?=.*[a-z])(?=.*[A-Z])(?=.*[!@#$%^&*()_\\-+=\\[\\]{};':\"\\\\|,.<>\\/?])[A-Za-z\\d!@#$%^&*()_\\-+=\\[\\]{};':\"\\\\|,.<>\\/?]{10,}$/,\n    {\n      message:\n        'Password must be at least 10 characters long and include uppercase, lowercase, and a symbol (e.g. @, #, ., -)',\n    },\n  )\n  @MinLength(10)\n  confirmPassword: string;\n\n  @ApiProperty({\n    description: 'The reset token sent to the user',\n    example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...',\n  })\n  @IsString()\n  @IsJWT()\n  @IsNotEmpty()\n  resetToken: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/RoleGuard.html":{"url":"guards/RoleGuard.html","title":"guard - RoleGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    RoleGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/common/guards/role.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/common/guards/role.guard.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/guards/role.guard.ts:16\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     boolean | Promise | Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import {\n  Injectable,\n  CanActivate,\n  ExecutionContext,\n  ForbiddenException,\n} from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { Role } from '../decorators';\nimport { Observable } from 'rxjs';\nimport { STRIPE_WEBHOOK_CONTEXT_TYPE } from '@golevelup/nestjs-stripe';\n\n@Injectable()\nexport class RoleGuard implements CanActivate {\n  constructor(private readonly reflector: Reflector) {}\n\n  canActivate(\n    context: ExecutionContext,\n  ): boolean | Promise | Observable {\n    const contextType = context.getType();\n\n    if (contextType === STRIPE_WEBHOOK_CONTEXT_TYPE) {\n      return true;\n    }\n\n    const requiredRole = this.reflector.get(Role, context.getHandler());\n\n    if (!requiredRole) {\n      return true;\n    }\n\n    const request = context.switchToHttp().getRequest();\n    const userRole: string = request?.user?.role;\n\n    if (userRole !== requiredRole) {\n      throw new ForbiddenException(\n        'You do not have the necessary permission to access this route!',\n      );\n    }\n\n    return true;\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/S3Service.html":{"url":"injectables/S3Service.html","title":"injectable - S3Service","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  S3Service\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/storage/s3.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                nanoid\n                            \n                            \n                                    Private\n                                s3Bucket\n                            \n                            \n                                    Private\n                                s3Region\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createPresignedUrlWithoutClient\n                            \n                            \n                                    Async\n                                upload\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, loggerService: LoggerService, s3Client: S3)\n                    \n                \n                        \n                            \n                                Defined in src/services/storage/s3.service.ts:21\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        loggerService\n                                                  \n                                                        \n                                                                    LoggerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        s3Client\n                                                  \n                                                        \n                                                                    S3\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createPresignedUrlWithoutClient\n                        \n                    \n                \n            \n            \n                \n                        \n                    createPresignedUrlWithoutClient(key: string, method?: HttpRequestMethodEnum, ttl?: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/storage/s3.service.ts:62\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                method\n                                            \n                                                            HttpRequestMethodEnum\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                        \n                                                ttl\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        upload\n                        \n                    \n                \n            \n            \n                \n                        \n                    upload(file: MemoryStoredFile, fileCategory: UploadFileCategoryEnum)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/storage/s3.service.ts:32\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                file\n                                            \n                                                        MemoryStoredFile\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                fileCategory\n                                            \n                                                            UploadFileCategoryEnum\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        nanoid\n                        \n                    \n                \n            \n                \n                    \n                        Default value : customAlphabet(hexadecimalLowercase, 10)\n                    \n                \n                    \n                        \n                                Defined in src/services/storage/s3.service.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        s3Bucket\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/services/storage/s3.service.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        s3Region\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/services/storage/s3.service.ts:20\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable, Logger, LoggerService } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { IStrorageService } from './interfaces/storage.interface';\nimport { HttpRequestMethodEnum, UploadFileCategoryEnum } from '@common/enums';\nimport { MemoryStoredFile } from 'nestjs-form-data';\nimport { InjectS3, S3 } from 'nestjs-s3';\nimport { customAlphabet } from 'nanoid';\nimport { hexadecimalLowercase } from 'nanoid-dictionary';\nimport { S3PutObjectResponse } from './types/s3-put-object-response';\nimport { parseUrl } from '@smithy/url-parser';\nimport { S3RequestPresigner } from '@aws-sdk/s3-request-presigner';\nimport { fromEnv } from '@aws-sdk/credential-providers';\nimport { Hash } from '@smithy/hash-node';\nimport { HttpRequest } from '@smithy/protocol-http';\nimport { formatUrl } from '@aws-sdk/util-format-url';\n\n@Injectable()\nexport class S3Service implements IStrorageService {\n  private s3Bucket: string;\n  private s3Region: string;\n  private readonly nanoid = customAlphabet(hexadecimalLowercase, 10);\n\n  constructor(\n    private readonly configService: ConfigService,\n    @Inject(Logger) private readonly loggerService: LoggerService,\n    @InjectS3() private readonly s3Client: S3,\n  ) {\n    this.s3Bucket = this.configService.getOrThrow('aws.s3.bucket');\n    this.s3Region = this.configService.getOrThrow('aws.s3.region');\n  }\n\n  async upload(\n    file: MemoryStoredFile,\n    fileCategory: UploadFileCategoryEnum,\n  ): Promise {\n    this.s3Bucket = this.configService.getOrThrow('aws.s3.bucket');\n\n    const key = `${fileCategory}/${this.nanoid()}_${file.originalName}`;\n\n    this.loggerService.log(\n      `Starting upload: filename=\"${file.originalName}\", size=${file.size} bytes, category=${fileCategory}`,\n      S3Service.name,\n    );\n\n    await this.s3Client.putObject({\n      Bucket: this.s3Bucket,\n      Key: key,\n      Body: file.buffer,\n      ContentType: file.mimetype,\n    });\n\n    const url = `https://${this.s3Bucket}.s3.${this.s3Region}.amazonaws.com/${key}`;\n\n    this.loggerService.log(\n      `Upload successful: filename=\"${file.originalName}\", key=${key}`,\n      S3Service.name,\n    );\n\n    return { key, url };\n  }\n\n  async createPresignedUrlWithoutClient(\n    key: string,\n    method?: HttpRequestMethodEnum,\n    ttl?: number,\n  ): Promise {\n    const httpMethod = method ?? HttpRequestMethodEnum.GET;\n    const expiresIn = ttl ?? 30 * 60 * 60;\n\n    const url = parseUrl(\n      `https://${this.s3Bucket}.s3.${this.s3Region}.amazonaws.com/${key}`,\n    );\n    const presigner = new S3RequestPresigner({\n      credentials: fromEnv(),\n      region: this.s3Region,\n      sha256: Hash.bind(null, 'sha256'),\n    });\n\n    const signedUrlObject = await presigner.presign(\n      new HttpRequest({ ...url, method: httpMethod }),\n      { expiresIn },\n    );\n    return formatUrl(signedUrlObject);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SchemaService.html":{"url":"injectables/SchemaService.html","title":"injectable - SchemaService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SchemaService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/schema.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                onModuleInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(orm: MikroORM, configService: ConfigService, loggerService: LoggerService)\n                    \n                \n                        \n                            \n                                Defined in src/schema.service.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        orm\n                                                  \n                                                        \n                                                                    MikroORM\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        loggerService\n                                                  \n                                                        \n                                                                    LoggerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \n                        \n                    onModuleInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/schema.service.ts:20\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  Injectable,\n  OnModuleInit,\n  Logger,\n  LoggerService,\n  Inject,\n} from '@nestjs/common';\nimport { MikroORM } from '@mikro-orm/core';\nimport { ConfigService } from '@nestjs/config';\nimport { PRODUCTION } from './common/constants';\n\n@Injectable()\nexport class SchemaService implements OnModuleInit {\n  constructor(\n    private readonly orm: MikroORM,\n    private readonly configService: ConfigService,\n    @Inject(Logger) private readonly loggerService: LoggerService,\n  ) {}\n\n  async onModuleInit() {\n    const nodeEnv = this.configService.getOrThrow('nodeEnv');\n\n    if (nodeEnv !== PRODUCTION) {\n      const generator = this.orm.getSchemaGenerator();\n      await generator.updateSchema();\n      this.loggerService.log(\n        '✅ Database schema synchronized',\n        SchemaService.name,\n      );\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/StorageModule.html":{"url":"modules/StorageModule.html","title":"module - StorageModule","body":"\n                   \n\n\n\n\n    Modules\n    StorageModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/services/storage/storage.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        register\n                        \n                    \n                \n            \n            \n                \n                        \n                    register()\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/storage/storage.module.ts:11\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     DynamicModule\n\n                        \n                \n            \n        \n    \n\n    \n\n\n    \n        import { Module, DynamicModule, Logger, LoggerService } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { CloudinaryService } from './cloudinary.service';\nimport { STORAGE_PROVIDER } from '@common/constants';\nimport { StorageDriverEnum } from '@common/enums';\nimport { S3Service } from './s3.service';\nimport { getS3ConnectionToken, S3, S3Module } from 'nestjs-s3';\n\n@Module({})\nexport class StorageModule {\n  static register(): DynamicModule {\n    return {\n      module: StorageModule,\n      imports: [\n        S3Module.forRootAsync({\n          inject: [ConfigService],\n          useFactory: (configService: ConfigService) => ({\n            config: {\n              credentials: {\n                accessKeyId: configService.get('aws.s3.accessKeyId'),\n                secretAccessKey: configService.get(\n                  'aws.s3.secretAccessKey',\n                ),\n              },\n              region: configService.get('aws.s3.region'),\n            },\n          }),\n        }),\n      ],\n      providers: [\n        {\n          provide: STORAGE_PROVIDER,\n          useFactory: (\n            configService: ConfigService,\n            loggerService: LoggerService,\n            s3Client: S3,\n          ) => {\n            const driver = configService.getOrThrow('driver.storage');\n            if (driver === StorageDriverEnum.CLOUDINARY) {\n              return new CloudinaryService(configService, loggerService);\n            } else if (driver === StorageDriverEnum.S3) {\n              return new S3Service(configService, loggerService, s3Client);\n            }\n\n            throw new Error(`Unsupported storage driver: ${driver}`);\n          },\n          inject: [ConfigService, Logger, getS3ConnectionToken('')],\n        },\n        Logger,\n      ],\n      exports: [STORAGE_PROVIDER],\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/StripeService.html":{"url":"injectables/StripeService.html","title":"injectable - StripeService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  StripeService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/payment/stripe.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createCheckoutSession\n                            \n                            \n                                    Async\n                                createPaymentIntent\n                            \n                            \n                                    \n                                    Async\n                                handlePaymentIntentSucceeded\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, loggerService: LoggerService, stripeClient: Stripe, templateQueue: Queue)\n                    \n                \n                        \n                            \n                                Defined in src/services/payment/stripe.service.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        loggerService\n                                                  \n                                                        \n                                                                    LoggerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        stripeClient\n                                                  \n                                                        \n                                                                    Stripe\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        templateQueue\n                                                  \n                                                        \n                                                                    Queue\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createCheckoutSession\n                        \n                    \n                \n            \n            \n                \n                        \n                    createCheckoutSession(params: Stripe.Checkout.SessionCreateParams, options?: Stripe.RequestOptions)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/payment/stripe.service.ts:23\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                params\n                                            \n                                                            Stripe.Checkout.SessionCreateParams\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                options\n                                            \n                                                        Stripe.RequestOptions\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createPaymentIntent\n                        \n                    \n                \n            \n            \n                \n                        \n                    createPaymentIntent(params: Stripe.PaymentIntentCreateParams, options?: Stripe.RequestOptions)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/payment/stripe.service.ts:45\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                params\n                                            \n                                                            Stripe.PaymentIntentCreateParams\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                options\n                                            \n                                                        Stripe.RequestOptions\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        handlePaymentIntentSucceeded\n                        \n                    \n                \n            \n            \n                \n                        \n                    handlePaymentIntentSucceeded(evt: Stripe.PaymentIntentSucceededEvent)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @StripeWebhookHandler('payment_intent.succeeded')\n                \n            \n\n                    \n                        \n                            Defined in src/services/payment/stripe.service.ts:60\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                evt\n                                            \n                                                            Stripe.PaymentIntentSucceededEvent\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  InjectStripeClient,\n  StripeWebhookHandler,\n} from '@golevelup/nestjs-stripe';\nimport { Inject, Injectable, Logger, LoggerService } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport Stripe from 'stripe';\nimport { TEMPLATE_QUEUE_NAME } from '@common/constants';\nimport { IPaymentService } from './interfaces/payment.interface';\nimport { InjectQueue } from '@nestjs/bullmq';\nimport { Queue } from 'bullmq';\n\n@Injectable()\nexport class StripeService implements IPaymentService {\n  constructor(\n    private readonly configService: ConfigService,\n    @Inject(Logger) private readonly loggerService: LoggerService,\n    @InjectStripeClient() private readonly stripeClient: Stripe,\n    @InjectQueue(TEMPLATE_QUEUE_NAME)\n    private readonly templateQueue: Queue,\n  ) {}\n\n  async createCheckoutSession(\n    params: Stripe.Checkout.SessionCreateParams,\n    options?: Stripe.RequestOptions,\n  ): Promise> {\n    this.loggerService.log(\n      `Creating Stripe checkout session`,\n      StripeService.name,\n    );\n\n    const session = await this.stripeClient.checkout.sessions.create(\n      params,\n      options,\n    );\n\n    this.loggerService.log(\n      `Checkout session created successfully with ID: ${session.id}`,\n      StripeService.name,\n    );\n\n    return session;\n  }\n\n  async createPaymentIntent(\n    params: Stripe.PaymentIntentCreateParams,\n    options?: Stripe.RequestOptions,\n  ): Promise> {\n    this.loggerService.log(`Creating Payment Intent`, StripeService.name);\n\n    const paymentIntent = await this.stripeClient.paymentIntents.create(\n      params,\n      options,\n    );\n\n    return paymentIntent;\n  }\n\n  @StripeWebhookHandler('payment_intent.succeeded')\n  async handlePaymentIntentSucceeded(evt: Stripe.PaymentIntentSucceededEvent) {\n    const { data }: { data: Stripe.PaymentIntentSucceededEvent.Data } = evt;\n    const intent = data.object as Stripe.PaymentIntent;\n\n    await this.templateQueue.add(TEMPLATE_QUEUE_NAME, {\n      intent,\n      eventId: evt?.id,\n    });\n\n    this.loggerService.log(\n      `Received Stripe payment_intent.succeeded event: intent id=\"${intent.id}\" and queued into: \"${TEMPLATE_QUEUE_NAME}\"`,\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SuccessResponseInterceptor.html":{"url":"injectables/SuccessResponseInterceptor.html","title":"injectable - SuccessResponseInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SuccessResponseInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/interceptors/response.interceptor.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/interceptors/response.interceptor.ts:16\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                next\n                                            \n                                                        CallHandler\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { STRIPE_WEBHOOK_CONTEXT_TYPE } from '@golevelup/nestjs-stripe';\nimport {\n  CallHandler,\n  ExecutionContext,\n  Inject,\n  Injectable,\n  Logger,\n  LoggerService,\n  NestInterceptor,\n} from '@nestjs/common';\nimport { Observable } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\n\n@Injectable()\nexport class SuccessResponseInterceptor implements NestInterceptor {\n  intercept(context: ExecutionContext, next: CallHandler): Observable {\n    const contextType = context.getType();\n    if (contextType === STRIPE_WEBHOOK_CONTEXT_TYPE) {\n      return next.handle();\n    }\n\n    return next.handle().pipe(\n      map((response) => {\n        const httpResponse = context.switchToHttp().getResponse();\n\n        const statusCode =\n          response?.statusCode && Number.isInteger(response.statusCode)\n            ? response.statusCode\n            : httpResponse.statusCode;\n\n        const message =\n          response?.message && typeof response.message === 'string'\n            ? response.message\n            : 'Operation successful';\n\n        const responseData =\n          response?.data !== undefined ? response?.data : response?.message;\n\n        return {\n          statusCode,\n          success: true,\n          message,\n          data: responseData,\n        };\n      }),\n    );\n  }\n}\n\n@Injectable()\nexport class RequestBodyAndResponseInterceptor implements NestInterceptor {\n  constructor(@Inject(Logger) private readonly loggerService: LoggerService) {}\n\n  intercept(context: ExecutionContext, next: CallHandler): Observable {\n    const request = context.switchToHttp().getRequest();\n    const method = request.method;\n    const url = request.url;\n\n    return next.handle().pipe(\n      tap((response) => {\n        this.loggerService.log(`[${method}] ${url} - Response:`, response);\n      }),\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateProfileDto.html":{"url":"classes/UpdateProfileDto.html","title":"class - UpdateProfileDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateProfileDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/user/dto/update-profile.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(\n  OmitType(CreateUserDto, [\n    'role',\n    'email',\n    'password',\n    'phoneNumber',\n    'countryCode',\n  ] as const),\n)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { OmitType, PartialType } from '@nestjs/swagger';\nimport { CreateUserDto } from './create-user.dto';\n\nexport class UpdateProfileDto extends PartialType(\n  OmitType(CreateUserDto, [\n    'role',\n    'email',\n    'password',\n    'phoneNumber',\n    'countryCode',\n  ] as const),\n) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/User.html":{"url":"entities/User.html","title":"entity - User","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/user/entities/user.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Optional\n                                address\n                            \n                            \n                                    \n                                    Optional\n                                avatar\n                            \n                            \n                                    \n                                changePassword\n                            \n                            \n                                    \n                                    Optional\n                                city\n                            \n                            \n                                    \n                                    Optional\n                                country\n                            \n                            \n                                    \n                                    Optional\n                                countryCode\n                            \n                            \n                                    \n                                email\n                            \n                            \n                                    \n                                firstName\n                            \n                            \n                                    \n                                    Optional\n                                lastLoggedIn\n                            \n                            \n                                    \n                                lastName\n                            \n                            \n                                    \n                                password\n                            \n                            \n                                    \n                                passwordResetRequested\n                            \n                            \n                                    \n                                    Optional\n                                phoneNumber\n                            \n                            \n                                    \n                                    Optional\n                                postalCode\n                            \n                            \n                                    \n                                role\n                            \n                            \n                                    \n                                    Optional\n                                state\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Property({type: 'text', nullable: true, comment: 'Street address'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/entities/user.entity.ts:51\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        avatar\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Property({type: 'varchar', length: 500, nullable: true, comment: 'Avatar URL or path'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/entities/user.entity.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        changePassword\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Property({type: 'boolean', default: false, comment: 'Whether user needs to change password'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/entities/user.entity.ts:122\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        city\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Property({type: 'varchar', length: 100, nullable: true, comment: 'City name'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/entities/user.entity.ts:59\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        country\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Property({type: 'varchar', length: 100, nullable: true, comment: 'Country name'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/entities/user.entity.ts:83\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        countryCode\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Property({type: 'varchar', length: 3, nullable: true, comment: 'ISO country code'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/entities/user.entity.ts:91\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Property({unique: true, type: 'varchar', length: 255, comment: 'User email address'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/entities/user.entity.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Property({type: 'varchar', length: 100, comment: 'User first name'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/entities/user.entity.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        lastLoggedIn\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Property({type: 'timestamptz', nullable: true, comment: 'Last login timestamp'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/entities/user.entity.ts:136\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Property({type: 'varchar', length: 100, comment: 'User last name'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/entities/user.entity.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Property({type: 'varchar', length: 255, comment: 'Hashed password'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/entities/user.entity.ts:106\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        passwordResetRequested\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Property({type: 'boolean', default: false, comment: 'Whether password reset was requested'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/entities/user.entity.ts:129\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        phoneNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Property({type: 'varchar', length: 20, nullable: true, comment: 'Phone number'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/entities/user.entity.ts:99\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        postalCode\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Property({type: 'varchar', length: 20, nullable: true, comment: 'Postal/ZIP code'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/entities/user.entity.ts:67\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserRoleEnum\n\n                    \n                \n                \n                    \n                        Default value : UserRoleEnum.USER\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Enum({items: () => UserRoleEnum, type: 'varchar', length: 20, defaultRaw: undefined, comment: 'User role'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/entities/user.entity.ts:115\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        state\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Property({type: 'varchar', length: 100, nullable: true, comment: 'State/Province'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/entities/user.entity.ts:75\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  Property,\n  Enum,\n  BeforeCreate,\n  BeforeUpdate,\n  Index,\n} from '@mikro-orm/core';\nimport { BaseEntity } from '@common/entities/base.entity';\nimport { UserRoleEnum } from '@common/enums';\nimport { normalizeUserFields } from '@common/utils/user.util';\n\n@Entity({ tableName: 'users' })\n@Index({ properties: ['email'] })\nexport class User extends BaseEntity {\n  @Property({\n    unique: true,\n    type: 'varchar',\n    length: 255,\n    comment: 'User email address',\n  })\n  email!: string;\n\n  @Property({\n    type: 'varchar',\n    length: 500,\n    nullable: true,\n    comment: 'Avatar URL or path',\n  })\n  avatar?: string;\n\n  @Property({\n    type: 'varchar',\n    length: 100,\n    comment: 'User first name',\n  })\n  firstName!: string;\n\n  @Property({\n    type: 'varchar',\n    length: 100,\n    comment: 'User last name',\n  })\n  lastName!: string;\n\n  @Property({\n    type: 'text',\n    nullable: true,\n    comment: 'Street address',\n  })\n  address?: string;\n\n  @Property({\n    type: 'varchar',\n    length: 100,\n    nullable: true,\n    comment: 'City name',\n  })\n  city?: string;\n\n  @Property({\n    type: 'varchar',\n    length: 20,\n    nullable: true,\n    comment: 'Postal/ZIP code',\n  })\n  postalCode?: string;\n\n  @Property({\n    type: 'varchar',\n    length: 100,\n    nullable: true,\n    comment: 'State/Province',\n  })\n  state?: string;\n\n  @Property({\n    type: 'varchar',\n    length: 100,\n    nullable: true,\n    comment: 'Country name',\n  })\n  country?: string;\n\n  @Property({\n    type: 'varchar',\n    length: 3,\n    nullable: true,\n    comment: 'ISO country code',\n  })\n  countryCode?: string;\n\n  @Property({\n    type: 'varchar',\n    length: 20,\n    nullable: true,\n    comment: 'Phone number',\n  })\n  phoneNumber?: string;\n\n  @Property({\n    type: 'varchar',\n    length: 255,\n    comment: 'Hashed password',\n  })\n  password!: string;\n\n  @Enum({\n    items: () => UserRoleEnum,\n    type: 'varchar',\n    length: 20,\n    defaultRaw: UserRoleEnum.USER,\n    comment: 'User role',\n  })\n  role: UserRoleEnum = UserRoleEnum.USER;\n\n  @Property({\n    type: 'boolean',\n    default: false,\n    comment: 'Whether user needs to change password',\n  })\n  changePassword: boolean = false;\n\n  @Property({\n    type: 'boolean',\n    default: false,\n    comment: 'Whether password reset was requested',\n  })\n  passwordResetRequested: boolean = false;\n\n  @Property({\n    type: 'timestamptz',\n    nullable: true,\n    comment: 'Last login timestamp',\n  })\n  lastLoggedIn?: Date;\n\n  @BeforeCreate()\n  @BeforeUpdate()\n  private normalizeFields() {\n    normalizeUserFields(this);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserController.html":{"url":"controllers/UserController.html","title":"controller - UserController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/user/user.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                changePassword\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                create\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                getProfile\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                updateProfile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        changePassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    changePassword(data: ChangePasswordDto, req: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('change-password')@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Change user password'})@ApiBody({type: ChangePasswordDto})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/user/user.controller.ts:72\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                            ChangePasswordDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                req\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(user: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Post('sign-up')@ApiOperation({summary: 'Sign up a new user'})@ApiBody({type: CreateUserDto})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/user/user.controller.ts:28\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        getProfile\n                        \n                    \n                \n            \n            \n                \n                        \n                    getProfile(req: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('profile')@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Get user profile'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/user/user.controller.ts:40\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        updateProfile\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateProfile(req: any, body: UpdateProfileDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch('update-profile')@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Update user profile'})@ApiBody({type: UpdateProfileDto})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/user/user.controller.ts:55\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                body\n                                            \n                                                            UpdateProfileDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Get,\n  HttpCode,\n  HttpStatus,\n  Patch,\n  Post,\n  Request,\n} from '@nestjs/common';\nimport { ApiTags, ApiOperation, ApiBody } from '@nestjs/swagger';\nimport { UserService } from './user.service';\nimport { Public } from '../auth/decorators/public.decorator';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport { ApiResponse } from '@common/interfaces/api-response.interface';\nimport { ChangePasswordDto } from './dto/change-password.dto';\nimport { UpdateProfileDto } from './dto/update-profile.dto';\n\n@ApiTags('users')\n@Controller('users')\nexport class UserController {\n  constructor(private readonly userService: UserService) {}\n\n  @Public()\n  @Post('sign-up')\n  @ApiOperation({ summary: 'Sign up a new user' })\n  @ApiBody({ type: CreateUserDto })\n  async create(@Body() user: CreateUserDto): Promise> {\n    const newUser = await this.userService.create(user);\n    return {\n      statusCode: HttpStatus.CREATED,\n      message: 'User created successfully',\n      data: newUser,\n    };\n  }\n\n  @Get('profile')\n  @HttpCode(HttpStatus.OK)\n  @ApiOperation({ summary: 'Get user profile' })\n  async getProfile(@Request() req: any): Promise> {\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const { password, ...safeUser } = req.user;\n\n    return {\n      statusCode: HttpStatus.OK,\n      message: 'Profile fetched successfully',\n      data: { user: safeUser },\n    };\n  }\n\n  @Patch('update-profile')\n  @HttpCode(HttpStatus.OK)\n  @ApiOperation({ summary: 'Update user profile' })\n  @ApiBody({ type: UpdateProfileDto })\n  async updateProfile(\n    @Request() req: any,\n    @Body() body: UpdateProfileDto,\n  ): Promise> {\n    const userId = req?.user?.id;\n    const updatedUser = await this.userService.update({ id: userId, ...body });\n    return {\n      statusCode: HttpStatus.OK,\n      message: 'Profile updated successfully',\n      data: updatedUser,\n    };\n  }\n\n  @Post('change-password')\n  @HttpCode(HttpStatus.OK)\n  @ApiOperation({ summary: 'Change user password' })\n  @ApiBody({ type: ChangePasswordDto })\n  async changePassword(\n    @Body() data: ChangePasswordDto,\n    @Request() req: any,\n  ): Promise> {\n    const userId = req.user.id;\n    await this.userService.changePassword(userId, data);\n    return {\n      statusCode: HttpStatus.OK,\n      message: 'Password Changed Successfully',\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserFactory.html":{"url":"classes/UserFactory.html","title":"class - UserFactory","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserFactory\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/user/factories/user.factory.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        Factory\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                model\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                definition\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        model\n                        \n                    \n                \n            \n                \n                    \n                        Default value : User\n                    \n                \n                    \n                        \n                                Defined in src/modules/user/factories/user.factory.ts:7\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        definition\n                        \n                    \n                \n            \n            \n                \ndefinition()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/user/factories/user.factory.ts:9\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         Partial\n\n                        \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Factory } from '@mikro-orm/seeder';\nimport { faker } from '@faker-js/faker';\nimport { User } from '../entities/user.entity';\nimport { UserRoleEnum } from '@common/enums';\n\nexport class UserFactory extends Factory {\n  model = User;\n\n  definition(): Partial {\n    return {\n      email: faker.internet.email(),\n      firstName: faker.person.firstName(),\n      lastName: faker.person.lastName(),\n      password: faker.internet.password(),\n      avatar: faker.image.avatar(),\n      address: faker.location.streetAddress(),\n      city: faker.location.city(),\n      postalCode: faker.location.zipCode(),\n      state: faker.location.state(),\n      country: faker.location.country(),\n      countryCode: faker.location.countryCode(),\n      phoneNumber: faker.phone.number(),\n      role: faker.helpers.enumValue(UserRoleEnum),\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UserModule.html":{"url":"modules/UserModule.html","title":"module - UserModule","body":"\n                   \n\n\n\n\n    Modules\n    UserModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UserModule\n\n\n\ncluster_UserModule_imports\n\n\n\ncluster_UserModule_exports\n\n\n\ncluster_UserModule_providers\n\n\n\n\nAppRedisModule\n\nAppRedisModule\n\n\n\nUserModule\n\nUserModule\n\nUserModule -->\n\nAppRedisModule->UserModule\n\n\n\n\n\nUserService \n\nUserService \n\nUserService  -->\n\nUserModule->UserService \n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\nUserSubscriber\n\nUserSubscriber\n\nUserModule -->\n\nUserSubscriber->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/user/user.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UserService\n                        \n                        \n                            UserSubscriber\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UserController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AppRedisModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UserService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { UserService } from './user.service';\nimport { UserController } from './user.controller';\nimport { MikroOrmModule } from '@mikro-orm/nestjs';\nimport { User } from './entities/user.entity';\nimport { UserSubscriber } from './subscribers/user.subscriber';\nimport { AppRedisModule } from '@services/redis/redis.module';\n\n@Module({\n  imports: [MikroOrmModule.forFeature([User]), AppRedisModule],\n  controllers: [UserController],\n  providers: [UserService, UserSubscriber],\n  exports: [UserService],\n})\nexport class UserModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserService.html":{"url":"injectables/UserService.html","title":"injectable - UserService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/user/user.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                userEmailCacheKey\n                            \n                            \n                                    Private\n                                    Readonly\n                                userIdCacheKey\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                changePassword\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(appRedisService: AppRedisService, userRepository: EntityRepository)\n                    \n                \n                        \n                            \n                                Defined in src/modules/user/user.service.ts:21\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        appRedisService\n                                                  \n                                                        \n                                                                        AppRedisService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        EntityRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        changePassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    changePassword(userId: string, data: ChangePasswordDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/user/user.service.ts:127\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                data\n                                            \n                                                            ChangePasswordDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(userData: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/user/user.service.ts:32\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userData\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(query: FilterQuery, options?: FindOneOrFailOptions)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/user/user.service.ts:49\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                query\n                                            \n                                                            FilterQuery\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                options\n                                            \n                                                            FindOneOrFailOptions\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(data: EntityData)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/user/user.service.ts:97\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                            EntityData\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        userEmailCacheKey\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/user/user.service.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        userIdCacheKey\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/user/user.service.ts:20\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  ConflictException,\n  Injectable,\n  NotFoundException,\n} from '@nestjs/common';\nimport { InjectRepository } from '@mikro-orm/nestjs';\nimport {\n  EntityData,\n  EntityRepository,\n  FilterQuery,\n  FindOneOrFailOptions,\n} from '@mikro-orm/core';\nimport { User } from './entities/user.entity';\nimport { ChangePasswordDto } from './dto/change-password.dto';\nimport { AppRedisService } from '@services/redis/redis.service';\n\n@Injectable()\nexport class UserService {\n  private readonly userIdCacheKey: string;\n  private readonly userEmailCacheKey: string;\n\n  constructor(\n    private readonly appRedisService: AppRedisService,\n    @InjectRepository(User)\n    private readonly userRepository: EntityRepository,\n  ) {\n    this.userIdCacheKey = `users:id`;\n    this.userEmailCacheKey = `users:email`;\n  }\n\n  async create(userData: any): Promise> {\n    const user = await this.userRepository.findOne({\n      email: userData.email,\n    });\n\n    if (user) {\n      throw new ConflictException('User already exists in the system.');\n    }\n\n    const newUser = this.userRepository.create(userData);\n    await this.userRepository.getEntityManager().persistAndFlush(newUser);\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const { password, ...result } = newUser;\n    return result;\n  }\n\n  async findOne(\n    query: FilterQuery,\n    options?: FindOneOrFailOptions,\n  ): Promise {\n    let cacheKey: string | undefined;\n\n    if (typeof query === 'string') {\n      cacheKey = `${this.userIdCacheKey}:${query}`;\n    } else if (typeof query === 'object' && query !== null) {\n      if ('id' in query && query?.id) {\n        cacheKey = `${this.userIdCacheKey}:${query?.id}`;\n      } else if ('email' in query && query?.email) {\n        cacheKey = `${this.userEmailCacheKey}:${query?.email}`;\n      }\n    }\n\n    if (cacheKey) {\n      const cached = await this.appRedisService.get(cacheKey);\n\n      if (cached) {\n        const parsed = JSON.parse(cached);\n        const user = this.userRepository.create(parsed);\n        return this.userRepository.getEntityManager().merge(user);\n      }\n    }\n\n    const user = await this.userRepository.findOneOrFail(query, options);\n\n    if (cacheKey) {\n      const serializable = { ...user };\n\n      await Promise.all([\n        this.appRedisService.set(\n          `${this.userIdCacheKey}:${user?.id}`,\n          JSON.stringify(serializable),\n          5 * 60,\n        ),\n        this.appRedisService.set(\n          `${this.userEmailCacheKey}:${user?.email}`,\n          JSON.stringify(serializable),\n          5 * 60,\n        ),\n      ]);\n    }\n\n    return user;\n  }\n\n  async update(data: EntityData): Promise> {\n    const user = await this.userRepository.findOneOrFail(\n      { id: data.id },\n      { failHandler: () => new NotFoundException('User not found') },\n    );\n\n    this.userRepository.assign(user, data);\n\n    await this.userRepository.getEntityManager().persistAndFlush(user);\n\n    if (user) {\n      await Promise.all([\n        this.appRedisService.set(\n          `${this.userIdCacheKey}:${user?.id}`,\n          JSON.stringify(user),\n          5 * 60,\n        ),\n        this.appRedisService.set(\n          `${this.userEmailCacheKey}:${user?.email}`,\n          JSON.stringify(user),\n          5 * 60,\n        ),\n      ]);\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const { password, ...result } = user;\n    return result;\n  }\n\n  async changePassword(\n    userId: string,\n    data: ChangePasswordDto,\n  ): Promise> {\n    const { newPassword, confirmPassword } = data;\n\n    if (newPassword !== confirmPassword) {\n      throw new BadRequestException('Passwords do not match');\n    }\n\n    const user = await this.userRepository.findOneOrFail(\n      { id: userId },\n      { failHandler: () => new NotFoundException('User not found') },\n    );\n\n    if (user?.changePassword === false) {\n      throw new BadRequestException(\n        'Password change is not allowed for this user',\n      );\n    }\n\n    const updatedUser = await this.update({\n      id: userId,\n      password: newPassword,\n      changePassword: false,\n    });\n\n    return updatedUser;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserSubscriber.html":{"url":"injectables/UserSubscriber.html","title":"injectable - UserSubscriber","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserSubscriber\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/user/subscribers/user.subscriber.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                beforeCreate\n                            \n                            \n                                    Async\n                                beforeUpdate\n                            \n                            \n                                getSubscribedEntities\n                            \n                            \n                                    Private\n                                    Async\n                                hashPassword\n                            \n                            \n                                    Private\n                                isPasswordModified\n                            \n                            \n                                    Private\n                                normalizeFields\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(em: EntityManager, configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/user/subscribers/user.subscriber.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        em\n                                                  \n                                                        \n                                                                    EntityManager\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        beforeCreate\n                        \n                    \n                \n            \n            \n                \n                        \n                    beforeCreate(args: EventArgs)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/user/subscribers/user.subscriber.ts:26\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                args\n                                            \n                                                            EventArgs\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        beforeUpdate\n                        \n                    \n                \n            \n            \n                \n                        \n                    beforeUpdate(args: EventArgs)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/user/subscribers/user.subscriber.ts:34\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                args\n                                            \n                                                            EventArgs\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getSubscribedEntities\n                        \n                    \n                \n            \n            \n                \ngetSubscribedEntities()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/user/subscribers/user.subscriber.ts:22\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     EntityName[]\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        hashPassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    hashPassword(user: User)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/user/subscribers/user.subscriber.ts:56\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            User\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        isPasswordModified\n                        \n                    \n                \n            \n            \n                \n                        \n                    isPasswordModified(user: User)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/user/subscribers/user.subscriber.ts:48\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            User\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        normalizeFields\n                        \n                    \n                \n            \n            \n                \n                        \n                    normalizeFields(user: User)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/user/subscribers/user.subscriber.ts:44\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            User\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  EventSubscriber,\n  EntityName,\n  EventArgs,\n  EntityManager,\n} from '@mikro-orm/core';\nimport { Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { User } from '../entities/user.entity';\nimport * as bcrypt from 'bcrypt';\nimport { normalizeUserFields } from '@common/utils/user.util';\n\n@Injectable()\nexport class UserSubscriber implements EventSubscriber {\n  constructor(\n    em: EntityManager,\n    private readonly configService: ConfigService,\n  ) {\n    em.getEventManager().registerSubscriber(this);\n  }\n\n  getSubscribedEntities(): EntityName[] {\n    return [User];\n  }\n\n  async beforeCreate(args: EventArgs) {\n    const user = args.entity;\n\n    this.normalizeFields(user);\n\n    await this.hashPassword(user);\n  }\n\n  async beforeUpdate(args: EventArgs) {\n    const user = args.entity;\n\n    this.normalizeFields(user);\n\n    if (this.isPasswordModified(user)) {\n      await this.hashPassword(user);\n    }\n  }\n\n  private normalizeFields(user: User) {\n    normalizeUserFields(user);\n  }\n\n  private isPasswordModified(user: User): boolean {\n    const originalData = (user as any).__helper?.__originalEntityData;\n\n    if (!originalData) return true;\n\n    return user.password !== originalData.password;\n  }\n\n  private async hashPassword(user: User) {\n    const saltRounds = this.configService.get('auth.saltRounds');\n    user.password = await bcrypt.hash(user.password, saltRounds);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/commands/create-user.command.ts\n            \n            injectable\n            CreateUserCommand\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                        src/common/constants/index.ts\n            \n            variable\n            APP_NAME\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/common/constants/index.ts\n            \n            variable\n            EMAIL_FROM_NAME\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/common/constants/index.ts\n            \n            variable\n            PASSWORD_CHARACTER_SET\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/common/constants/index.ts\n            \n            variable\n            PASSWORD_RESET_EMAIL_QUEUE_NAME\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/common/constants/index.ts\n            \n            variable\n            PAYMENT_PROVIDER\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/common/constants/index.ts\n            \n            variable\n            PRODUCTION\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/common/constants/index.ts\n            \n            variable\n            STORAGE_PROVIDER\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/common/constants/index.ts\n            \n            variable\n            TEMPLATE_QUEUE_NAME\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/common/decorators/index.ts\n            \n            variable\n            Role\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/entities/base.entity.ts\n            \n            class\n            BaseEntity\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/common/filters/exception.filter.ts\n            \n            class\n            CatchAllFilter\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/common/guards/role.guard.ts\n            \n            guard\n            RoleGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/common/interceptors/response.interceptor.ts\n            \n            injectable\n            RequestBodyAndResponseInterceptor\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/common/interceptors/response.interceptor.ts\n            \n            injectable\n            SuccessResponseInterceptor\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/common/interfaces/api-response.interface.ts\n            \n            interface\n            ApiResponse\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/common/interfaces/error-response.interface.ts\n            \n            interface\n            ErrorResponse\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/common/middlewares/morgan.middleware.ts\n            \n            injectable\n            MorganMiddleware\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/common/middlewares/request-context.middleware.ts\n            \n            injectable\n            RequestContextMiddleware\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                        src/common/types/index.ts\n            \n            type alias\n            HandledException\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/common/utils/common.utils.ts\n            \n            function\n            generateSlug\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/common/utils/user.util.ts\n            \n            function\n            normalizeUserFields\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/config/mikro-orm.config.ts\n            \n            variable\n            sslEnabled\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/config/mikro-orm.config.ts\n            \n            variable\n            winstonLogger\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/config/swagger.config.ts\n            \n            function\n            setupSwagger\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/config/winston.config.ts\n            \n            function\n            createWinstonLogger\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/main.cli.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/migrations/Migration20250730220636.ts\n            \n            class\n            Migration20250730220636\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/modules/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/modules/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/13)\n            \n        \n        \n            \n                \n                src/modules/auth/consumers/auth.consumer.ts\n            \n            class\n            PasswordResetEmailConsumer\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                        src/modules/auth/decorators/public.decorator.ts\n            \n            variable\n            IS_PUBLIC_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/modules/auth/decorators/public.decorator.ts\n            \n            variable\n            Public\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/auth/dto/auth-response.dto.ts\n            \n            class\n            AuthResponseDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/auth/dto/forgot-password.dto.ts\n            \n            class\n            ForgotPasswordDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/modules/auth/dto/login.dto.ts\n            \n            class\n            LoginDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/auth/dto/refresh-token-dto.ts\n            \n            class\n            RefreshTokenDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/modules/auth/dto/reset-password.dto.ts\n            \n            class\n            ResetPasswordDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/modules/auth/guards/jwt-auth.guard.ts\n            \n            injectable\n            JwtAuthGuard\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/modules/auth/guards/local-auth.guard.ts\n            \n            injectable\n            LocalAuthGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/auth/strategies/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                src/modules/auth/strategies/local.strategy.ts\n            \n            injectable\n            LocalStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                        src/modules/auth/types/auth-tokens.ts\n            \n            type alias\n            AuthTokens\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/user/dto/change-password.dto.ts\n            \n            class\n            ChangePasswordDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/user/dto/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/14)\n            \n        \n        \n            \n                \n                src/modules/user/dto/responses.dto.ts\n            \n            class\n            CreateUserResponseDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/user/dto/responses.dto.ts\n            \n            class\n            GetProfileResponseDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/user/dto/update-profile.dto.ts\n            \n            class\n            UpdateProfileDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/user/entities/user.entity.ts\n            \n            entity\n            User\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/user/entities/user.entity.ts\n            \n            class\n            User\n            \n                0 %\n                (0/18)\n            \n        \n        \n            \n                \n                src/modules/user/factories/user.factory.ts\n            \n            class\n            UserFactory\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/user/subscribers/user.subscriber.ts\n            \n            injectable\n            UserSubscriber\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/modules/user/user.controller.ts\n            \n            controller\n            UserController\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/modules/user/user.service.ts\n            \n            injectable\n            UserService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/schema.service.ts\n            \n            injectable\n            SchemaService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/seeders/DatabaseSeeder.ts\n            \n            class\n            DatabaseSeeder\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/services/email/email.service.ts\n            \n            class\n            EmailService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/services/http-client/http-client.service.ts\n            \n            injectable\n            HttpClientService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/services/payment/interfaces/payment.interface.ts\n            \n            interface\n            IPaymentService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/services/payment/stripe.service.ts\n            \n            injectable\n            StripeService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                        src/services/payment/types/checkout.ts\n            \n            type alias\n            Checkout\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/services/payment/types/payment-intent.ts\n            \n            type alias\n            PaymentIntent\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/services/redis/redis.service.ts\n            \n            injectable\n            AppRedisService\n            \n                30 %\n                (3/10)\n            \n        \n        \n            \n                \n                src/services/storage/cloudinary.service.ts\n            \n            injectable\n            CloudinaryService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/services/storage/interfaces/storage.interface.ts\n            \n            interface\n            IStrorageService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/services/storage/s3.service.ts\n            \n            injectable\n            S3Service\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                        src/services/storage/types/s3-put-object-response.ts\n            \n            type alias\n            S3PutObjectResponse\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/tracing.ts\n            \n            variable\n            otelSDK\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/tracing.ts\n            \n            variable\n            prometheusExporter\n            \n                0 %\n                (0/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @aws-sdk/credential-providers : ^3.848.0\n        \n            @aws-sdk/s3-request-presigner : ^3.850.0\n        \n            @aws-sdk/util-format-url : ^3.840.0\n        \n            @bull-board/api : ^6.12.0\n        \n            @bull-board/express : ^6.12.0\n        \n            @bull-board/nestjs : ^6.12.0\n        \n            @golevelup/nestjs-stripe : ^0.9.3\n        \n            @golevelup/nestjs-webhooks : ^0.2.21\n        \n            @liaoliaots/nestjs-redis : ^10.0.0\n        \n            @mikro-orm/cli : ^6.4.16\n        \n            @mikro-orm/core : ^6.4.16\n        \n            @mikro-orm/migrations : ^6.4.16\n        \n            @mikro-orm/nestjs : ^6.1.1\n        \n            @mikro-orm/postgresql : ^6.4.16\n        \n            @nestjs-modules/mailer : ^2.0.2\n        \n            @nestjs/axios : ^4.0.0\n        \n            @nestjs/bullmq : ^11.0.3\n        \n            @nestjs/common : ^10.0.0\n        \n            @nestjs/config : ^3.2.2\n        \n            @nestjs/core : ^10.0.0\n        \n            @nestjs/jwt : ^10.2.0\n        \n            @nestjs/mapped-types : *\n        \n            @nestjs/passport : ^10.0.3\n        \n            @nestjs/platform-express : ^10.0.0\n        \n            @nestjs/swagger : ^7.3.1\n        \n            @opentelemetry/auto-instrumentations-node : ^0.62.0\n        \n            @opentelemetry/context-async-hooks : ^2.0.1\n        \n            @opentelemetry/core : ^2.0.1\n        \n            @opentelemetry/exporter-prometheus : ^0.203.0\n        \n            @opentelemetry/propagator-b3 : ^2.0.1\n        \n            @opentelemetry/propagator-jaeger : ^2.0.1\n        \n            @opentelemetry/sdk-node : ^0.203.0\n        \n            @smithy/hash-node : ^4.0.4\n        \n            @smithy/protocol-http : ^5.1.2\n        \n            axios : ^1.10.0\n        \n            bcrypt : ^5.1.1\n        \n            buffer-to-stream : ^1.0.0\n        \n            bullmq : ^5.56.8\n        \n            chalk : ^4.1.2\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.1\n        \n            cloudinary : ^2.7.0\n        \n            dayjs : ^1.11.13\n        \n            eslint : ^9.37.0\n        \n            express-basic-auth : ^1.2.1\n        \n            helmet : ^8.1.0\n        \n            moment-timezone : ^0.6.0\n        \n            morgan : ^1.10.0\n        \n            ms : ^2.1.3\n        \n            nanoid : ^3.0.0\n        \n            nanoid-dictionary : ^5.0.0\n        \n            nest-commander : ^3.18.0\n        \n            nest-winston : ^1.10.2\n        \n            nestjs-form-data : ^1.9.93\n        \n            nestjs-s3 : ^3.0.1\n        \n            nodemailer : ^7.0.5\n        \n            passport : ^0.7.0\n        \n            passport-jwt : ^4.0.1\n        \n            passport-local : ^1.0.0\n        \n            pug : ^3.0.3\n        \n            reflect-metadata : ^0.1.13\n        \n            rxjs : ^7.8.1\n        \n            stripe : ^18.3.0\n        \n            util : ^0.12.5\n        \n            uuid : ^11.1.0\n        \n            winston : ^3.17.0\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            EmailSubjectEnum   (src/.../index.ts)\n                        \n                        \n                            EmailTemplateEnum   (src/.../index.ts)\n                        \n                        \n                            HttpRequestMethodEnum   (src/.../index.ts)\n                        \n                        \n                            IANATimeZoneDatabaseEnum   (src/.../index.ts)\n                        \n                        \n                            PaymentDriverEnum   (src/.../index.ts)\n                        \n                        \n                            StorageDriverEnum   (src/.../index.ts)\n                        \n                        \n                            StripeCurrencyEnum   (src/.../index.ts)\n                        \n                        \n                            UploadFileCategoryEnum   (src/.../index.ts)\n                        \n                        \n                            UserRoleEnum   (src/.../index.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/common/enums/index.ts\n    \n        \n            \n                \n                    \n                        \n                        EmailSubjectEnum\n                    \n                \n                        \n                            \n                                 PASSWORD_RESET\n                            \n                        \n                        \n                            \n                                Value : 🔐 Reset Your Password Quickly & Securely\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        EmailTemplateEnum\n                    \n                \n                        \n                            \n                                 PASSWORD_RESET\n                            \n                        \n                        \n                            \n                                Value : password-reset\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        HttpRequestMethodEnum\n                    \n                \n                        \n                            \n                                 GET\n                            \n                        \n                        \n                            \n                                Value : GET\n                            \n                        \n                        \n                            \n                                 POST\n                            \n                        \n                        \n                            \n                                Value : POST\n                            \n                        \n                        \n                            \n                                 PUT\n                            \n                        \n                        \n                            \n                                Value : PUT\n                            \n                        \n                        \n                            \n                                 DELETE\n                            \n                        \n                        \n                            \n                                Value : DELETE\n                            \n                        \n                        \n                            \n                                 PATCH\n                            \n                        \n                        \n                            \n                                Value : PATCH\n                            \n                        \n                        \n                            \n                                 HEAD\n                            \n                        \n                        \n                            \n                                Value : HEAD\n                            \n                        \n                        \n                            \n                                 OPTIONS\n                            \n                        \n                        \n                            \n                                Value : OPTIONS\n                            \n                        \n                        \n                            \n                                 TRACE\n                            \n                        \n                        \n                            \n                                Value : TRACE\n                            \n                        \n                        \n                            \n                                 CONNECT\n                            \n                        \n                        \n                            \n                                Value : CONNECT\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        IANATimeZoneDatabaseEnum\n                    \n                \n                        \n                            \n                                 LAGOS\n                            \n                        \n                        \n                            \n                                Value : Africa/lagos\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        PaymentDriverEnum\n                    \n                \n                        \n                            \n                                 STRIPE\n                            \n                        \n                        \n                            \n                                Value : stripe\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        StorageDriverEnum\n                    \n                \n                        \n                            \n                                 CLOUDINARY\n                            \n                        \n                        \n                            \n                                Value : cloudinary\n                            \n                        \n                        \n                            \n                                 S3\n                            \n                        \n                        \n                            \n                                Value : s3\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        StripeCurrencyEnum\n                    \n                \n                        \n                            \n                                 USD\n                            \n                        \n                        \n                            \n                                Value : usd\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        UploadFileCategoryEnum\n                    \n                \n                        \n                            \n                                 AVATAR\n                            \n                        \n                        \n                            \n                                Value : avatars\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        UserRoleEnum\n                    \n                \n                        \n                            \n                                 ADMIN\n                            \n                        \n                        \n                            \n                                Value : admin\n                            \n                        \n                        \n                            \n                                 USER\n                            \n                        \n                        \n                            \n                                Value : user\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.cli.ts)\n                        \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            createWinstonLogger   (src/.../winston.config.ts)\n                        \n                        \n                            generateSlug   (src/.../common.utils.ts)\n                        \n                        \n                            normalizeUserFields   (src/.../user.util.ts)\n                        \n                        \n                            setupSwagger   (src/.../swagger.config.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.cli.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n    src/config/winston.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        createWinstonLogger\n                        \n                    \n                \n            \n            \n                \ncreateWinstonLogger()\n                \n            \n\n\n\n\n            \n                \n\n                        \n                            Returns :     winston.Logger\n\n                        \n                \n            \n        \n    \n    src/common/utils/common.utils.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        generateSlug\n                        \n                    \n                \n            \n            \n                \ngenerateSlug(text: string, limit: number)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                text\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    src/common/utils/user.util.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        normalizeUserFields\n                        \n                    \n                \n            \n            \n                \nnormalizeUserFields(user: User)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            User\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    src/config/swagger.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        setupSwagger\n                        \n                    \n                \n            \n            \n                \nsetupSwagger(app: INestApplication)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                app\n                                            \n                                                        INestApplication\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nDocumentation\nSwagger Documentation\nDescription\n\nNest framework TypeScript starter repository.\nProject setup\nExample :$ yarn installCompile and run the project\nExample :# development\n$ yarn run start\n\n# watch mode\n$ yarn run start:dev\n\n# production mode\n$ yarn run start:prodRun tests\nExample :# unit tests\n$ yarn run test\n\n# e2e tests\n$ yarn run test:e2e\n\n# test coverage\n$ yarn run test:cov\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AppRedisModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        EmailModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        HttpClientModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PaymentModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        StorageModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UserModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AppRedisModule\n\n\n\ncluster_AppRedisModule_exports\n\n\n\ncluster_AppRedisModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_EmailModule\n\n\n\ncluster_EmailModule_exports\n\n\n\ncluster_HttpClientModule\n\n\n\ncluster_HttpClientModule_exports\n\n\n\ncluster_HttpClientModule_providers\n\n\n\ncluster_UserModule\n\n\n\ncluster_UserModule_exports\n\n\n\ncluster_UserModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nUserModule\n\nUserModule\n\nAuthModule -->\n\nUserModule->AuthModule\n\n\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nUserService \n\nUserService \n\nUserService  -->\n\nUserModule->UserService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nCreateUserCommand\n\nCreateUserCommand\n\nAppModule -->\n\nCreateUserCommand->AppModule\n\n\n\n\n\nSchemaService\n\nSchemaService\n\nAppModule -->\n\nSchemaService->AppModule\n\n\n\n\n\nAppRedisService \n\nAppRedisService \n\n\n\nAppRedisModule\n\nAppRedisModule\n\nAuthModule -->\n\nAppRedisModule->AuthModule\n\n\n\nUserModule -->\n\nAppRedisModule->UserModule\n\n\n\nAppRedisService  -->\n\nAppRedisModule->AppRedisService \n\n\n\n\n\nAppRedisService\n\nAppRedisService\n\nAppRedisModule -->\n\nAppRedisService->AppRedisModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthModule -->\n\nLocalStrategy->AuthModule\n\n\n\n\n\nEmailService \n\nEmailService \n\n\n\nEmailModule\n\nEmailModule\n\nEmailService  -->\n\nEmailModule->EmailService \n\n\n\n\n\nHttpClientService \n\nHttpClientService \n\n\n\nHttpClientModule\n\nHttpClientModule\n\nHttpClientService  -->\n\nHttpClientModule->HttpClientService \n\n\n\n\n\nHttpClientService\n\nHttpClientService\n\nHttpClientModule -->\n\nHttpClientService->HttpClientModule\n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\nUserSubscriber\n\nUserSubscriber\n\nUserModule -->\n\nUserSubscriber->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        8 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    3 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    1 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    19 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    18 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Guard\n                \n            \n        \n        \n            \n                \n                    \n                    4 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            AuthTokens   (src/.../auth-tokens.ts)\n                        \n                        \n                            Checkout   (src/.../checkout.ts)\n                        \n                        \n                            HandledException   (src/.../index.ts)\n                        \n                        \n                            PaymentIntent   (src/.../payment-intent.ts)\n                        \n                        \n                            S3PutObjectResponse   (src/.../s3-put-object-response.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/modules/auth/types/auth-tokens.ts\n    \n    \n        \n            \n                \n                    \n                    AuthTokens\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    src/services/payment/types/checkout.ts\n    \n    \n        \n            \n                \n                    \n                    Checkout\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    src/common/types/index.ts\n    \n    \n        \n            \n                \n                    \n                    HandledException\n                \n            \n            \n                \n                        HttpException | AxiosError | ForbiddenException | Error\n\n                \n            \n        \n    \n    src/services/payment/types/payment-intent.ts\n    \n    \n        \n            \n                \n                    \n                    PaymentIntent\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    src/services/storage/types/s3-put-object-response.ts\n    \n    \n        \n            \n                \n                    \n                    S3PutObjectResponse\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            APP_NAME   (src/.../index.ts)\n                        \n                        \n                            EMAIL_FROM_NAME   (src/.../index.ts)\n                        \n                        \n                            IS_PUBLIC_KEY   (src/.../public.decorator.ts)\n                        \n                        \n                            otelSDK   (src/.../tracing.ts)\n                        \n                        \n                            PASSWORD_CHARACTER_SET   (src/.../index.ts)\n                        \n                        \n                            PASSWORD_RESET_EMAIL_QUEUE_NAME   (src/.../index.ts)\n                        \n                        \n                            PAYMENT_PROVIDER   (src/.../index.ts)\n                        \n                        \n                            PRODUCTION   (src/.../index.ts)\n                        \n                        \n                            prometheusExporter   (src/.../tracing.ts)\n                        \n                        \n                            Public   (src/.../public.decorator.ts)\n                        \n                        \n                            Role   (src/.../index.ts)\n                        \n                        \n                            sslEnabled   (src/.../mikro-orm.config.ts)\n                        \n                        \n                            STORAGE_PROVIDER   (src/.../index.ts)\n                        \n                        \n                            TEMPLATE_QUEUE_NAME   (src/.../index.ts)\n                        \n                        \n                            winstonLogger   (src/.../mikro-orm.config.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/common/constants/index.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        APP_NAME\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'nestjs-boilerplate'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        EMAIL_FROM_NAME\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'nestjs'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        PASSWORD_CHARACTER_SET\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!@#$%^&*()_+-=[]{}|;:,.<>?'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        PASSWORD_RESET_EMAIL_QUEUE_NAME\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'password-reset-email-queue'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        PAYMENT_PROVIDER\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'PAYMENT_PROVIDER'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        PRODUCTION\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'production'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        STORAGE_PROVIDER\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'STORAGE_PROVIDER'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        TEMPLATE_QUEUE_NAME\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'template-queue-name'\n                    \n                \n\n\n        \n    \n\n    src/modules/auth/decorators/public.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        IS_PUBLIC_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'isPublic'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => SetMetadata(IS_PUBLIC_KEY, true)\n                    \n                \n\n\n        \n    \n\n    src/tracing.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        otelSDK\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new NodeSDK({\n  metricReader: prometheusExporter,\n  contextManager: new AsyncLocalStorageContextManager(),\n  textMapPropagator: new CompositePropagator({\n    propagators: [\n      new JaegerPropagator(),\n      new W3CTraceContextPropagator(),\n      new W3CBaggagePropagator(),\n      new B3Propagator(),\n    ],\n  }),\n  instrumentations: [getNodeAutoInstrumentations()],\n})\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        prometheusExporter\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new PrometheusExporter(\n  { preventServerStart: true },\n  () => {\n    console.log('Prometheus exporter initialized');\n  },\n)\n                    \n                \n\n\n        \n    \n\n    src/common/decorators/index.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Role\n                        \n                    \n                \n            \n                \n                    \n                        Default value : Reflector.createDecorator()\n                    \n                \n\n\n        \n    \n\n    src/config/mikro-orm.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        sslEnabled\n                        \n                    \n                \n            \n                \n                    \n                        Default value : process.env.DB_SSL === 'true'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        winstonLogger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createWinstonLogger()\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
